"use strict";
(self["webpackChunkavalanche_extension"] = self["webpackChunkavalanche_extension"] || []).push([["vendors-node_modules_avalabs_core-utils-sdk_esm_bigIntToString_js-node_modules_avalabs_core-u-b38414"],{

/***/ "./node_modules/@avalabs/core-utils-sdk/esm/bigIntToString.js":
/*!********************************************************************!*\
  !*** ./node_modules/@avalabs/core-utils-sdk/esm/bigIntToString.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bigIntToString": () => (/* binding */ t)
/* harmony export */ });
function t(t,n){n=Math.floor(n);const e=t.toString(),o=Math.max(e.length-n,0),r=e.slice(o).padStart(n,"0"),a=e.slice(0,o)||"0";return r.length?`${a}.${r}`:a}


/***/ }),

/***/ "./node_modules/@avalabs/core-utils-sdk/esm/bigToLocaleString.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@avalabs/core-utils-sdk/esm/bigToLocaleString.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bigToLocaleString": () => (/* binding */ t)
/* harmony export */ });
function t(t,n=9){const e=t.toFixed(n).split("."),r=parseInt(e[0]).toLocaleString("en-US");if(1===e.length)return r;{let t=e[1],o=t.charAt(t.length-1);for(;"0"===o;)t=t.substring(0,t.length-1),o=t.charAt(t.length-1);const s=t.substring(0,n);return s?`${r}.${s}`:r}}


/***/ }),

/***/ "./node_modules/@avalabs/core-utils-sdk/esm/stringToBN.js":
/*!****************************************************************!*\
  !*** ./node_modules/@avalabs/core-utils-sdk/esm/stringToBN.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "stringToBN": () => (/* binding */ t)
/* harmony export */ });
/* harmony import */ var big_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! big.js */ "./node_modules/big.js/big.js");
/* harmony import */ var big_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(big_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");
/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(bn_js__WEBPACK_IMPORTED_MODULE_1__);
function t(t,e){const i=big_js__WEBPACK_IMPORTED_MODULE_0___default()(t.replace(/,/gi,"")),n=big_js__WEBPACK_IMPORTED_MODULE_0___default()(10).pow(e),m=i.times(n).toFixed(0,0);return new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(m)}


/***/ }),

/***/ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/models.js":
/*!************************************************************************!*\
  !*** ./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/models.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TxType": () => (/* binding */ e),
/* harmony export */   "isAddDelegatorTx": () => (/* binding */ r),
/* harmony export */   "isAddPermissionlessDelegatorTx": () => (/* binding */ v),
/* harmony export */   "isAddPermissionlessValidatorTx": () => (/* binding */ f),
/* harmony export */   "isAddSubnetValidatorTx": () => (/* binding */ p),
/* harmony export */   "isAddValidatorTx": () => (/* binding */ t),
/* harmony export */   "isBaseTx": () => (/* binding */ o),
/* harmony export */   "isConvertSubnetToL1Tx": () => (/* binding */ i),
/* harmony export */   "isCreateChainTx": () => (/* binding */ c),
/* harmony export */   "isCreateSubnetTx": () => (/* binding */ l),
/* harmony export */   "isDisableL1ValidatorTx": () => (/* binding */ _),
/* harmony export */   "isExportTx": () => (/* binding */ n),
/* harmony export */   "isImportTx": () => (/* binding */ a),
/* harmony export */   "isIncreaseL1ValidatorBalance": () => (/* binding */ u),
/* harmony export */   "isRegisterL1ValidatorTx": () => (/* binding */ d),
/* harmony export */   "isRemoveSubnetValidatorTx": () => (/* binding */ b),
/* harmony export */   "isSetL1ValidatorWeightTx": () => (/* binding */ s),
/* harmony export */   "isTransferSubnetOwnershipTx": () => (/* binding */ m),
/* harmony export */   "isTransformSubnetTx": () => (/* binding */ y)
/* harmony export */ });
var e=(e=>(e.Base="base",e.AddValidator="add_validator",e.AddDelegator="add_delegator",e.Export="export",e.Import="import",e.CreateSubnet="create_subnet",e.CreateChain="create_chain",e.ConvertSubnetToL1="convert_subnet_to_l1",e.RegisterL1Validator="register_l1_validator",e.SetL1ValidatorWeight="set_l1_validator_weight",e.IncreaseL1ValidatorBalance="increase_l1_validator_balance",e.DisableL1Validator="disable_l1_validator",e.AddSubnetValidator="add_subnet_validator",e.RemoveSubnetValidator="remove_subnet_validator",e.AddPermissionlessValidator="add_permissionless_validator",e.AddPermissionlessDelegator="add_permissionless_delegator",e.TransformSubnet="transform_subnet",e.TransferSubnetOwnership="transfer_subnet_ownership",e.Unknown="unknown",e))(e||{});function t(e){return"add_validator"===e.type}function r(e){return"add_delegator"===e.type}function n(e){return"export"===e.type}function a(e){return"import"===e.type}function o(e){return"base"===e.type}function i(e){return"convert_subnet_to_l1"===e.type}function d(e){return"register_l1_validator"===e.type}function s(e){return"set_l1_validator_weight"===e.type}function _(e){return"disable_l1_validator"===e.type}function u(e){return"increase_l1_validator_balance"===e.type}function l(e){return"create_subnet"===e.type}function c(e){return"create_chain"===e.type}function p(e){return"add_subnet_validator"===e.type}function b(e){return"remove_subnet_validator"===e.type}function f(e){return"add_permissionless_validator"===e.type}function v(e){return"add_permissionless_delegator"===e.type}function y(e){return"transform_subnet"===e.type}function m(e){return"transfer_subnet_ownership"===e.type}


/***/ }),

/***/ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/getAssetBalance.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/getAssetBalance.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getAssetBalance": () => (/* binding */ o)
/* harmony export */ });
/* harmony import */ var _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @avalabs/avalanchejs */ "./node_modules/@avalabs/avalanchejs/dist/es/index.js");
/* harmony import */ var _getUnixNow_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getUnixNow.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/getUnixNow.js");
const{getUtxoInfo:a}=_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__.utils;function o(t,o){const l=t.getAssetDict()[o],i={locked:BigInt(0),available:BigInt(0),multisig:BigInt(0),lockedStakeable:BigInt(0),total:BigInt(0)};if(!l)return i;const n=l.getUTXOs(),c=(0,_getUnixNow_js__WEBPACK_IMPORTED_MODULE_1__.getUnixNow)();return n.forEach((t=>{const e=a(t);i[e.threshold>1?"multisig":e.locktime>c?"locked":e.stakeableLocktime>c?"lockedStakeable":"available"]+=e.amount})),i.total=i.locked+i.lockedStakeable+i.multisig+i.available,i}


/***/ }),

/***/ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/isBech32Address.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/isBech32Address.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isBech32Address": () => (/* binding */ e)
/* harmony export */ });
/* harmony import */ var _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @avalabs/avalanchejs */ "./node_modules/@avalabs/avalanchejs/dist/es/index.js");
function e(e,a=!0){try{if(a){const[a]=_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__.utils.parse(e);if(!["X","P","C"].includes(a))return!1}else _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__.utils.parseBech32(e);return!0}catch(r){return!1}}


/***/ }),

/***/ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parseAvalancheTx.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parseAvalancheTx.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parseAvalancheTx": () => (/* binding */ u)
/* harmony export */ });
/* harmony import */ var _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @avalabs/avalanchejs */ "./node_modules/@avalabs/avalanchejs/dist/es/index.js");
/* harmony import */ var _models_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/models.js");
/* harmony import */ var _parsers_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parsers/index.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/index.js");
const{getBurnedAmountByTx:r,getOutputAmounts:o,getInputAmounts:s,validateBurnedAmount:i}=_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__.utils;async function u(e,u,x,{feeTolerance:g=50}={}){try{const n=u.getContext(),c=e.getTx(),p=(t=>{for(const e of Object.values(_parsers_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])){const n=e(t);if(null!==n)return n}throw new Error("no parser found for tx")})(c),A=r(c,n),d=o(c),l=s(c).get(n.avaxAssetID)??BigInt(0),m=A.get(n.avaxAssetID)??BigInt(0),v=d.get(n.avaxAssetID)??BigInt(0);let I=BigInt(0);_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__.evmSerial.isImportExportTx(c)?(I=await u.getApiC().getBaseFee()/BigInt(1e9),0n===I&&(I=1n)):"PVM"===c.vm&&(I=await u.getApiP().getFeeState().then((t=>t.price)).catch((()=>BigInt(0))));const{isValid:f,txFee:B}=i({unsignedTx:e,context:n,burnedAmount:m,baseFee:I,feeTolerance:g});return await p({feeData:{totalAvaxBurned:m,totalAvaxOutput:v,totalAvaxInput:l,isValidAvaxBurnedAmount:f,txFee:B},assetId:n.avaxAssetID,provider:u,currentAddress:x})}catch(t){return{type:_models_js__WEBPACK_IMPORTED_MODULE_2__.TxType.Unknown}}}


/***/ }),

/***/ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/index.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/index.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ j)
/* harmony export */ });
/* harmony import */ var _parseCreateSubnetTx_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parseCreateSubnetTx.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/parseCreateSubnetTx.js");
/* harmony import */ var _parseCreateChainTx_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parseCreateChainTx.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/parseCreateChainTx.js");
/* harmony import */ var _parseAddSubnetValidorTx_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./parseAddSubnetValidorTx.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/parseAddSubnetValidorTx.js");
/* harmony import */ var _parseImportTx_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./parseImportTx.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/parseImportTx.js");
/* harmony import */ var _parseExportTx_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./parseExportTx.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/parseExportTx.js");
/* harmony import */ var _parseBaseTx_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./parseBaseTx.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/parseBaseTx.js");
/* harmony import */ var _parseAddPermissionlessValidatorTx_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./parseAddPermissionlessValidatorTx.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/parseAddPermissionlessValidatorTx.js");
/* harmony import */ var _parseAddPermissionlessDelegatorTx_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./parseAddPermissionlessDelegatorTx.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/parseAddPermissionlessDelegatorTx.js");
/* harmony import */ var _parseRemoveSubnetValidatorTx_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./parseRemoveSubnetValidatorTx.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/parseRemoveSubnetValidatorTx.js");
/* harmony import */ var _parseTransferSubnetOwnershipTx_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./parseTransferSubnetOwnershipTx.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/parseTransferSubnetOwnershipTx.js");
/* harmony import */ var _parseConvertSubnetToL1Tx_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./parseConvertSubnetToL1Tx.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/parseConvertSubnetToL1Tx.js");
/* harmony import */ var _parseRegisterL1ValidatorTx_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./parseRegisterL1ValidatorTx.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/parseRegisterL1ValidatorTx.js");
/* harmony import */ var _parseSetL1ValidatorWeightTx_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./parseSetL1ValidatorWeightTx.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/parseSetL1ValidatorWeightTx.js");
/* harmony import */ var _parseDisableL1ValidatorTx_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./parseDisableL1ValidatorTx.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/parseDisableL1ValidatorTx.js");
/* harmony import */ var _parseIncreaseL1ValidatorBalanceTx_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./parseIncreaseL1ValidatorBalanceTx.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/parseIncreaseL1ValidatorBalanceTx.js");
var j={parseCreateSubnetTx:_parseCreateSubnetTx_js__WEBPACK_IMPORTED_MODULE_0__["default"],parseCreateChainTx:_parseCreateChainTx_js__WEBPACK_IMPORTED_MODULE_1__["default"],parseAddSubnetValidatorTx:_parseAddSubnetValidorTx_js__WEBPACK_IMPORTED_MODULE_2__["default"],parseRemoveSubnetValidatorTx:_parseRemoveSubnetValidatorTx_js__WEBPACK_IMPORTED_MODULE_3__["default"],parseImportTx:_parseImportTx_js__WEBPACK_IMPORTED_MODULE_4__["default"],parseExportTx:_parseExportTx_js__WEBPACK_IMPORTED_MODULE_5__["default"],parseBaseTx:_parseBaseTx_js__WEBPACK_IMPORTED_MODULE_6__["default"],parseAddPermissionlessValidatorTx:_parseAddPermissionlessValidatorTx_js__WEBPACK_IMPORTED_MODULE_7__["default"],parseAddPermissionlessDelegatorTx:_parseAddPermissionlessDelegatorTx_js__WEBPACK_IMPORTED_MODULE_8__["default"],parseTransferSubnetOwnershipTx:_parseTransferSubnetOwnershipTx_js__WEBPACK_IMPORTED_MODULE_9__["default"],parseConvertSubnetTx:_parseConvertSubnetToL1Tx_js__WEBPACK_IMPORTED_MODULE_10__["default"],parseRegisterL1ValidatorTx:_parseRegisterL1ValidatorTx_js__WEBPACK_IMPORTED_MODULE_11__["default"],parseIncreaseL1ValidatorBalanceTx:_parseIncreaseL1ValidatorBalanceTx_js__WEBPACK_IMPORTED_MODULE_12__["default"],parseSetL1ValidatorWeightTx:_parseSetL1ValidatorWeightTx_js__WEBPACK_IMPORTED_MODULE_13__["default"],parseDisableL1ValidatorTx:_parseDisableL1ValidatorTx_js__WEBPACK_IMPORTED_MODULE_14__["default"]};


/***/ }),

/***/ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/parseAddPermissionlessDelegatorTx.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/parseAddPermissionlessDelegatorTx.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ t)
/* harmony export */ });
/* harmony import */ var _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @avalabs/avalanchejs */ "./node_modules/@avalabs/avalanchejs/dist/es/index.js");
/* harmony import */ var _models_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../models.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/models.js");
const t=t=>_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__.pvmSerial.isAddPermissionlessDelegatorTx(t)?({feeData:e})=>({type:_models_js__WEBPACK_IMPORTED_MODULE_1__.TxType.AddPermissionlessDelegator,chain:t.getVM(),stake:t.subnetValidator.validator.weight.value(),nodeID:t.subnetValidator.validator.nodeId.value(),start:t.subnetValidator.validator.startTime.value().toString(),end:t.subnetValidator.validator.endTime.value().toString(),subnetID:t.subnetValidator.subnetId.value(),stakeOuts:t.stake,delegatorRewardsOwner:t.getDelegatorRewardsOwner(),...e}):null;


/***/ }),

/***/ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/parseAddPermissionlessValidatorTx.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/parseAddPermissionlessValidatorTx.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ t)
/* harmony export */ });
/* harmony import */ var _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @avalabs/avalanchejs */ "./node_modules/@avalabs/avalanchejs/dist/es/index.js");
/* harmony import */ var _models_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../models.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/models.js");
const t=t=>{if(!_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__.pvmSerial.isAddPermissionlessValidatorTx(t))return null;let s,i;return _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__.pvmSerial.isSigner(t.signer)&&(i=_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__.utils.bufferToHex(t.signer.proof.publicKey),s=_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__.utils.bufferToHex(t.signer.proof.signature)),({feeData:e})=>({type:_models_js__WEBPACK_IMPORTED_MODULE_1__.TxType.AddPermissionlessValidator,chain:t.getVM(),stake:t.subnetValidator.validator.weight.value(),nodeID:t.subnetValidator.validator.nodeId.value(),start:t.subnetValidator.validator.startTime.value().toString(),end:t.subnetValidator.validator.endTime.value().toString(),subnetID:t.subnetValidator.subnetId.value(),delegationFee:t.shares.value(),stakeOuts:t.stake,rewardOwner:t.getValidatorRewardsOwner(),delegationRewardOwner:t.getDelegatorRewardsOwner(),signer:t.signer,publicKey:i,signature:s,...e})};


/***/ }),

/***/ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/parseAddSubnetValidorTx.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/parseAddSubnetValidorTx.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ e)
/* harmony export */ });
/* harmony import */ var _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @avalabs/avalanchejs */ "./node_modules/@avalabs/avalanchejs/dist/es/index.js");
/* harmony import */ var _models_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../models.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/models.js");
const e=e=>_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__.pvmSerial.isAddSubnetValidatorTx(e)?({feeData:a})=>({type:_models_js__WEBPACK_IMPORTED_MODULE_1__.TxType.AddSubnetValidator,chain:e.getVM(),stake:e.subnetValidator.validator.weight.value(),nodeID:e.subnetValidator.validator.nodeId.value(),start:e.subnetValidator.validator.startTime.value().toString(),end:e.subnetValidator.validator.endTime.value().toString(),subnetID:e.getSubnetID().value(),...a}):null;


/***/ }),

/***/ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/parseBaseTx.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/parseBaseTx.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ r)
/* harmony export */ });
/* harmony import */ var _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @avalabs/avalanchejs */ "./node_modules/@avalabs/avalanchejs/dist/es/index.js");
/* harmony import */ var xss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! xss */ "./node_modules/@avalabs/core-wallets-sdk/node_modules/xss/lib/index.js");
/* harmony import */ var xss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(xss__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _models_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../models.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/models.js");
/* harmony import */ var _getUnixNow_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../getUnixNow.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/getUnixNow.js");
/* provided dependency */ var Buffer = __webpack_require__(/*! ./node_modules/node-polyfill-webpack-plugin/node_modules/buffer/index.js */ "./node_modules/node-polyfill-webpack-plugin/node_modules/buffer/index.js")["Buffer"];
const r=r=>_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_1__.avmSerial.isAvmBaseTx(r)||_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_1__.pvmSerial.isPvmBaseTx(r)?async({feeData:e,currentAddress:n,provider:i})=>{const p=r.baseTx,m=await(async(e,o)=>{const u=e.baseTx,a=new Set;if(u.outputs.forEach((t=>{a.add(t.assetId.value())})),_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_1__.avmSerial.isAvmBaseTx(e)){const t=await Promise.all([...a.values()].map((t=>o.getApiX().getAssetDescription(t))));return u.outputs.reduce(((e,u)=>{if(u.output instanceof _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_1__.TransferOutput){const s=u.assetId.value(),r=[...a.values()].indexOf(s),n=t[r],i=u.output.outputOwners.addrs.map((t=>`X-${t.toString(o.getContext().hrp)}`));return[...e,{assetId:s,amount:u.output.amount(),locktime:u.output.getLocktime(),threshold:BigInt(u.output.getThreshold()),assetDescription:n,owners:i,isAvax:o.getContext().avaxAssetID===s}]}return e}),[])}return u.outputs.reduce(((t,e)=>{if(e.output instanceof _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_1__.TransferOutput){const s=e.assetId.value(),u=e.output.outputOwners.addrs.map((t=>`P-${t.toString(o.getContext().hrp)}`));return[...t,{assetId:s,amount:e.output.amount(),locktime:e.output.getLocktime(),threshold:BigInt(e.output.getThreshold()),owners:u,isAvax:o.getContext().avaxAssetID===s}]}return t}),[])})(r,i),c=(0,_getUnixNow_js__WEBPACK_IMPORTED_MODULE_2__.getUnixNow)(),d=m.filter((t=>!(1===t.owners.length&&t.owners[0]===n&&t.locktime<=c)));return{type:_models_js__WEBPACK_IMPORTED_MODULE_3__.TxType.Base,chain:r.getVM(),outputs:d,memo:xss__WEBPACK_IMPORTED_MODULE_0___default()(Buffer.from(p.memo.toBytes()).toString("utf-8",4)),...e}}:null;


/***/ }),

/***/ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/parseConvertSubnetToL1Tx.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/parseConvertSubnetToL1Tx.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ r)
/* harmony export */ });
/* harmony import */ var _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @avalabs/avalanchejs */ "./node_modules/@avalabs/avalanchejs/dist/es/index.js");
/* harmony import */ var _models_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../models.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/models.js");
const r=r=>_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__.pvmSerial.isConvertSubnetToL1Tx(r)?({feeData:e,provider:o})=>{const s=o.getHrp(),i=e=>`P-${e.toString(s)}`;return{type:_models_js__WEBPACK_IMPORTED_MODULE_1__.TxType.ConvertSubnetToL1,chain:r.getVM(),managerAddress:i(_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__.Address.fromHex(r.address.toString("hex"))),validators:r.validators.map((e=>({nodeId:_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__.NodeId.fromHex(e.nodeId.toString("hex")).toString(),stake:e.weight.value(),balance:e.balance.value(),remainingBalanceOwners:e.remainingBalanceOwner.addresses.map(i),deactivationOwners:e.deactivationOwner.addresses.map(i)}))),chainID:r.chainID.value(),subnetID:r.subnetID.value(),...e}}:null;


/***/ }),

/***/ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/parseCreateChainTx.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/parseCreateChainTx.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ t)
/* harmony export */ });
/* harmony import */ var _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @avalabs/avalanchejs */ "./node_modules/@avalabs/avalanchejs/dist/es/index.js");
/* harmony import */ var _models_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../models.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/models.js");
const t=t=>_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__.pvmSerial.isCreateChainTx(t)?({feeData:a})=>({type:_models_js__WEBPACK_IMPORTED_MODULE_1__.TxType.CreateChain,chain:t.getVM(),subnetID:t.getSubnetID().value(),chainName:t.chainName.value(),chainID:t.getBlockchainId(),vmID:t.vmID.value(),fxIDs:t.fxIds.map((a=>a.value())),genesisData:t.genesisData.toString(),...a}):null;


/***/ }),

/***/ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/parseCreateSubnetTx.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/parseCreateSubnetTx.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ r)
/* harmony export */ });
/* harmony import */ var _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @avalabs/avalanchejs */ "./node_modules/@avalabs/avalanchejs/dist/es/index.js");
/* harmony import */ var _models_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../models.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/models.js");
const r=r=>_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__.pvmSerial.isCreateSubnetTx(r)?({feeData:e,provider:a})=>({type:_models_js__WEBPACK_IMPORTED_MODULE_1__.TxType.CreateSubnet,chain:r.getVM(),threshold:r.getSubnetOwners().threshold.value(),controlKeys:r.getSubnetOwners().addrs.map((e=>`P-${e.toString(a.getHrp())}`)),...e}):null;


/***/ }),

/***/ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/parseDisableL1ValidatorTx.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/parseDisableL1ValidatorTx.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ i)
/* harmony export */ });
/* harmony import */ var _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @avalabs/avalanchejs */ "./node_modules/@avalabs/avalanchejs/dist/es/index.js");
/* harmony import */ var _models_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../models.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/models.js");
const i=i=>_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__.pvmSerial.isDisableL1ValidatorTx(i)?({feeData:a})=>({type:_models_js__WEBPACK_IMPORTED_MODULE_1__.TxType.DisableL1Validator,chain:i.getVM(),validationId:i.validationId.toString(),...a}):null;


/***/ }),

/***/ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/parseExportTx.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/parseExportTx.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ n)
/* harmony export */ });
/* harmony import */ var _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @avalabs/avalanchejs */ "./node_modules/@avalabs/avalanchejs/dist/es/index.js");
/* harmony import */ var _models_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../models.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/models.js");
/* harmony import */ var _utils_chainIdToVm_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/chainIdToVm.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/utils/chainIdToVm.js");
/* harmony import */ var _utils_getTransferableAmount_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/getTransferableAmount.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/utils/getTransferableAmount.js");
const n=n=>_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__.pvmSerial.isExportTx(n)||_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__.avmSerial.isExportTx(n)||_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__.evmSerial.isExportTx(n)?_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__.evmSerial.isExportTx(n)?({feeData:t,assetId:o})=>({type:_models_js__WEBPACK_IMPORTED_MODULE_1__.TxType.Export,chain:n.getVM(),destination:(0,_utils_chainIdToVm_js__WEBPACK_IMPORTED_MODULE_2__["default"])(n.destinationChain.toString()),amount:(0,_utils_getTransferableAmount_js__WEBPACK_IMPORTED_MODULE_3__.getTransferableOutputAmount)(n.exportedOutputs,o),...t}):({feeData:t,assetId:o})=>({type:_models_js__WEBPACK_IMPORTED_MODULE_1__.TxType.Export,chain:n.getVM(),destination:(0,_utils_chainIdToVm_js__WEBPACK_IMPORTED_MODULE_2__["default"])(n.destination.value()),amount:(0,_utils_getTransferableAmount_js__WEBPACK_IMPORTED_MODULE_3__.getTransferableOutputAmount)(n.outs,o),...t}):null;


/***/ }),

/***/ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/parseImportTx.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/parseImportTx.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ m)
/* harmony export */ });
/* harmony import */ var _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @avalabs/avalanchejs */ "./node_modules/@avalabs/avalanchejs/dist/es/index.js");
/* harmony import */ var _models_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../models.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/models.js");
/* harmony import */ var _utils_chainIdToVm_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/chainIdToVm.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/utils/chainIdToVm.js");
/* harmony import */ var _utils_getTransferableAmount_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/getTransferableAmount.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/utils/getTransferableAmount.js");
const m=m=>_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__.pvmSerial.isImportTx(m)||_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__.avmSerial.isImportTx(m)||_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__.evmSerial.isImportTx(m)?_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__.evmSerial.isImportTx(m)?({feeData:t,assetId:o})=>({type:_models_js__WEBPACK_IMPORTED_MODULE_1__.TxType.Import,chain:m.getVM(),source:(0,_utils_chainIdToVm_js__WEBPACK_IMPORTED_MODULE_2__["default"])(m.sourceChain.value()),amount:(0,_utils_getTransferableAmount_js__WEBPACK_IMPORTED_MODULE_3__.getTransferableInputAmount)(m.importedInputs,o),...t}):({feeData:t,assetId:o})=>({type:_models_js__WEBPACK_IMPORTED_MODULE_1__.TxType.Import,chain:m.getVM(),source:(0,_utils_chainIdToVm_js__WEBPACK_IMPORTED_MODULE_2__["default"])(m.sourceChain.value()),amount:(0,_utils_getTransferableAmount_js__WEBPACK_IMPORTED_MODULE_3__.getTransferableInputAmount)(m.ins,o),...t}):null;


/***/ }),

/***/ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/parseIncreaseL1ValidatorBalanceTx.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/parseIncreaseL1ValidatorBalanceTx.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ l)
/* harmony export */ });
/* harmony import */ var _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @avalabs/avalanchejs */ "./node_modules/@avalabs/avalanchejs/dist/es/index.js");
/* harmony import */ var _models_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../models.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/models.js");
const l=l=>_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__.pvmSerial.isIncreaseL1ValidatorBalanceTx(l)?({feeData:a})=>({type:_models_js__WEBPACK_IMPORTED_MODULE_1__.TxType.IncreaseL1ValidatorBalance,chain:l.getVM(),balance:l.balance.value(),validationId:l.validationId.toString(),...a}):null;


/***/ }),

/***/ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/parseRegisterL1ValidatorTx.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/parseRegisterL1ValidatorTx.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ t)
/* harmony export */ });
/* harmony import */ var _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @avalabs/avalanchejs */ "./node_modules/@avalabs/avalanchejs/dist/es/index.js");
/* harmony import */ var _models_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../models.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/models.js");
const t=t=>_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__.pvmSerial.isRegisterL1ValidatorTx(t)?({feeData:a})=>({type:_models_js__WEBPACK_IMPORTED_MODULE_1__.TxType.RegisterL1Validator,chain:t.getVM(),balance:t.balance.value(),...a}):null;


/***/ }),

/***/ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/parseRemoveSubnetValidatorTx.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/parseRemoveSubnetValidatorTx.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ a)
/* harmony export */ });
/* harmony import */ var _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @avalabs/avalanchejs */ "./node_modules/@avalabs/avalanchejs/dist/es/index.js");
/* harmony import */ var _models_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../models.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/models.js");
const a=a=>_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__.pvmSerial.isRemoveSubnetValidatorTx(a)?({feeData:e})=>({type:_models_js__WEBPACK_IMPORTED_MODULE_1__.TxType.RemoveSubnetValidator,chain:a.getVM(),nodeID:a.nodeId.toString(),subnetID:a.getSubnetID().value(),...e}):null;


/***/ }),

/***/ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/parseSetL1ValidatorWeightTx.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/parseSetL1ValidatorWeightTx.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ e)
/* harmony export */ });
/* harmony import */ var _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @avalabs/avalanchejs */ "./node_modules/@avalabs/avalanchejs/dist/es/index.js");
/* harmony import */ var _models_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../models.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/models.js");
const e=e=>_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__.pvmSerial.isSetL1ValidatorWeightTx(e)?({feeData:a})=>({type:_models_js__WEBPACK_IMPORTED_MODULE_1__.TxType.SetL1ValidatorWeight,chain:e.getVM(),...a}):null;


/***/ }),

/***/ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/parseTransferSubnetOwnershipTx.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/parseTransferSubnetOwnershipTx.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ r)
/* harmony export */ });
/* harmony import */ var _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @avalabs/avalanchejs */ "./node_modules/@avalabs/avalanchejs/dist/es/index.js");
/* harmony import */ var _models_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../models.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/models.js");
const r=r=>_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__.pvmSerial.isTransferSubnetOwnershipTx(r)?({feeData:e,provider:s})=>({type:_models_js__WEBPACK_IMPORTED_MODULE_1__.TxType.TransferSubnetOwnership,chain:r.getVM(),subnetID:r.subnetID.value(),threshold:r.getSubnetOwners().threshold.value(),controlKeys:r.getSubnetOwners().addrs.map((e=>`P-${e.toString(s.getHrp())}`)),...e}):null;


/***/ }),

/***/ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/utils/chainIdToVm.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/utils/chainIdToVm.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ n)
/* harmony export */ });
/* harmony import */ var _providers_constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../providers/constants.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/providers/constants.js");
const n=n=>{if([_providers_constants_js__WEBPACK_IMPORTED_MODULE_0__.MainnetContext.xBlockchainID,_providers_constants_js__WEBPACK_IMPORTED_MODULE_0__.FujiContext.xBlockchainID,_providers_constants_js__WEBPACK_IMPORTED_MODULE_0__.DevnetContext.xBlockchainID].includes(n))return"AVM";if([_providers_constants_js__WEBPACK_IMPORTED_MODULE_0__.MainnetContext.pBlockchainID,_providers_constants_js__WEBPACK_IMPORTED_MODULE_0__.FujiContext.pBlockchainID,_providers_constants_js__WEBPACK_IMPORTED_MODULE_0__.DevnetContext.pBlockchainID].includes(n))return"PVM";if([_providers_constants_js__WEBPACK_IMPORTED_MODULE_0__.MainnetContext.cBlockchainID,_providers_constants_js__WEBPACK_IMPORTED_MODULE_0__.FujiContext.cBlockchainID,_providers_constants_js__WEBPACK_IMPORTED_MODULE_0__.DevnetContext.cBlockchainID].includes(n))return"EVM";throw new Error("Unknown chain id. Failed to get alias.")};


/***/ }),

/***/ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/utils/getTransferableAmount.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/parsers/utils/getTransferableAmount.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getTransferableInputAmount": () => (/* binding */ n),
/* harmony export */   "getTransferableOutputAmount": () => (/* binding */ t)
/* harmony export */ });
const t=(t,n)=>t.reduce(((t,e)=>e.assetId.toString()!==n?t:t+e.output.amount()),BigInt(0)),n=(t,n)=>t.reduce(((t,e)=>e.assetId.toString()!==n?t:t+e.input.amount()),BigInt(0));


/***/ }),

/***/ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/txSizeLimits.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/txSizeLimits.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "P_CHAIN_TX_SIZE_LIMIT": () => (/* binding */ x),
/* harmony export */   "SizeSupportedTx": () => (/* binding */ a),
/* harmony export */   "getMaximumUtxoSet": () => (/* binding */ f)
/* harmony export */ });
/* harmony import */ var _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @avalabs/avalanchejs */ "./node_modules/@avalabs/avalanchejs/dist/es/index.js");
/* harmony import */ var _getUnixNow_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getUnixNow.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/getUnixNow.js");
/* harmony import */ var _utils_binarySearch_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/binarySearch.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/utils/binarySearch.js");
/* harmony import */ var _sortUTXOs_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sortUTXOs.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/sortUTXOs.js");
/* provided dependency */ var Buffer = __webpack_require__(/*! ./node_modules/node-polyfill-webpack-plugin/node_modules/buffer/index.js */ "./node_modules/node-polyfill-webpack-plugin/node_modules/buffer/index.js")["Buffer"];
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");
const{getUtxoInfo:d}=_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__.utils;var a=(e=>(e.ExportP="ExportP",e.ImportP="ImportP",e.AddPermissionlessValidator="AddPermissionlessValidator",e.AddPermissionlessDelegator="AddPermissionlessDelegator",e.BaseP="BaseP",e.ConsolidateP="ConsolidateP",e))(a||{});const i="NodeID-8TArWpFgH3sazEH8qP4gUjtGtFMvjw1aR",u="11111111111111111111111111111111LpoYY",c=(e,t)=>e.reduce(((e,t)=>e+d(t).amount),BigInt(0))-t,l={BaseP:{sortFunction:_sortUTXOs_js__WEBPACK_IMPORTED_MODULE_1__.sortUTXOsByAmountDescending,unsignedTxBuilder:(t,o,s)=>{const r=t.getProvider().getContext();return t.baseTX({utxoSet:new _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__.utils.UtxoSet(o),chain:"P",toAddress:t.getCurrentAddress("P"),amountsPerAsset:{[r.avaxAssetID]:c(o,r.baseTxFee)},feeState:s})}},ConsolidateP:{sortFunction:_sortUTXOs_js__WEBPACK_IMPORTED_MODULE_1__.sortUTXOsByAmountAscending,unsignedTxBuilder:(t,o,s)=>{const r=t.getProvider().getContext();return t.consolidateP({utxoSet:new _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__.utils.UtxoSet(o),amount:c(o,r.baseTxFee),feeState:s})}},AddPermissionlessValidator:{sortFunction:_sortUTXOs_js__WEBPACK_IMPORTED_MODULE_1__.sortUTXOsStaking,unsignedTxBuilder:(o,s,r)=>o.addPermissionlessValidator({utxoSet:new _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__.utils.UtxoSet(s),nodeId:i,start:(0,_getUnixNow_js__WEBPACK_IMPORTED_MODULE_2__.getUnixNow)(),end:(0,_getUnixNow_js__WEBPACK_IMPORTED_MODULE_2__.getUnixNow)()+BigInt(1e3),weight:c(s,o.getProvider().getContext().baseTxFee),subnetId:u,shares:5,feeState:r,fromAddresses:void 0,rewardAddresses:void 0,delegatorRewardAddresses:void 0,publicKey:Buffer.from(_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__.utils.hexToBuffer("0x8f95423f7142d00a48e1014a3de8d28907d420dc33b3052a6dee03a3f2941a393c2351e354704ca66a3fc29870282e15")),signature:Buffer.from(_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__.utils.hexToBuffer("0x86a3ab4c45cfe31cae34c1d06f212434ac71b1be6cfe046c80c162e057614a94a5bc9f1ded1a7029deb0ba4ca7c9b71411e293438691be79c2dbf19d1ca7c3eadb9c756246fc5de5b7b89511c7d7302ae051d9e03d7991138299b5ed6a570a98"))})},AddPermissionlessDelegator:{sortFunction:_sortUTXOs_js__WEBPACK_IMPORTED_MODULE_1__.sortUTXOsStaking,unsignedTxBuilder:(o,s,r)=>o.addPermissionlessDelegator({utxoSet:new _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__.utils.UtxoSet(s),nodeId:i,start:(0,_getUnixNow_js__WEBPACK_IMPORTED_MODULE_2__.getUnixNow)(),end:(0,_getUnixNow_js__WEBPACK_IMPORTED_MODULE_2__.getUnixNow)()+BigInt(1e3),weight:c(s,o.getProvider().getContext().baseTxFee),subnetId:u,feeState:r})},ExportP:{sortFunction:_sortUTXOs_js__WEBPACK_IMPORTED_MODULE_1__.sortUTXOsByAmountDescending,unsignedTxBuilder:(t,o,s)=>t.exportP({amount:c(o,t.getProvider().getContext().baseTxFee),utxoSet:new _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__.utils.UtxoSet(o),destination:"X",feeState:s})},ImportP:{sortFunction:_sortUTXOs_js__WEBPACK_IMPORTED_MODULE_1__.sortUTXOsByAmountDescending,unsignedTxBuilder:(t,o,s)=>t.importP({utxoSet:new _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__.utils.UtxoSet(o),sourceChain:"X",feeState:s})}},x=65536;function f({wallet:e,utxos:s,sizeSupportedTx:r,limit:n=65536,feeState:a}){const{sortFunction:i,unsignedTxBuilder:u}=l[r],c=(0,_getUnixNow_js__WEBPACK_IMPORTED_MODULE_2__.getUnixNow)(),x=i(s.filter((e=>{const{locktime:t,stakeableLocktime:o}=d(e);return t<c&&(o<c||("AddPermissionlessDelegator"===r||"AddPermissionlessValidator"===r))}))),f=(0,_utils_binarySearch_js__WEBPACK_IMPORTED_MODULE_3__.binarySearch)(x,(t=>{try{return function(e){const t=e.getInputUtxos().reduce(((e,t)=>e+(8+65*d(t).threshold)),0);return 6+e.toBytes().length+t}(u(e,t,a))}catch(e){return console.log("Unable to estimate size of utxos",{e:e,utxos:t.map(d)}),n+1}}),n);return-1===f?[]:x.slice(0,f+1)}


/***/ }),

/***/ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/wallets/AddressWallet.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/wallets/AddressWallet.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AddressWallet": () => (/* binding */ t)
/* harmony export */ });
/* harmony import */ var _WalletAbstract_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./WalletAbstract.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/wallets/WalletAbstract.js");
/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ethers */ "./node_modules/ethers/lib.esm/address/checks.js");
/* harmony import */ var create_hash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! create-hash */ "./node_modules/create-hash/browser.js");
/* harmony import */ var create_hash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(create_hash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var bip32__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bip32 */ "./node_modules/bip32/src/index.js");
/* harmony import */ var bip39__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! bip39 */ "./node_modules/@avalabs/core-wallets-sdk/node_modules/bip39/src/index.js");
/* harmony import */ var _utils_isBech32Address_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/isBech32Address.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/isBech32Address.js");
/* harmony import */ var xss__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! xss */ "./node_modules/@avalabs/core-wallets-sdk/node_modules/xss/lib/index.js");
/* harmony import */ var xss__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(xss__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var bip32_path__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! bip32-path */ "./node_modules/bip32-path/index.js");
/* harmony import */ var bip32_path__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(bip32_path__WEBPACK_IMPORTED_MODULE_4__);
class t extends _WalletAbstract_js__WEBPACK_IMPORTED_MODULE_5__.WalletAbstract{constructor(s,t,a,d,i){if(super(i),this.addressC=s,this.addressCoreEth=t,this.xpAddresses=a,this.xpChangeAddress=d,a.length<1)throw new Error("Must have at least 1 xp address.");if(!(0,ethers__WEBPACK_IMPORTED_MODULE_6__.isAddress)(s))throw new Error("Not a valid C-Chain (EVM) address");if(a.some((s=>!(0,_utils_isBech32Address_js__WEBPACK_IMPORTED_MODULE_7__.isBech32Address)(s,!1))))throw new Error("Given addresses must be valid avalanche bech32 addresses without the chain alias prefix");if(!(0,_utils_isBech32Address_js__WEBPACK_IMPORTED_MODULE_7__.isBech32Address)(t,!1))throw new Error("Given CoreEth address must be valid avalanche bech32 addresses without the chain alias prefix");this.setChangeAddress(d)}setChangeAddress(s){if(!(0,_utils_isBech32Address_js__WEBPACK_IMPORTED_MODULE_7__.isBech32Address)(s,!1))throw new Error("Given address must be valid avalanche bech32 addresses without the chain alias prefix");this.xpChangeAddress=s}getAddressEVM(){return this.addressC}getAddresses(s){return("C"===s?[this.addressCoreEth]:this.xpAddresses).map((e=>this.provider.formatAddress(e,s)))}getChangeAddress(s){const e="C"===s?this.addressCoreEth:this.xpChangeAddress;return this.provider.formatAddress(e,s)}getCurrentAddress(s){const e="C"===s?this.addressCoreEth:this.xpAddresses[0];return this.provider.formatAddress(e,s)}}


/***/ }),

/***/ "./node_modules/@avalabs/core-wallets-sdk/esm/BitcoinVM/utils/createPsbt.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@avalabs/core-wallets-sdk/esm/BitcoinVM/utils/createPsbt.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createPsbt": () => (/* binding */ t)
/* harmony export */ });
/* harmony import */ var bitcoinjs_lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bitcoinjs-lib */ "./node_modules/bitcoinjs-lib/src/index.js");
/* provided dependency */ var Buffer = __webpack_require__(/*! ./node_modules/node-polyfill-webpack-plugin/node_modules/buffer/index.js */ "./node_modules/node-polyfill-webpack-plugin/node_modules/buffer/index.js")["Buffer"];
function t(t,r,a){const s=new bitcoinjs_lib__WEBPACK_IMPORTED_MODULE_0__.Psbt({network:a});return t.forEach((e=>{s.addInput({hash:e.txHash,index:e.index,witnessUtxo:{script:Buffer.from(e.script,"hex"),value:e.value}})})),r.forEach((e=>{s.addOutput({value:e.value,address:e.address})})),s}


/***/ }),

/***/ "./node_modules/@avalabs/core-wallets-sdk/esm/BitcoinVM/utils/createTransferTx.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@avalabs/core-wallets-sdk/esm/BitcoinVM/utils/createTransferTx.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createTransferTx": () => (/* binding */ s)
/* harmony export */ });
/* harmony import */ var _createPsbt_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./createPsbt.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/BitcoinVM/utils/createPsbt.js");
/* harmony import */ var _selectUtxos_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./selectUtxos.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/BitcoinVM/utils/selectUtxos.js");
/* harmony import */ var _filterDuplicateUTXOs_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./filterDuplicateUTXOs.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/BitcoinVM/utils/filterDuplicateUTXOs.js");
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");
function s(s,r,n,c,i,p){const u=(0,_filterDuplicateUTXOs_js__WEBPACK_IMPORTED_MODULE_0__.filterDuplicateUTXOs)(i),f=(0,_selectUtxos_js__WEBPACK_IMPORTED_MODULE_1__.selectUtxos)(s,r,n,c,u);return f.inputs?{...f,psbt:(0,_createPsbt_js__WEBPACK_IMPORTED_MODULE_2__.createPsbt)(f.inputs,f.outputs,p)}:(console.log("Unable to construct transaction, fee needed: ",f.fee),f)}


/***/ }),

/***/ "./node_modules/@avalabs/core-wallets-sdk/esm/BitcoinVM/utils/filterDuplicateUTXOs.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@avalabs/core-wallets-sdk/esm/BitcoinVM/utils/filterDuplicateUTXOs.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "filterDuplicateUTXOs": () => (/* binding */ t)
/* harmony export */ });
function t(t){const n=[];return t.filter((t=>{const r=t.txHash+t.index.toString();return!n.includes(r)&&(n.push(r),!0)}))}


/***/ }),

/***/ "./node_modules/@avalabs/core-wallets-sdk/esm/BitcoinVM/utils/getMaxTransferAmount.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@avalabs/core-wallets-sdk/esm/BitcoinVM/utils/getMaxTransferAmount.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getMaxTransferAmount": () => (/* binding */ r)
/* harmony export */ });
/* harmony import */ var _selectUtxos_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./selectUtxos.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/BitcoinVM/utils/selectUtxos.js");
/* harmony import */ var _sumUTXOs_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sumUTXOs.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/BitcoinVM/utils/sumUTXOs.js");
function r(r,s,e,n){const f=(0,_sumUTXOs_js__WEBPACK_IMPORTED_MODULE_0__.sumUTXOs)(r);if(!f)return 0;const{fee:m}=(0,_selectUtxos_js__WEBPACK_IMPORTED_MODULE_1__.selectUtxos)(s,e,f,n,r);return f-m}


/***/ }),

/***/ "./node_modules/@avalabs/core-wallets-sdk/esm/BitcoinVM/utils/selectUtxos.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@avalabs/core-wallets-sdk/esm/BitcoinVM/utils/selectUtxos.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "selectUtxos": () => (/* binding */ t)
/* harmony export */ });
/* harmony import */ var coinselect__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! coinselect */ "./node_modules/coinselect/index.js");
/* harmony import */ var coinselect__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(coinselect__WEBPACK_IMPORTED_MODULE_0__);
function t(t,u,s,n,o){const r=[{address:t,value:s}],{inputs:p,outputs:f,fee:i}=coinselect__WEBPACK_IMPORTED_MODULE_0___default()(o,r,n);if(!p||!f)return{fee:i};const a=[f[0]],c=f[1];return c&&a.push({address:u,value:c.value}),{inputs:p,outputs:a,fee:i}}


/***/ }),

/***/ "./node_modules/@avalabs/core-wallets-sdk/esm/SolanaVM/utils/compileSolanaTx.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@avalabs/core-wallets-sdk/esm/SolanaVM/utils/compileSolanaTx.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "compileSolanaTx": () => (/* binding */ t)
/* harmony export */ });
/* harmony import */ var _solana_kit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @solana/kit */ "./node_modules/@solana/transactions/dist/index.browser.mjs");
const t=t=>(0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.compileTransaction)(t);


/***/ }),

/***/ "./node_modules/@avalabs/core-wallets-sdk/esm/SolanaVM/utils/serializeSolanaTx.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@avalabs/core-wallets-sdk/esm/SolanaVM/utils/serializeSolanaTx.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "serializeSolanaTx": () => (/* binding */ t)
/* harmony export */ });
/* harmony import */ var _solana_kit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @solana/kit */ "./node_modules/@solana/transactions/dist/index.browser.mjs");
const t=t=>(0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getBase64EncodedWireTransaction)(t);


/***/ }),

/***/ "./node_modules/@avalabs/core-wallets-sdk/esm/SolanaVM/utils/transferSol.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@avalabs/core-wallets-sdk/esm/SolanaVM/utils/transferSol.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "transferSol": () => (/* binding */ i)
/* harmony export */ });
/* harmony import */ var _solana_kit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @solana/kit */ "./node_modules/@solana/signers/dist/index.browser.mjs");
/* harmony import */ var _solana_kit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @solana/kit */ "./node_modules/@solana/addresses/dist/index.browser.mjs");
/* harmony import */ var _solana_kit__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @solana/kit */ "./node_modules/@solana/functional/dist/index.browser.mjs");
/* harmony import */ var _solana_kit__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @solana/kit */ "./node_modules/@solana/transaction-messages/dist/index.browser.mjs");
/* harmony import */ var _solana_program_system__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @solana-program/system */ "./node_modules/@solana-program/system/dist/src/index.mjs");
const i=async({from:i,to:c,amount:p,provider:u})=>{const{value:l}=await u.getLatestBlockhash().send(),d=[(0,_solana_program_system__WEBPACK_IMPORTED_MODULE_0__.getTransferSolInstruction)({source:(0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.createNoopSigner)((0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.address)(i)),destination:(0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.address)(c),amount:p})];return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.pipe)((0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.createTransactionMessage)({version:0}),(o=>(0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.setTransactionMessageLifetimeUsingBlockhash)(l,o)),(o=>(0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.setTransactionMessageFeePayer)((0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.address)(i),o)),(o=>(0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.appendTransactionMessageInstructions)(d,o)))};


/***/ }),

/***/ "./node_modules/@avalabs/core-wallets-sdk/esm/SolanaVM/utils/transferToken.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@avalabs/core-wallets-sdk/esm/SolanaVM/utils/transferToken.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "transferToken": () => (/* binding */ u)
/* harmony export */ });
/* harmony import */ var _solana_kit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @solana/kit */ "./node_modules/@solana/addresses/dist/index.browser.mjs");
/* harmony import */ var _solana_kit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @solana/kit */ "./node_modules/@solana/signers/dist/index.browser.mjs");
/* harmony import */ var _solana_kit__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @solana/kit */ "./node_modules/@solana/functional/dist/index.browser.mjs");
/* harmony import */ var _solana_kit__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @solana/kit */ "./node_modules/@solana/transaction-messages/dist/index.browser.mjs");
/* harmony import */ var _solana_program_token__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @solana-program/token */ "./node_modules/@solana-program/token/dist/src/index.mjs");
const u=async({from:u,to:c,mint:k,amount:g,provider:l})=>{const[d]=await (0,_solana_program_token__WEBPACK_IMPORTED_MODULE_0__.findAssociatedTokenPda)({mint:(0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.address)(k),owner:(0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.address)(u),tokenProgram:_solana_program_token__WEBPACK_IMPORTED_MODULE_0__.TOKEN_PROGRAM_ADDRESS}),[f]=await (0,_solana_program_token__WEBPACK_IMPORTED_MODULE_0__.findAssociatedTokenPda)({mint:(0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.address)(k),owner:(0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.address)(c),tokenProgram:_solana_program_token__WEBPACK_IMPORTED_MODULE_0__.TOKEN_PROGRAM_ADDRESS}),h=await (0,_solana_program_token__WEBPACK_IMPORTED_MODULE_0__.getCreateAssociatedTokenIdempotentInstruction)({payer:(0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.createNoopSigner)((0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.address)(u)),mint:(0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.address)(k),owner:(0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.address)(c),ata:f}),v=(0,_solana_program_token__WEBPACK_IMPORTED_MODULE_0__.getTransferInstruction)({amount:g,source:d,destination:f,authority:(0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.createNoopSigner)((0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.address)(u))}),{value:y}=await l.getLatestBlockhash().send();return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.pipe)((0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.createTransactionMessage)({version:0}),(t=>(0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.setTransactionMessageLifetimeUsingBlockhash)(y,t)),(o=>(0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.setTransactionMessageFeePayer)((0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.address)(u),o)),(t=>(0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.appendTransactionMessageInstructions)([h,v],t)))};


/***/ }),

/***/ "./node_modules/@avalabs/core-wallets-sdk/esm/utils/binarySearch.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@avalabs/core-wallets-sdk/esm/utils/binarySearch.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "binarySearch": () => (/* binding */ t)
/* harmony export */ });
function t(t,e,r){let n=0,o=t.length-1;if(e(t)<=r)return o;let l=-1;for(;n<=o;){const f=Math.floor((n+o)/2);e(t.slice(0,f+1))<=r?(l=f,n=f+1):o=f-1}return l}


/***/ }),

/***/ "./node_modules/@solana-program/system/dist/src/index.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@solana-program/system/dist/src/index.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ADVANCE_NONCE_ACCOUNT_DISCRIMINATOR": () => (/* binding */ ADVANCE_NONCE_ACCOUNT_DISCRIMINATOR),
/* harmony export */   "ALLOCATE_DISCRIMINATOR": () => (/* binding */ ALLOCATE_DISCRIMINATOR),
/* harmony export */   "ALLOCATE_WITH_SEED_DISCRIMINATOR": () => (/* binding */ ALLOCATE_WITH_SEED_DISCRIMINATOR),
/* harmony export */   "ASSIGN_DISCRIMINATOR": () => (/* binding */ ASSIGN_DISCRIMINATOR),
/* harmony export */   "ASSIGN_WITH_SEED_DISCRIMINATOR": () => (/* binding */ ASSIGN_WITH_SEED_DISCRIMINATOR),
/* harmony export */   "AUTHORIZE_NONCE_ACCOUNT_DISCRIMINATOR": () => (/* binding */ AUTHORIZE_NONCE_ACCOUNT_DISCRIMINATOR),
/* harmony export */   "CREATE_ACCOUNT_DISCRIMINATOR": () => (/* binding */ CREATE_ACCOUNT_DISCRIMINATOR),
/* harmony export */   "CREATE_ACCOUNT_WITH_SEED_DISCRIMINATOR": () => (/* binding */ CREATE_ACCOUNT_WITH_SEED_DISCRIMINATOR),
/* harmony export */   "INITIALIZE_NONCE_ACCOUNT_DISCRIMINATOR": () => (/* binding */ INITIALIZE_NONCE_ACCOUNT_DISCRIMINATOR),
/* harmony export */   "NonceState": () => (/* binding */ NonceState),
/* harmony export */   "NonceVersion": () => (/* binding */ NonceVersion),
/* harmony export */   "SYSTEM_ERROR__ACCOUNT_ALREADY_IN_USE": () => (/* binding */ SYSTEM_ERROR__ACCOUNT_ALREADY_IN_USE),
/* harmony export */   "SYSTEM_ERROR__ADDRESS_WITH_SEED_MISMATCH": () => (/* binding */ SYSTEM_ERROR__ADDRESS_WITH_SEED_MISMATCH),
/* harmony export */   "SYSTEM_ERROR__INVALID_ACCOUNT_DATA_LENGTH": () => (/* binding */ SYSTEM_ERROR__INVALID_ACCOUNT_DATA_LENGTH),
/* harmony export */   "SYSTEM_ERROR__INVALID_PROGRAM_ID": () => (/* binding */ SYSTEM_ERROR__INVALID_PROGRAM_ID),
/* harmony export */   "SYSTEM_ERROR__MAX_SEED_LENGTH_EXCEEDED": () => (/* binding */ SYSTEM_ERROR__MAX_SEED_LENGTH_EXCEEDED),
/* harmony export */   "SYSTEM_ERROR__NONCE_BLOCKHASH_NOT_EXPIRED": () => (/* binding */ SYSTEM_ERROR__NONCE_BLOCKHASH_NOT_EXPIRED),
/* harmony export */   "SYSTEM_ERROR__NONCE_NO_RECENT_BLOCKHASHES": () => (/* binding */ SYSTEM_ERROR__NONCE_NO_RECENT_BLOCKHASHES),
/* harmony export */   "SYSTEM_ERROR__NONCE_UNEXPECTED_BLOCKHASH_VALUE": () => (/* binding */ SYSTEM_ERROR__NONCE_UNEXPECTED_BLOCKHASH_VALUE),
/* harmony export */   "SYSTEM_ERROR__RESULT_WITH_NEGATIVE_LAMPORTS": () => (/* binding */ SYSTEM_ERROR__RESULT_WITH_NEGATIVE_LAMPORTS),
/* harmony export */   "SYSTEM_PROGRAM_ADDRESS": () => (/* binding */ SYSTEM_PROGRAM_ADDRESS),
/* harmony export */   "SystemAccount": () => (/* binding */ SystemAccount),
/* harmony export */   "SystemInstruction": () => (/* binding */ SystemInstruction),
/* harmony export */   "TRANSFER_SOL_DISCRIMINATOR": () => (/* binding */ TRANSFER_SOL_DISCRIMINATOR),
/* harmony export */   "TRANSFER_SOL_WITH_SEED_DISCRIMINATOR": () => (/* binding */ TRANSFER_SOL_WITH_SEED_DISCRIMINATOR),
/* harmony export */   "UPGRADE_NONCE_ACCOUNT_DISCRIMINATOR": () => (/* binding */ UPGRADE_NONCE_ACCOUNT_DISCRIMINATOR),
/* harmony export */   "WITHDRAW_NONCE_ACCOUNT_DISCRIMINATOR": () => (/* binding */ WITHDRAW_NONCE_ACCOUNT_DISCRIMINATOR),
/* harmony export */   "decodeNonce": () => (/* binding */ decodeNonce),
/* harmony export */   "fetchAllMaybeNonce": () => (/* binding */ fetchAllMaybeNonce),
/* harmony export */   "fetchAllNonce": () => (/* binding */ fetchAllNonce),
/* harmony export */   "fetchMaybeNonce": () => (/* binding */ fetchMaybeNonce),
/* harmony export */   "fetchNonce": () => (/* binding */ fetchNonce),
/* harmony export */   "getAdvanceNonceAccountDiscriminatorBytes": () => (/* binding */ getAdvanceNonceAccountDiscriminatorBytes),
/* harmony export */   "getAdvanceNonceAccountInstruction": () => (/* binding */ getAdvanceNonceAccountInstruction),
/* harmony export */   "getAdvanceNonceAccountInstructionDataCodec": () => (/* binding */ getAdvanceNonceAccountInstructionDataCodec),
/* harmony export */   "getAdvanceNonceAccountInstructionDataDecoder": () => (/* binding */ getAdvanceNonceAccountInstructionDataDecoder),
/* harmony export */   "getAdvanceNonceAccountInstructionDataEncoder": () => (/* binding */ getAdvanceNonceAccountInstructionDataEncoder),
/* harmony export */   "getAllocateDiscriminatorBytes": () => (/* binding */ getAllocateDiscriminatorBytes),
/* harmony export */   "getAllocateInstruction": () => (/* binding */ getAllocateInstruction),
/* harmony export */   "getAllocateInstructionDataCodec": () => (/* binding */ getAllocateInstructionDataCodec),
/* harmony export */   "getAllocateInstructionDataDecoder": () => (/* binding */ getAllocateInstructionDataDecoder),
/* harmony export */   "getAllocateInstructionDataEncoder": () => (/* binding */ getAllocateInstructionDataEncoder),
/* harmony export */   "getAllocateWithSeedDiscriminatorBytes": () => (/* binding */ getAllocateWithSeedDiscriminatorBytes),
/* harmony export */   "getAllocateWithSeedInstruction": () => (/* binding */ getAllocateWithSeedInstruction),
/* harmony export */   "getAllocateWithSeedInstructionDataCodec": () => (/* binding */ getAllocateWithSeedInstructionDataCodec),
/* harmony export */   "getAllocateWithSeedInstructionDataDecoder": () => (/* binding */ getAllocateWithSeedInstructionDataDecoder),
/* harmony export */   "getAllocateWithSeedInstructionDataEncoder": () => (/* binding */ getAllocateWithSeedInstructionDataEncoder),
/* harmony export */   "getAssignDiscriminatorBytes": () => (/* binding */ getAssignDiscriminatorBytes),
/* harmony export */   "getAssignInstruction": () => (/* binding */ getAssignInstruction),
/* harmony export */   "getAssignInstructionDataCodec": () => (/* binding */ getAssignInstructionDataCodec),
/* harmony export */   "getAssignInstructionDataDecoder": () => (/* binding */ getAssignInstructionDataDecoder),
/* harmony export */   "getAssignInstructionDataEncoder": () => (/* binding */ getAssignInstructionDataEncoder),
/* harmony export */   "getAssignWithSeedDiscriminatorBytes": () => (/* binding */ getAssignWithSeedDiscriminatorBytes),
/* harmony export */   "getAssignWithSeedInstruction": () => (/* binding */ getAssignWithSeedInstruction),
/* harmony export */   "getAssignWithSeedInstructionDataCodec": () => (/* binding */ getAssignWithSeedInstructionDataCodec),
/* harmony export */   "getAssignWithSeedInstructionDataDecoder": () => (/* binding */ getAssignWithSeedInstructionDataDecoder),
/* harmony export */   "getAssignWithSeedInstructionDataEncoder": () => (/* binding */ getAssignWithSeedInstructionDataEncoder),
/* harmony export */   "getAuthorizeNonceAccountDiscriminatorBytes": () => (/* binding */ getAuthorizeNonceAccountDiscriminatorBytes),
/* harmony export */   "getAuthorizeNonceAccountInstruction": () => (/* binding */ getAuthorizeNonceAccountInstruction),
/* harmony export */   "getAuthorizeNonceAccountInstructionDataCodec": () => (/* binding */ getAuthorizeNonceAccountInstructionDataCodec),
/* harmony export */   "getAuthorizeNonceAccountInstructionDataDecoder": () => (/* binding */ getAuthorizeNonceAccountInstructionDataDecoder),
/* harmony export */   "getAuthorizeNonceAccountInstructionDataEncoder": () => (/* binding */ getAuthorizeNonceAccountInstructionDataEncoder),
/* harmony export */   "getCreateAccountDiscriminatorBytes": () => (/* binding */ getCreateAccountDiscriminatorBytes),
/* harmony export */   "getCreateAccountInstruction": () => (/* binding */ getCreateAccountInstruction),
/* harmony export */   "getCreateAccountInstructionDataCodec": () => (/* binding */ getCreateAccountInstructionDataCodec),
/* harmony export */   "getCreateAccountInstructionDataDecoder": () => (/* binding */ getCreateAccountInstructionDataDecoder),
/* harmony export */   "getCreateAccountInstructionDataEncoder": () => (/* binding */ getCreateAccountInstructionDataEncoder),
/* harmony export */   "getCreateAccountWithSeedDiscriminatorBytes": () => (/* binding */ getCreateAccountWithSeedDiscriminatorBytes),
/* harmony export */   "getCreateAccountWithSeedInstruction": () => (/* binding */ getCreateAccountWithSeedInstruction),
/* harmony export */   "getCreateAccountWithSeedInstructionDataCodec": () => (/* binding */ getCreateAccountWithSeedInstructionDataCodec),
/* harmony export */   "getCreateAccountWithSeedInstructionDataDecoder": () => (/* binding */ getCreateAccountWithSeedInstructionDataDecoder),
/* harmony export */   "getCreateAccountWithSeedInstructionDataEncoder": () => (/* binding */ getCreateAccountWithSeedInstructionDataEncoder),
/* harmony export */   "getInitializeNonceAccountDiscriminatorBytes": () => (/* binding */ getInitializeNonceAccountDiscriminatorBytes),
/* harmony export */   "getInitializeNonceAccountInstruction": () => (/* binding */ getInitializeNonceAccountInstruction),
/* harmony export */   "getInitializeNonceAccountInstructionDataCodec": () => (/* binding */ getInitializeNonceAccountInstructionDataCodec),
/* harmony export */   "getInitializeNonceAccountInstructionDataDecoder": () => (/* binding */ getInitializeNonceAccountInstructionDataDecoder),
/* harmony export */   "getInitializeNonceAccountInstructionDataEncoder": () => (/* binding */ getInitializeNonceAccountInstructionDataEncoder),
/* harmony export */   "getNonceCodec": () => (/* binding */ getNonceCodec),
/* harmony export */   "getNonceDecoder": () => (/* binding */ getNonceDecoder),
/* harmony export */   "getNonceEncoder": () => (/* binding */ getNonceEncoder),
/* harmony export */   "getNonceSize": () => (/* binding */ getNonceSize),
/* harmony export */   "getNonceStateCodec": () => (/* binding */ getNonceStateCodec),
/* harmony export */   "getNonceStateDecoder": () => (/* binding */ getNonceStateDecoder),
/* harmony export */   "getNonceStateEncoder": () => (/* binding */ getNonceStateEncoder),
/* harmony export */   "getNonceVersionCodec": () => (/* binding */ getNonceVersionCodec),
/* harmony export */   "getNonceVersionDecoder": () => (/* binding */ getNonceVersionDecoder),
/* harmony export */   "getNonceVersionEncoder": () => (/* binding */ getNonceVersionEncoder),
/* harmony export */   "getSystemErrorMessage": () => (/* binding */ getSystemErrorMessage),
/* harmony export */   "getTransferSolDiscriminatorBytes": () => (/* binding */ getTransferSolDiscriminatorBytes),
/* harmony export */   "getTransferSolInstruction": () => (/* binding */ getTransferSolInstruction),
/* harmony export */   "getTransferSolInstructionDataCodec": () => (/* binding */ getTransferSolInstructionDataCodec),
/* harmony export */   "getTransferSolInstructionDataDecoder": () => (/* binding */ getTransferSolInstructionDataDecoder),
/* harmony export */   "getTransferSolInstructionDataEncoder": () => (/* binding */ getTransferSolInstructionDataEncoder),
/* harmony export */   "getTransferSolWithSeedDiscriminatorBytes": () => (/* binding */ getTransferSolWithSeedDiscriminatorBytes),
/* harmony export */   "getTransferSolWithSeedInstruction": () => (/* binding */ getTransferSolWithSeedInstruction),
/* harmony export */   "getTransferSolWithSeedInstructionDataCodec": () => (/* binding */ getTransferSolWithSeedInstructionDataCodec),
/* harmony export */   "getTransferSolWithSeedInstructionDataDecoder": () => (/* binding */ getTransferSolWithSeedInstructionDataDecoder),
/* harmony export */   "getTransferSolWithSeedInstructionDataEncoder": () => (/* binding */ getTransferSolWithSeedInstructionDataEncoder),
/* harmony export */   "getUpgradeNonceAccountDiscriminatorBytes": () => (/* binding */ getUpgradeNonceAccountDiscriminatorBytes),
/* harmony export */   "getUpgradeNonceAccountInstruction": () => (/* binding */ getUpgradeNonceAccountInstruction),
/* harmony export */   "getUpgradeNonceAccountInstructionDataCodec": () => (/* binding */ getUpgradeNonceAccountInstructionDataCodec),
/* harmony export */   "getUpgradeNonceAccountInstructionDataDecoder": () => (/* binding */ getUpgradeNonceAccountInstructionDataDecoder),
/* harmony export */   "getUpgradeNonceAccountInstructionDataEncoder": () => (/* binding */ getUpgradeNonceAccountInstructionDataEncoder),
/* harmony export */   "getWithdrawNonceAccountDiscriminatorBytes": () => (/* binding */ getWithdrawNonceAccountDiscriminatorBytes),
/* harmony export */   "getWithdrawNonceAccountInstruction": () => (/* binding */ getWithdrawNonceAccountInstruction),
/* harmony export */   "getWithdrawNonceAccountInstructionDataCodec": () => (/* binding */ getWithdrawNonceAccountInstructionDataCodec),
/* harmony export */   "getWithdrawNonceAccountInstructionDataDecoder": () => (/* binding */ getWithdrawNonceAccountInstructionDataDecoder),
/* harmony export */   "getWithdrawNonceAccountInstructionDataEncoder": () => (/* binding */ getWithdrawNonceAccountInstructionDataEncoder),
/* harmony export */   "identifySystemInstruction": () => (/* binding */ identifySystemInstruction),
/* harmony export */   "isSystemError": () => (/* binding */ isSystemError),
/* harmony export */   "parseAdvanceNonceAccountInstruction": () => (/* binding */ parseAdvanceNonceAccountInstruction),
/* harmony export */   "parseAllocateInstruction": () => (/* binding */ parseAllocateInstruction),
/* harmony export */   "parseAllocateWithSeedInstruction": () => (/* binding */ parseAllocateWithSeedInstruction),
/* harmony export */   "parseAssignInstruction": () => (/* binding */ parseAssignInstruction),
/* harmony export */   "parseAssignWithSeedInstruction": () => (/* binding */ parseAssignWithSeedInstruction),
/* harmony export */   "parseAuthorizeNonceAccountInstruction": () => (/* binding */ parseAuthorizeNonceAccountInstruction),
/* harmony export */   "parseCreateAccountInstruction": () => (/* binding */ parseCreateAccountInstruction),
/* harmony export */   "parseCreateAccountWithSeedInstruction": () => (/* binding */ parseCreateAccountWithSeedInstruction),
/* harmony export */   "parseInitializeNonceAccountInstruction": () => (/* binding */ parseInitializeNonceAccountInstruction),
/* harmony export */   "parseTransferSolInstruction": () => (/* binding */ parseTransferSolInstruction),
/* harmony export */   "parseTransferSolWithSeedInstruction": () => (/* binding */ parseTransferSolWithSeedInstruction),
/* harmony export */   "parseUpgradeNonceAccountInstruction": () => (/* binding */ parseUpgradeNonceAccountInstruction),
/* harmony export */   "parseWithdrawNonceAccountInstruction": () => (/* binding */ parseWithdrawNonceAccountInstruction)
/* harmony export */ });
/* harmony import */ var _solana_kit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @solana/kit */ "./node_modules/@solana/codecs-data-structures/dist/index.browser.mjs");
/* harmony import */ var _solana_kit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @solana/kit */ "./node_modules/@solana/codecs-numbers/dist/index.browser.mjs");
/* harmony import */ var _solana_kit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @solana/kit */ "./node_modules/@solana/codecs-core/dist/index.browser.mjs");
/* harmony import */ var _solana_kit__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @solana/kit */ "./node_modules/@solana/addresses/dist/index.browser.mjs");
/* harmony import */ var _solana_kit__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @solana/kit */ "./node_modules/@solana/accounts/dist/index.browser.mjs");
/* harmony import */ var _solana_kit__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @solana/kit */ "./node_modules/@solana/programs/dist/index.browser.mjs");
/* harmony import */ var _solana_kit__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @solana/kit */ "./node_modules/@solana/instructions/dist/index.browser.mjs");
/* harmony import */ var _solana_kit__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @solana/kit */ "./node_modules/@solana/signers/dist/index.browser.mjs");
/* harmony import */ var _solana_kit__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @solana/kit */ "./node_modules/@solana/codecs-strings/dist/index.browser.mjs");


// src/generated/accounts/nonce.ts
var NonceState = /* @__PURE__ */ ((NonceState2) => {
  NonceState2[NonceState2["Uninitialized"] = 0] = "Uninitialized";
  NonceState2[NonceState2["Initialized"] = 1] = "Initialized";
  return NonceState2;
})(NonceState || {});
function getNonceStateEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getEnumEncoder)(NonceState, { size: (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Encoder)() });
}
function getNonceStateDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getEnumDecoder)(NonceState, { size: (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Decoder)() });
}
function getNonceStateCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.combineCodec)(getNonceStateEncoder(), getNonceStateDecoder());
}
var NonceVersion = /* @__PURE__ */ ((NonceVersion2) => {
  NonceVersion2[NonceVersion2["Legacy"] = 0] = "Legacy";
  NonceVersion2[NonceVersion2["Current"] = 1] = "Current";
  return NonceVersion2;
})(NonceVersion || {});
function getNonceVersionEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getEnumEncoder)(NonceVersion, { size: (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Encoder)() });
}
function getNonceVersionDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getEnumDecoder)(NonceVersion, { size: (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Decoder)() });
}
function getNonceVersionCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.combineCodec)(getNonceVersionEncoder(), getNonceVersionDecoder());
}

// src/generated/accounts/nonce.ts
function getNonceEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructEncoder)([
    ["version", getNonceVersionEncoder()],
    ["state", getNonceStateEncoder()],
    ["authority", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getAddressEncoder)()],
    ["blockhash", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getAddressEncoder)()],
    ["lamportsPerSignature", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU64Encoder)()]
  ]);
}
function getNonceDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructDecoder)([
    ["version", getNonceVersionDecoder()],
    ["state", getNonceStateDecoder()],
    ["authority", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getAddressDecoder)()],
    ["blockhash", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getAddressDecoder)()],
    ["lamportsPerSignature", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU64Decoder)()]
  ]);
}
function getNonceCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.combineCodec)(getNonceEncoder(), getNonceDecoder());
}
function decodeNonce(encodedAccount) {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.decodeAccount)(
    encodedAccount,
    getNonceDecoder()
  );
}
async function fetchNonce(rpc, address, config) {
  const maybeAccount = await fetchMaybeNonce(rpc, address, config);
  (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.assertAccountExists)(maybeAccount);
  return maybeAccount;
}
async function fetchMaybeNonce(rpc, address, config) {
  const maybeAccount = await (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.fetchEncodedAccount)(rpc, address, config);
  return decodeNonce(maybeAccount);
}
async function fetchAllNonce(rpc, addresses, config) {
  const maybeAccounts = await fetchAllMaybeNonce(rpc, addresses, config);
  (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.assertAccountsExist)(maybeAccounts);
  return maybeAccounts;
}
async function fetchAllMaybeNonce(rpc, addresses, config) {
  const maybeAccounts = await (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.fetchEncodedAccounts)(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeNonce(maybeAccount));
}
function getNonceSize() {
  return 80;
}
var SYSTEM_PROGRAM_ADDRESS = "11111111111111111111111111111111";
var SystemAccount = /* @__PURE__ */ ((SystemAccount2) => {
  SystemAccount2[SystemAccount2["Nonce"] = 0] = "Nonce";
  return SystemAccount2;
})(SystemAccount || {});
var SystemInstruction = /* @__PURE__ */ ((SystemInstruction2) => {
  SystemInstruction2[SystemInstruction2["CreateAccount"] = 0] = "CreateAccount";
  SystemInstruction2[SystemInstruction2["Assign"] = 1] = "Assign";
  SystemInstruction2[SystemInstruction2["TransferSol"] = 2] = "TransferSol";
  SystemInstruction2[SystemInstruction2["CreateAccountWithSeed"] = 3] = "CreateAccountWithSeed";
  SystemInstruction2[SystemInstruction2["AdvanceNonceAccount"] = 4] = "AdvanceNonceAccount";
  SystemInstruction2[SystemInstruction2["WithdrawNonceAccount"] = 5] = "WithdrawNonceAccount";
  SystemInstruction2[SystemInstruction2["InitializeNonceAccount"] = 6] = "InitializeNonceAccount";
  SystemInstruction2[SystemInstruction2["AuthorizeNonceAccount"] = 7] = "AuthorizeNonceAccount";
  SystemInstruction2[SystemInstruction2["Allocate"] = 8] = "Allocate";
  SystemInstruction2[SystemInstruction2["AllocateWithSeed"] = 9] = "AllocateWithSeed";
  SystemInstruction2[SystemInstruction2["AssignWithSeed"] = 10] = "AssignWithSeed";
  SystemInstruction2[SystemInstruction2["TransferSolWithSeed"] = 11] = "TransferSolWithSeed";
  SystemInstruction2[SystemInstruction2["UpgradeNonceAccount"] = 12] = "UpgradeNonceAccount";
  return SystemInstruction2;
})(SystemInstruction || {});
function identifySystemInstruction(instruction) {
  const data = "data" in instruction ? instruction.data : instruction;
  if ((0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.containsBytes)(data, (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Encoder)().encode(0), 0)) {
    return 0 /* CreateAccount */;
  }
  if ((0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.containsBytes)(data, (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Encoder)().encode(1), 0)) {
    return 1 /* Assign */;
  }
  if ((0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.containsBytes)(data, (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Encoder)().encode(2), 0)) {
    return 2 /* TransferSol */;
  }
  if ((0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.containsBytes)(data, (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Encoder)().encode(3), 0)) {
    return 3 /* CreateAccountWithSeed */;
  }
  if ((0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.containsBytes)(data, (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Encoder)().encode(4), 0)) {
    return 4 /* AdvanceNonceAccount */;
  }
  if ((0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.containsBytes)(data, (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Encoder)().encode(5), 0)) {
    return 5 /* WithdrawNonceAccount */;
  }
  if ((0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.containsBytes)(data, (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Encoder)().encode(6), 0)) {
    return 6 /* InitializeNonceAccount */;
  }
  if ((0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.containsBytes)(data, (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Encoder)().encode(7), 0)) {
    return 7 /* AuthorizeNonceAccount */;
  }
  if ((0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.containsBytes)(data, (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Encoder)().encode(8), 0)) {
    return 8 /* Allocate */;
  }
  if ((0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.containsBytes)(data, (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Encoder)().encode(9), 0)) {
    return 9 /* AllocateWithSeed */;
  }
  if ((0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.containsBytes)(data, (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Encoder)().encode(10), 0)) {
    return 10 /* AssignWithSeed */;
  }
  if ((0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.containsBytes)(data, (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Encoder)().encode(11), 0)) {
    return 11 /* TransferSolWithSeed */;
  }
  if ((0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.containsBytes)(data, (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Encoder)().encode(12), 0)) {
    return 12 /* UpgradeNonceAccount */;
  }
  throw new Error(
    "The provided instruction could not be identified as a system instruction."
  );
}

// src/generated/errors/system.ts
var SYSTEM_ERROR__ACCOUNT_ALREADY_IN_USE = 0;
var SYSTEM_ERROR__RESULT_WITH_NEGATIVE_LAMPORTS = 1;
var SYSTEM_ERROR__INVALID_PROGRAM_ID = 2;
var SYSTEM_ERROR__INVALID_ACCOUNT_DATA_LENGTH = 3;
var SYSTEM_ERROR__MAX_SEED_LENGTH_EXCEEDED = 4;
var SYSTEM_ERROR__ADDRESS_WITH_SEED_MISMATCH = 5;
var SYSTEM_ERROR__NONCE_NO_RECENT_BLOCKHASHES = 6;
var SYSTEM_ERROR__NONCE_BLOCKHASH_NOT_EXPIRED = 7;
var SYSTEM_ERROR__NONCE_UNEXPECTED_BLOCKHASH_VALUE = 8;
var systemErrorMessages;
if (true) {
  systemErrorMessages = {
    [SYSTEM_ERROR__ACCOUNT_ALREADY_IN_USE]: `an account with the same address already exists`,
    [SYSTEM_ERROR__ADDRESS_WITH_SEED_MISMATCH]: `provided address does not match addressed derived from seed`,
    [SYSTEM_ERROR__INVALID_ACCOUNT_DATA_LENGTH]: `cannot allocate account data of this length`,
    [SYSTEM_ERROR__INVALID_PROGRAM_ID]: `cannot assign account to this program id`,
    [SYSTEM_ERROR__MAX_SEED_LENGTH_EXCEEDED]: `length of requested seed is too long`,
    [SYSTEM_ERROR__NONCE_BLOCKHASH_NOT_EXPIRED]: `stored nonce is still in recent_blockhashes`,
    [SYSTEM_ERROR__NONCE_NO_RECENT_BLOCKHASHES]: `advancing stored nonce requires a populated RecentBlockhashes sysvar`,
    [SYSTEM_ERROR__NONCE_UNEXPECTED_BLOCKHASH_VALUE]: `specified nonce does not match stored nonce`,
    [SYSTEM_ERROR__RESULT_WITH_NEGATIVE_LAMPORTS]: `account does not have enough SOL to perform the operation`
  };
}
function getSystemErrorMessage(code) {
  if (true) {
    return systemErrorMessages[code];
  }
  return "Error message not available in production bundles.";
}
function isSystemError(error, transactionMessage, code) {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_5__.isProgramError)(
    error,
    transactionMessage,
    SYSTEM_PROGRAM_ADDRESS,
    code
  );
}
function expectAddress(value) {
  if (!value) {
    throw new Error("Expected a Address.");
  }
  if (typeof value === "object" && "address" in value) {
    return value.address;
  }
  if (Array.isArray(value)) {
    return value[0];
  }
  return value;
}
function getAccountMetaFactory(programAddress, optionalAccountStrategy) {
  return (account) => {
    if (!account.value) {
      return Object.freeze({
        address: programAddress,
        role: _solana_kit__WEBPACK_IMPORTED_MODULE_6__.AccountRole.READONLY
      });
    }
    const writableRole = account.isWritable ? _solana_kit__WEBPACK_IMPORTED_MODULE_6__.AccountRole.WRITABLE : _solana_kit__WEBPACK_IMPORTED_MODULE_6__.AccountRole.READONLY;
    return Object.freeze({
      address: expectAddress(account.value),
      role: isTransactionSigner(account.value) ? (0,_solana_kit__WEBPACK_IMPORTED_MODULE_6__.upgradeRoleToSigner)(writableRole) : writableRole,
      ...isTransactionSigner(account.value) ? { signer: account.value } : {}
    });
  };
}
function isTransactionSigner(value) {
  return !!value && typeof value === "object" && "address" in value && (0,_solana_kit__WEBPACK_IMPORTED_MODULE_7__.isTransactionSigner)(value);
}

// src/generated/instructions/advanceNonceAccount.ts
var ADVANCE_NONCE_ACCOUNT_DISCRIMINATOR = 4;
function getAdvanceNonceAccountDiscriminatorBytes() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Encoder)().encode(ADVANCE_NONCE_ACCOUNT_DISCRIMINATOR);
}
function getAdvanceNonceAccountInstructionDataEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.transformEncoder)(
    (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructEncoder)([["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Encoder)()]]),
    (value) => ({
      ...value,
      discriminator: ADVANCE_NONCE_ACCOUNT_DISCRIMINATOR
    })
  );
}
function getAdvanceNonceAccountInstructionDataDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructDecoder)([["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Decoder)()]]);
}
function getAdvanceNonceAccountInstructionDataCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.combineCodec)(
    getAdvanceNonceAccountInstructionDataEncoder(),
    getAdvanceNonceAccountInstructionDataDecoder()
  );
}
function getAdvanceNonceAccountInstruction(input, config) {
  const programAddress = config?.programAddress ?? SYSTEM_PROGRAM_ADDRESS;
  const originalAccounts = {
    nonceAccount: { value: input.nonceAccount ?? null, isWritable: true },
    recentBlockhashesSysvar: {
      value: input.recentBlockhashesSysvar ?? null,
      isWritable: false
    },
    nonceAuthority: { value: input.nonceAuthority ?? null, isWritable: false }
  };
  const accounts = originalAccounts;
  if (!accounts.recentBlockhashesSysvar.value) {
    accounts.recentBlockhashesSysvar.value = "SysvarRecentB1ockHashes11111111111111111111";
  }
  const getAccountMeta = getAccountMetaFactory(programAddress);
  const instruction = {
    accounts: [
      getAccountMeta(accounts.nonceAccount),
      getAccountMeta(accounts.recentBlockhashesSysvar),
      getAccountMeta(accounts.nonceAuthority)
    ],
    programAddress,
    data: getAdvanceNonceAccountInstructionDataEncoder().encode({})
  };
  return instruction;
}
function parseAdvanceNonceAccountInstruction(instruction) {
  if (instruction.accounts.length < 3) {
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      nonceAccount: getNextAccount(),
      recentBlockhashesSysvar: getNextAccount(),
      nonceAuthority: getNextAccount()
    },
    data: getAdvanceNonceAccountInstructionDataDecoder().decode(
      instruction.data
    )
  };
}
var ALLOCATE_DISCRIMINATOR = 8;
function getAllocateDiscriminatorBytes() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Encoder)().encode(ALLOCATE_DISCRIMINATOR);
}
function getAllocateInstructionDataEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.transformEncoder)(
    (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructEncoder)([
      ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Encoder)()],
      ["space", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU64Encoder)()]
    ]),
    (value) => ({ ...value, discriminator: ALLOCATE_DISCRIMINATOR })
  );
}
function getAllocateInstructionDataDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructDecoder)([
    ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Decoder)()],
    ["space", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU64Decoder)()]
  ]);
}
function getAllocateInstructionDataCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.combineCodec)(
    getAllocateInstructionDataEncoder(),
    getAllocateInstructionDataDecoder()
  );
}
function getAllocateInstruction(input, config) {
  const programAddress = config?.programAddress ?? SYSTEM_PROGRAM_ADDRESS;
  const originalAccounts = {
    newAccount: { value: input.newAccount ?? null, isWritable: true }
  };
  const accounts = originalAccounts;
  const args = { ...input };
  const getAccountMeta = getAccountMetaFactory(programAddress);
  const instruction = {
    accounts: [getAccountMeta(accounts.newAccount)],
    programAddress,
    data: getAllocateInstructionDataEncoder().encode(
      args
    )
  };
  return instruction;
}
function parseAllocateInstruction(instruction) {
  if (instruction.accounts.length < 1) {
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      newAccount: getNextAccount()
    },
    data: getAllocateInstructionDataDecoder().decode(instruction.data)
  };
}
var ALLOCATE_WITH_SEED_DISCRIMINATOR = 9;
function getAllocateWithSeedDiscriminatorBytes() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Encoder)().encode(ALLOCATE_WITH_SEED_DISCRIMINATOR);
}
function getAllocateWithSeedInstructionDataEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.transformEncoder)(
    (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructEncoder)([
      ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Encoder)()],
      ["base", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getAddressEncoder)()],
      ["seed", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.addEncoderSizePrefix)((0,_solana_kit__WEBPACK_IMPORTED_MODULE_8__.getUtf8Encoder)(), (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU64Encoder)())],
      ["space", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU64Encoder)()],
      ["programAddress", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getAddressEncoder)()]
    ]),
    (value) => ({ ...value, discriminator: ALLOCATE_WITH_SEED_DISCRIMINATOR })
  );
}
function getAllocateWithSeedInstructionDataDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructDecoder)([
    ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Decoder)()],
    ["base", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getAddressDecoder)()],
    ["seed", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.addDecoderSizePrefix)((0,_solana_kit__WEBPACK_IMPORTED_MODULE_8__.getUtf8Decoder)(), (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU64Decoder)())],
    ["space", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU64Decoder)()],
    ["programAddress", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getAddressDecoder)()]
  ]);
}
function getAllocateWithSeedInstructionDataCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.combineCodec)(
    getAllocateWithSeedInstructionDataEncoder(),
    getAllocateWithSeedInstructionDataDecoder()
  );
}
function getAllocateWithSeedInstruction(input, config) {
  const programAddress = config?.programAddress ?? SYSTEM_PROGRAM_ADDRESS;
  const originalAccounts = {
    newAccount: { value: input.newAccount ?? null, isWritable: true },
    baseAccount: { value: input.baseAccount ?? null, isWritable: false }
  };
  const accounts = originalAccounts;
  const args = { ...input };
  const getAccountMeta = getAccountMetaFactory(programAddress);
  const instruction = {
    accounts: [
      getAccountMeta(accounts.newAccount),
      getAccountMeta(accounts.baseAccount)
    ],
    programAddress,
    data: getAllocateWithSeedInstructionDataEncoder().encode(
      args
    )
  };
  return instruction;
}
function parseAllocateWithSeedInstruction(instruction) {
  if (instruction.accounts.length < 2) {
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      newAccount: getNextAccount(),
      baseAccount: getNextAccount()
    },
    data: getAllocateWithSeedInstructionDataDecoder().decode(instruction.data)
  };
}
var ASSIGN_DISCRIMINATOR = 1;
function getAssignDiscriminatorBytes() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Encoder)().encode(ASSIGN_DISCRIMINATOR);
}
function getAssignInstructionDataEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.transformEncoder)(
    (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructEncoder)([
      ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Encoder)()],
      ["programAddress", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getAddressEncoder)()]
    ]),
    (value) => ({ ...value, discriminator: ASSIGN_DISCRIMINATOR })
  );
}
function getAssignInstructionDataDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructDecoder)([
    ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Decoder)()],
    ["programAddress", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getAddressDecoder)()]
  ]);
}
function getAssignInstructionDataCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.combineCodec)(
    getAssignInstructionDataEncoder(),
    getAssignInstructionDataDecoder()
  );
}
function getAssignInstruction(input, config) {
  const programAddress = config?.programAddress ?? SYSTEM_PROGRAM_ADDRESS;
  const originalAccounts = {
    account: { value: input.account ?? null, isWritable: true }
  };
  const accounts = originalAccounts;
  const args = { ...input };
  const getAccountMeta = getAccountMetaFactory(programAddress);
  const instruction = {
    accounts: [getAccountMeta(accounts.account)],
    programAddress,
    data: getAssignInstructionDataEncoder().encode(
      args
    )
  };
  return instruction;
}
function parseAssignInstruction(instruction) {
  if (instruction.accounts.length < 1) {
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      account: getNextAccount()
    },
    data: getAssignInstructionDataDecoder().decode(instruction.data)
  };
}
var ASSIGN_WITH_SEED_DISCRIMINATOR = 10;
function getAssignWithSeedDiscriminatorBytes() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Encoder)().encode(ASSIGN_WITH_SEED_DISCRIMINATOR);
}
function getAssignWithSeedInstructionDataEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.transformEncoder)(
    (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructEncoder)([
      ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Encoder)()],
      ["base", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getAddressEncoder)()],
      ["seed", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.addEncoderSizePrefix)((0,_solana_kit__WEBPACK_IMPORTED_MODULE_8__.getUtf8Encoder)(), (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU64Encoder)())],
      ["programAddress", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getAddressEncoder)()]
    ]),
    (value) => ({ ...value, discriminator: ASSIGN_WITH_SEED_DISCRIMINATOR })
  );
}
function getAssignWithSeedInstructionDataDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructDecoder)([
    ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Decoder)()],
    ["base", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getAddressDecoder)()],
    ["seed", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.addDecoderSizePrefix)((0,_solana_kit__WEBPACK_IMPORTED_MODULE_8__.getUtf8Decoder)(), (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU64Decoder)())],
    ["programAddress", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getAddressDecoder)()]
  ]);
}
function getAssignWithSeedInstructionDataCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.combineCodec)(
    getAssignWithSeedInstructionDataEncoder(),
    getAssignWithSeedInstructionDataDecoder()
  );
}
function getAssignWithSeedInstruction(input, config) {
  const programAddress = config?.programAddress ?? SYSTEM_PROGRAM_ADDRESS;
  const originalAccounts = {
    account: { value: input.account ?? null, isWritable: true },
    baseAccount: { value: input.baseAccount ?? null, isWritable: false }
  };
  const accounts = originalAccounts;
  const args = { ...input };
  const getAccountMeta = getAccountMetaFactory(programAddress);
  const instruction = {
    accounts: [
      getAccountMeta(accounts.account),
      getAccountMeta(accounts.baseAccount)
    ],
    programAddress,
    data: getAssignWithSeedInstructionDataEncoder().encode(
      args
    )
  };
  return instruction;
}
function parseAssignWithSeedInstruction(instruction) {
  if (instruction.accounts.length < 2) {
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      account: getNextAccount(),
      baseAccount: getNextAccount()
    },
    data: getAssignWithSeedInstructionDataDecoder().decode(instruction.data)
  };
}
var AUTHORIZE_NONCE_ACCOUNT_DISCRIMINATOR = 7;
function getAuthorizeNonceAccountDiscriminatorBytes() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Encoder)().encode(AUTHORIZE_NONCE_ACCOUNT_DISCRIMINATOR);
}
function getAuthorizeNonceAccountInstructionDataEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.transformEncoder)(
    (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructEncoder)([
      ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Encoder)()],
      ["newNonceAuthority", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getAddressEncoder)()]
    ]),
    (value) => ({
      ...value,
      discriminator: AUTHORIZE_NONCE_ACCOUNT_DISCRIMINATOR
    })
  );
}
function getAuthorizeNonceAccountInstructionDataDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructDecoder)([
    ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Decoder)()],
    ["newNonceAuthority", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getAddressDecoder)()]
  ]);
}
function getAuthorizeNonceAccountInstructionDataCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.combineCodec)(
    getAuthorizeNonceAccountInstructionDataEncoder(),
    getAuthorizeNonceAccountInstructionDataDecoder()
  );
}
function getAuthorizeNonceAccountInstruction(input, config) {
  const programAddress = config?.programAddress ?? SYSTEM_PROGRAM_ADDRESS;
  const originalAccounts = {
    nonceAccount: { value: input.nonceAccount ?? null, isWritable: true },
    nonceAuthority: { value: input.nonceAuthority ?? null, isWritable: false }
  };
  const accounts = originalAccounts;
  const args = { ...input };
  const getAccountMeta = getAccountMetaFactory(programAddress);
  const instruction = {
    accounts: [
      getAccountMeta(accounts.nonceAccount),
      getAccountMeta(accounts.nonceAuthority)
    ],
    programAddress,
    data: getAuthorizeNonceAccountInstructionDataEncoder().encode(
      args
    )
  };
  return instruction;
}
function parseAuthorizeNonceAccountInstruction(instruction) {
  if (instruction.accounts.length < 2) {
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      nonceAccount: getNextAccount(),
      nonceAuthority: getNextAccount()
    },
    data: getAuthorizeNonceAccountInstructionDataDecoder().decode(
      instruction.data
    )
  };
}
var CREATE_ACCOUNT_DISCRIMINATOR = 0;
function getCreateAccountDiscriminatorBytes() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Encoder)().encode(CREATE_ACCOUNT_DISCRIMINATOR);
}
function getCreateAccountInstructionDataEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.transformEncoder)(
    (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructEncoder)([
      ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Encoder)()],
      ["lamports", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU64Encoder)()],
      ["space", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU64Encoder)()],
      ["programAddress", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getAddressEncoder)()]
    ]),
    (value) => ({ ...value, discriminator: CREATE_ACCOUNT_DISCRIMINATOR })
  );
}
function getCreateAccountInstructionDataDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructDecoder)([
    ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Decoder)()],
    ["lamports", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU64Decoder)()],
    ["space", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU64Decoder)()],
    ["programAddress", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getAddressDecoder)()]
  ]);
}
function getCreateAccountInstructionDataCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.combineCodec)(
    getCreateAccountInstructionDataEncoder(),
    getCreateAccountInstructionDataDecoder()
  );
}
function getCreateAccountInstruction(input, config) {
  const programAddress = config?.programAddress ?? SYSTEM_PROGRAM_ADDRESS;
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    newAccount: { value: input.newAccount ?? null, isWritable: true }
  };
  const accounts = originalAccounts;
  const args = { ...input };
  const byteDelta = [Number(args.space) + _solana_kit__WEBPACK_IMPORTED_MODULE_4__.BASE_ACCOUNT_SIZE].reduce(
    (a, b) => a + b,
    0
  );
  const getAccountMeta = getAccountMetaFactory(programAddress);
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.newAccount)
    ],
    programAddress,
    data: getCreateAccountInstructionDataEncoder().encode(
      args
    )
  };
  return Object.freeze({ ...instruction, byteDelta });
}
function parseCreateAccountInstruction(instruction) {
  if (instruction.accounts.length < 2) {
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      newAccount: getNextAccount()
    },
    data: getCreateAccountInstructionDataDecoder().decode(instruction.data)
  };
}
var CREATE_ACCOUNT_WITH_SEED_DISCRIMINATOR = 3;
function getCreateAccountWithSeedDiscriminatorBytes() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Encoder)().encode(CREATE_ACCOUNT_WITH_SEED_DISCRIMINATOR);
}
function getCreateAccountWithSeedInstructionDataEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.transformEncoder)(
    (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructEncoder)([
      ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Encoder)()],
      ["base", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getAddressEncoder)()],
      ["seed", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.addEncoderSizePrefix)((0,_solana_kit__WEBPACK_IMPORTED_MODULE_8__.getUtf8Encoder)(), (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU64Encoder)())],
      ["amount", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU64Encoder)()],
      ["space", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU64Encoder)()],
      ["programAddress", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getAddressEncoder)()]
    ]),
    (value) => ({
      ...value,
      discriminator: CREATE_ACCOUNT_WITH_SEED_DISCRIMINATOR
    })
  );
}
function getCreateAccountWithSeedInstructionDataDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructDecoder)([
    ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Decoder)()],
    ["base", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getAddressDecoder)()],
    ["seed", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.addDecoderSizePrefix)((0,_solana_kit__WEBPACK_IMPORTED_MODULE_8__.getUtf8Decoder)(), (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU64Decoder)())],
    ["amount", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU64Decoder)()],
    ["space", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU64Decoder)()],
    ["programAddress", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getAddressDecoder)()]
  ]);
}
function getCreateAccountWithSeedInstructionDataCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.combineCodec)(
    getCreateAccountWithSeedInstructionDataEncoder(),
    getCreateAccountWithSeedInstructionDataDecoder()
  );
}
function getCreateAccountWithSeedInstruction(input, config) {
  const programAddress = config?.programAddress ?? SYSTEM_PROGRAM_ADDRESS;
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    newAccount: { value: input.newAccount ?? null, isWritable: true },
    baseAccount: { value: input.baseAccount ?? null, isWritable: false }
  };
  const accounts = originalAccounts;
  const args = { ...input };
  const getAccountMeta = getAccountMetaFactory(programAddress);
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.newAccount),
      getAccountMeta(accounts.baseAccount)
    ],
    programAddress,
    data: getCreateAccountWithSeedInstructionDataEncoder().encode(
      args
    )
  };
  return instruction;
}
function parseCreateAccountWithSeedInstruction(instruction) {
  if (instruction.accounts.length < 3) {
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      newAccount: getNextAccount(),
      baseAccount: getNextAccount()
    },
    data: getCreateAccountWithSeedInstructionDataDecoder().decode(
      instruction.data
    )
  };
}
var INITIALIZE_NONCE_ACCOUNT_DISCRIMINATOR = 6;
function getInitializeNonceAccountDiscriminatorBytes() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Encoder)().encode(INITIALIZE_NONCE_ACCOUNT_DISCRIMINATOR);
}
function getInitializeNonceAccountInstructionDataEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.transformEncoder)(
    (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructEncoder)([
      ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Encoder)()],
      ["nonceAuthority", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getAddressEncoder)()]
    ]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_NONCE_ACCOUNT_DISCRIMINATOR
    })
  );
}
function getInitializeNonceAccountInstructionDataDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructDecoder)([
    ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Decoder)()],
    ["nonceAuthority", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getAddressDecoder)()]
  ]);
}
function getInitializeNonceAccountInstructionDataCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.combineCodec)(
    getInitializeNonceAccountInstructionDataEncoder(),
    getInitializeNonceAccountInstructionDataDecoder()
  );
}
function getInitializeNonceAccountInstruction(input, config) {
  const programAddress = config?.programAddress ?? SYSTEM_PROGRAM_ADDRESS;
  const originalAccounts = {
    nonceAccount: { value: input.nonceAccount ?? null, isWritable: true },
    recentBlockhashesSysvar: {
      value: input.recentBlockhashesSysvar ?? null,
      isWritable: false
    },
    rentSysvar: { value: input.rentSysvar ?? null, isWritable: false }
  };
  const accounts = originalAccounts;
  const args = { ...input };
  if (!accounts.recentBlockhashesSysvar.value) {
    accounts.recentBlockhashesSysvar.value = "SysvarRecentB1ockHashes11111111111111111111";
  }
  if (!accounts.rentSysvar.value) {
    accounts.rentSysvar.value = "SysvarRent111111111111111111111111111111111";
  }
  const getAccountMeta = getAccountMetaFactory(programAddress);
  const instruction = {
    accounts: [
      getAccountMeta(accounts.nonceAccount),
      getAccountMeta(accounts.recentBlockhashesSysvar),
      getAccountMeta(accounts.rentSysvar)
    ],
    programAddress,
    data: getInitializeNonceAccountInstructionDataEncoder().encode(
      args
    )
  };
  return instruction;
}
function parseInitializeNonceAccountInstruction(instruction) {
  if (instruction.accounts.length < 3) {
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      nonceAccount: getNextAccount(),
      recentBlockhashesSysvar: getNextAccount(),
      rentSysvar: getNextAccount()
    },
    data: getInitializeNonceAccountInstructionDataDecoder().decode(
      instruction.data
    )
  };
}
var TRANSFER_SOL_DISCRIMINATOR = 2;
function getTransferSolDiscriminatorBytes() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Encoder)().encode(TRANSFER_SOL_DISCRIMINATOR);
}
function getTransferSolInstructionDataEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.transformEncoder)(
    (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructEncoder)([
      ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Encoder)()],
      ["amount", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU64Encoder)()]
    ]),
    (value) => ({ ...value, discriminator: TRANSFER_SOL_DISCRIMINATOR })
  );
}
function getTransferSolInstructionDataDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructDecoder)([
    ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Decoder)()],
    ["amount", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU64Decoder)()]
  ]);
}
function getTransferSolInstructionDataCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.combineCodec)(
    getTransferSolInstructionDataEncoder(),
    getTransferSolInstructionDataDecoder()
  );
}
function getTransferSolInstruction(input, config) {
  const programAddress = config?.programAddress ?? SYSTEM_PROGRAM_ADDRESS;
  const originalAccounts = {
    source: { value: input.source ?? null, isWritable: true },
    destination: { value: input.destination ?? null, isWritable: true }
  };
  const accounts = originalAccounts;
  const args = { ...input };
  const getAccountMeta = getAccountMetaFactory(programAddress);
  const instruction = {
    accounts: [
      getAccountMeta(accounts.source),
      getAccountMeta(accounts.destination)
    ],
    programAddress,
    data: getTransferSolInstructionDataEncoder().encode(
      args
    )
  };
  return instruction;
}
function parseTransferSolInstruction(instruction) {
  if (instruction.accounts.length < 2) {
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      source: getNextAccount(),
      destination: getNextAccount()
    },
    data: getTransferSolInstructionDataDecoder().decode(instruction.data)
  };
}
var TRANSFER_SOL_WITH_SEED_DISCRIMINATOR = 11;
function getTransferSolWithSeedDiscriminatorBytes() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Encoder)().encode(TRANSFER_SOL_WITH_SEED_DISCRIMINATOR);
}
function getTransferSolWithSeedInstructionDataEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.transformEncoder)(
    (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructEncoder)([
      ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Encoder)()],
      ["amount", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU64Encoder)()],
      ["fromSeed", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.addEncoderSizePrefix)((0,_solana_kit__WEBPACK_IMPORTED_MODULE_8__.getUtf8Encoder)(), (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU64Encoder)())],
      ["fromOwner", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getAddressEncoder)()]
    ]),
    (value) => ({
      ...value,
      discriminator: TRANSFER_SOL_WITH_SEED_DISCRIMINATOR
    })
  );
}
function getTransferSolWithSeedInstructionDataDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructDecoder)([
    ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Decoder)()],
    ["amount", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU64Decoder)()],
    ["fromSeed", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.addDecoderSizePrefix)((0,_solana_kit__WEBPACK_IMPORTED_MODULE_8__.getUtf8Decoder)(), (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU64Decoder)())],
    ["fromOwner", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getAddressDecoder)()]
  ]);
}
function getTransferSolWithSeedInstructionDataCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.combineCodec)(
    getTransferSolWithSeedInstructionDataEncoder(),
    getTransferSolWithSeedInstructionDataDecoder()
  );
}
function getTransferSolWithSeedInstruction(input, config) {
  const programAddress = config?.programAddress ?? SYSTEM_PROGRAM_ADDRESS;
  const originalAccounts = {
    source: { value: input.source ?? null, isWritable: true },
    baseAccount: { value: input.baseAccount ?? null, isWritable: false },
    destination: { value: input.destination ?? null, isWritable: true }
  };
  const accounts = originalAccounts;
  const args = { ...input };
  const getAccountMeta = getAccountMetaFactory(programAddress);
  const instruction = {
    accounts: [
      getAccountMeta(accounts.source),
      getAccountMeta(accounts.baseAccount),
      getAccountMeta(accounts.destination)
    ],
    programAddress,
    data: getTransferSolWithSeedInstructionDataEncoder().encode(
      args
    )
  };
  return instruction;
}
function parseTransferSolWithSeedInstruction(instruction) {
  if (instruction.accounts.length < 3) {
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      source: getNextAccount(),
      baseAccount: getNextAccount(),
      destination: getNextAccount()
    },
    data: getTransferSolWithSeedInstructionDataDecoder().decode(
      instruction.data
    )
  };
}
var UPGRADE_NONCE_ACCOUNT_DISCRIMINATOR = 12;
function getUpgradeNonceAccountDiscriminatorBytes() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Encoder)().encode(UPGRADE_NONCE_ACCOUNT_DISCRIMINATOR);
}
function getUpgradeNonceAccountInstructionDataEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.transformEncoder)(
    (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructEncoder)([["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Encoder)()]]),
    (value) => ({
      ...value,
      discriminator: UPGRADE_NONCE_ACCOUNT_DISCRIMINATOR
    })
  );
}
function getUpgradeNonceAccountInstructionDataDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructDecoder)([["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Decoder)()]]);
}
function getUpgradeNonceAccountInstructionDataCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.combineCodec)(
    getUpgradeNonceAccountInstructionDataEncoder(),
    getUpgradeNonceAccountInstructionDataDecoder()
  );
}
function getUpgradeNonceAccountInstruction(input, config) {
  const programAddress = config?.programAddress ?? SYSTEM_PROGRAM_ADDRESS;
  const originalAccounts = {
    nonceAccount: { value: input.nonceAccount ?? null, isWritable: true }
  };
  const accounts = originalAccounts;
  const getAccountMeta = getAccountMetaFactory(programAddress);
  const instruction = {
    accounts: [getAccountMeta(accounts.nonceAccount)],
    programAddress,
    data: getUpgradeNonceAccountInstructionDataEncoder().encode({})
  };
  return instruction;
}
function parseUpgradeNonceAccountInstruction(instruction) {
  if (instruction.accounts.length < 1) {
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      nonceAccount: getNextAccount()
    },
    data: getUpgradeNonceAccountInstructionDataDecoder().decode(
      instruction.data
    )
  };
}
var WITHDRAW_NONCE_ACCOUNT_DISCRIMINATOR = 5;
function getWithdrawNonceAccountDiscriminatorBytes() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Encoder)().encode(WITHDRAW_NONCE_ACCOUNT_DISCRIMINATOR);
}
function getWithdrawNonceAccountInstructionDataEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.transformEncoder)(
    (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructEncoder)([
      ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Encoder)()],
      ["withdrawAmount", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU64Encoder)()]
    ]),
    (value) => ({
      ...value,
      discriminator: WITHDRAW_NONCE_ACCOUNT_DISCRIMINATOR
    })
  );
}
function getWithdrawNonceAccountInstructionDataDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructDecoder)([
    ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU32Decoder)()],
    ["withdrawAmount", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getU64Decoder)()]
  ]);
}
function getWithdrawNonceAccountInstructionDataCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.combineCodec)(
    getWithdrawNonceAccountInstructionDataEncoder(),
    getWithdrawNonceAccountInstructionDataDecoder()
  );
}
function getWithdrawNonceAccountInstruction(input, config) {
  const programAddress = config?.programAddress ?? SYSTEM_PROGRAM_ADDRESS;
  const originalAccounts = {
    nonceAccount: { value: input.nonceAccount ?? null, isWritable: true },
    recipientAccount: {
      value: input.recipientAccount ?? null,
      isWritable: true
    },
    recentBlockhashesSysvar: {
      value: input.recentBlockhashesSysvar ?? null,
      isWritable: false
    },
    rentSysvar: { value: input.rentSysvar ?? null, isWritable: false },
    nonceAuthority: { value: input.nonceAuthority ?? null, isWritable: false }
  };
  const accounts = originalAccounts;
  const args = { ...input };
  if (!accounts.recentBlockhashesSysvar.value) {
    accounts.recentBlockhashesSysvar.value = "SysvarRecentB1ockHashes11111111111111111111";
  }
  if (!accounts.rentSysvar.value) {
    accounts.rentSysvar.value = "SysvarRent111111111111111111111111111111111";
  }
  const getAccountMeta = getAccountMetaFactory(programAddress);
  const instruction = {
    accounts: [
      getAccountMeta(accounts.nonceAccount),
      getAccountMeta(accounts.recipientAccount),
      getAccountMeta(accounts.recentBlockhashesSysvar),
      getAccountMeta(accounts.rentSysvar),
      getAccountMeta(accounts.nonceAuthority)
    ],
    programAddress,
    data: getWithdrawNonceAccountInstructionDataEncoder().encode(
      args
    )
  };
  return instruction;
}
function parseWithdrawNonceAccountInstruction(instruction) {
  if (instruction.accounts.length < 5) {
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      nonceAccount: getNextAccount(),
      recipientAccount: getNextAccount(),
      recentBlockhashesSysvar: getNextAccount(),
      rentSysvar: getNextAccount(),
      nonceAuthority: getNextAccount()
    },
    data: getWithdrawNonceAccountInstructionDataDecoder().decode(
      instruction.data
    )
  };
}


//# sourceMappingURL=index.mjs.map
//# sourceMappingURL=index.mjs.map

/***/ }),

/***/ "./node_modules/@solana-program/token/dist/src/index.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@solana-program/token/dist/src/index.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AMOUNT_TO_UI_AMOUNT_DISCRIMINATOR": () => (/* binding */ AMOUNT_TO_UI_AMOUNT_DISCRIMINATOR),
/* harmony export */   "APPROVE_CHECKED_DISCRIMINATOR": () => (/* binding */ APPROVE_CHECKED_DISCRIMINATOR),
/* harmony export */   "APPROVE_DISCRIMINATOR": () => (/* binding */ APPROVE_DISCRIMINATOR),
/* harmony export */   "ASSOCIATED_TOKEN_ERROR__INVALID_OWNER": () => (/* binding */ ASSOCIATED_TOKEN_ERROR__INVALID_OWNER),
/* harmony export */   "ASSOCIATED_TOKEN_PROGRAM_ADDRESS": () => (/* binding */ ASSOCIATED_TOKEN_PROGRAM_ADDRESS),
/* harmony export */   "AccountState": () => (/* binding */ AccountState),
/* harmony export */   "AssociatedTokenInstruction": () => (/* binding */ AssociatedTokenInstruction),
/* harmony export */   "AuthorityType": () => (/* binding */ AuthorityType),
/* harmony export */   "BURN_CHECKED_DISCRIMINATOR": () => (/* binding */ BURN_CHECKED_DISCRIMINATOR),
/* harmony export */   "BURN_DISCRIMINATOR": () => (/* binding */ BURN_DISCRIMINATOR),
/* harmony export */   "CLOSE_ACCOUNT_DISCRIMINATOR": () => (/* binding */ CLOSE_ACCOUNT_DISCRIMINATOR),
/* harmony export */   "CREATE_ASSOCIATED_TOKEN_DISCRIMINATOR": () => (/* binding */ CREATE_ASSOCIATED_TOKEN_DISCRIMINATOR),
/* harmony export */   "CREATE_ASSOCIATED_TOKEN_IDEMPOTENT_DISCRIMINATOR": () => (/* binding */ CREATE_ASSOCIATED_TOKEN_IDEMPOTENT_DISCRIMINATOR),
/* harmony export */   "FREEZE_ACCOUNT_DISCRIMINATOR": () => (/* binding */ FREEZE_ACCOUNT_DISCRIMINATOR),
/* harmony export */   "GET_ACCOUNT_DATA_SIZE_DISCRIMINATOR": () => (/* binding */ GET_ACCOUNT_DATA_SIZE_DISCRIMINATOR),
/* harmony export */   "INITIALIZE_ACCOUNT2_DISCRIMINATOR": () => (/* binding */ INITIALIZE_ACCOUNT2_DISCRIMINATOR),
/* harmony export */   "INITIALIZE_ACCOUNT3_DISCRIMINATOR": () => (/* binding */ INITIALIZE_ACCOUNT3_DISCRIMINATOR),
/* harmony export */   "INITIALIZE_ACCOUNT_DISCRIMINATOR": () => (/* binding */ INITIALIZE_ACCOUNT_DISCRIMINATOR),
/* harmony export */   "INITIALIZE_IMMUTABLE_OWNER_DISCRIMINATOR": () => (/* binding */ INITIALIZE_IMMUTABLE_OWNER_DISCRIMINATOR),
/* harmony export */   "INITIALIZE_MINT2_DISCRIMINATOR": () => (/* binding */ INITIALIZE_MINT2_DISCRIMINATOR),
/* harmony export */   "INITIALIZE_MINT_DISCRIMINATOR": () => (/* binding */ INITIALIZE_MINT_DISCRIMINATOR),
/* harmony export */   "INITIALIZE_MULTISIG2_DISCRIMINATOR": () => (/* binding */ INITIALIZE_MULTISIG2_DISCRIMINATOR),
/* harmony export */   "INITIALIZE_MULTISIG_DISCRIMINATOR": () => (/* binding */ INITIALIZE_MULTISIG_DISCRIMINATOR),
/* harmony export */   "MINT_TO_CHECKED_DISCRIMINATOR": () => (/* binding */ MINT_TO_CHECKED_DISCRIMINATOR),
/* harmony export */   "MINT_TO_DISCRIMINATOR": () => (/* binding */ MINT_TO_DISCRIMINATOR),
/* harmony export */   "RECOVER_NESTED_ASSOCIATED_TOKEN_DISCRIMINATOR": () => (/* binding */ RECOVER_NESTED_ASSOCIATED_TOKEN_DISCRIMINATOR),
/* harmony export */   "REVOKE_DISCRIMINATOR": () => (/* binding */ REVOKE_DISCRIMINATOR),
/* harmony export */   "SET_AUTHORITY_DISCRIMINATOR": () => (/* binding */ SET_AUTHORITY_DISCRIMINATOR),
/* harmony export */   "SYNC_NATIVE_DISCRIMINATOR": () => (/* binding */ SYNC_NATIVE_DISCRIMINATOR),
/* harmony export */   "THAW_ACCOUNT_DISCRIMINATOR": () => (/* binding */ THAW_ACCOUNT_DISCRIMINATOR),
/* harmony export */   "TOKEN_ERROR__ACCOUNT_FROZEN": () => (/* binding */ TOKEN_ERROR__ACCOUNT_FROZEN),
/* harmony export */   "TOKEN_ERROR__ALREADY_IN_USE": () => (/* binding */ TOKEN_ERROR__ALREADY_IN_USE),
/* harmony export */   "TOKEN_ERROR__AUTHORITY_TYPE_NOT_SUPPORTED": () => (/* binding */ TOKEN_ERROR__AUTHORITY_TYPE_NOT_SUPPORTED),
/* harmony export */   "TOKEN_ERROR__FIXED_SUPPLY": () => (/* binding */ TOKEN_ERROR__FIXED_SUPPLY),
/* harmony export */   "TOKEN_ERROR__INSUFFICIENT_FUNDS": () => (/* binding */ TOKEN_ERROR__INSUFFICIENT_FUNDS),
/* harmony export */   "TOKEN_ERROR__INVALID_INSTRUCTION": () => (/* binding */ TOKEN_ERROR__INVALID_INSTRUCTION),
/* harmony export */   "TOKEN_ERROR__INVALID_MINT": () => (/* binding */ TOKEN_ERROR__INVALID_MINT),
/* harmony export */   "TOKEN_ERROR__INVALID_NUMBER_OF_PROVIDED_SIGNERS": () => (/* binding */ TOKEN_ERROR__INVALID_NUMBER_OF_PROVIDED_SIGNERS),
/* harmony export */   "TOKEN_ERROR__INVALID_NUMBER_OF_REQUIRED_SIGNERS": () => (/* binding */ TOKEN_ERROR__INVALID_NUMBER_OF_REQUIRED_SIGNERS),
/* harmony export */   "TOKEN_ERROR__INVALID_STATE": () => (/* binding */ TOKEN_ERROR__INVALID_STATE),
/* harmony export */   "TOKEN_ERROR__MINT_CANNOT_FREEZE": () => (/* binding */ TOKEN_ERROR__MINT_CANNOT_FREEZE),
/* harmony export */   "TOKEN_ERROR__MINT_DECIMALS_MISMATCH": () => (/* binding */ TOKEN_ERROR__MINT_DECIMALS_MISMATCH),
/* harmony export */   "TOKEN_ERROR__MINT_MISMATCH": () => (/* binding */ TOKEN_ERROR__MINT_MISMATCH),
/* harmony export */   "TOKEN_ERROR__NATIVE_NOT_SUPPORTED": () => (/* binding */ TOKEN_ERROR__NATIVE_NOT_SUPPORTED),
/* harmony export */   "TOKEN_ERROR__NON_NATIVE_HAS_BALANCE": () => (/* binding */ TOKEN_ERROR__NON_NATIVE_HAS_BALANCE),
/* harmony export */   "TOKEN_ERROR__NON_NATIVE_NOT_SUPPORTED": () => (/* binding */ TOKEN_ERROR__NON_NATIVE_NOT_SUPPORTED),
/* harmony export */   "TOKEN_ERROR__NOT_RENT_EXEMPT": () => (/* binding */ TOKEN_ERROR__NOT_RENT_EXEMPT),
/* harmony export */   "TOKEN_ERROR__OVERFLOW": () => (/* binding */ TOKEN_ERROR__OVERFLOW),
/* harmony export */   "TOKEN_ERROR__OWNER_MISMATCH": () => (/* binding */ TOKEN_ERROR__OWNER_MISMATCH),
/* harmony export */   "TOKEN_ERROR__UNINITIALIZED_STATE": () => (/* binding */ TOKEN_ERROR__UNINITIALIZED_STATE),
/* harmony export */   "TOKEN_PROGRAM_ADDRESS": () => (/* binding */ TOKEN_PROGRAM_ADDRESS),
/* harmony export */   "TRANSFER_CHECKED_DISCRIMINATOR": () => (/* binding */ TRANSFER_CHECKED_DISCRIMINATOR),
/* harmony export */   "TRANSFER_DISCRIMINATOR": () => (/* binding */ TRANSFER_DISCRIMINATOR),
/* harmony export */   "TokenAccount": () => (/* binding */ TokenAccount),
/* harmony export */   "TokenInstruction": () => (/* binding */ TokenInstruction),
/* harmony export */   "UI_AMOUNT_TO_AMOUNT_DISCRIMINATOR": () => (/* binding */ UI_AMOUNT_TO_AMOUNT_DISCRIMINATOR),
/* harmony export */   "decodeMint": () => (/* binding */ decodeMint),
/* harmony export */   "decodeMultisig": () => (/* binding */ decodeMultisig),
/* harmony export */   "decodeToken": () => (/* binding */ decodeToken),
/* harmony export */   "fetchAllMaybeMint": () => (/* binding */ fetchAllMaybeMint),
/* harmony export */   "fetchAllMaybeMultisig": () => (/* binding */ fetchAllMaybeMultisig),
/* harmony export */   "fetchAllMaybeToken": () => (/* binding */ fetchAllMaybeToken),
/* harmony export */   "fetchAllMint": () => (/* binding */ fetchAllMint),
/* harmony export */   "fetchAllMultisig": () => (/* binding */ fetchAllMultisig),
/* harmony export */   "fetchAllToken": () => (/* binding */ fetchAllToken),
/* harmony export */   "fetchMaybeMint": () => (/* binding */ fetchMaybeMint),
/* harmony export */   "fetchMaybeMultisig": () => (/* binding */ fetchMaybeMultisig),
/* harmony export */   "fetchMaybeToken": () => (/* binding */ fetchMaybeToken),
/* harmony export */   "fetchMint": () => (/* binding */ fetchMint),
/* harmony export */   "fetchMultisig": () => (/* binding */ fetchMultisig),
/* harmony export */   "fetchToken": () => (/* binding */ fetchToken),
/* harmony export */   "findAssociatedTokenPda": () => (/* binding */ findAssociatedTokenPda),
/* harmony export */   "getAccountStateCodec": () => (/* binding */ getAccountStateCodec),
/* harmony export */   "getAccountStateDecoder": () => (/* binding */ getAccountStateDecoder),
/* harmony export */   "getAccountStateEncoder": () => (/* binding */ getAccountStateEncoder),
/* harmony export */   "getAmountToUiAmountDiscriminatorBytes": () => (/* binding */ getAmountToUiAmountDiscriminatorBytes),
/* harmony export */   "getAmountToUiAmountInstruction": () => (/* binding */ getAmountToUiAmountInstruction),
/* harmony export */   "getAmountToUiAmountInstructionDataCodec": () => (/* binding */ getAmountToUiAmountInstructionDataCodec),
/* harmony export */   "getAmountToUiAmountInstructionDataDecoder": () => (/* binding */ getAmountToUiAmountInstructionDataDecoder),
/* harmony export */   "getAmountToUiAmountInstructionDataEncoder": () => (/* binding */ getAmountToUiAmountInstructionDataEncoder),
/* harmony export */   "getApproveCheckedDiscriminatorBytes": () => (/* binding */ getApproveCheckedDiscriminatorBytes),
/* harmony export */   "getApproveCheckedInstruction": () => (/* binding */ getApproveCheckedInstruction),
/* harmony export */   "getApproveCheckedInstructionDataCodec": () => (/* binding */ getApproveCheckedInstructionDataCodec),
/* harmony export */   "getApproveCheckedInstructionDataDecoder": () => (/* binding */ getApproveCheckedInstructionDataDecoder),
/* harmony export */   "getApproveCheckedInstructionDataEncoder": () => (/* binding */ getApproveCheckedInstructionDataEncoder),
/* harmony export */   "getApproveDiscriminatorBytes": () => (/* binding */ getApproveDiscriminatorBytes),
/* harmony export */   "getApproveInstruction": () => (/* binding */ getApproveInstruction),
/* harmony export */   "getApproveInstructionDataCodec": () => (/* binding */ getApproveInstructionDataCodec),
/* harmony export */   "getApproveInstructionDataDecoder": () => (/* binding */ getApproveInstructionDataDecoder),
/* harmony export */   "getApproveInstructionDataEncoder": () => (/* binding */ getApproveInstructionDataEncoder),
/* harmony export */   "getAssociatedTokenErrorMessage": () => (/* binding */ getAssociatedTokenErrorMessage),
/* harmony export */   "getAuthorityTypeCodec": () => (/* binding */ getAuthorityTypeCodec),
/* harmony export */   "getAuthorityTypeDecoder": () => (/* binding */ getAuthorityTypeDecoder),
/* harmony export */   "getAuthorityTypeEncoder": () => (/* binding */ getAuthorityTypeEncoder),
/* harmony export */   "getBurnCheckedDiscriminatorBytes": () => (/* binding */ getBurnCheckedDiscriminatorBytes),
/* harmony export */   "getBurnCheckedInstruction": () => (/* binding */ getBurnCheckedInstruction),
/* harmony export */   "getBurnCheckedInstructionDataCodec": () => (/* binding */ getBurnCheckedInstructionDataCodec),
/* harmony export */   "getBurnCheckedInstructionDataDecoder": () => (/* binding */ getBurnCheckedInstructionDataDecoder),
/* harmony export */   "getBurnCheckedInstructionDataEncoder": () => (/* binding */ getBurnCheckedInstructionDataEncoder),
/* harmony export */   "getBurnDiscriminatorBytes": () => (/* binding */ getBurnDiscriminatorBytes),
/* harmony export */   "getBurnInstruction": () => (/* binding */ getBurnInstruction),
/* harmony export */   "getBurnInstructionDataCodec": () => (/* binding */ getBurnInstructionDataCodec),
/* harmony export */   "getBurnInstructionDataDecoder": () => (/* binding */ getBurnInstructionDataDecoder),
/* harmony export */   "getBurnInstructionDataEncoder": () => (/* binding */ getBurnInstructionDataEncoder),
/* harmony export */   "getCloseAccountDiscriminatorBytes": () => (/* binding */ getCloseAccountDiscriminatorBytes),
/* harmony export */   "getCloseAccountInstruction": () => (/* binding */ getCloseAccountInstruction),
/* harmony export */   "getCloseAccountInstructionDataCodec": () => (/* binding */ getCloseAccountInstructionDataCodec),
/* harmony export */   "getCloseAccountInstructionDataDecoder": () => (/* binding */ getCloseAccountInstructionDataDecoder),
/* harmony export */   "getCloseAccountInstructionDataEncoder": () => (/* binding */ getCloseAccountInstructionDataEncoder),
/* harmony export */   "getCreateAssociatedTokenDiscriminatorBytes": () => (/* binding */ getCreateAssociatedTokenDiscriminatorBytes),
/* harmony export */   "getCreateAssociatedTokenIdempotentDiscriminatorBytes": () => (/* binding */ getCreateAssociatedTokenIdempotentDiscriminatorBytes),
/* harmony export */   "getCreateAssociatedTokenIdempotentInstruction": () => (/* binding */ getCreateAssociatedTokenIdempotentInstruction),
/* harmony export */   "getCreateAssociatedTokenIdempotentInstructionAsync": () => (/* binding */ getCreateAssociatedTokenIdempotentInstructionAsync),
/* harmony export */   "getCreateAssociatedTokenIdempotentInstructionDataCodec": () => (/* binding */ getCreateAssociatedTokenIdempotentInstructionDataCodec),
/* harmony export */   "getCreateAssociatedTokenIdempotentInstructionDataDecoder": () => (/* binding */ getCreateAssociatedTokenIdempotentInstructionDataDecoder),
/* harmony export */   "getCreateAssociatedTokenIdempotentInstructionDataEncoder": () => (/* binding */ getCreateAssociatedTokenIdempotentInstructionDataEncoder),
/* harmony export */   "getCreateAssociatedTokenInstruction": () => (/* binding */ getCreateAssociatedTokenInstruction),
/* harmony export */   "getCreateAssociatedTokenInstructionAsync": () => (/* binding */ getCreateAssociatedTokenInstructionAsync),
/* harmony export */   "getCreateAssociatedTokenInstructionDataCodec": () => (/* binding */ getCreateAssociatedTokenInstructionDataCodec),
/* harmony export */   "getCreateAssociatedTokenInstructionDataDecoder": () => (/* binding */ getCreateAssociatedTokenInstructionDataDecoder),
/* harmony export */   "getCreateAssociatedTokenInstructionDataEncoder": () => (/* binding */ getCreateAssociatedTokenInstructionDataEncoder),
/* harmony export */   "getFreezeAccountDiscriminatorBytes": () => (/* binding */ getFreezeAccountDiscriminatorBytes),
/* harmony export */   "getFreezeAccountInstruction": () => (/* binding */ getFreezeAccountInstruction),
/* harmony export */   "getFreezeAccountInstructionDataCodec": () => (/* binding */ getFreezeAccountInstructionDataCodec),
/* harmony export */   "getFreezeAccountInstructionDataDecoder": () => (/* binding */ getFreezeAccountInstructionDataDecoder),
/* harmony export */   "getFreezeAccountInstructionDataEncoder": () => (/* binding */ getFreezeAccountInstructionDataEncoder),
/* harmony export */   "getGetAccountDataSizeDiscriminatorBytes": () => (/* binding */ getGetAccountDataSizeDiscriminatorBytes),
/* harmony export */   "getGetAccountDataSizeInstruction": () => (/* binding */ getGetAccountDataSizeInstruction),
/* harmony export */   "getGetAccountDataSizeInstructionDataCodec": () => (/* binding */ getGetAccountDataSizeInstructionDataCodec),
/* harmony export */   "getGetAccountDataSizeInstructionDataDecoder": () => (/* binding */ getGetAccountDataSizeInstructionDataDecoder),
/* harmony export */   "getGetAccountDataSizeInstructionDataEncoder": () => (/* binding */ getGetAccountDataSizeInstructionDataEncoder),
/* harmony export */   "getInitializeAccount2DiscriminatorBytes": () => (/* binding */ getInitializeAccount2DiscriminatorBytes),
/* harmony export */   "getInitializeAccount2Instruction": () => (/* binding */ getInitializeAccount2Instruction),
/* harmony export */   "getInitializeAccount2InstructionDataCodec": () => (/* binding */ getInitializeAccount2InstructionDataCodec),
/* harmony export */   "getInitializeAccount2InstructionDataDecoder": () => (/* binding */ getInitializeAccount2InstructionDataDecoder),
/* harmony export */   "getInitializeAccount2InstructionDataEncoder": () => (/* binding */ getInitializeAccount2InstructionDataEncoder),
/* harmony export */   "getInitializeAccount3DiscriminatorBytes": () => (/* binding */ getInitializeAccount3DiscriminatorBytes),
/* harmony export */   "getInitializeAccount3Instruction": () => (/* binding */ getInitializeAccount3Instruction),
/* harmony export */   "getInitializeAccount3InstructionDataCodec": () => (/* binding */ getInitializeAccount3InstructionDataCodec),
/* harmony export */   "getInitializeAccount3InstructionDataDecoder": () => (/* binding */ getInitializeAccount3InstructionDataDecoder),
/* harmony export */   "getInitializeAccount3InstructionDataEncoder": () => (/* binding */ getInitializeAccount3InstructionDataEncoder),
/* harmony export */   "getInitializeAccountDiscriminatorBytes": () => (/* binding */ getInitializeAccountDiscriminatorBytes),
/* harmony export */   "getInitializeAccountInstruction": () => (/* binding */ getInitializeAccountInstruction),
/* harmony export */   "getInitializeAccountInstructionDataCodec": () => (/* binding */ getInitializeAccountInstructionDataCodec),
/* harmony export */   "getInitializeAccountInstructionDataDecoder": () => (/* binding */ getInitializeAccountInstructionDataDecoder),
/* harmony export */   "getInitializeAccountInstructionDataEncoder": () => (/* binding */ getInitializeAccountInstructionDataEncoder),
/* harmony export */   "getInitializeImmutableOwnerDiscriminatorBytes": () => (/* binding */ getInitializeImmutableOwnerDiscriminatorBytes),
/* harmony export */   "getInitializeImmutableOwnerInstruction": () => (/* binding */ getInitializeImmutableOwnerInstruction),
/* harmony export */   "getInitializeImmutableOwnerInstructionDataCodec": () => (/* binding */ getInitializeImmutableOwnerInstructionDataCodec),
/* harmony export */   "getInitializeImmutableOwnerInstructionDataDecoder": () => (/* binding */ getInitializeImmutableOwnerInstructionDataDecoder),
/* harmony export */   "getInitializeImmutableOwnerInstructionDataEncoder": () => (/* binding */ getInitializeImmutableOwnerInstructionDataEncoder),
/* harmony export */   "getInitializeMint2DiscriminatorBytes": () => (/* binding */ getInitializeMint2DiscriminatorBytes),
/* harmony export */   "getInitializeMint2Instruction": () => (/* binding */ getInitializeMint2Instruction),
/* harmony export */   "getInitializeMint2InstructionDataCodec": () => (/* binding */ getInitializeMint2InstructionDataCodec),
/* harmony export */   "getInitializeMint2InstructionDataDecoder": () => (/* binding */ getInitializeMint2InstructionDataDecoder),
/* harmony export */   "getInitializeMint2InstructionDataEncoder": () => (/* binding */ getInitializeMint2InstructionDataEncoder),
/* harmony export */   "getInitializeMintDiscriminatorBytes": () => (/* binding */ getInitializeMintDiscriminatorBytes),
/* harmony export */   "getInitializeMintInstruction": () => (/* binding */ getInitializeMintInstruction),
/* harmony export */   "getInitializeMintInstructionDataCodec": () => (/* binding */ getInitializeMintInstructionDataCodec),
/* harmony export */   "getInitializeMintInstructionDataDecoder": () => (/* binding */ getInitializeMintInstructionDataDecoder),
/* harmony export */   "getInitializeMintInstructionDataEncoder": () => (/* binding */ getInitializeMintInstructionDataEncoder),
/* harmony export */   "getInitializeMultisig2DiscriminatorBytes": () => (/* binding */ getInitializeMultisig2DiscriminatorBytes),
/* harmony export */   "getInitializeMultisig2Instruction": () => (/* binding */ getInitializeMultisig2Instruction),
/* harmony export */   "getInitializeMultisig2InstructionDataCodec": () => (/* binding */ getInitializeMultisig2InstructionDataCodec),
/* harmony export */   "getInitializeMultisig2InstructionDataDecoder": () => (/* binding */ getInitializeMultisig2InstructionDataDecoder),
/* harmony export */   "getInitializeMultisig2InstructionDataEncoder": () => (/* binding */ getInitializeMultisig2InstructionDataEncoder),
/* harmony export */   "getInitializeMultisigDiscriminatorBytes": () => (/* binding */ getInitializeMultisigDiscriminatorBytes),
/* harmony export */   "getInitializeMultisigInstruction": () => (/* binding */ getInitializeMultisigInstruction),
/* harmony export */   "getInitializeMultisigInstructionDataCodec": () => (/* binding */ getInitializeMultisigInstructionDataCodec),
/* harmony export */   "getInitializeMultisigInstructionDataDecoder": () => (/* binding */ getInitializeMultisigInstructionDataDecoder),
/* harmony export */   "getInitializeMultisigInstructionDataEncoder": () => (/* binding */ getInitializeMultisigInstructionDataEncoder),
/* harmony export */   "getMintCodec": () => (/* binding */ getMintCodec),
/* harmony export */   "getMintDecoder": () => (/* binding */ getMintDecoder),
/* harmony export */   "getMintEncoder": () => (/* binding */ getMintEncoder),
/* harmony export */   "getMintSize": () => (/* binding */ getMintSize),
/* harmony export */   "getMintToCheckedDiscriminatorBytes": () => (/* binding */ getMintToCheckedDiscriminatorBytes),
/* harmony export */   "getMintToCheckedInstruction": () => (/* binding */ getMintToCheckedInstruction),
/* harmony export */   "getMintToCheckedInstructionDataCodec": () => (/* binding */ getMintToCheckedInstructionDataCodec),
/* harmony export */   "getMintToCheckedInstructionDataDecoder": () => (/* binding */ getMintToCheckedInstructionDataDecoder),
/* harmony export */   "getMintToCheckedInstructionDataEncoder": () => (/* binding */ getMintToCheckedInstructionDataEncoder),
/* harmony export */   "getMintToDiscriminatorBytes": () => (/* binding */ getMintToDiscriminatorBytes),
/* harmony export */   "getMintToInstruction": () => (/* binding */ getMintToInstruction),
/* harmony export */   "getMintToInstructionDataCodec": () => (/* binding */ getMintToInstructionDataCodec),
/* harmony export */   "getMintToInstructionDataDecoder": () => (/* binding */ getMintToInstructionDataDecoder),
/* harmony export */   "getMintToInstructionDataEncoder": () => (/* binding */ getMintToInstructionDataEncoder),
/* harmony export */   "getMultisigCodec": () => (/* binding */ getMultisigCodec),
/* harmony export */   "getMultisigDecoder": () => (/* binding */ getMultisigDecoder),
/* harmony export */   "getMultisigEncoder": () => (/* binding */ getMultisigEncoder),
/* harmony export */   "getMultisigSize": () => (/* binding */ getMultisigSize),
/* harmony export */   "getRecoverNestedAssociatedTokenDiscriminatorBytes": () => (/* binding */ getRecoverNestedAssociatedTokenDiscriminatorBytes),
/* harmony export */   "getRecoverNestedAssociatedTokenInstruction": () => (/* binding */ getRecoverNestedAssociatedTokenInstruction),
/* harmony export */   "getRecoverNestedAssociatedTokenInstructionAsync": () => (/* binding */ getRecoverNestedAssociatedTokenInstructionAsync),
/* harmony export */   "getRecoverNestedAssociatedTokenInstructionDataCodec": () => (/* binding */ getRecoverNestedAssociatedTokenInstructionDataCodec),
/* harmony export */   "getRecoverNestedAssociatedTokenInstructionDataDecoder": () => (/* binding */ getRecoverNestedAssociatedTokenInstructionDataDecoder),
/* harmony export */   "getRecoverNestedAssociatedTokenInstructionDataEncoder": () => (/* binding */ getRecoverNestedAssociatedTokenInstructionDataEncoder),
/* harmony export */   "getRevokeDiscriminatorBytes": () => (/* binding */ getRevokeDiscriminatorBytes),
/* harmony export */   "getRevokeInstruction": () => (/* binding */ getRevokeInstruction),
/* harmony export */   "getRevokeInstructionDataCodec": () => (/* binding */ getRevokeInstructionDataCodec),
/* harmony export */   "getRevokeInstructionDataDecoder": () => (/* binding */ getRevokeInstructionDataDecoder),
/* harmony export */   "getRevokeInstructionDataEncoder": () => (/* binding */ getRevokeInstructionDataEncoder),
/* harmony export */   "getSetAuthorityDiscriminatorBytes": () => (/* binding */ getSetAuthorityDiscriminatorBytes),
/* harmony export */   "getSetAuthorityInstruction": () => (/* binding */ getSetAuthorityInstruction),
/* harmony export */   "getSetAuthorityInstructionDataCodec": () => (/* binding */ getSetAuthorityInstructionDataCodec),
/* harmony export */   "getSetAuthorityInstructionDataDecoder": () => (/* binding */ getSetAuthorityInstructionDataDecoder),
/* harmony export */   "getSetAuthorityInstructionDataEncoder": () => (/* binding */ getSetAuthorityInstructionDataEncoder),
/* harmony export */   "getSyncNativeDiscriminatorBytes": () => (/* binding */ getSyncNativeDiscriminatorBytes),
/* harmony export */   "getSyncNativeInstruction": () => (/* binding */ getSyncNativeInstruction),
/* harmony export */   "getSyncNativeInstructionDataCodec": () => (/* binding */ getSyncNativeInstructionDataCodec),
/* harmony export */   "getSyncNativeInstructionDataDecoder": () => (/* binding */ getSyncNativeInstructionDataDecoder),
/* harmony export */   "getSyncNativeInstructionDataEncoder": () => (/* binding */ getSyncNativeInstructionDataEncoder),
/* harmony export */   "getThawAccountDiscriminatorBytes": () => (/* binding */ getThawAccountDiscriminatorBytes),
/* harmony export */   "getThawAccountInstruction": () => (/* binding */ getThawAccountInstruction),
/* harmony export */   "getThawAccountInstructionDataCodec": () => (/* binding */ getThawAccountInstructionDataCodec),
/* harmony export */   "getThawAccountInstructionDataDecoder": () => (/* binding */ getThawAccountInstructionDataDecoder),
/* harmony export */   "getThawAccountInstructionDataEncoder": () => (/* binding */ getThawAccountInstructionDataEncoder),
/* harmony export */   "getTokenCodec": () => (/* binding */ getTokenCodec),
/* harmony export */   "getTokenDecoder": () => (/* binding */ getTokenDecoder),
/* harmony export */   "getTokenEncoder": () => (/* binding */ getTokenEncoder),
/* harmony export */   "getTokenErrorMessage": () => (/* binding */ getTokenErrorMessage),
/* harmony export */   "getTokenSize": () => (/* binding */ getTokenSize),
/* harmony export */   "getTransferCheckedDiscriminatorBytes": () => (/* binding */ getTransferCheckedDiscriminatorBytes),
/* harmony export */   "getTransferCheckedInstruction": () => (/* binding */ getTransferCheckedInstruction),
/* harmony export */   "getTransferCheckedInstructionDataCodec": () => (/* binding */ getTransferCheckedInstructionDataCodec),
/* harmony export */   "getTransferCheckedInstructionDataDecoder": () => (/* binding */ getTransferCheckedInstructionDataDecoder),
/* harmony export */   "getTransferCheckedInstructionDataEncoder": () => (/* binding */ getTransferCheckedInstructionDataEncoder),
/* harmony export */   "getTransferDiscriminatorBytes": () => (/* binding */ getTransferDiscriminatorBytes),
/* harmony export */   "getTransferInstruction": () => (/* binding */ getTransferInstruction),
/* harmony export */   "getTransferInstructionDataCodec": () => (/* binding */ getTransferInstructionDataCodec),
/* harmony export */   "getTransferInstructionDataDecoder": () => (/* binding */ getTransferInstructionDataDecoder),
/* harmony export */   "getTransferInstructionDataEncoder": () => (/* binding */ getTransferInstructionDataEncoder),
/* harmony export */   "getUiAmountToAmountDiscriminatorBytes": () => (/* binding */ getUiAmountToAmountDiscriminatorBytes),
/* harmony export */   "getUiAmountToAmountInstruction": () => (/* binding */ getUiAmountToAmountInstruction),
/* harmony export */   "getUiAmountToAmountInstructionDataCodec": () => (/* binding */ getUiAmountToAmountInstructionDataCodec),
/* harmony export */   "getUiAmountToAmountInstructionDataDecoder": () => (/* binding */ getUiAmountToAmountInstructionDataDecoder),
/* harmony export */   "getUiAmountToAmountInstructionDataEncoder": () => (/* binding */ getUiAmountToAmountInstructionDataEncoder),
/* harmony export */   "identifyAssociatedTokenInstruction": () => (/* binding */ identifyAssociatedTokenInstruction),
/* harmony export */   "identifyTokenAccount": () => (/* binding */ identifyTokenAccount),
/* harmony export */   "identifyTokenInstruction": () => (/* binding */ identifyTokenInstruction),
/* harmony export */   "isAssociatedTokenError": () => (/* binding */ isAssociatedTokenError),
/* harmony export */   "isTokenError": () => (/* binding */ isTokenError),
/* harmony export */   "parseAmountToUiAmountInstruction": () => (/* binding */ parseAmountToUiAmountInstruction),
/* harmony export */   "parseApproveCheckedInstruction": () => (/* binding */ parseApproveCheckedInstruction),
/* harmony export */   "parseApproveInstruction": () => (/* binding */ parseApproveInstruction),
/* harmony export */   "parseBurnCheckedInstruction": () => (/* binding */ parseBurnCheckedInstruction),
/* harmony export */   "parseBurnInstruction": () => (/* binding */ parseBurnInstruction),
/* harmony export */   "parseCloseAccountInstruction": () => (/* binding */ parseCloseAccountInstruction),
/* harmony export */   "parseCreateAssociatedTokenIdempotentInstruction": () => (/* binding */ parseCreateAssociatedTokenIdempotentInstruction),
/* harmony export */   "parseCreateAssociatedTokenInstruction": () => (/* binding */ parseCreateAssociatedTokenInstruction),
/* harmony export */   "parseFreezeAccountInstruction": () => (/* binding */ parseFreezeAccountInstruction),
/* harmony export */   "parseGetAccountDataSizeInstruction": () => (/* binding */ parseGetAccountDataSizeInstruction),
/* harmony export */   "parseInitializeAccount2Instruction": () => (/* binding */ parseInitializeAccount2Instruction),
/* harmony export */   "parseInitializeAccount3Instruction": () => (/* binding */ parseInitializeAccount3Instruction),
/* harmony export */   "parseInitializeAccountInstruction": () => (/* binding */ parseInitializeAccountInstruction),
/* harmony export */   "parseInitializeImmutableOwnerInstruction": () => (/* binding */ parseInitializeImmutableOwnerInstruction),
/* harmony export */   "parseInitializeMint2Instruction": () => (/* binding */ parseInitializeMint2Instruction),
/* harmony export */   "parseInitializeMintInstruction": () => (/* binding */ parseInitializeMintInstruction),
/* harmony export */   "parseInitializeMultisig2Instruction": () => (/* binding */ parseInitializeMultisig2Instruction),
/* harmony export */   "parseInitializeMultisigInstruction": () => (/* binding */ parseInitializeMultisigInstruction),
/* harmony export */   "parseMintToCheckedInstruction": () => (/* binding */ parseMintToCheckedInstruction),
/* harmony export */   "parseMintToInstruction": () => (/* binding */ parseMintToInstruction),
/* harmony export */   "parseRecoverNestedAssociatedTokenInstruction": () => (/* binding */ parseRecoverNestedAssociatedTokenInstruction),
/* harmony export */   "parseRevokeInstruction": () => (/* binding */ parseRevokeInstruction),
/* harmony export */   "parseSetAuthorityInstruction": () => (/* binding */ parseSetAuthorityInstruction),
/* harmony export */   "parseSyncNativeInstruction": () => (/* binding */ parseSyncNativeInstruction),
/* harmony export */   "parseThawAccountInstruction": () => (/* binding */ parseThawAccountInstruction),
/* harmony export */   "parseTransferCheckedInstruction": () => (/* binding */ parseTransferCheckedInstruction),
/* harmony export */   "parseTransferInstruction": () => (/* binding */ parseTransferInstruction),
/* harmony export */   "parseUiAmountToAmountInstruction": () => (/* binding */ parseUiAmountToAmountInstruction)
/* harmony export */ });
/* harmony import */ var _solana_kit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @solana/kit */ "./node_modules/@solana/codecs-data-structures/dist/index.browser.mjs");
/* harmony import */ var _solana_kit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @solana/kit */ "./node_modules/@solana/options/dist/index.browser.mjs");
/* harmony import */ var _solana_kit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @solana/kit */ "./node_modules/@solana/addresses/dist/index.browser.mjs");
/* harmony import */ var _solana_kit__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @solana/kit */ "./node_modules/@solana/codecs-numbers/dist/index.browser.mjs");
/* harmony import */ var _solana_kit__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @solana/kit */ "./node_modules/@solana/codecs-core/dist/index.browser.mjs");
/* harmony import */ var _solana_kit__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @solana/kit */ "./node_modules/@solana/accounts/dist/index.browser.mjs");
/* harmony import */ var _solana_kit__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @solana/kit */ "./node_modules/@solana/programs/dist/index.browser.mjs");
/* harmony import */ var _solana_kit__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @solana/kit */ "./node_modules/@solana/instructions/dist/index.browser.mjs");
/* harmony import */ var _solana_kit__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @solana/kit */ "./node_modules/@solana/signers/dist/index.browser.mjs");
/* harmony import */ var _solana_kit__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @solana/kit */ "./node_modules/@solana/codecs-strings/dist/index.browser.mjs");


// src/generated/accounts/mint.ts
function getMintEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructEncoder)([
    [
      "mintAuthority",
      (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getOptionEncoder)((0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.getAddressEncoder)(), {
        prefix: (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU32Encoder)(),
        noneValue: "zeroes"
      })
    ],
    ["supply", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU64Encoder)()],
    ["decimals", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)()],
    ["isInitialized", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getBooleanEncoder)()],
    [
      "freezeAuthority",
      (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getOptionEncoder)((0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.getAddressEncoder)(), {
        prefix: (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU32Encoder)(),
        noneValue: "zeroes"
      })
    ]
  ]);
}
function getMintDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructDecoder)([
    [
      "mintAuthority",
      (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getOptionDecoder)((0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.getAddressDecoder)(), {
        prefix: (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU32Decoder)(),
        noneValue: "zeroes"
      })
    ],
    ["supply", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU64Decoder)()],
    ["decimals", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Decoder)()],
    ["isInitialized", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getBooleanDecoder)()],
    [
      "freezeAuthority",
      (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getOptionDecoder)((0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.getAddressDecoder)(), {
        prefix: (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU32Decoder)(),
        noneValue: "zeroes"
      })
    ]
  ]);
}
function getMintCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.combineCodec)(getMintEncoder(), getMintDecoder());
}
function decodeMint(encodedAccount) {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_5__.decodeAccount)(
    encodedAccount,
    getMintDecoder()
  );
}
async function fetchMint(rpc, address, config) {
  const maybeAccount = await fetchMaybeMint(rpc, address, config);
  (0,_solana_kit__WEBPACK_IMPORTED_MODULE_5__.assertAccountExists)(maybeAccount);
  return maybeAccount;
}
async function fetchMaybeMint(rpc, address, config) {
  const maybeAccount = await (0,_solana_kit__WEBPACK_IMPORTED_MODULE_5__.fetchEncodedAccount)(rpc, address, config);
  return decodeMint(maybeAccount);
}
async function fetchAllMint(rpc, addresses, config) {
  const maybeAccounts = await fetchAllMaybeMint(rpc, addresses, config);
  (0,_solana_kit__WEBPACK_IMPORTED_MODULE_5__.assertAccountsExist)(maybeAccounts);
  return maybeAccounts;
}
async function fetchAllMaybeMint(rpc, addresses, config) {
  const maybeAccounts = await (0,_solana_kit__WEBPACK_IMPORTED_MODULE_5__.fetchEncodedAccounts)(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeMint(maybeAccount));
}
function getMintSize() {
  return 82;
}
function getMultisigEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructEncoder)([
    ["m", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)()],
    ["n", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)()],
    ["isInitialized", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getBooleanEncoder)()],
    ["signers", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getArrayEncoder)((0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.getAddressEncoder)(), { size: 11 })]
  ]);
}
function getMultisigDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructDecoder)([
    ["m", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Decoder)()],
    ["n", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Decoder)()],
    ["isInitialized", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getBooleanDecoder)()],
    ["signers", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getArrayDecoder)((0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.getAddressDecoder)(), { size: 11 })]
  ]);
}
function getMultisigCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.combineCodec)(getMultisigEncoder(), getMultisigDecoder());
}
function decodeMultisig(encodedAccount) {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_5__.decodeAccount)(
    encodedAccount,
    getMultisigDecoder()
  );
}
async function fetchMultisig(rpc, address, config) {
  const maybeAccount = await fetchMaybeMultisig(rpc, address, config);
  (0,_solana_kit__WEBPACK_IMPORTED_MODULE_5__.assertAccountExists)(maybeAccount);
  return maybeAccount;
}
async function fetchMaybeMultisig(rpc, address, config) {
  const maybeAccount = await (0,_solana_kit__WEBPACK_IMPORTED_MODULE_5__.fetchEncodedAccount)(rpc, address, config);
  return decodeMultisig(maybeAccount);
}
async function fetchAllMultisig(rpc, addresses, config) {
  const maybeAccounts = await fetchAllMaybeMultisig(rpc, addresses, config);
  (0,_solana_kit__WEBPACK_IMPORTED_MODULE_5__.assertAccountsExist)(maybeAccounts);
  return maybeAccounts;
}
async function fetchAllMaybeMultisig(rpc, addresses, config) {
  const maybeAccounts = await (0,_solana_kit__WEBPACK_IMPORTED_MODULE_5__.fetchEncodedAccounts)(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeMultisig(maybeAccount));
}
function getMultisigSize() {
  return 355;
}
var AccountState = /* @__PURE__ */ ((AccountState2) => {
  AccountState2[AccountState2["Uninitialized"] = 0] = "Uninitialized";
  AccountState2[AccountState2["Initialized"] = 1] = "Initialized";
  AccountState2[AccountState2["Frozen"] = 2] = "Frozen";
  return AccountState2;
})(AccountState || {});
function getAccountStateEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getEnumEncoder)(AccountState);
}
function getAccountStateDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getEnumDecoder)(AccountState);
}
function getAccountStateCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.combineCodec)(getAccountStateEncoder(), getAccountStateDecoder());
}
var AuthorityType = /* @__PURE__ */ ((AuthorityType2) => {
  AuthorityType2[AuthorityType2["MintTokens"] = 0] = "MintTokens";
  AuthorityType2[AuthorityType2["FreezeAccount"] = 1] = "FreezeAccount";
  AuthorityType2[AuthorityType2["AccountOwner"] = 2] = "AccountOwner";
  AuthorityType2[AuthorityType2["CloseAccount"] = 3] = "CloseAccount";
  return AuthorityType2;
})(AuthorityType || {});
function getAuthorityTypeEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getEnumEncoder)(AuthorityType);
}
function getAuthorityTypeDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getEnumDecoder)(AuthorityType);
}
function getAuthorityTypeCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.combineCodec)(getAuthorityTypeEncoder(), getAuthorityTypeDecoder());
}

// src/generated/accounts/token.ts
function getTokenEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructEncoder)([
    ["mint", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.getAddressEncoder)()],
    ["owner", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.getAddressEncoder)()],
    ["amount", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU64Encoder)()],
    [
      "delegate",
      (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getOptionEncoder)((0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.getAddressEncoder)(), {
        prefix: (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU32Encoder)(),
        noneValue: "zeroes"
      })
    ],
    ["state", getAccountStateEncoder()],
    [
      "isNative",
      (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getOptionEncoder)((0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU64Encoder)(), {
        prefix: (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU32Encoder)(),
        noneValue: "zeroes"
      })
    ],
    ["delegatedAmount", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU64Encoder)()],
    [
      "closeAuthority",
      (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getOptionEncoder)((0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.getAddressEncoder)(), {
        prefix: (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU32Encoder)(),
        noneValue: "zeroes"
      })
    ]
  ]);
}
function getTokenDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructDecoder)([
    ["mint", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.getAddressDecoder)()],
    ["owner", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.getAddressDecoder)()],
    ["amount", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU64Decoder)()],
    [
      "delegate",
      (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getOptionDecoder)((0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.getAddressDecoder)(), {
        prefix: (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU32Decoder)(),
        noneValue: "zeroes"
      })
    ],
    ["state", getAccountStateDecoder()],
    [
      "isNative",
      (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getOptionDecoder)((0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU64Decoder)(), {
        prefix: (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU32Decoder)(),
        noneValue: "zeroes"
      })
    ],
    ["delegatedAmount", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU64Decoder)()],
    [
      "closeAuthority",
      (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getOptionDecoder)((0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.getAddressDecoder)(), {
        prefix: (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU32Decoder)(),
        noneValue: "zeroes"
      })
    ]
  ]);
}
function getTokenCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.combineCodec)(getTokenEncoder(), getTokenDecoder());
}
function decodeToken(encodedAccount) {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_5__.decodeAccount)(
    encodedAccount,
    getTokenDecoder()
  );
}
async function fetchToken(rpc, address, config) {
  const maybeAccount = await fetchMaybeToken(rpc, address, config);
  (0,_solana_kit__WEBPACK_IMPORTED_MODULE_5__.assertAccountExists)(maybeAccount);
  return maybeAccount;
}
async function fetchMaybeToken(rpc, address, config) {
  const maybeAccount = await (0,_solana_kit__WEBPACK_IMPORTED_MODULE_5__.fetchEncodedAccount)(rpc, address, config);
  return decodeToken(maybeAccount);
}
async function fetchAllToken(rpc, addresses, config) {
  const maybeAccounts = await fetchAllMaybeToken(rpc, addresses, config);
  (0,_solana_kit__WEBPACK_IMPORTED_MODULE_5__.assertAccountsExist)(maybeAccounts);
  return maybeAccounts;
}
async function fetchAllMaybeToken(rpc, addresses, config) {
  const maybeAccounts = await (0,_solana_kit__WEBPACK_IMPORTED_MODULE_5__.fetchEncodedAccounts)(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeToken(maybeAccount));
}
function getTokenSize() {
  return 165;
}
var ASSOCIATED_TOKEN_PROGRAM_ADDRESS = "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL";
var AssociatedTokenInstruction = /* @__PURE__ */ ((AssociatedTokenInstruction2) => {
  AssociatedTokenInstruction2[AssociatedTokenInstruction2["CreateAssociatedToken"] = 0] = "CreateAssociatedToken";
  AssociatedTokenInstruction2[AssociatedTokenInstruction2["CreateAssociatedTokenIdempotent"] = 1] = "CreateAssociatedTokenIdempotent";
  AssociatedTokenInstruction2[AssociatedTokenInstruction2["RecoverNestedAssociatedToken"] = 2] = "RecoverNestedAssociatedToken";
  return AssociatedTokenInstruction2;
})(AssociatedTokenInstruction || {});
function identifyAssociatedTokenInstruction(instruction) {
  const data = "data" in instruction ? instruction.data : instruction;
  if ((0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.containsBytes)(data, (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(0), 0)) {
    return 0 /* CreateAssociatedToken */;
  }
  if ((0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.containsBytes)(data, (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(1), 0)) {
    return 1 /* CreateAssociatedTokenIdempotent */;
  }
  if ((0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.containsBytes)(data, (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(2), 0)) {
    return 2 /* RecoverNestedAssociatedToken */;
  }
  throw new Error(
    "The provided instruction could not be identified as a associatedToken instruction."
  );
}
var TOKEN_PROGRAM_ADDRESS = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA";
var TokenAccount = /* @__PURE__ */ ((TokenAccount2) => {
  TokenAccount2[TokenAccount2["Mint"] = 0] = "Mint";
  TokenAccount2[TokenAccount2["Token"] = 1] = "Token";
  TokenAccount2[TokenAccount2["Multisig"] = 2] = "Multisig";
  return TokenAccount2;
})(TokenAccount || {});
function identifyTokenAccount(account) {
  const data = "data" in account ? account.data : account;
  if (data.length === 82) {
    return 0 /* Mint */;
  }
  if (data.length === 165) {
    return 1 /* Token */;
  }
  if (data.length === 355) {
    return 2 /* Multisig */;
  }
  throw new Error(
    "The provided account could not be identified as a token account."
  );
}
var TokenInstruction = /* @__PURE__ */ ((TokenInstruction2) => {
  TokenInstruction2[TokenInstruction2["InitializeMint"] = 0] = "InitializeMint";
  TokenInstruction2[TokenInstruction2["InitializeAccount"] = 1] = "InitializeAccount";
  TokenInstruction2[TokenInstruction2["InitializeMultisig"] = 2] = "InitializeMultisig";
  TokenInstruction2[TokenInstruction2["Transfer"] = 3] = "Transfer";
  TokenInstruction2[TokenInstruction2["Approve"] = 4] = "Approve";
  TokenInstruction2[TokenInstruction2["Revoke"] = 5] = "Revoke";
  TokenInstruction2[TokenInstruction2["SetAuthority"] = 6] = "SetAuthority";
  TokenInstruction2[TokenInstruction2["MintTo"] = 7] = "MintTo";
  TokenInstruction2[TokenInstruction2["Burn"] = 8] = "Burn";
  TokenInstruction2[TokenInstruction2["CloseAccount"] = 9] = "CloseAccount";
  TokenInstruction2[TokenInstruction2["FreezeAccount"] = 10] = "FreezeAccount";
  TokenInstruction2[TokenInstruction2["ThawAccount"] = 11] = "ThawAccount";
  TokenInstruction2[TokenInstruction2["TransferChecked"] = 12] = "TransferChecked";
  TokenInstruction2[TokenInstruction2["ApproveChecked"] = 13] = "ApproveChecked";
  TokenInstruction2[TokenInstruction2["MintToChecked"] = 14] = "MintToChecked";
  TokenInstruction2[TokenInstruction2["BurnChecked"] = 15] = "BurnChecked";
  TokenInstruction2[TokenInstruction2["InitializeAccount2"] = 16] = "InitializeAccount2";
  TokenInstruction2[TokenInstruction2["SyncNative"] = 17] = "SyncNative";
  TokenInstruction2[TokenInstruction2["InitializeAccount3"] = 18] = "InitializeAccount3";
  TokenInstruction2[TokenInstruction2["InitializeMultisig2"] = 19] = "InitializeMultisig2";
  TokenInstruction2[TokenInstruction2["InitializeMint2"] = 20] = "InitializeMint2";
  TokenInstruction2[TokenInstruction2["GetAccountDataSize"] = 21] = "GetAccountDataSize";
  TokenInstruction2[TokenInstruction2["InitializeImmutableOwner"] = 22] = "InitializeImmutableOwner";
  TokenInstruction2[TokenInstruction2["AmountToUiAmount"] = 23] = "AmountToUiAmount";
  TokenInstruction2[TokenInstruction2["UiAmountToAmount"] = 24] = "UiAmountToAmount";
  return TokenInstruction2;
})(TokenInstruction || {});
function identifyTokenInstruction(instruction) {
  const data = "data" in instruction ? instruction.data : instruction;
  if ((0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.containsBytes)(data, (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(0), 0)) {
    return 0 /* InitializeMint */;
  }
  if ((0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.containsBytes)(data, (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(1), 0)) {
    return 1 /* InitializeAccount */;
  }
  if ((0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.containsBytes)(data, (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(2), 0)) {
    return 2 /* InitializeMultisig */;
  }
  if ((0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.containsBytes)(data, (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(3), 0)) {
    return 3 /* Transfer */;
  }
  if ((0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.containsBytes)(data, (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(4), 0)) {
    return 4 /* Approve */;
  }
  if ((0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.containsBytes)(data, (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(5), 0)) {
    return 5 /* Revoke */;
  }
  if ((0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.containsBytes)(data, (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(6), 0)) {
    return 6 /* SetAuthority */;
  }
  if ((0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.containsBytes)(data, (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(7), 0)) {
    return 7 /* MintTo */;
  }
  if ((0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.containsBytes)(data, (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(8), 0)) {
    return 8 /* Burn */;
  }
  if ((0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.containsBytes)(data, (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(9), 0)) {
    return 9 /* CloseAccount */;
  }
  if ((0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.containsBytes)(data, (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(10), 0)) {
    return 10 /* FreezeAccount */;
  }
  if ((0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.containsBytes)(data, (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(11), 0)) {
    return 11 /* ThawAccount */;
  }
  if ((0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.containsBytes)(data, (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(12), 0)) {
    return 12 /* TransferChecked */;
  }
  if ((0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.containsBytes)(data, (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(13), 0)) {
    return 13 /* ApproveChecked */;
  }
  if ((0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.containsBytes)(data, (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(14), 0)) {
    return 14 /* MintToChecked */;
  }
  if ((0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.containsBytes)(data, (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(15), 0)) {
    return 15 /* BurnChecked */;
  }
  if ((0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.containsBytes)(data, (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(16), 0)) {
    return 16 /* InitializeAccount2 */;
  }
  if ((0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.containsBytes)(data, (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(17), 0)) {
    return 17 /* SyncNative */;
  }
  if ((0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.containsBytes)(data, (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(18), 0)) {
    return 18 /* InitializeAccount3 */;
  }
  if ((0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.containsBytes)(data, (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(19), 0)) {
    return 19 /* InitializeMultisig2 */;
  }
  if ((0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.containsBytes)(data, (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(20), 0)) {
    return 20 /* InitializeMint2 */;
  }
  if ((0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.containsBytes)(data, (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(21), 0)) {
    return 21 /* GetAccountDataSize */;
  }
  if ((0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.containsBytes)(data, (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(22), 0)) {
    return 22 /* InitializeImmutableOwner */;
  }
  if ((0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.containsBytes)(data, (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(23), 0)) {
    return 23 /* AmountToUiAmount */;
  }
  if ((0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.containsBytes)(data, (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(24), 0)) {
    return 24 /* UiAmountToAmount */;
  }
  throw new Error(
    "The provided instruction could not be identified as a token instruction."
  );
}

// src/generated/errors/associatedToken.ts
var ASSOCIATED_TOKEN_ERROR__INVALID_OWNER = 0;
var associatedTokenErrorMessages;
if (true) {
  associatedTokenErrorMessages = {
    [ASSOCIATED_TOKEN_ERROR__INVALID_OWNER]: `Associated token account owner does not match address derivation`
  };
}
function getAssociatedTokenErrorMessage(code) {
  if (true) {
    return associatedTokenErrorMessages[code];
  }
  return "Error message not available in production bundles.";
}
function isAssociatedTokenError(error, transactionMessage, code) {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_6__.isProgramError)(
    error,
    transactionMessage,
    ASSOCIATED_TOKEN_PROGRAM_ADDRESS,
    code
  );
}
var TOKEN_ERROR__NOT_RENT_EXEMPT = 0;
var TOKEN_ERROR__INSUFFICIENT_FUNDS = 1;
var TOKEN_ERROR__INVALID_MINT = 2;
var TOKEN_ERROR__MINT_MISMATCH = 3;
var TOKEN_ERROR__OWNER_MISMATCH = 4;
var TOKEN_ERROR__FIXED_SUPPLY = 5;
var TOKEN_ERROR__ALREADY_IN_USE = 6;
var TOKEN_ERROR__INVALID_NUMBER_OF_PROVIDED_SIGNERS = 7;
var TOKEN_ERROR__INVALID_NUMBER_OF_REQUIRED_SIGNERS = 8;
var TOKEN_ERROR__UNINITIALIZED_STATE = 9;
var TOKEN_ERROR__NATIVE_NOT_SUPPORTED = 10;
var TOKEN_ERROR__NON_NATIVE_HAS_BALANCE = 11;
var TOKEN_ERROR__INVALID_INSTRUCTION = 12;
var TOKEN_ERROR__INVALID_STATE = 13;
var TOKEN_ERROR__OVERFLOW = 14;
var TOKEN_ERROR__AUTHORITY_TYPE_NOT_SUPPORTED = 15;
var TOKEN_ERROR__MINT_CANNOT_FREEZE = 16;
var TOKEN_ERROR__ACCOUNT_FROZEN = 17;
var TOKEN_ERROR__MINT_DECIMALS_MISMATCH = 18;
var TOKEN_ERROR__NON_NATIVE_NOT_SUPPORTED = 19;
var tokenErrorMessages;
if (true) {
  tokenErrorMessages = {
    [TOKEN_ERROR__ACCOUNT_FROZEN]: `Account is frozen`,
    [TOKEN_ERROR__ALREADY_IN_USE]: `Already in use`,
    [TOKEN_ERROR__AUTHORITY_TYPE_NOT_SUPPORTED]: `Account does not support specified authority type`,
    [TOKEN_ERROR__FIXED_SUPPLY]: `Fixed supply`,
    [TOKEN_ERROR__INSUFFICIENT_FUNDS]: `Insufficient funds`,
    [TOKEN_ERROR__INVALID_INSTRUCTION]: `Invalid instruction`,
    [TOKEN_ERROR__INVALID_MINT]: `Invalid Mint`,
    [TOKEN_ERROR__INVALID_NUMBER_OF_PROVIDED_SIGNERS]: `Invalid number of provided signers`,
    [TOKEN_ERROR__INVALID_NUMBER_OF_REQUIRED_SIGNERS]: `Invalid number of required signers`,
    [TOKEN_ERROR__INVALID_STATE]: `State is invalid for requested operation`,
    [TOKEN_ERROR__MINT_CANNOT_FREEZE]: `This token mint cannot freeze accounts`,
    [TOKEN_ERROR__MINT_DECIMALS_MISMATCH]: `The provided decimals value different from the Mint decimals`,
    [TOKEN_ERROR__MINT_MISMATCH]: `Account not associated with this Mint`,
    [TOKEN_ERROR__NATIVE_NOT_SUPPORTED]: `Instruction does not support native tokens`,
    [TOKEN_ERROR__NON_NATIVE_HAS_BALANCE]: `Non-native account can only be closed if its balance is zero`,
    [TOKEN_ERROR__NON_NATIVE_NOT_SUPPORTED]: `Instruction does not support non-native tokens`,
    [TOKEN_ERROR__NOT_RENT_EXEMPT]: `Lamport balance below rent-exempt threshold`,
    [TOKEN_ERROR__OVERFLOW]: `Operation overflowed`,
    [TOKEN_ERROR__OWNER_MISMATCH]: `Owner does not match`,
    [TOKEN_ERROR__UNINITIALIZED_STATE]: `State is unititialized`
  };
}
function getTokenErrorMessage(code) {
  if (true) {
    return tokenErrorMessages[code];
  }
  return "Error message not available in production bundles.";
}
function isTokenError(error, transactionMessage, code) {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_6__.isProgramError)(
    error,
    transactionMessage,
    TOKEN_PROGRAM_ADDRESS,
    code
  );
}
function expectAddress(value) {
  if (!value) {
    throw new Error("Expected a Address.");
  }
  if (typeof value === "object" && "address" in value) {
    return value.address;
  }
  if (Array.isArray(value)) {
    return value[0];
  }
  return value;
}
function getAccountMetaFactory(programAddress, optionalAccountStrategy) {
  return (account) => {
    if (!account.value) {
      return Object.freeze({
        address: programAddress,
        role: _solana_kit__WEBPACK_IMPORTED_MODULE_7__.AccountRole.READONLY
      });
    }
    const writableRole = account.isWritable ? _solana_kit__WEBPACK_IMPORTED_MODULE_7__.AccountRole.WRITABLE : _solana_kit__WEBPACK_IMPORTED_MODULE_7__.AccountRole.READONLY;
    return Object.freeze({
      address: expectAddress(account.value),
      role: isTransactionSigner(account.value) ? (0,_solana_kit__WEBPACK_IMPORTED_MODULE_7__.upgradeRoleToSigner)(writableRole) : writableRole,
      ...isTransactionSigner(account.value) ? { signer: account.value } : {}
    });
  };
}
function isTransactionSigner(value) {
  return !!value && typeof value === "object" && "address" in value && (0,_solana_kit__WEBPACK_IMPORTED_MODULE_8__.isTransactionSigner)(value);
}

// src/generated/instructions/amountToUiAmount.ts
var AMOUNT_TO_UI_AMOUNT_DISCRIMINATOR = 23;
function getAmountToUiAmountDiscriminatorBytes() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(AMOUNT_TO_UI_AMOUNT_DISCRIMINATOR);
}
function getAmountToUiAmountInstructionDataEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.transformEncoder)(
    (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructEncoder)([
      ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)()],
      ["amount", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU64Encoder)()]
    ]),
    (value) => ({ ...value, discriminator: AMOUNT_TO_UI_AMOUNT_DISCRIMINATOR })
  );
}
function getAmountToUiAmountInstructionDataDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructDecoder)([
    ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Decoder)()],
    ["amount", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU64Decoder)()]
  ]);
}
function getAmountToUiAmountInstructionDataCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.combineCodec)(
    getAmountToUiAmountInstructionDataEncoder(),
    getAmountToUiAmountInstructionDataDecoder()
  );
}
function getAmountToUiAmountInstruction(input, config) {
  const programAddress = config?.programAddress ?? TOKEN_PROGRAM_ADDRESS;
  const originalAccounts = {
    mint: { value: input.mint ?? null, isWritable: false }
  };
  const accounts = originalAccounts;
  const args = { ...input };
  const getAccountMeta = getAccountMetaFactory(programAddress);
  const instruction = {
    accounts: [getAccountMeta(accounts.mint)],
    programAddress,
    data: getAmountToUiAmountInstructionDataEncoder().encode(
      args
    )
  };
  return instruction;
}
function parseAmountToUiAmountInstruction(instruction) {
  if (instruction.accounts.length < 1) {
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      mint: getNextAccount()
    },
    data: getAmountToUiAmountInstructionDataDecoder().decode(instruction.data)
  };
}
var APPROVE_DISCRIMINATOR = 4;
function getApproveDiscriminatorBytes() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(APPROVE_DISCRIMINATOR);
}
function getApproveInstructionDataEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.transformEncoder)(
    (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructEncoder)([
      ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)()],
      ["amount", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU64Encoder)()]
    ]),
    (value) => ({ ...value, discriminator: APPROVE_DISCRIMINATOR })
  );
}
function getApproveInstructionDataDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructDecoder)([
    ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Decoder)()],
    ["amount", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU64Decoder)()]
  ]);
}
function getApproveInstructionDataCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.combineCodec)(
    getApproveInstructionDataEncoder(),
    getApproveInstructionDataDecoder()
  );
}
function getApproveInstruction(input, config) {
  const programAddress = config?.programAddress ?? TOKEN_PROGRAM_ADDRESS;
  const originalAccounts = {
    source: { value: input.source ?? null, isWritable: true },
    delegate: { value: input.delegate ?? null, isWritable: false },
    owner: { value: input.owner ?? null, isWritable: false }
  };
  const accounts = originalAccounts;
  const args = { ...input };
  const remainingAccounts = (args.multiSigners ?? []).map(
    (signer) => ({
      address: signer.address,
      role: _solana_kit__WEBPACK_IMPORTED_MODULE_7__.AccountRole.READONLY_SIGNER,
      signer
    })
  );
  const getAccountMeta = getAccountMetaFactory(programAddress);
  const instruction = {
    accounts: [
      getAccountMeta(accounts.source),
      getAccountMeta(accounts.delegate),
      getAccountMeta(accounts.owner),
      ...remainingAccounts
    ],
    programAddress,
    data: getApproveInstructionDataEncoder().encode(
      args
    )
  };
  return instruction;
}
function parseApproveInstruction(instruction) {
  if (instruction.accounts.length < 3) {
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      source: getNextAccount(),
      delegate: getNextAccount(),
      owner: getNextAccount()
    },
    data: getApproveInstructionDataDecoder().decode(instruction.data)
  };
}
var APPROVE_CHECKED_DISCRIMINATOR = 13;
function getApproveCheckedDiscriminatorBytes() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(APPROVE_CHECKED_DISCRIMINATOR);
}
function getApproveCheckedInstructionDataEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.transformEncoder)(
    (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructEncoder)([
      ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)()],
      ["amount", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU64Encoder)()],
      ["decimals", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)()]
    ]),
    (value) => ({ ...value, discriminator: APPROVE_CHECKED_DISCRIMINATOR })
  );
}
function getApproveCheckedInstructionDataDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructDecoder)([
    ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Decoder)()],
    ["amount", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU64Decoder)()],
    ["decimals", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Decoder)()]
  ]);
}
function getApproveCheckedInstructionDataCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.combineCodec)(
    getApproveCheckedInstructionDataEncoder(),
    getApproveCheckedInstructionDataDecoder()
  );
}
function getApproveCheckedInstruction(input, config) {
  const programAddress = config?.programAddress ?? TOKEN_PROGRAM_ADDRESS;
  const originalAccounts = {
    source: { value: input.source ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    delegate: { value: input.delegate ?? null, isWritable: false },
    owner: { value: input.owner ?? null, isWritable: false }
  };
  const accounts = originalAccounts;
  const args = { ...input };
  const remainingAccounts = (args.multiSigners ?? []).map(
    (signer) => ({
      address: signer.address,
      role: _solana_kit__WEBPACK_IMPORTED_MODULE_7__.AccountRole.READONLY_SIGNER,
      signer
    })
  );
  const getAccountMeta = getAccountMetaFactory(programAddress);
  const instruction = {
    accounts: [
      getAccountMeta(accounts.source),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.delegate),
      getAccountMeta(accounts.owner),
      ...remainingAccounts
    ],
    programAddress,
    data: getApproveCheckedInstructionDataEncoder().encode(
      args
    )
  };
  return instruction;
}
function parseApproveCheckedInstruction(instruction) {
  if (instruction.accounts.length < 4) {
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      source: getNextAccount(),
      mint: getNextAccount(),
      delegate: getNextAccount(),
      owner: getNextAccount()
    },
    data: getApproveCheckedInstructionDataDecoder().decode(instruction.data)
  };
}
var BURN_DISCRIMINATOR = 8;
function getBurnDiscriminatorBytes() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(BURN_DISCRIMINATOR);
}
function getBurnInstructionDataEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.transformEncoder)(
    (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructEncoder)([
      ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)()],
      ["amount", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU64Encoder)()]
    ]),
    (value) => ({ ...value, discriminator: BURN_DISCRIMINATOR })
  );
}
function getBurnInstructionDataDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructDecoder)([
    ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Decoder)()],
    ["amount", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU64Decoder)()]
  ]);
}
function getBurnInstructionDataCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.combineCodec)(
    getBurnInstructionDataEncoder(),
    getBurnInstructionDataDecoder()
  );
}
function getBurnInstruction(input, config) {
  const programAddress = config?.programAddress ?? TOKEN_PROGRAM_ADDRESS;
  const originalAccounts = {
    account: { value: input.account ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false }
  };
  const accounts = originalAccounts;
  const args = { ...input };
  const remainingAccounts = (args.multiSigners ?? []).map(
    (signer) => ({
      address: signer.address,
      role: _solana_kit__WEBPACK_IMPORTED_MODULE_7__.AccountRole.READONLY_SIGNER,
      signer
    })
  );
  const getAccountMeta = getAccountMetaFactory(programAddress);
  const instruction = {
    accounts: [
      getAccountMeta(accounts.account),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.authority),
      ...remainingAccounts
    ],
    programAddress,
    data: getBurnInstructionDataEncoder().encode(
      args
    )
  };
  return instruction;
}
function parseBurnInstruction(instruction) {
  if (instruction.accounts.length < 3) {
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      account: getNextAccount(),
      mint: getNextAccount(),
      authority: getNextAccount()
    },
    data: getBurnInstructionDataDecoder().decode(instruction.data)
  };
}
var BURN_CHECKED_DISCRIMINATOR = 15;
function getBurnCheckedDiscriminatorBytes() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(BURN_CHECKED_DISCRIMINATOR);
}
function getBurnCheckedInstructionDataEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.transformEncoder)(
    (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructEncoder)([
      ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)()],
      ["amount", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU64Encoder)()],
      ["decimals", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)()]
    ]),
    (value) => ({ ...value, discriminator: BURN_CHECKED_DISCRIMINATOR })
  );
}
function getBurnCheckedInstructionDataDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructDecoder)([
    ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Decoder)()],
    ["amount", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU64Decoder)()],
    ["decimals", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Decoder)()]
  ]);
}
function getBurnCheckedInstructionDataCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.combineCodec)(
    getBurnCheckedInstructionDataEncoder(),
    getBurnCheckedInstructionDataDecoder()
  );
}
function getBurnCheckedInstruction(input, config) {
  const programAddress = config?.programAddress ?? TOKEN_PROGRAM_ADDRESS;
  const originalAccounts = {
    account: { value: input.account ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false }
  };
  const accounts = originalAccounts;
  const args = { ...input };
  const remainingAccounts = (args.multiSigners ?? []).map(
    (signer) => ({
      address: signer.address,
      role: _solana_kit__WEBPACK_IMPORTED_MODULE_7__.AccountRole.READONLY_SIGNER,
      signer
    })
  );
  const getAccountMeta = getAccountMetaFactory(programAddress);
  const instruction = {
    accounts: [
      getAccountMeta(accounts.account),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.authority),
      ...remainingAccounts
    ],
    programAddress,
    data: getBurnCheckedInstructionDataEncoder().encode(
      args
    )
  };
  return instruction;
}
function parseBurnCheckedInstruction(instruction) {
  if (instruction.accounts.length < 3) {
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      account: getNextAccount(),
      mint: getNextAccount(),
      authority: getNextAccount()
    },
    data: getBurnCheckedInstructionDataDecoder().decode(instruction.data)
  };
}
var CLOSE_ACCOUNT_DISCRIMINATOR = 9;
function getCloseAccountDiscriminatorBytes() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(CLOSE_ACCOUNT_DISCRIMINATOR);
}
function getCloseAccountInstructionDataEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.transformEncoder)(
    (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructEncoder)([["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)()]]),
    (value) => ({ ...value, discriminator: CLOSE_ACCOUNT_DISCRIMINATOR })
  );
}
function getCloseAccountInstructionDataDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructDecoder)([["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Decoder)()]]);
}
function getCloseAccountInstructionDataCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.combineCodec)(
    getCloseAccountInstructionDataEncoder(),
    getCloseAccountInstructionDataDecoder()
  );
}
function getCloseAccountInstruction(input, config) {
  const programAddress = config?.programAddress ?? TOKEN_PROGRAM_ADDRESS;
  const originalAccounts = {
    account: { value: input.account ?? null, isWritable: true },
    destination: { value: input.destination ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: false }
  };
  const accounts = originalAccounts;
  const args = { ...input };
  const remainingAccounts = (args.multiSigners ?? []).map(
    (signer) => ({
      address: signer.address,
      role: _solana_kit__WEBPACK_IMPORTED_MODULE_7__.AccountRole.READONLY_SIGNER,
      signer
    })
  );
  const getAccountMeta = getAccountMetaFactory(programAddress);
  const instruction = {
    accounts: [
      getAccountMeta(accounts.account),
      getAccountMeta(accounts.destination),
      getAccountMeta(accounts.owner),
      ...remainingAccounts
    ],
    programAddress,
    data: getCloseAccountInstructionDataEncoder().encode({})
  };
  return instruction;
}
function parseCloseAccountInstruction(instruction) {
  if (instruction.accounts.length < 3) {
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      account: getNextAccount(),
      destination: getNextAccount(),
      owner: getNextAccount()
    },
    data: getCloseAccountInstructionDataDecoder().decode(instruction.data)
  };
}
async function findAssociatedTokenPda(seeds, config = {}) {
  const {
    programAddress = "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
  } = config;
  return await (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.getProgramDerivedAddress)({
    programAddress,
    seeds: [
      (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.getAddressEncoder)().encode(seeds.owner),
      (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.getAddressEncoder)().encode(seeds.tokenProgram),
      (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.getAddressEncoder)().encode(seeds.mint)
    ]
  });
}

// src/generated/instructions/createAssociatedToken.ts
var CREATE_ASSOCIATED_TOKEN_DISCRIMINATOR = 0;
function getCreateAssociatedTokenDiscriminatorBytes() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(CREATE_ASSOCIATED_TOKEN_DISCRIMINATOR);
}
function getCreateAssociatedTokenInstructionDataEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.transformEncoder)(
    (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructEncoder)([["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)()]]),
    (value) => ({
      ...value,
      discriminator: CREATE_ASSOCIATED_TOKEN_DISCRIMINATOR
    })
  );
}
function getCreateAssociatedTokenInstructionDataDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructDecoder)([["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Decoder)()]]);
}
function getCreateAssociatedTokenInstructionDataCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.combineCodec)(
    getCreateAssociatedTokenInstructionDataEncoder(),
    getCreateAssociatedTokenInstructionDataDecoder()
  );
}
async function getCreateAssociatedTokenInstructionAsync(input, config) {
  const programAddress = config?.programAddress ?? ASSOCIATED_TOKEN_PROGRAM_ADDRESS;
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    ata: { value: input.ata ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false }
  };
  const accounts = originalAccounts;
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA";
  }
  if (!accounts.ata.value) {
    accounts.ata.value = await findAssociatedTokenPda({
      owner: expectAddress(accounts.owner.value),
      tokenProgram: expectAddress(accounts.tokenProgram.value),
      mint: expectAddress(accounts.mint.value)
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value = "11111111111111111111111111111111";
  }
  const getAccountMeta = getAccountMetaFactory(programAddress);
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.ata),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram)
    ],
    programAddress,
    data: getCreateAssociatedTokenInstructionDataEncoder().encode({})
  };
  return instruction;
}
function getCreateAssociatedTokenInstruction(input, config) {
  const programAddress = config?.programAddress ?? ASSOCIATED_TOKEN_PROGRAM_ADDRESS;
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    ata: { value: input.ata ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false }
  };
  const accounts = originalAccounts;
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA";
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value = "11111111111111111111111111111111";
  }
  const getAccountMeta = getAccountMetaFactory(programAddress);
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.ata),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram)
    ],
    programAddress,
    data: getCreateAssociatedTokenInstructionDataEncoder().encode({})
  };
  return instruction;
}
function parseCreateAssociatedTokenInstruction(instruction) {
  if (instruction.accounts.length < 6) {
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      ata: getNextAccount(),
      owner: getNextAccount(),
      mint: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount()
    },
    data: getCreateAssociatedTokenInstructionDataDecoder().decode(
      instruction.data
    )
  };
}
var CREATE_ASSOCIATED_TOKEN_IDEMPOTENT_DISCRIMINATOR = 1;
function getCreateAssociatedTokenIdempotentDiscriminatorBytes() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(
    CREATE_ASSOCIATED_TOKEN_IDEMPOTENT_DISCRIMINATOR
  );
}
function getCreateAssociatedTokenIdempotentInstructionDataEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.transformEncoder)(
    (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructEncoder)([["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)()]]),
    (value) => ({
      ...value,
      discriminator: CREATE_ASSOCIATED_TOKEN_IDEMPOTENT_DISCRIMINATOR
    })
  );
}
function getCreateAssociatedTokenIdempotentInstructionDataDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructDecoder)([["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Decoder)()]]);
}
function getCreateAssociatedTokenIdempotentInstructionDataCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.combineCodec)(
    getCreateAssociatedTokenIdempotentInstructionDataEncoder(),
    getCreateAssociatedTokenIdempotentInstructionDataDecoder()
  );
}
async function getCreateAssociatedTokenIdempotentInstructionAsync(input, config) {
  const programAddress = config?.programAddress ?? ASSOCIATED_TOKEN_PROGRAM_ADDRESS;
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    ata: { value: input.ata ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false }
  };
  const accounts = originalAccounts;
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA";
  }
  if (!accounts.ata.value) {
    accounts.ata.value = await findAssociatedTokenPda({
      owner: expectAddress(accounts.owner.value),
      tokenProgram: expectAddress(accounts.tokenProgram.value),
      mint: expectAddress(accounts.mint.value)
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value = "11111111111111111111111111111111";
  }
  const getAccountMeta = getAccountMetaFactory(programAddress);
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.ata),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram)
    ],
    programAddress,
    data: getCreateAssociatedTokenIdempotentInstructionDataEncoder().encode({})
  };
  return instruction;
}
function getCreateAssociatedTokenIdempotentInstruction(input, config) {
  const programAddress = config?.programAddress ?? ASSOCIATED_TOKEN_PROGRAM_ADDRESS;
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    ata: { value: input.ata ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false }
  };
  const accounts = originalAccounts;
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA";
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value = "11111111111111111111111111111111";
  }
  const getAccountMeta = getAccountMetaFactory(programAddress);
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.ata),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram)
    ],
    programAddress,
    data: getCreateAssociatedTokenIdempotentInstructionDataEncoder().encode({})
  };
  return instruction;
}
function parseCreateAssociatedTokenIdempotentInstruction(instruction) {
  if (instruction.accounts.length < 6) {
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      ata: getNextAccount(),
      owner: getNextAccount(),
      mint: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount()
    },
    data: getCreateAssociatedTokenIdempotentInstructionDataDecoder().decode(
      instruction.data
    )
  };
}
var FREEZE_ACCOUNT_DISCRIMINATOR = 10;
function getFreezeAccountDiscriminatorBytes() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(FREEZE_ACCOUNT_DISCRIMINATOR);
}
function getFreezeAccountInstructionDataEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.transformEncoder)(
    (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructEncoder)([["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)()]]),
    (value) => ({ ...value, discriminator: FREEZE_ACCOUNT_DISCRIMINATOR })
  );
}
function getFreezeAccountInstructionDataDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructDecoder)([["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Decoder)()]]);
}
function getFreezeAccountInstructionDataCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.combineCodec)(
    getFreezeAccountInstructionDataEncoder(),
    getFreezeAccountInstructionDataDecoder()
  );
}
function getFreezeAccountInstruction(input, config) {
  const programAddress = config?.programAddress ?? TOKEN_PROGRAM_ADDRESS;
  const originalAccounts = {
    account: { value: input.account ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    owner: { value: input.owner ?? null, isWritable: false }
  };
  const accounts = originalAccounts;
  const args = { ...input };
  const remainingAccounts = (args.multiSigners ?? []).map(
    (signer) => ({
      address: signer.address,
      role: _solana_kit__WEBPACK_IMPORTED_MODULE_7__.AccountRole.READONLY_SIGNER,
      signer
    })
  );
  const getAccountMeta = getAccountMetaFactory(programAddress);
  const instruction = {
    accounts: [
      getAccountMeta(accounts.account),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.owner),
      ...remainingAccounts
    ],
    programAddress,
    data: getFreezeAccountInstructionDataEncoder().encode({})
  };
  return instruction;
}
function parseFreezeAccountInstruction(instruction) {
  if (instruction.accounts.length < 3) {
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      account: getNextAccount(),
      mint: getNextAccount(),
      owner: getNextAccount()
    },
    data: getFreezeAccountInstructionDataDecoder().decode(instruction.data)
  };
}
var GET_ACCOUNT_DATA_SIZE_DISCRIMINATOR = 21;
function getGetAccountDataSizeDiscriminatorBytes() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(GET_ACCOUNT_DATA_SIZE_DISCRIMINATOR);
}
function getGetAccountDataSizeInstructionDataEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.transformEncoder)(
    (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructEncoder)([["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)()]]),
    (value) => ({
      ...value,
      discriminator: GET_ACCOUNT_DATA_SIZE_DISCRIMINATOR
    })
  );
}
function getGetAccountDataSizeInstructionDataDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructDecoder)([["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Decoder)()]]);
}
function getGetAccountDataSizeInstructionDataCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.combineCodec)(
    getGetAccountDataSizeInstructionDataEncoder(),
    getGetAccountDataSizeInstructionDataDecoder()
  );
}
function getGetAccountDataSizeInstruction(input, config) {
  const programAddress = config?.programAddress ?? TOKEN_PROGRAM_ADDRESS;
  const originalAccounts = {
    mint: { value: input.mint ?? null, isWritable: false }
  };
  const accounts = originalAccounts;
  const getAccountMeta = getAccountMetaFactory(programAddress);
  const instruction = {
    accounts: [getAccountMeta(accounts.mint)],
    programAddress,
    data: getGetAccountDataSizeInstructionDataEncoder().encode({})
  };
  return instruction;
}
function parseGetAccountDataSizeInstruction(instruction) {
  if (instruction.accounts.length < 1) {
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      mint: getNextAccount()
    },
    data: getGetAccountDataSizeInstructionDataDecoder().decode(
      instruction.data
    )
  };
}
var INITIALIZE_ACCOUNT_DISCRIMINATOR = 1;
function getInitializeAccountDiscriminatorBytes() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(INITIALIZE_ACCOUNT_DISCRIMINATOR);
}
function getInitializeAccountInstructionDataEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.transformEncoder)(
    (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructEncoder)([["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)()]]),
    (value) => ({ ...value, discriminator: INITIALIZE_ACCOUNT_DISCRIMINATOR })
  );
}
function getInitializeAccountInstructionDataDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructDecoder)([["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Decoder)()]]);
}
function getInitializeAccountInstructionDataCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.combineCodec)(
    getInitializeAccountInstructionDataEncoder(),
    getInitializeAccountInstructionDataDecoder()
  );
}
function getInitializeAccountInstruction(input, config) {
  const programAddress = config?.programAddress ?? TOKEN_PROGRAM_ADDRESS;
  const originalAccounts = {
    account: { value: input.account ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    owner: { value: input.owner ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false }
  };
  const accounts = originalAccounts;
  if (!accounts.rent.value) {
    accounts.rent.value = "SysvarRent111111111111111111111111111111111";
  }
  const getAccountMeta = getAccountMetaFactory(programAddress);
  const instruction = {
    accounts: [
      getAccountMeta(accounts.account),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.rent)
    ],
    programAddress,
    data: getInitializeAccountInstructionDataEncoder().encode({})
  };
  return instruction;
}
function parseInitializeAccountInstruction(instruction) {
  if (instruction.accounts.length < 4) {
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      account: getNextAccount(),
      mint: getNextAccount(),
      owner: getNextAccount(),
      rent: getNextAccount()
    },
    data: getInitializeAccountInstructionDataDecoder().decode(instruction.data)
  };
}
var INITIALIZE_ACCOUNT2_DISCRIMINATOR = 16;
function getInitializeAccount2DiscriminatorBytes() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(INITIALIZE_ACCOUNT2_DISCRIMINATOR);
}
function getInitializeAccount2InstructionDataEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.transformEncoder)(
    (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructEncoder)([
      ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)()],
      ["owner", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.getAddressEncoder)()]
    ]),
    (value) => ({ ...value, discriminator: INITIALIZE_ACCOUNT2_DISCRIMINATOR })
  );
}
function getInitializeAccount2InstructionDataDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructDecoder)([
    ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Decoder)()],
    ["owner", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.getAddressDecoder)()]
  ]);
}
function getInitializeAccount2InstructionDataCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.combineCodec)(
    getInitializeAccount2InstructionDataEncoder(),
    getInitializeAccount2InstructionDataDecoder()
  );
}
function getInitializeAccount2Instruction(input, config) {
  const programAddress = config?.programAddress ?? TOKEN_PROGRAM_ADDRESS;
  const originalAccounts = {
    account: { value: input.account ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false }
  };
  const accounts = originalAccounts;
  const args = { ...input };
  if (!accounts.rent.value) {
    accounts.rent.value = "SysvarRent111111111111111111111111111111111";
  }
  const getAccountMeta = getAccountMetaFactory(programAddress);
  const instruction = {
    accounts: [
      getAccountMeta(accounts.account),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.rent)
    ],
    programAddress,
    data: getInitializeAccount2InstructionDataEncoder().encode(
      args
    )
  };
  return instruction;
}
function parseInitializeAccount2Instruction(instruction) {
  if (instruction.accounts.length < 3) {
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      account: getNextAccount(),
      mint: getNextAccount(),
      rent: getNextAccount()
    },
    data: getInitializeAccount2InstructionDataDecoder().decode(
      instruction.data
    )
  };
}
var INITIALIZE_ACCOUNT3_DISCRIMINATOR = 18;
function getInitializeAccount3DiscriminatorBytes() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(INITIALIZE_ACCOUNT3_DISCRIMINATOR);
}
function getInitializeAccount3InstructionDataEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.transformEncoder)(
    (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructEncoder)([
      ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)()],
      ["owner", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.getAddressEncoder)()]
    ]),
    (value) => ({ ...value, discriminator: INITIALIZE_ACCOUNT3_DISCRIMINATOR })
  );
}
function getInitializeAccount3InstructionDataDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructDecoder)([
    ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Decoder)()],
    ["owner", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.getAddressDecoder)()]
  ]);
}
function getInitializeAccount3InstructionDataCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.combineCodec)(
    getInitializeAccount3InstructionDataEncoder(),
    getInitializeAccount3InstructionDataDecoder()
  );
}
function getInitializeAccount3Instruction(input, config) {
  const programAddress = config?.programAddress ?? TOKEN_PROGRAM_ADDRESS;
  const originalAccounts = {
    account: { value: input.account ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false }
  };
  const accounts = originalAccounts;
  const args = { ...input };
  const getAccountMeta = getAccountMetaFactory(programAddress);
  const instruction = {
    accounts: [getAccountMeta(accounts.account), getAccountMeta(accounts.mint)],
    programAddress,
    data: getInitializeAccount3InstructionDataEncoder().encode(
      args
    )
  };
  return instruction;
}
function parseInitializeAccount3Instruction(instruction) {
  if (instruction.accounts.length < 2) {
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      account: getNextAccount(),
      mint: getNextAccount()
    },
    data: getInitializeAccount3InstructionDataDecoder().decode(
      instruction.data
    )
  };
}
var INITIALIZE_IMMUTABLE_OWNER_DISCRIMINATOR = 22;
function getInitializeImmutableOwnerDiscriminatorBytes() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(INITIALIZE_IMMUTABLE_OWNER_DISCRIMINATOR);
}
function getInitializeImmutableOwnerInstructionDataEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.transformEncoder)(
    (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructEncoder)([["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)()]]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_IMMUTABLE_OWNER_DISCRIMINATOR
    })
  );
}
function getInitializeImmutableOwnerInstructionDataDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructDecoder)([["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Decoder)()]]);
}
function getInitializeImmutableOwnerInstructionDataCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.combineCodec)(
    getInitializeImmutableOwnerInstructionDataEncoder(),
    getInitializeImmutableOwnerInstructionDataDecoder()
  );
}
function getInitializeImmutableOwnerInstruction(input, config) {
  const programAddress = config?.programAddress ?? TOKEN_PROGRAM_ADDRESS;
  const originalAccounts = {
    account: { value: input.account ?? null, isWritable: true }
  };
  const accounts = originalAccounts;
  const getAccountMeta = getAccountMetaFactory(programAddress);
  const instruction = {
    accounts: [getAccountMeta(accounts.account)],
    programAddress,
    data: getInitializeImmutableOwnerInstructionDataEncoder().encode({})
  };
  return instruction;
}
function parseInitializeImmutableOwnerInstruction(instruction) {
  if (instruction.accounts.length < 1) {
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      account: getNextAccount()
    },
    data: getInitializeImmutableOwnerInstructionDataDecoder().decode(
      instruction.data
    )
  };
}
var INITIALIZE_MINT_DISCRIMINATOR = 0;
function getInitializeMintDiscriminatorBytes() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(INITIALIZE_MINT_DISCRIMINATOR);
}
function getInitializeMintInstructionDataEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.transformEncoder)(
    (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructEncoder)([
      ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)()],
      ["decimals", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)()],
      ["mintAuthority", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.getAddressEncoder)()],
      ["freezeAuthority", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getOptionEncoder)((0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.getAddressEncoder)())]
    ]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_MINT_DISCRIMINATOR,
      freezeAuthority: value.freezeAuthority ?? (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.none)()
    })
  );
}
function getInitializeMintInstructionDataDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructDecoder)([
    ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Decoder)()],
    ["decimals", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Decoder)()],
    ["mintAuthority", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.getAddressDecoder)()],
    ["freezeAuthority", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getOptionDecoder)((0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.getAddressDecoder)())]
  ]);
}
function getInitializeMintInstructionDataCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.combineCodec)(
    getInitializeMintInstructionDataEncoder(),
    getInitializeMintInstructionDataDecoder()
  );
}
function getInitializeMintInstruction(input, config) {
  const programAddress = config?.programAddress ?? TOKEN_PROGRAM_ADDRESS;
  const originalAccounts = {
    mint: { value: input.mint ?? null, isWritable: true },
    rent: { value: input.rent ?? null, isWritable: false }
  };
  const accounts = originalAccounts;
  const args = { ...input };
  if (!accounts.rent.value) {
    accounts.rent.value = "SysvarRent111111111111111111111111111111111";
  }
  const getAccountMeta = getAccountMetaFactory(programAddress);
  const instruction = {
    accounts: [getAccountMeta(accounts.mint), getAccountMeta(accounts.rent)],
    programAddress,
    data: getInitializeMintInstructionDataEncoder().encode(
      args
    )
  };
  return instruction;
}
function parseInitializeMintInstruction(instruction) {
  if (instruction.accounts.length < 2) {
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      mint: getNextAccount(),
      rent: getNextAccount()
    },
    data: getInitializeMintInstructionDataDecoder().decode(instruction.data)
  };
}
var INITIALIZE_MINT2_DISCRIMINATOR = 20;
function getInitializeMint2DiscriminatorBytes() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(INITIALIZE_MINT2_DISCRIMINATOR);
}
function getInitializeMint2InstructionDataEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.transformEncoder)(
    (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructEncoder)([
      ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)()],
      ["decimals", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)()],
      ["mintAuthority", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.getAddressEncoder)()],
      ["freezeAuthority", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getOptionEncoder)((0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.getAddressEncoder)())]
    ]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_MINT2_DISCRIMINATOR,
      freezeAuthority: value.freezeAuthority ?? (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.none)()
    })
  );
}
function getInitializeMint2InstructionDataDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructDecoder)([
    ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Decoder)()],
    ["decimals", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Decoder)()],
    ["mintAuthority", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.getAddressDecoder)()],
    ["freezeAuthority", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getOptionDecoder)((0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.getAddressDecoder)())]
  ]);
}
function getInitializeMint2InstructionDataCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.combineCodec)(
    getInitializeMint2InstructionDataEncoder(),
    getInitializeMint2InstructionDataDecoder()
  );
}
function getInitializeMint2Instruction(input, config) {
  const programAddress = config?.programAddress ?? TOKEN_PROGRAM_ADDRESS;
  const originalAccounts = {
    mint: { value: input.mint ?? null, isWritable: true }
  };
  const accounts = originalAccounts;
  const args = { ...input };
  const getAccountMeta = getAccountMetaFactory(programAddress);
  const instruction = {
    accounts: [getAccountMeta(accounts.mint)],
    programAddress,
    data: getInitializeMint2InstructionDataEncoder().encode(
      args
    )
  };
  return instruction;
}
function parseInitializeMint2Instruction(instruction) {
  if (instruction.accounts.length < 1) {
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      mint: getNextAccount()
    },
    data: getInitializeMint2InstructionDataDecoder().decode(instruction.data)
  };
}
var INITIALIZE_MULTISIG_DISCRIMINATOR = 2;
function getInitializeMultisigDiscriminatorBytes() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(INITIALIZE_MULTISIG_DISCRIMINATOR);
}
function getInitializeMultisigInstructionDataEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.transformEncoder)(
    (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructEncoder)([
      ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)()],
      ["m", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)()]
    ]),
    (value) => ({ ...value, discriminator: INITIALIZE_MULTISIG_DISCRIMINATOR })
  );
}
function getInitializeMultisigInstructionDataDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructDecoder)([
    ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Decoder)()],
    ["m", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Decoder)()]
  ]);
}
function getInitializeMultisigInstructionDataCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.combineCodec)(
    getInitializeMultisigInstructionDataEncoder(),
    getInitializeMultisigInstructionDataDecoder()
  );
}
function getInitializeMultisigInstruction(input, config) {
  const programAddress = config?.programAddress ?? TOKEN_PROGRAM_ADDRESS;
  const originalAccounts = {
    multisig: { value: input.multisig ?? null, isWritable: true },
    rent: { value: input.rent ?? null, isWritable: false }
  };
  const accounts = originalAccounts;
  const args = { ...input };
  if (!accounts.rent.value) {
    accounts.rent.value = "SysvarRent111111111111111111111111111111111";
  }
  const remainingAccounts = args.signers.map((address) => ({
    address,
    role: _solana_kit__WEBPACK_IMPORTED_MODULE_7__.AccountRole.READONLY
  }));
  const getAccountMeta = getAccountMetaFactory(programAddress);
  const instruction = {
    accounts: [
      getAccountMeta(accounts.multisig),
      getAccountMeta(accounts.rent),
      ...remainingAccounts
    ],
    programAddress,
    data: getInitializeMultisigInstructionDataEncoder().encode(
      args
    )
  };
  return instruction;
}
function parseInitializeMultisigInstruction(instruction) {
  if (instruction.accounts.length < 2) {
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      multisig: getNextAccount(),
      rent: getNextAccount()
    },
    data: getInitializeMultisigInstructionDataDecoder().decode(
      instruction.data
    )
  };
}
var INITIALIZE_MULTISIG2_DISCRIMINATOR = 19;
function getInitializeMultisig2DiscriminatorBytes() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(INITIALIZE_MULTISIG2_DISCRIMINATOR);
}
function getInitializeMultisig2InstructionDataEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.transformEncoder)(
    (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructEncoder)([
      ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)()],
      ["m", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)()]
    ]),
    (value) => ({ ...value, discriminator: INITIALIZE_MULTISIG2_DISCRIMINATOR })
  );
}
function getInitializeMultisig2InstructionDataDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructDecoder)([
    ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Decoder)()],
    ["m", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Decoder)()]
  ]);
}
function getInitializeMultisig2InstructionDataCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.combineCodec)(
    getInitializeMultisig2InstructionDataEncoder(),
    getInitializeMultisig2InstructionDataDecoder()
  );
}
function getInitializeMultisig2Instruction(input, config) {
  const programAddress = config?.programAddress ?? TOKEN_PROGRAM_ADDRESS;
  const originalAccounts = {
    multisig: { value: input.multisig ?? null, isWritable: true }
  };
  const accounts = originalAccounts;
  const args = { ...input };
  const remainingAccounts = args.signers.map((address) => ({
    address,
    role: _solana_kit__WEBPACK_IMPORTED_MODULE_7__.AccountRole.READONLY
  }));
  const getAccountMeta = getAccountMetaFactory(programAddress);
  const instruction = {
    accounts: [getAccountMeta(accounts.multisig), ...remainingAccounts],
    programAddress,
    data: getInitializeMultisig2InstructionDataEncoder().encode(
      args
    )
  };
  return instruction;
}
function parseInitializeMultisig2Instruction(instruction) {
  if (instruction.accounts.length < 1) {
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      multisig: getNextAccount()
    },
    data: getInitializeMultisig2InstructionDataDecoder().decode(
      instruction.data
    )
  };
}
var MINT_TO_DISCRIMINATOR = 7;
function getMintToDiscriminatorBytes() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(MINT_TO_DISCRIMINATOR);
}
function getMintToInstructionDataEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.transformEncoder)(
    (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructEncoder)([
      ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)()],
      ["amount", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU64Encoder)()]
    ]),
    (value) => ({ ...value, discriminator: MINT_TO_DISCRIMINATOR })
  );
}
function getMintToInstructionDataDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructDecoder)([
    ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Decoder)()],
    ["amount", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU64Decoder)()]
  ]);
}
function getMintToInstructionDataCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.combineCodec)(
    getMintToInstructionDataEncoder(),
    getMintToInstructionDataDecoder()
  );
}
function getMintToInstruction(input, config) {
  const programAddress = config?.programAddress ?? TOKEN_PROGRAM_ADDRESS;
  const originalAccounts = {
    mint: { value: input.mint ?? null, isWritable: true },
    token: { value: input.token ?? null, isWritable: true },
    mintAuthority: { value: input.mintAuthority ?? null, isWritable: false }
  };
  const accounts = originalAccounts;
  const args = { ...input };
  const remainingAccounts = (args.multiSigners ?? []).map(
    (signer) => ({
      address: signer.address,
      role: _solana_kit__WEBPACK_IMPORTED_MODULE_7__.AccountRole.READONLY_SIGNER,
      signer
    })
  );
  const getAccountMeta = getAccountMetaFactory(programAddress);
  const instruction = {
    accounts: [
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.token),
      getAccountMeta(accounts.mintAuthority),
      ...remainingAccounts
    ],
    programAddress,
    data: getMintToInstructionDataEncoder().encode(
      args
    )
  };
  return instruction;
}
function parseMintToInstruction(instruction) {
  if (instruction.accounts.length < 3) {
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      mint: getNextAccount(),
      token: getNextAccount(),
      mintAuthority: getNextAccount()
    },
    data: getMintToInstructionDataDecoder().decode(instruction.data)
  };
}
var MINT_TO_CHECKED_DISCRIMINATOR = 14;
function getMintToCheckedDiscriminatorBytes() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(MINT_TO_CHECKED_DISCRIMINATOR);
}
function getMintToCheckedInstructionDataEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.transformEncoder)(
    (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructEncoder)([
      ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)()],
      ["amount", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU64Encoder)()],
      ["decimals", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)()]
    ]),
    (value) => ({ ...value, discriminator: MINT_TO_CHECKED_DISCRIMINATOR })
  );
}
function getMintToCheckedInstructionDataDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructDecoder)([
    ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Decoder)()],
    ["amount", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU64Decoder)()],
    ["decimals", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Decoder)()]
  ]);
}
function getMintToCheckedInstructionDataCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.combineCodec)(
    getMintToCheckedInstructionDataEncoder(),
    getMintToCheckedInstructionDataDecoder()
  );
}
function getMintToCheckedInstruction(input, config) {
  const programAddress = config?.programAddress ?? TOKEN_PROGRAM_ADDRESS;
  const originalAccounts = {
    mint: { value: input.mint ?? null, isWritable: true },
    token: { value: input.token ?? null, isWritable: true },
    mintAuthority: { value: input.mintAuthority ?? null, isWritable: false }
  };
  const accounts = originalAccounts;
  const args = { ...input };
  const remainingAccounts = (args.multiSigners ?? []).map(
    (signer) => ({
      address: signer.address,
      role: _solana_kit__WEBPACK_IMPORTED_MODULE_7__.AccountRole.READONLY_SIGNER,
      signer
    })
  );
  const getAccountMeta = getAccountMetaFactory(programAddress);
  const instruction = {
    accounts: [
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.token),
      getAccountMeta(accounts.mintAuthority),
      ...remainingAccounts
    ],
    programAddress,
    data: getMintToCheckedInstructionDataEncoder().encode(
      args
    )
  };
  return instruction;
}
function parseMintToCheckedInstruction(instruction) {
  if (instruction.accounts.length < 3) {
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      mint: getNextAccount(),
      token: getNextAccount(),
      mintAuthority: getNextAccount()
    },
    data: getMintToCheckedInstructionDataDecoder().decode(instruction.data)
  };
}
var RECOVER_NESTED_ASSOCIATED_TOKEN_DISCRIMINATOR = 2;
function getRecoverNestedAssociatedTokenDiscriminatorBytes() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(RECOVER_NESTED_ASSOCIATED_TOKEN_DISCRIMINATOR);
}
function getRecoverNestedAssociatedTokenInstructionDataEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.transformEncoder)(
    (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructEncoder)([["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)()]]),
    (value) => ({
      ...value,
      discriminator: RECOVER_NESTED_ASSOCIATED_TOKEN_DISCRIMINATOR
    })
  );
}
function getRecoverNestedAssociatedTokenInstructionDataDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructDecoder)([["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Decoder)()]]);
}
function getRecoverNestedAssociatedTokenInstructionDataCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.combineCodec)(
    getRecoverNestedAssociatedTokenInstructionDataEncoder(),
    getRecoverNestedAssociatedTokenInstructionDataDecoder()
  );
}
async function getRecoverNestedAssociatedTokenInstructionAsync(input, config) {
  const programAddress = config?.programAddress ?? ASSOCIATED_TOKEN_PROGRAM_ADDRESS;
  const originalAccounts = {
    nestedAssociatedAccountAddress: {
      value: input.nestedAssociatedAccountAddress ?? null,
      isWritable: true
    },
    nestedTokenMintAddress: {
      value: input.nestedTokenMintAddress ?? null,
      isWritable: false
    },
    destinationAssociatedAccountAddress: {
      value: input.destinationAssociatedAccountAddress ?? null,
      isWritable: true
    },
    ownerAssociatedAccountAddress: {
      value: input.ownerAssociatedAccountAddress ?? null,
      isWritable: false
    },
    ownerTokenMintAddress: {
      value: input.ownerTokenMintAddress ?? null,
      isWritable: false
    },
    walletAddress: { value: input.walletAddress ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false }
  };
  const accounts = originalAccounts;
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA";
  }
  if (!accounts.ownerAssociatedAccountAddress.value) {
    accounts.ownerAssociatedAccountAddress.value = await findAssociatedTokenPda(
      {
        owner: expectAddress(accounts.walletAddress.value),
        tokenProgram: expectAddress(accounts.tokenProgram.value),
        mint: expectAddress(accounts.ownerTokenMintAddress.value)
      }
    );
  }
  if (!accounts.nestedAssociatedAccountAddress.value) {
    accounts.nestedAssociatedAccountAddress.value = await findAssociatedTokenPda({
      owner: expectAddress(accounts.ownerAssociatedAccountAddress.value),
      tokenProgram: expectAddress(accounts.tokenProgram.value),
      mint: expectAddress(accounts.nestedTokenMintAddress.value)
    });
  }
  if (!accounts.destinationAssociatedAccountAddress.value) {
    accounts.destinationAssociatedAccountAddress.value = await findAssociatedTokenPda({
      owner: expectAddress(accounts.walletAddress.value),
      tokenProgram: expectAddress(accounts.tokenProgram.value),
      mint: expectAddress(accounts.nestedTokenMintAddress.value)
    });
  }
  const getAccountMeta = getAccountMetaFactory(programAddress);
  const instruction = {
    accounts: [
      getAccountMeta(accounts.nestedAssociatedAccountAddress),
      getAccountMeta(accounts.nestedTokenMintAddress),
      getAccountMeta(accounts.destinationAssociatedAccountAddress),
      getAccountMeta(accounts.ownerAssociatedAccountAddress),
      getAccountMeta(accounts.ownerTokenMintAddress),
      getAccountMeta(accounts.walletAddress),
      getAccountMeta(accounts.tokenProgram)
    ],
    programAddress,
    data: getRecoverNestedAssociatedTokenInstructionDataEncoder().encode({})
  };
  return instruction;
}
function getRecoverNestedAssociatedTokenInstruction(input, config) {
  const programAddress = config?.programAddress ?? ASSOCIATED_TOKEN_PROGRAM_ADDRESS;
  const originalAccounts = {
    nestedAssociatedAccountAddress: {
      value: input.nestedAssociatedAccountAddress ?? null,
      isWritable: true
    },
    nestedTokenMintAddress: {
      value: input.nestedTokenMintAddress ?? null,
      isWritable: false
    },
    destinationAssociatedAccountAddress: {
      value: input.destinationAssociatedAccountAddress ?? null,
      isWritable: true
    },
    ownerAssociatedAccountAddress: {
      value: input.ownerAssociatedAccountAddress ?? null,
      isWritable: false
    },
    ownerTokenMintAddress: {
      value: input.ownerTokenMintAddress ?? null,
      isWritable: false
    },
    walletAddress: { value: input.walletAddress ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false }
  };
  const accounts = originalAccounts;
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA";
  }
  const getAccountMeta = getAccountMetaFactory(programAddress);
  const instruction = {
    accounts: [
      getAccountMeta(accounts.nestedAssociatedAccountAddress),
      getAccountMeta(accounts.nestedTokenMintAddress),
      getAccountMeta(accounts.destinationAssociatedAccountAddress),
      getAccountMeta(accounts.ownerAssociatedAccountAddress),
      getAccountMeta(accounts.ownerTokenMintAddress),
      getAccountMeta(accounts.walletAddress),
      getAccountMeta(accounts.tokenProgram)
    ],
    programAddress,
    data: getRecoverNestedAssociatedTokenInstructionDataEncoder().encode({})
  };
  return instruction;
}
function parseRecoverNestedAssociatedTokenInstruction(instruction) {
  if (instruction.accounts.length < 7) {
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      nestedAssociatedAccountAddress: getNextAccount(),
      nestedTokenMintAddress: getNextAccount(),
      destinationAssociatedAccountAddress: getNextAccount(),
      ownerAssociatedAccountAddress: getNextAccount(),
      ownerTokenMintAddress: getNextAccount(),
      walletAddress: getNextAccount(),
      tokenProgram: getNextAccount()
    },
    data: getRecoverNestedAssociatedTokenInstructionDataDecoder().decode(
      instruction.data
    )
  };
}
var REVOKE_DISCRIMINATOR = 5;
function getRevokeDiscriminatorBytes() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(REVOKE_DISCRIMINATOR);
}
function getRevokeInstructionDataEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.transformEncoder)(
    (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructEncoder)([["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)()]]),
    (value) => ({ ...value, discriminator: REVOKE_DISCRIMINATOR })
  );
}
function getRevokeInstructionDataDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructDecoder)([["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Decoder)()]]);
}
function getRevokeInstructionDataCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.combineCodec)(
    getRevokeInstructionDataEncoder(),
    getRevokeInstructionDataDecoder()
  );
}
function getRevokeInstruction(input, config) {
  const programAddress = config?.programAddress ?? TOKEN_PROGRAM_ADDRESS;
  const originalAccounts = {
    source: { value: input.source ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: false }
  };
  const accounts = originalAccounts;
  const args = { ...input };
  const remainingAccounts = (args.multiSigners ?? []).map(
    (signer) => ({
      address: signer.address,
      role: _solana_kit__WEBPACK_IMPORTED_MODULE_7__.AccountRole.READONLY_SIGNER,
      signer
    })
  );
  const getAccountMeta = getAccountMetaFactory(programAddress);
  const instruction = {
    accounts: [
      getAccountMeta(accounts.source),
      getAccountMeta(accounts.owner),
      ...remainingAccounts
    ],
    programAddress,
    data: getRevokeInstructionDataEncoder().encode({})
  };
  return instruction;
}
function parseRevokeInstruction(instruction) {
  if (instruction.accounts.length < 2) {
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      source: getNextAccount(),
      owner: getNextAccount()
    },
    data: getRevokeInstructionDataDecoder().decode(instruction.data)
  };
}
var SET_AUTHORITY_DISCRIMINATOR = 6;
function getSetAuthorityDiscriminatorBytes() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(SET_AUTHORITY_DISCRIMINATOR);
}
function getSetAuthorityInstructionDataEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.transformEncoder)(
    (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructEncoder)([
      ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)()],
      ["authorityType", getAuthorityTypeEncoder()],
      ["newAuthority", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getOptionEncoder)((0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.getAddressEncoder)())]
    ]),
    (value) => ({ ...value, discriminator: SET_AUTHORITY_DISCRIMINATOR })
  );
}
function getSetAuthorityInstructionDataDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructDecoder)([
    ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Decoder)()],
    ["authorityType", getAuthorityTypeDecoder()],
    ["newAuthority", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_1__.getOptionDecoder)((0,_solana_kit__WEBPACK_IMPORTED_MODULE_2__.getAddressDecoder)())]
  ]);
}
function getSetAuthorityInstructionDataCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.combineCodec)(
    getSetAuthorityInstructionDataEncoder(),
    getSetAuthorityInstructionDataDecoder()
  );
}
function getSetAuthorityInstruction(input, config) {
  const programAddress = config?.programAddress ?? TOKEN_PROGRAM_ADDRESS;
  const originalAccounts = {
    owned: { value: input.owned ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: false }
  };
  const accounts = originalAccounts;
  const args = { ...input };
  const remainingAccounts = (args.multiSigners ?? []).map(
    (signer) => ({
      address: signer.address,
      role: _solana_kit__WEBPACK_IMPORTED_MODULE_7__.AccountRole.READONLY_SIGNER,
      signer
    })
  );
  const getAccountMeta = getAccountMetaFactory(programAddress);
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owned),
      getAccountMeta(accounts.owner),
      ...remainingAccounts
    ],
    programAddress,
    data: getSetAuthorityInstructionDataEncoder().encode(
      args
    )
  };
  return instruction;
}
function parseSetAuthorityInstruction(instruction) {
  if (instruction.accounts.length < 2) {
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owned: getNextAccount(),
      owner: getNextAccount()
    },
    data: getSetAuthorityInstructionDataDecoder().decode(instruction.data)
  };
}
var SYNC_NATIVE_DISCRIMINATOR = 17;
function getSyncNativeDiscriminatorBytes() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(SYNC_NATIVE_DISCRIMINATOR);
}
function getSyncNativeInstructionDataEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.transformEncoder)(
    (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructEncoder)([["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)()]]),
    (value) => ({ ...value, discriminator: SYNC_NATIVE_DISCRIMINATOR })
  );
}
function getSyncNativeInstructionDataDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructDecoder)([["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Decoder)()]]);
}
function getSyncNativeInstructionDataCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.combineCodec)(
    getSyncNativeInstructionDataEncoder(),
    getSyncNativeInstructionDataDecoder()
  );
}
function getSyncNativeInstruction(input, config) {
  const programAddress = config?.programAddress ?? TOKEN_PROGRAM_ADDRESS;
  const originalAccounts = {
    account: { value: input.account ?? null, isWritable: true }
  };
  const accounts = originalAccounts;
  const getAccountMeta = getAccountMetaFactory(programAddress);
  const instruction = {
    accounts: [getAccountMeta(accounts.account)],
    programAddress,
    data: getSyncNativeInstructionDataEncoder().encode({})
  };
  return instruction;
}
function parseSyncNativeInstruction(instruction) {
  if (instruction.accounts.length < 1) {
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      account: getNextAccount()
    },
    data: getSyncNativeInstructionDataDecoder().decode(instruction.data)
  };
}
var THAW_ACCOUNT_DISCRIMINATOR = 11;
function getThawAccountDiscriminatorBytes() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(THAW_ACCOUNT_DISCRIMINATOR);
}
function getThawAccountInstructionDataEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.transformEncoder)(
    (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructEncoder)([["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)()]]),
    (value) => ({ ...value, discriminator: THAW_ACCOUNT_DISCRIMINATOR })
  );
}
function getThawAccountInstructionDataDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructDecoder)([["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Decoder)()]]);
}
function getThawAccountInstructionDataCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.combineCodec)(
    getThawAccountInstructionDataEncoder(),
    getThawAccountInstructionDataDecoder()
  );
}
function getThawAccountInstruction(input, config) {
  const programAddress = config?.programAddress ?? TOKEN_PROGRAM_ADDRESS;
  const originalAccounts = {
    account: { value: input.account ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    owner: { value: input.owner ?? null, isWritable: false }
  };
  const accounts = originalAccounts;
  const args = { ...input };
  const remainingAccounts = (args.multiSigners ?? []).map(
    (signer) => ({
      address: signer.address,
      role: _solana_kit__WEBPACK_IMPORTED_MODULE_7__.AccountRole.READONLY_SIGNER,
      signer
    })
  );
  const getAccountMeta = getAccountMetaFactory(programAddress);
  const instruction = {
    accounts: [
      getAccountMeta(accounts.account),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.owner),
      ...remainingAccounts
    ],
    programAddress,
    data: getThawAccountInstructionDataEncoder().encode({})
  };
  return instruction;
}
function parseThawAccountInstruction(instruction) {
  if (instruction.accounts.length < 3) {
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      account: getNextAccount(),
      mint: getNextAccount(),
      owner: getNextAccount()
    },
    data: getThawAccountInstructionDataDecoder().decode(instruction.data)
  };
}
var TRANSFER_DISCRIMINATOR = 3;
function getTransferDiscriminatorBytes() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(TRANSFER_DISCRIMINATOR);
}
function getTransferInstructionDataEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.transformEncoder)(
    (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructEncoder)([
      ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)()],
      ["amount", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU64Encoder)()]
    ]),
    (value) => ({ ...value, discriminator: TRANSFER_DISCRIMINATOR })
  );
}
function getTransferInstructionDataDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructDecoder)([
    ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Decoder)()],
    ["amount", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU64Decoder)()]
  ]);
}
function getTransferInstructionDataCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.combineCodec)(
    getTransferInstructionDataEncoder(),
    getTransferInstructionDataDecoder()
  );
}
function getTransferInstruction(input, config) {
  const programAddress = config?.programAddress ?? TOKEN_PROGRAM_ADDRESS;
  const originalAccounts = {
    source: { value: input.source ?? null, isWritable: true },
    destination: { value: input.destination ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false }
  };
  const accounts = originalAccounts;
  const args = { ...input };
  const remainingAccounts = (args.multiSigners ?? []).map(
    (signer) => ({
      address: signer.address,
      role: _solana_kit__WEBPACK_IMPORTED_MODULE_7__.AccountRole.READONLY_SIGNER,
      signer
    })
  );
  const getAccountMeta = getAccountMetaFactory(programAddress);
  const instruction = {
    accounts: [
      getAccountMeta(accounts.source),
      getAccountMeta(accounts.destination),
      getAccountMeta(accounts.authority),
      ...remainingAccounts
    ],
    programAddress,
    data: getTransferInstructionDataEncoder().encode(
      args
    )
  };
  return instruction;
}
function parseTransferInstruction(instruction) {
  if (instruction.accounts.length < 3) {
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      source: getNextAccount(),
      destination: getNextAccount(),
      authority: getNextAccount()
    },
    data: getTransferInstructionDataDecoder().decode(instruction.data)
  };
}
var TRANSFER_CHECKED_DISCRIMINATOR = 12;
function getTransferCheckedDiscriminatorBytes() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(TRANSFER_CHECKED_DISCRIMINATOR);
}
function getTransferCheckedInstructionDataEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.transformEncoder)(
    (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructEncoder)([
      ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)()],
      ["amount", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU64Encoder)()],
      ["decimals", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)()]
    ]),
    (value) => ({ ...value, discriminator: TRANSFER_CHECKED_DISCRIMINATOR })
  );
}
function getTransferCheckedInstructionDataDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructDecoder)([
    ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Decoder)()],
    ["amount", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU64Decoder)()],
    ["decimals", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Decoder)()]
  ]);
}
function getTransferCheckedInstructionDataCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.combineCodec)(
    getTransferCheckedInstructionDataEncoder(),
    getTransferCheckedInstructionDataDecoder()
  );
}
function getTransferCheckedInstruction(input, config) {
  const programAddress = config?.programAddress ?? TOKEN_PROGRAM_ADDRESS;
  const originalAccounts = {
    source: { value: input.source ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    destination: { value: input.destination ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false }
  };
  const accounts = originalAccounts;
  const args = { ...input };
  const remainingAccounts = (args.multiSigners ?? []).map(
    (signer) => ({
      address: signer.address,
      role: _solana_kit__WEBPACK_IMPORTED_MODULE_7__.AccountRole.READONLY_SIGNER,
      signer
    })
  );
  const getAccountMeta = getAccountMetaFactory(programAddress);
  const instruction = {
    accounts: [
      getAccountMeta(accounts.source),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.destination),
      getAccountMeta(accounts.authority),
      ...remainingAccounts
    ],
    programAddress,
    data: getTransferCheckedInstructionDataEncoder().encode(
      args
    )
  };
  return instruction;
}
function parseTransferCheckedInstruction(instruction) {
  if (instruction.accounts.length < 4) {
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      source: getNextAccount(),
      mint: getNextAccount(),
      destination: getNextAccount(),
      authority: getNextAccount()
    },
    data: getTransferCheckedInstructionDataDecoder().decode(instruction.data)
  };
}
var UI_AMOUNT_TO_AMOUNT_DISCRIMINATOR = 24;
function getUiAmountToAmountDiscriminatorBytes() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)().encode(UI_AMOUNT_TO_AMOUNT_DISCRIMINATOR);
}
function getUiAmountToAmountInstructionDataEncoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.transformEncoder)(
    (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructEncoder)([
      ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Encoder)()],
      ["uiAmount", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_9__.getUtf8Encoder)()]
    ]),
    (value) => ({ ...value, discriminator: UI_AMOUNT_TO_AMOUNT_DISCRIMINATOR })
  );
}
function getUiAmountToAmountInstructionDataDecoder() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.getStructDecoder)([
    ["discriminator", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.getU8Decoder)()],
    ["uiAmount", (0,_solana_kit__WEBPACK_IMPORTED_MODULE_9__.getUtf8Decoder)()]
  ]);
}
function getUiAmountToAmountInstructionDataCodec() {
  return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_4__.combineCodec)(
    getUiAmountToAmountInstructionDataEncoder(),
    getUiAmountToAmountInstructionDataDecoder()
  );
}
function getUiAmountToAmountInstruction(input, config) {
  const programAddress = config?.programAddress ?? TOKEN_PROGRAM_ADDRESS;
  const originalAccounts = {
    mint: { value: input.mint ?? null, isWritable: false }
  };
  const accounts = originalAccounts;
  const args = { ...input };
  const getAccountMeta = getAccountMetaFactory(programAddress);
  const instruction = {
    accounts: [getAccountMeta(accounts.mint)],
    programAddress,
    data: getUiAmountToAmountInstructionDataEncoder().encode(
      args
    )
  };
  return instruction;
}
function parseUiAmountToAmountInstruction(instruction) {
  if (instruction.accounts.length < 1) {
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      mint: getNextAccount()
    },
    data: getUiAmountToAmountInstructionDataDecoder().decode(instruction.data)
  };
}


//# sourceMappingURL=index.mjs.map
//# sourceMappingURL=index.mjs.map

/***/ }),

/***/ "./node_modules/@solana/accounts/dist/index.browser.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/@solana/accounts/dist/index.browser.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BASE_ACCOUNT_SIZE": () => (/* binding */ BASE_ACCOUNT_SIZE),
/* harmony export */   "assertAccountDecoded": () => (/* binding */ assertAccountDecoded),
/* harmony export */   "assertAccountExists": () => (/* binding */ assertAccountExists),
/* harmony export */   "assertAccountsDecoded": () => (/* binding */ assertAccountsDecoded),
/* harmony export */   "assertAccountsExist": () => (/* binding */ assertAccountsExist),
/* harmony export */   "decodeAccount": () => (/* binding */ decodeAccount),
/* harmony export */   "fetchEncodedAccount": () => (/* binding */ fetchEncodedAccount),
/* harmony export */   "fetchEncodedAccounts": () => (/* binding */ fetchEncodedAccounts),
/* harmony export */   "fetchJsonParsedAccount": () => (/* binding */ fetchJsonParsedAccount),
/* harmony export */   "fetchJsonParsedAccounts": () => (/* binding */ fetchJsonParsedAccounts),
/* harmony export */   "parseBase58RpcAccount": () => (/* binding */ parseBase58RpcAccount),
/* harmony export */   "parseBase64RpcAccount": () => (/* binding */ parseBase64RpcAccount),
/* harmony export */   "parseJsonRpcAccount": () => (/* binding */ parseJsonRpcAccount)
/* harmony export */ });
/* harmony import */ var _solana_errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @solana/errors */ "./node_modules/@solana/errors/dist/index.browser.mjs");
/* harmony import */ var _solana_codecs_strings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @solana/codecs-strings */ "./node_modules/@solana/codecs-strings/dist/index.browser.mjs");



// src/account.ts
var BASE_ACCOUNT_SIZE = 128;
function decodeAccount(encodedAccount, decoder) {
  try {
    if ("exists" in encodedAccount && !encodedAccount.exists) {
      return encodedAccount;
    }
    return Object.freeze({ ...encodedAccount, data: decoder.decode(encodedAccount.data) });
  } catch {
    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__ACCOUNTS__FAILED_TO_DECODE_ACCOUNT, {
      address: encodedAccount.address
    });
  }
}
function accountExists(account) {
  return !("exists" in account) || "exists" in account && account.exists;
}
function assertAccountDecoded(account) {
  if (accountExists(account) && account.data instanceof Uint8Array) {
    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__ACCOUNTS__EXPECTED_DECODED_ACCOUNT, {
      address: account.address
    });
  }
}
function assertAccountsDecoded(accounts) {
  const encoded = accounts.filter((a) => accountExists(a) && a.data instanceof Uint8Array);
  if (encoded.length > 0) {
    const encodedAddresses = encoded.map((a) => a.address);
    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__ACCOUNTS__EXPECTED_ALL_ACCOUNTS_TO_BE_DECODED, {
      addresses: encodedAddresses
    });
  }
}
function parseBase64RpcAccount(address, rpcAccount) {
  if (!rpcAccount) return Object.freeze({ address, exists: false });
  const data = (0,_solana_codecs_strings__WEBPACK_IMPORTED_MODULE_1__.getBase64Encoder)().encode(rpcAccount.data[0]);
  return Object.freeze({ ...parseBaseAccount(rpcAccount), address, data, exists: true });
}
function parseBase58RpcAccount(address, rpcAccount) {
  if (!rpcAccount) return Object.freeze({ address, exists: false });
  const data = (0,_solana_codecs_strings__WEBPACK_IMPORTED_MODULE_1__.getBase58Encoder)().encode(typeof rpcAccount.data === "string" ? rpcAccount.data : rpcAccount.data[0]);
  return Object.freeze({ ...parseBaseAccount(rpcAccount), address, data, exists: true });
}
function parseJsonRpcAccount(address, rpcAccount) {
  if (!rpcAccount) return Object.freeze({ address, exists: false });
  const data = rpcAccount.data.parsed.info;
  return Object.freeze({ ...parseBaseAccount(rpcAccount), address, data, exists: true });
}
function parseBaseAccount(rpcAccount) {
  return Object.freeze({
    executable: rpcAccount.executable,
    lamports: rpcAccount.lamports,
    programAddress: rpcAccount.owner,
    space: rpcAccount.space
  });
}

// src/fetch-account.ts
async function fetchEncodedAccount(rpc, address, config = {}) {
  const { abortSignal, ...rpcConfig } = config;
  const response = await rpc.getAccountInfo(address, { ...rpcConfig, encoding: "base64" }).send({ abortSignal });
  return parseBase64RpcAccount(address, response.value);
}
async function fetchJsonParsedAccount(rpc, address, config = {}) {
  const { abortSignal, ...rpcConfig } = config;
  const { value: account } = await rpc.getAccountInfo(address, { ...rpcConfig, encoding: "jsonParsed" }).send({ abortSignal });
  return !!account && typeof account === "object" && "parsed" in account.data ? parseJsonRpcAccount(address, account) : parseBase64RpcAccount(address, account);
}
async function fetchEncodedAccounts(rpc, addresses, config = {}) {
  const { abortSignal, ...rpcConfig } = config;
  const response = await rpc.getMultipleAccounts(addresses, { ...rpcConfig, encoding: "base64" }).send({ abortSignal });
  return response.value.map((account, index) => parseBase64RpcAccount(addresses[index], account));
}
async function fetchJsonParsedAccounts(rpc, addresses, config = {}) {
  const { abortSignal, ...rpcConfig } = config;
  const response = await rpc.getMultipleAccounts(addresses, { ...rpcConfig, encoding: "jsonParsed" }).send({ abortSignal });
  return response.value.map((account, index) => {
    return !!account && typeof account === "object" && "parsed" in account.data ? parseJsonRpcAccount(addresses[index], account) : parseBase64RpcAccount(addresses[index], account);
  });
}
function assertAccountExists(account) {
  if (!account.exists) {
    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__ACCOUNTS__ACCOUNT_NOT_FOUND, { address: account.address });
  }
}
function assertAccountsExist(accounts) {
  const missingAccounts = accounts.filter((a) => !a.exists);
  if (missingAccounts.length > 0) {
    const missingAddresses = missingAccounts.map((a) => a.address);
    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__ACCOUNTS__ONE_OR_MORE_ACCOUNTS_NOT_FOUND, { addresses: missingAddresses });
  }
}


//# sourceMappingURL=index.browser.mjs.map
//# sourceMappingURL=index.browser.mjs.map

/***/ }),

/***/ "./node_modules/@solana/codecs-data-structures/dist/index.browser.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/@solana/codecs-data-structures/dist/index.browser.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "assertValidNumberOfItemsForCodec": () => (/* binding */ assertValidNumberOfItemsForCodec),
/* harmony export */   "getArrayCodec": () => (/* binding */ getArrayCodec),
/* harmony export */   "getArrayDecoder": () => (/* binding */ getArrayDecoder),
/* harmony export */   "getArrayEncoder": () => (/* binding */ getArrayEncoder),
/* harmony export */   "getBitArrayCodec": () => (/* binding */ getBitArrayCodec),
/* harmony export */   "getBitArrayDecoder": () => (/* binding */ getBitArrayDecoder),
/* harmony export */   "getBitArrayEncoder": () => (/* binding */ getBitArrayEncoder),
/* harmony export */   "getBooleanCodec": () => (/* binding */ getBooleanCodec),
/* harmony export */   "getBooleanDecoder": () => (/* binding */ getBooleanDecoder),
/* harmony export */   "getBooleanEncoder": () => (/* binding */ getBooleanEncoder),
/* harmony export */   "getBytesCodec": () => (/* binding */ getBytesCodec),
/* harmony export */   "getBytesDecoder": () => (/* binding */ getBytesDecoder),
/* harmony export */   "getBytesEncoder": () => (/* binding */ getBytesEncoder),
/* harmony export */   "getConstantCodec": () => (/* binding */ getConstantCodec),
/* harmony export */   "getConstantDecoder": () => (/* binding */ getConstantDecoder),
/* harmony export */   "getConstantEncoder": () => (/* binding */ getConstantEncoder),
/* harmony export */   "getDataEnumCodec": () => (/* binding */ getDataEnumCodec),
/* harmony export */   "getDataEnumDecoder": () => (/* binding */ getDataEnumDecoder),
/* harmony export */   "getDataEnumEncoder": () => (/* binding */ getDataEnumEncoder),
/* harmony export */   "getDiscriminatedUnionCodec": () => (/* binding */ getDiscriminatedUnionCodec),
/* harmony export */   "getDiscriminatedUnionDecoder": () => (/* binding */ getDiscriminatedUnionDecoder),
/* harmony export */   "getDiscriminatedUnionEncoder": () => (/* binding */ getDiscriminatedUnionEncoder),
/* harmony export */   "getEnumCodec": () => (/* binding */ getEnumCodec),
/* harmony export */   "getEnumDecoder": () => (/* binding */ getEnumDecoder),
/* harmony export */   "getEnumEncoder": () => (/* binding */ getEnumEncoder),
/* harmony export */   "getHiddenPrefixCodec": () => (/* binding */ getHiddenPrefixCodec),
/* harmony export */   "getHiddenPrefixDecoder": () => (/* binding */ getHiddenPrefixDecoder),
/* harmony export */   "getHiddenPrefixEncoder": () => (/* binding */ getHiddenPrefixEncoder),
/* harmony export */   "getHiddenSuffixCodec": () => (/* binding */ getHiddenSuffixCodec),
/* harmony export */   "getHiddenSuffixDecoder": () => (/* binding */ getHiddenSuffixDecoder),
/* harmony export */   "getHiddenSuffixEncoder": () => (/* binding */ getHiddenSuffixEncoder),
/* harmony export */   "getLiteralUnionCodec": () => (/* binding */ getLiteralUnionCodec),
/* harmony export */   "getLiteralUnionDecoder": () => (/* binding */ getLiteralUnionDecoder),
/* harmony export */   "getLiteralUnionEncoder": () => (/* binding */ getLiteralUnionEncoder),
/* harmony export */   "getMapCodec": () => (/* binding */ getMapCodec),
/* harmony export */   "getMapDecoder": () => (/* binding */ getMapDecoder),
/* harmony export */   "getMapEncoder": () => (/* binding */ getMapEncoder),
/* harmony export */   "getNullableCodec": () => (/* binding */ getNullableCodec),
/* harmony export */   "getNullableDecoder": () => (/* binding */ getNullableDecoder),
/* harmony export */   "getNullableEncoder": () => (/* binding */ getNullableEncoder),
/* harmony export */   "getScalarEnumCodec": () => (/* binding */ getScalarEnumCodec),
/* harmony export */   "getScalarEnumDecoder": () => (/* binding */ getScalarEnumDecoder),
/* harmony export */   "getScalarEnumEncoder": () => (/* binding */ getScalarEnumEncoder),
/* harmony export */   "getSetCodec": () => (/* binding */ getSetCodec),
/* harmony export */   "getSetDecoder": () => (/* binding */ getSetDecoder),
/* harmony export */   "getSetEncoder": () => (/* binding */ getSetEncoder),
/* harmony export */   "getStructCodec": () => (/* binding */ getStructCodec),
/* harmony export */   "getStructDecoder": () => (/* binding */ getStructDecoder),
/* harmony export */   "getStructEncoder": () => (/* binding */ getStructEncoder),
/* harmony export */   "getTupleCodec": () => (/* binding */ getTupleCodec),
/* harmony export */   "getTupleDecoder": () => (/* binding */ getTupleDecoder),
/* harmony export */   "getTupleEncoder": () => (/* binding */ getTupleEncoder),
/* harmony export */   "getUnionCodec": () => (/* binding */ getUnionCodec),
/* harmony export */   "getUnionDecoder": () => (/* binding */ getUnionDecoder),
/* harmony export */   "getUnionEncoder": () => (/* binding */ getUnionEncoder),
/* harmony export */   "getUnitCodec": () => (/* binding */ getUnitCodec),
/* harmony export */   "getUnitDecoder": () => (/* binding */ getUnitDecoder),
/* harmony export */   "getUnitEncoder": () => (/* binding */ getUnitEncoder)
/* harmony export */ });
/* harmony import */ var _solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @solana/codecs-core */ "./node_modules/@solana/codecs-core/dist/index.browser.mjs");
/* harmony import */ var _solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @solana/codecs-numbers */ "./node_modules/@solana/codecs-numbers/dist/index.browser.mjs");
/* harmony import */ var _solana_errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @solana/errors */ "./node_modules/@solana/errors/dist/index.browser.mjs");




// src/array.ts
function assertValidNumberOfItemsForCodec(codecDescription, expected, actual) {
  if (expected !== actual) {
    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__CODECS__INVALID_NUMBER_OF_ITEMS, {
      actual,
      codecDescription,
      expected
    });
  }
}
function maxCodecSizes(sizes) {
  return sizes.reduce(
    (all, size) => all === null || size === null ? null : Math.max(all, size),
    0
  );
}
function sumCodecSizes(sizes) {
  return sizes.reduce((all, size) => all === null || size === null ? null : all + size, 0);
}
function getFixedSize(codec) {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.isFixedSize)(codec) ? codec.fixedSize : null;
}
function getMaxSize(codec) {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.isFixedSize)(codec) ? codec.fixedSize : codec.maxSize ?? null;
}

// src/array.ts
function getArrayEncoder(item, config = {}) {
  const size = config.size ?? (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_2__.getU32Encoder)();
  const fixedSize = computeArrayLikeCodecSize(size, getFixedSize(item));
  const maxSize = computeArrayLikeCodecSize(size, getMaxSize(item)) ?? undefined;
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createEncoder)({
    ...fixedSize !== null ? { fixedSize } : {
      getSizeFromValue: (array) => {
        const prefixSize = typeof size === "object" ? (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.getEncodedSize)(array.length, size) : 0;
        return prefixSize + [...array].reduce((all, value) => all + (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.getEncodedSize)(value, item), 0);
      },
      maxSize
    },
    write: (array, bytes, offset) => {
      if (typeof size === "number") {
        assertValidNumberOfItemsForCodec("array", size, array.length);
      }
      if (typeof size === "object") {
        offset = size.write(array.length, bytes, offset);
      }
      array.forEach((value) => {
        offset = item.write(value, bytes, offset);
      });
      return offset;
    }
  });
}
function getArrayDecoder(item, config = {}) {
  const size = config.size ?? (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_2__.getU32Decoder)();
  const itemSize = getFixedSize(item);
  const fixedSize = computeArrayLikeCodecSize(size, itemSize);
  const maxSize = computeArrayLikeCodecSize(size, getMaxSize(item)) ?? undefined;
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createDecoder)({
    ...fixedSize !== null ? { fixedSize } : { maxSize },
    read: (bytes, offset) => {
      const array = [];
      if (typeof size === "object" && bytes.slice(offset).length === 0) {
        return [array, offset];
      }
      if (size === "remainder") {
        while (offset < bytes.length) {
          const [value, newOffset2] = item.read(bytes, offset);
          offset = newOffset2;
          array.push(value);
        }
        return [array, offset];
      }
      const [resolvedSize, newOffset] = typeof size === "number" ? [size, offset] : size.read(bytes, offset);
      offset = newOffset;
      for (let i = 0; i < resolvedSize; i += 1) {
        const [value, newOffset2] = item.read(bytes, offset);
        offset = newOffset2;
        array.push(value);
      }
      return [array, offset];
    }
  });
}
function getArrayCodec(item, config = {}) {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.combineCodec)(getArrayEncoder(item, config), getArrayDecoder(item, config));
}
function computeArrayLikeCodecSize(size, itemSize) {
  if (typeof size !== "number") return null;
  if (size === 0) return 0;
  return itemSize === null ? null : itemSize * size;
}
function getBitArrayEncoder(size, config = {}) {
  const parsedConfig = typeof config === "boolean" ? { backward: config } : config;
  const backward = parsedConfig.backward ?? false;
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createEncoder)({
    fixedSize: size,
    write(value, bytes, offset) {
      const bytesToAdd = [];
      for (let i = 0; i < size; i += 1) {
        let byte = 0;
        for (let j = 0; j < 8; j += 1) {
          const feature = Number(value[i * 8 + j] ?? 0);
          byte |= feature << (backward ? j : 7 - j);
        }
        if (backward) {
          bytesToAdd.unshift(byte);
        } else {
          bytesToAdd.push(byte);
        }
      }
      bytes.set(bytesToAdd, offset);
      return size;
    }
  });
}
function getBitArrayDecoder(size, config = {}) {
  const parsedConfig = typeof config === "boolean" ? { backward: config } : config;
  const backward = parsedConfig.backward ?? false;
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createDecoder)({
    fixedSize: size,
    read(bytes, offset) {
      (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.assertByteArrayHasEnoughBytesForCodec)("bitArray", size, bytes, offset);
      const booleans = [];
      let slice = bytes.slice(offset, offset + size);
      slice = backward ? slice.reverse() : slice;
      slice.forEach((byte) => {
        for (let i = 0; i < 8; i += 1) {
          if (backward) {
            booleans.push(Boolean(byte & 1));
            byte >>= 1;
          } else {
            booleans.push(Boolean(byte & 128));
            byte <<= 1;
          }
        }
      });
      return [booleans, offset + size];
    }
  });
}
function getBitArrayCodec(size, config = {}) {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.combineCodec)(getBitArrayEncoder(size, config), getBitArrayDecoder(size, config));
}
function getBooleanEncoder(config = {}) {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.transformEncoder)(config.size ?? (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_2__.getU8Encoder)(), (value) => value ? 1 : 0);
}
function getBooleanDecoder(config = {}) {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.transformDecoder)(config.size ?? (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_2__.getU8Decoder)(), (value) => Number(value) === 1);
}
function getBooleanCodec(config = {}) {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.combineCodec)(getBooleanEncoder(config), getBooleanDecoder(config));
}
function getBytesEncoder() {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createEncoder)({
    getSizeFromValue: (value) => value.length,
    write: (value, bytes, offset) => {
      bytes.set(value, offset);
      return offset + value.length;
    }
  });
}
function getBytesDecoder() {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createDecoder)({
    read: (bytes, offset) => {
      const slice = bytes.slice(offset);
      return [slice, offset + slice.length];
    }
  });
}
function getBytesCodec() {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.combineCodec)(getBytesEncoder(), getBytesDecoder());
}
var getBase16Decoder = () => (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createDecoder)({
  read(bytes, offset) {
    const value = bytes.slice(offset).reduce((str, byte) => str + byte.toString(16).padStart(2, "0"), "");
    return [value, bytes.length];
  }
});
function getConstantEncoder(constant) {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createEncoder)({
    fixedSize: constant.length,
    write: (_, bytes, offset) => {
      bytes.set(constant, offset);
      return offset + constant.length;
    }
  });
}
function getConstantDecoder(constant) {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createDecoder)({
    fixedSize: constant.length,
    read: (bytes, offset) => {
      const base16 = getBase16Decoder();
      if (!(0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.containsBytes)(bytes, constant, offset)) {
        throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__CODECS__INVALID_CONSTANT, {
          constant,
          data: bytes,
          hexConstant: base16.decode(constant),
          hexData: base16.decode(bytes),
          offset
        });
      }
      return [undefined, offset + constant.length];
    }
  });
}
function getConstantCodec(constant) {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.combineCodec)(getConstantEncoder(constant), getConstantDecoder(constant));
}
function getTupleEncoder(items) {
  const fixedSize = sumCodecSizes(items.map(getFixedSize));
  const maxSize = sumCodecSizes(items.map(getMaxSize)) ?? undefined;
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createEncoder)({
    ...fixedSize === null ? {
      getSizeFromValue: (value) => items.map((item, index) => (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.getEncodedSize)(value[index], item)).reduce((all, one) => all + one, 0),
      maxSize
    } : { fixedSize },
    write: (value, bytes, offset) => {
      assertValidNumberOfItemsForCodec("tuple", items.length, value.length);
      items.forEach((item, index) => {
        offset = item.write(value[index], bytes, offset);
      });
      return offset;
    }
  });
}
function getTupleDecoder(items) {
  const fixedSize = sumCodecSizes(items.map(getFixedSize));
  const maxSize = sumCodecSizes(items.map(getMaxSize)) ?? undefined;
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createDecoder)({
    ...fixedSize === null ? { maxSize } : { fixedSize },
    read: (bytes, offset) => {
      const values = [];
      items.forEach((item) => {
        const [newValue, newOffset] = item.read(bytes, offset);
        values.push(newValue);
        offset = newOffset;
      });
      return [values, offset];
    }
  });
}
function getTupleCodec(items) {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.combineCodec)(
    getTupleEncoder(items),
    getTupleDecoder(items)
  );
}
function getUnionEncoder(variants, getIndexFromValue) {
  const fixedSize = getUnionFixedSize(variants);
  const write = (variant, bytes, offset) => {
    const index = getIndexFromValue(variant);
    assertValidVariantIndex(variants, index);
    return variants[index].write(variant, bytes, offset);
  };
  if (fixedSize !== null) {
    return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createEncoder)({ fixedSize, write });
  }
  const maxSize = getUnionMaxSize(variants);
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createEncoder)({
    ...maxSize !== null ? { maxSize } : {},
    getSizeFromValue: (variant) => {
      const index = getIndexFromValue(variant);
      assertValidVariantIndex(variants, index);
      return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.getEncodedSize)(variant, variants[index]);
    },
    write
  });
}
function getUnionDecoder(variants, getIndexFromBytes) {
  const fixedSize = getUnionFixedSize(variants);
  const read = (bytes, offset) => {
    const index = getIndexFromBytes(bytes, offset);
    assertValidVariantIndex(variants, index);
    return variants[index].read(bytes, offset);
  };
  if (fixedSize !== null) {
    return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createDecoder)({ fixedSize, read });
  }
  const maxSize = getUnionMaxSize(variants);
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createDecoder)({ ...maxSize !== null ? { maxSize } : {}, read });
}
function getUnionCodec(variants, getIndexFromValue, getIndexFromBytes) {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.combineCodec)(
    getUnionEncoder(variants, getIndexFromValue),
    getUnionDecoder(variants, getIndexFromBytes)
  );
}
function assertValidVariantIndex(variants, index) {
  if (typeof variants[index] === "undefined") {
    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__CODECS__UNION_VARIANT_OUT_OF_RANGE, {
      maxRange: variants.length - 1,
      minRange: 0,
      variant: index
    });
  }
}
function getUnionFixedSize(variants) {
  if (variants.length === 0) return 0;
  if (!(0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.isFixedSize)(variants[0])) return null;
  const variantSize = variants[0].fixedSize;
  const sameSizedVariants = variants.every((variant) => (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.isFixedSize)(variant) && variant.fixedSize === variantSize);
  return sameSizedVariants ? variantSize : null;
}
function getUnionMaxSize(variants) {
  return maxCodecSizes(variants.map((variant) => getMaxSize(variant)));
}

// src/discriminated-union.ts
function getDiscriminatedUnionEncoder(variants, config = {}) {
  const discriminatorProperty = config.discriminator ?? "__kind";
  const prefix = config.size ?? (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_2__.getU8Encoder)();
  return getUnionEncoder(
    variants.map(
      ([, variant], index) => (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.transformEncoder)(getTupleEncoder([prefix, variant]), (value) => [index, value])
    ),
    (value) => getVariantDiscriminator(variants, value[discriminatorProperty])
  );
}
function getDiscriminatedUnionDecoder(variants, config = {}) {
  const discriminatorProperty = config.discriminator ?? "__kind";
  const prefix = config.size ?? (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_2__.getU8Decoder)();
  return getUnionDecoder(
    variants.map(
      ([discriminator, variant]) => (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.transformDecoder)(getTupleDecoder([prefix, variant]), ([, value]) => ({
        [discriminatorProperty]: discriminator,
        ...value
      }))
    ),
    (bytes, offset) => Number(prefix.read(bytes, offset)[0])
  );
}
function getDiscriminatedUnionCodec(variants, config = {}) {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.combineCodec)(
    getDiscriminatedUnionEncoder(variants, config),
    getDiscriminatedUnionDecoder(variants, config)
  );
}
function getVariantDiscriminator(variants, discriminatorValue) {
  const discriminator = variants.findIndex(([key]) => discriminatorValue === key);
  if (discriminator < 0) {
    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__CODECS__INVALID_DISCRIMINATED_UNION_VARIANT, {
      value: discriminatorValue,
      variants: variants.map(([key]) => key)
    });
  }
  return discriminator;
}
var getDataEnumEncoder = getDiscriminatedUnionEncoder;
var getDataEnumDecoder = getDiscriminatedUnionDecoder;
var getDataEnumCodec = getDiscriminatedUnionCodec;

// src/enum-helpers.ts
function getEnumStats(constructor) {
  const numericalValues = [...new Set(Object.values(constructor).filter((v) => typeof v === "number"))].sort();
  const enumRecord = Object.fromEntries(Object.entries(constructor).slice(numericalValues.length));
  const enumKeys = Object.keys(enumRecord);
  const enumValues = Object.values(enumRecord);
  const stringValues = [
    .../* @__PURE__ */ new Set([...enumKeys, ...enumValues.filter((v) => typeof v === "string")])
  ];
  return { enumKeys, enumRecord, enumValues, numericalValues, stringValues };
}
function getEnumIndexFromVariant({
  enumKeys,
  enumValues,
  variant
}) {
  const valueIndex = findLastIndex(enumValues, (value) => value === variant);
  if (valueIndex >= 0) return valueIndex;
  return enumKeys.findIndex((key) => key === variant);
}
function getEnumIndexFromDiscriminator({
  discriminator,
  enumKeys,
  enumValues,
  useValuesAsDiscriminators
}) {
  if (!useValuesAsDiscriminators) {
    return discriminator >= 0 && discriminator < enumKeys.length ? discriminator : -1;
  }
  return findLastIndex(enumValues, (value) => value === discriminator);
}
function findLastIndex(array, predicate) {
  let l = array.length;
  while (l--) {
    if (predicate(array[l], l, array)) return l;
  }
  return -1;
}
function formatNumericalValues(values) {
  if (values.length === 0) return "";
  let range = [values[0], values[0]];
  const ranges = [];
  for (let index = 1; index < values.length; index++) {
    const value = values[index];
    if (range[1] + 1 === value) {
      range[1] = value;
    } else {
      ranges.push(range[0] === range[1] ? `${range[0]}` : `${range[0]}-${range[1]}`);
      range = [value, value];
    }
  }
  ranges.push(range[0] === range[1] ? `${range[0]}` : `${range[0]}-${range[1]}`);
  return ranges.join(", ");
}

// src/enum.ts
function getEnumEncoder(constructor, config = {}) {
  const prefix = config.size ?? (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_2__.getU8Encoder)();
  const useValuesAsDiscriminators = config.useValuesAsDiscriminators ?? false;
  const { enumKeys, enumValues, numericalValues, stringValues } = getEnumStats(constructor);
  if (useValuesAsDiscriminators && enumValues.some((value) => typeof value === "string")) {
    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__CODECS__CANNOT_USE_LEXICAL_VALUES_AS_ENUM_DISCRIMINATORS, {
      stringValues: enumValues.filter((v) => typeof v === "string")
    });
  }
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.transformEncoder)(prefix, (variant) => {
    const index = getEnumIndexFromVariant({ enumKeys, enumValues, variant });
    if (index < 0) {
      throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__CODECS__INVALID_ENUM_VARIANT, {
        formattedNumericalValues: formatNumericalValues(numericalValues),
        numericalValues,
        stringValues,
        variant
      });
    }
    return useValuesAsDiscriminators ? enumValues[index] : index;
  });
}
function getEnumDecoder(constructor, config = {}) {
  const prefix = config.size ?? (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_2__.getU8Decoder)();
  const useValuesAsDiscriminators = config.useValuesAsDiscriminators ?? false;
  const { enumKeys, enumValues, numericalValues } = getEnumStats(constructor);
  if (useValuesAsDiscriminators && enumValues.some((value) => typeof value === "string")) {
    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__CODECS__CANNOT_USE_LEXICAL_VALUES_AS_ENUM_DISCRIMINATORS, {
      stringValues: enumValues.filter((v) => typeof v === "string")
    });
  }
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.transformDecoder)(prefix, (value) => {
    const discriminator = Number(value);
    const index = getEnumIndexFromDiscriminator({
      discriminator,
      enumKeys,
      enumValues,
      useValuesAsDiscriminators
    });
    if (index < 0) {
      const validDiscriminators = useValuesAsDiscriminators ? numericalValues : [...Array(enumKeys.length).keys()];
      throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__CODECS__ENUM_DISCRIMINATOR_OUT_OF_RANGE, {
        discriminator,
        formattedValidDiscriminators: formatNumericalValues(validDiscriminators),
        validDiscriminators
      });
    }
    return enumValues[index];
  });
}
function getEnumCodec(constructor, config = {}) {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.combineCodec)(getEnumEncoder(constructor, config), getEnumDecoder(constructor, config));
}
var getScalarEnumEncoder = getEnumEncoder;
var getScalarEnumDecoder = getEnumDecoder;
var getScalarEnumCodec = getEnumCodec;
function getHiddenPrefixEncoder(encoder, prefixedEncoders) {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.transformEncoder)(
    getTupleEncoder([...prefixedEncoders, encoder]),
    (value) => [...prefixedEncoders.map(() => undefined), value]
  );
}
function getHiddenPrefixDecoder(decoder, prefixedDecoders) {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.transformDecoder)(
    getTupleDecoder([...prefixedDecoders, decoder]),
    (tuple) => tuple[tuple.length - 1]
  );
}
function getHiddenPrefixCodec(codec, prefixedCodecs) {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.combineCodec)(getHiddenPrefixEncoder(codec, prefixedCodecs), getHiddenPrefixDecoder(codec, prefixedCodecs));
}
function getHiddenSuffixEncoder(encoder, suffixedEncoders) {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.transformEncoder)(
    getTupleEncoder([encoder, ...suffixedEncoders]),
    (value) => [value, ...suffixedEncoders.map(() => undefined)]
  );
}
function getHiddenSuffixDecoder(decoder, suffixedDecoders) {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.transformDecoder)(
    getTupleDecoder([decoder, ...suffixedDecoders]),
    (tuple) => tuple[0]
  );
}
function getHiddenSuffixCodec(codec, suffixedCodecs) {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.combineCodec)(getHiddenSuffixEncoder(codec, suffixedCodecs), getHiddenSuffixDecoder(codec, suffixedCodecs));
}
function getLiteralUnionEncoder(variants, config = {}) {
  const discriminator = config.size ?? (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_2__.getU8Encoder)();
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.transformEncoder)(discriminator, (variant) => {
    const index = variants.indexOf(variant);
    if (index < 0) {
      throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__CODECS__INVALID_LITERAL_UNION_VARIANT, {
        value: variant,
        variants
      });
    }
    return index;
  });
}
function getLiteralUnionDecoder(variants, config = {}) {
  const discriminator = config.size ?? (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_2__.getU8Decoder)();
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.transformDecoder)(discriminator, (index) => {
    if (index < 0 || index >= variants.length) {
      throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__CODECS__LITERAL_UNION_DISCRIMINATOR_OUT_OF_RANGE, {
        discriminator: index,
        maxRange: variants.length - 1,
        minRange: 0
      });
    }
    return variants[Number(index)];
  });
}
function getLiteralUnionCodec(variants, config = {}) {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.combineCodec)(getLiteralUnionEncoder(variants, config), getLiteralUnionDecoder(variants, config));
}
function getMapEncoder(key, value, config = {}) {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.transformEncoder)(
    getArrayEncoder(getTupleEncoder([key, value]), config),
    (map) => [...map.entries()]
  );
}
function getMapDecoder(key, value, config = {}) {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.transformDecoder)(
    getArrayDecoder(getTupleDecoder([key, value]), config),
    (entries) => new Map(entries)
  );
}
function getMapCodec(key, value, config = {}) {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.combineCodec)(getMapEncoder(key, value, config), getMapDecoder(key, value, config));
}
function getUnitEncoder() {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createEncoder)({
    fixedSize: 0,
    write: (_value, _bytes, offset) => offset
  });
}
function getUnitDecoder() {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createDecoder)({
    fixedSize: 0,
    read: (_bytes, offset) => [undefined, offset]
  });
}
function getUnitCodec() {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.combineCodec)(getUnitEncoder(), getUnitDecoder());
}

// src/nullable.ts
function getNullableEncoder(item, config = {}) {
  const prefix = (() => {
    if (config.prefix === null) {
      return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.transformEncoder)(getUnitEncoder(), (_boolean) => undefined);
    }
    return getBooleanEncoder({ size: config.prefix ?? (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_2__.getU8Encoder)() });
  })();
  const noneValue = (() => {
    if (config.noneValue === "zeroes") {
      (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.assertIsFixedSize)(item);
      return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.fixEncoderSize)(getUnitEncoder(), item.fixedSize);
    }
    if (!config.noneValue) {
      return getUnitEncoder();
    }
    return getConstantEncoder(config.noneValue);
  })();
  return getUnionEncoder(
    [
      (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.transformEncoder)(getTupleEncoder([prefix, noneValue]), (_value) => [
        false,
        undefined
      ]),
      (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.transformEncoder)(getTupleEncoder([prefix, item]), (value) => [true, value])
    ],
    (variant) => Number(variant !== null)
  );
}
function getNullableDecoder(item, config = {}) {
  const prefix = (() => {
    if (config.prefix === null) {
      return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.transformDecoder)(getUnitDecoder(), () => false);
    }
    return getBooleanDecoder({ size: config.prefix ?? (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_2__.getU8Decoder)() });
  })();
  const noneValue = (() => {
    if (config.noneValue === "zeroes") {
      (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.assertIsFixedSize)(item);
      return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.fixDecoderSize)(getUnitDecoder(), item.fixedSize);
    }
    if (!config.noneValue) {
      return getUnitDecoder();
    }
    return getConstantDecoder(config.noneValue);
  })();
  return getUnionDecoder(
    [
      (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.transformDecoder)(getTupleDecoder([prefix, noneValue]), () => null),
      (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.transformDecoder)(getTupleDecoder([prefix, item]), ([, value]) => value)
    ],
    (bytes, offset) => {
      if (config.prefix === null && !config.noneValue) {
        return Number(offset < bytes.length);
      }
      if (config.prefix === null && config.noneValue != null) {
        const zeroValue = config.noneValue === "zeroes" ? new Uint8Array(noneValue.fixedSize).fill(0) : config.noneValue;
        return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.containsBytes)(bytes, zeroValue, offset) ? 0 : 1;
      }
      return Number(prefix.read(bytes, offset)[0]);
    }
  );
}
function getNullableCodec(item, config = {}) {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.combineCodec)(
    getNullableEncoder(item, config),
    getNullableDecoder(item, config)
  );
}
function getSetEncoder(item, config = {}) {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.transformEncoder)(getArrayEncoder(item, config), (set) => [...set]);
}
function getSetDecoder(item, config = {}) {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.transformDecoder)(getArrayDecoder(item, config), (entries) => new Set(entries));
}
function getSetCodec(item, config = {}) {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.combineCodec)(getSetEncoder(item, config), getSetDecoder(item, config));
}
function getStructEncoder(fields) {
  const fieldCodecs = fields.map(([, codec]) => codec);
  const fixedSize = sumCodecSizes(fieldCodecs.map(getFixedSize));
  const maxSize = sumCodecSizes(fieldCodecs.map(getMaxSize)) ?? undefined;
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createEncoder)({
    ...fixedSize === null ? {
      getSizeFromValue: (value) => fields.map(([key, codec]) => (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.getEncodedSize)(value[key], codec)).reduce((all, one) => all + one, 0),
      maxSize
    } : { fixedSize },
    write: (struct, bytes, offset) => {
      fields.forEach(([key, codec]) => {
        offset = codec.write(struct[key], bytes, offset);
      });
      return offset;
    }
  });
}
function getStructDecoder(fields) {
  const fieldCodecs = fields.map(([, codec]) => codec);
  const fixedSize = sumCodecSizes(fieldCodecs.map(getFixedSize));
  const maxSize = sumCodecSizes(fieldCodecs.map(getMaxSize)) ?? undefined;
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createDecoder)({
    ...fixedSize === null ? { maxSize } : { fixedSize },
    read: (bytes, offset) => {
      const struct = {};
      fields.forEach(([key, codec]) => {
        const [value, newOffset] = codec.read(bytes, offset);
        offset = newOffset;
        struct[key] = value;
      });
      return [struct, offset];
    }
  });
}
function getStructCodec(fields) {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.combineCodec)(
    getStructEncoder(fields),
    getStructDecoder(fields)
  );
}


//# sourceMappingURL=index.browser.mjs.map
//# sourceMappingURL=index.browser.mjs.map

/***/ }),

/***/ "./node_modules/@solana/instructions/dist/index.browser.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@solana/instructions/dist/index.browser.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AccountRole": () => (/* binding */ AccountRole),
/* harmony export */   "assertIsInstructionForProgram": () => (/* binding */ assertIsInstructionForProgram),
/* harmony export */   "assertIsInstructionWithAccounts": () => (/* binding */ assertIsInstructionWithAccounts),
/* harmony export */   "assertIsInstructionWithData": () => (/* binding */ assertIsInstructionWithData),
/* harmony export */   "downgradeRoleToNonSigner": () => (/* binding */ downgradeRoleToNonSigner),
/* harmony export */   "downgradeRoleToReadonly": () => (/* binding */ downgradeRoleToReadonly),
/* harmony export */   "isInstructionForProgram": () => (/* binding */ isInstructionForProgram),
/* harmony export */   "isInstructionWithAccounts": () => (/* binding */ isInstructionWithAccounts),
/* harmony export */   "isInstructionWithData": () => (/* binding */ isInstructionWithData),
/* harmony export */   "isSignerRole": () => (/* binding */ isSignerRole),
/* harmony export */   "isWritableRole": () => (/* binding */ isWritableRole),
/* harmony export */   "mergeRoles": () => (/* binding */ mergeRoles),
/* harmony export */   "upgradeRoleToSigner": () => (/* binding */ upgradeRoleToSigner),
/* harmony export */   "upgradeRoleToWritable": () => (/* binding */ upgradeRoleToWritable)
/* harmony export */ });
/* harmony import */ var _solana_errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @solana/errors */ "./node_modules/@solana/errors/dist/index.browser.mjs");


// src/instruction.ts
function isInstructionForProgram(instruction, programAddress) {
  return instruction.programAddress === programAddress;
}
function assertIsInstructionForProgram(instruction, programAddress) {
  if (instruction.programAddress !== programAddress) {
    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__INSTRUCTION__PROGRAM_ID_MISMATCH, {
      actualProgramAddress: instruction.programAddress,
      expectedProgramAddress: programAddress
    });
  }
}
function isInstructionWithAccounts(instruction) {
  return instruction.accounts !== undefined;
}
function assertIsInstructionWithAccounts(instruction) {
  if (instruction.accounts === undefined) {
    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_ACCOUNTS, {
      data: instruction.data,
      programAddress: instruction.programAddress
    });
  }
}
function isInstructionWithData(instruction) {
  return instruction.data !== undefined;
}
function assertIsInstructionWithData(instruction) {
  if (instruction.data === undefined) {
    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__INSTRUCTION__EXPECTED_TO_HAVE_DATA, {
      accountAddresses: instruction.accounts?.map((a) => a.address),
      programAddress: instruction.programAddress
    });
  }
}

// src/roles.ts
var AccountRole = /* @__PURE__ */ ((AccountRole2) => {
  AccountRole2[AccountRole2["WRITABLE_SIGNER"] = /* 3 */
  3] = "WRITABLE_SIGNER";
  AccountRole2[AccountRole2["READONLY_SIGNER"] = /* 2 */
  2] = "READONLY_SIGNER";
  AccountRole2[AccountRole2["WRITABLE"] = /* 1 */
  1] = "WRITABLE";
  AccountRole2[AccountRole2["READONLY"] = /* 0 */
  0] = "READONLY";
  return AccountRole2;
})(AccountRole || {});
var IS_SIGNER_BITMASK = 2;
var IS_WRITABLE_BITMASK = 1;
function downgradeRoleToNonSigner(role) {
  return role & -3;
}
function downgradeRoleToReadonly(role) {
  return role & -2;
}
function isSignerRole(role) {
  return role >= 2 /* READONLY_SIGNER */;
}
function isWritableRole(role) {
  return (role & IS_WRITABLE_BITMASK) !== 0;
}
function mergeRoles(roleA, roleB) {
  return roleA | roleB;
}
function upgradeRoleToSigner(role) {
  return role | IS_SIGNER_BITMASK;
}
function upgradeRoleToWritable(role) {
  return role | IS_WRITABLE_BITMASK;
}


//# sourceMappingURL=index.browser.mjs.map
//# sourceMappingURL=index.browser.mjs.map

/***/ }),

/***/ "./node_modules/@solana/keys/dist/index.browser.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/@solana/keys/dist/index.browser.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "assertIsSignature": () => (/* binding */ assertIsSignature),
/* harmony export */   "createKeyPairFromBytes": () => (/* binding */ createKeyPairFromBytes),
/* harmony export */   "createKeyPairFromPrivateKeyBytes": () => (/* binding */ createKeyPairFromPrivateKeyBytes),
/* harmony export */   "createPrivateKeyFromBytes": () => (/* binding */ createPrivateKeyFromBytes),
/* harmony export */   "generateKeyPair": () => (/* binding */ generateKeyPair),
/* harmony export */   "getPublicKeyFromPrivateKey": () => (/* binding */ getPublicKeyFromPrivateKey),
/* harmony export */   "isSignature": () => (/* binding */ isSignature),
/* harmony export */   "signBytes": () => (/* binding */ signBytes),
/* harmony export */   "signature": () => (/* binding */ signature),
/* harmony export */   "verifySignature": () => (/* binding */ verifySignature)
/* harmony export */ });
/* harmony import */ var _solana_assertions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @solana/assertions */ "./node_modules/@solana/assertions/dist/index.browser.mjs");
/* harmony import */ var _solana_errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @solana/errors */ "./node_modules/@solana/errors/dist/index.browser.mjs");
/* harmony import */ var _solana_codecs_strings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @solana/codecs-strings */ "./node_modules/@solana/codecs-strings/dist/index.browser.mjs");




// src/key-pair.ts

// src/algorithm.ts
var ED25519_ALGORITHM_IDENTIFIER = (
  // Resist the temptation to convert this to a simple string; As of version 133.0.3, Firefox
  // requires the object form of `AlgorithmIdentifier` and will throw a `DOMException` otherwise.
  Object.freeze({ name: "Ed25519" })
);
function addPkcs8Header(bytes) {
  return new Uint8Array([
    /**
     * PKCS#8 header
     */
    48,
    // ASN.1 sequence tag
    46,
    // Length of sequence (46 more bytes)
    2,
    // ASN.1 integer tag
    1,
    // Length of integer
    0,
    // Version number
    48,
    // ASN.1 sequence tag
    5,
    // Length of sequence
    6,
    // ASN.1 object identifier tag
    3,
    // Length of object identifier
    // Edwards curve algorithms identifier https://oid-rep.orange-labs.fr/get/1.3.101.112
    43,
    // iso(1) / identified-organization(3) (The first node is multiplied by the decimal 40 and the result is added to the value of the second node)
    101,
    // thawte(101)
    // Ed25519 identifier
    112,
    // id-Ed25519(112)
    /**
     * Private key payload
     */
    4,
    // ASN.1 octet string tag
    34,
    // String length (34 more bytes)
    // Private key bytes as octet string
    4,
    // ASN.1 octet string tag
    32,
    // String length (32 bytes)
    ...bytes
  ]);
}
async function createPrivateKeyFromBytes(bytes, extractable) {
  const actualLength = bytes.byteLength;
  if (actualLength !== 32) {
    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__KEYS__INVALID_PRIVATE_KEY_BYTE_LENGTH, {
      actualLength
    });
  }
  const privateKeyBytesPkcs8 = addPkcs8Header(bytes);
  return await crypto.subtle.importKey(
    "pkcs8",
    privateKeyBytesPkcs8,
    ED25519_ALGORITHM_IDENTIFIER,
    extractable ?? false,
    ["sign"]
  );
}
async function getPublicKeyFromPrivateKey(privateKey, extractable = false) {
  (0,_solana_assertions__WEBPACK_IMPORTED_MODULE_1__.assertKeyExporterIsAvailable)();
  if (privateKey.extractable === false) {
    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__SUBTLE_CRYPTO__CANNOT_EXPORT_NON_EXTRACTABLE_KEY, { key: privateKey });
  }
  const jwk = await crypto.subtle.exportKey("jwk", privateKey);
  return await crypto.subtle.importKey(
    "jwk",
    {
      crv: "Ed25519",
      ext: extractable,
      key_ops: ["verify"],
      kty: "OKP",
      x: jwk.x
    },
    "Ed25519",
    extractable,
    ["verify"]
  );
}
var base58Encoder;
function assertIsSignature(putativeSignature) {
  if (!base58Encoder) base58Encoder = (0,_solana_codecs_strings__WEBPACK_IMPORTED_MODULE_2__.getBase58Encoder)();
  if (
    // Lowest value (64 bytes of zeroes)
    putativeSignature.length < 64 || // Highest value (64 bytes of 255)
    putativeSignature.length > 88
  ) {
    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__KEYS__SIGNATURE_STRING_LENGTH_OUT_OF_RANGE, {
      actualLength: putativeSignature.length
    });
  }
  const bytes = base58Encoder.encode(putativeSignature);
  const numBytes = bytes.byteLength;
  if (numBytes !== 64) {
    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__KEYS__INVALID_SIGNATURE_BYTE_LENGTH, {
      actualLength: numBytes
    });
  }
}
function isSignature(putativeSignature) {
  if (!base58Encoder) base58Encoder = (0,_solana_codecs_strings__WEBPACK_IMPORTED_MODULE_2__.getBase58Encoder)();
  if (
    // Lowest value (64 bytes of zeroes)
    putativeSignature.length < 64 || // Highest value (64 bytes of 255)
    putativeSignature.length > 88
  ) {
    return false;
  }
  const bytes = base58Encoder.encode(putativeSignature);
  const numBytes = bytes.byteLength;
  if (numBytes !== 64) {
    return false;
  }
  return true;
}
async function signBytes(key, data) {
  (0,_solana_assertions__WEBPACK_IMPORTED_MODULE_1__.assertSigningCapabilityIsAvailable)();
  const signedData = await crypto.subtle.sign(ED25519_ALGORITHM_IDENTIFIER, key, data);
  return new Uint8Array(signedData);
}
function signature(putativeSignature) {
  assertIsSignature(putativeSignature);
  return putativeSignature;
}
async function verifySignature(key, signature2, data) {
  (0,_solana_assertions__WEBPACK_IMPORTED_MODULE_1__.assertVerificationCapabilityIsAvailable)();
  return await crypto.subtle.verify(ED25519_ALGORITHM_IDENTIFIER, key, signature2, data);
}

// src/key-pair.ts
async function generateKeyPair() {
  await (0,_solana_assertions__WEBPACK_IMPORTED_MODULE_1__.assertKeyGenerationIsAvailable)();
  const keyPair = await crypto.subtle.generateKey(
    /* algorithm */
    ED25519_ALGORITHM_IDENTIFIER,
    // Native implementation status: https://github.com/WICG/webcrypto-secure-curves/issues/20
    /* extractable */
    false,
    // Prevents the bytes of the private key from being visible to JS.
    /* allowed uses */
    ["sign", "verify"]
  );
  return keyPair;
}
async function createKeyPairFromBytes(bytes, extractable) {
  (0,_solana_assertions__WEBPACK_IMPORTED_MODULE_1__.assertPRNGIsAvailable)();
  if (bytes.byteLength !== 64) {
    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__KEYS__INVALID_KEY_PAIR_BYTE_LENGTH, { byteLength: bytes.byteLength });
  }
  const [publicKey, privateKey] = await Promise.all([
    crypto.subtle.importKey(
      "raw",
      bytes.slice(32),
      ED25519_ALGORITHM_IDENTIFIER,
      /* extractable */
      true,
      [
        "verify"
      ]
    ),
    createPrivateKeyFromBytes(bytes.slice(0, 32), extractable)
  ]);
  const randomBytes = new Uint8Array(32);
  crypto.getRandomValues(randomBytes);
  const signedData = await signBytes(privateKey, randomBytes);
  const isValid = await verifySignature(publicKey, signedData, randomBytes);
  if (!isValid) {
    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__KEYS__PUBLIC_KEY_MUST_MATCH_PRIVATE_KEY);
  }
  return { privateKey, publicKey };
}
async function createKeyPairFromPrivateKeyBytes(bytes, extractable = false) {
  const privateKeyPromise = createPrivateKeyFromBytes(bytes, extractable);
  const [publicKey, privateKey] = await Promise.all([
    // This nested promise makes things efficient by
    // creating the public key in parallel with the
    // second private key creation, if it is needed.
    (extractable ? privateKeyPromise : createPrivateKeyFromBytes(
      bytes,
      true
      /* extractable */
    )).then(
      async (privateKey2) => await getPublicKeyFromPrivateKey(
        privateKey2,
        true
        /* extractable */
      )
    ),
    privateKeyPromise
  ]);
  return { privateKey, publicKey };
}


//# sourceMappingURL=index.browser.mjs.map
//# sourceMappingURL=index.browser.mjs.map

/***/ }),

/***/ "./node_modules/@solana/options/dist/index.browser.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/@solana/options/dist/index.browser.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getOptionCodec": () => (/* binding */ getOptionCodec),
/* harmony export */   "getOptionDecoder": () => (/* binding */ getOptionDecoder),
/* harmony export */   "getOptionEncoder": () => (/* binding */ getOptionEncoder),
/* harmony export */   "isNone": () => (/* binding */ isNone),
/* harmony export */   "isOption": () => (/* binding */ isOption),
/* harmony export */   "isSome": () => (/* binding */ isSome),
/* harmony export */   "none": () => (/* binding */ none),
/* harmony export */   "some": () => (/* binding */ some),
/* harmony export */   "unwrapOption": () => (/* binding */ unwrapOption),
/* harmony export */   "unwrapOptionRecursively": () => (/* binding */ unwrapOptionRecursively),
/* harmony export */   "wrapNullable": () => (/* binding */ wrapNullable)
/* harmony export */ });
/* harmony import */ var _solana_codecs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @solana/codecs-core */ "./node_modules/@solana/codecs-core/dist/index.browser.mjs");
/* harmony import */ var _solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @solana/codecs-data-structures */ "./node_modules/@solana/codecs-data-structures/dist/index.browser.mjs");
/* harmony import */ var _solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @solana/codecs-numbers */ "./node_modules/@solana/codecs-numbers/dist/index.browser.mjs");




// src/option.ts
var some = (value) => ({ __option: "Some", value });
var none = () => ({ __option: "None" });
var isOption = (input) => !!(input && typeof input === "object" && "__option" in input && (input.__option === "Some" && "value" in input || input.__option === "None"));
var isSome = (option) => option.__option === "Some";
var isNone = (option) => option.__option === "None";

// src/unwrap-option.ts
function unwrapOption(option, fallback) {
  if (isSome(option)) return option.value;
  return fallback ? fallback() : null;
}
var wrapNullable = (nullable) => nullable !== null ? some(nullable) : none();

// src/option-codec.ts
function getOptionEncoder(item, config = {}) {
  const prefix = (() => {
    if (config.prefix === null) {
      return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_0__.transformEncoder)((0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_1__.getUnitEncoder)(), (_boolean) => undefined);
    }
    return (0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_1__.getBooleanEncoder)({ size: config.prefix ?? (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_2__.getU8Encoder)() });
  })();
  const noneValue = (() => {
    if (config.noneValue === "zeroes") {
      (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_0__.assertIsFixedSize)(item);
      return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_0__.fixEncoderSize)((0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_1__.getUnitEncoder)(), item.fixedSize);
    }
    if (!config.noneValue) {
      return (0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_1__.getUnitEncoder)();
    }
    return (0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_1__.getConstantEncoder)(config.noneValue);
  })();
  return (0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_1__.getUnionEncoder)(
    [
      (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_0__.transformEncoder)((0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_1__.getTupleEncoder)([prefix, noneValue]), (_value) => [
        false,
        undefined
      ]),
      (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_0__.transformEncoder)((0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_1__.getTupleEncoder)([prefix, item]), (value) => [
        true,
        isOption(value) && isSome(value) ? value.value : value
      ])
    ],
    (variant) => {
      const option = isOption(variant) ? variant : wrapNullable(variant);
      return Number(isSome(option));
    }
  );
}
function getOptionDecoder(item, config = {}) {
  const prefix = (() => {
    if (config.prefix === null) {
      return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_0__.transformDecoder)((0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_1__.getUnitDecoder)(), () => false);
    }
    return (0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_1__.getBooleanDecoder)({ size: config.prefix ?? (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_2__.getU8Decoder)() });
  })();
  const noneValue = (() => {
    if (config.noneValue === "zeroes") {
      (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_0__.assertIsFixedSize)(item);
      return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_0__.fixDecoderSize)((0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_1__.getUnitDecoder)(), item.fixedSize);
    }
    if (!config.noneValue) {
      return (0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_1__.getUnitDecoder)();
    }
    return (0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_1__.getConstantDecoder)(config.noneValue);
  })();
  return (0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_1__.getUnionDecoder)(
    [
      (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_0__.transformDecoder)((0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_1__.getTupleDecoder)([prefix, noneValue]), () => none()),
      (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_0__.transformDecoder)((0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_1__.getTupleDecoder)([prefix, item]), ([, value]) => some(value))
    ],
    (bytes, offset) => {
      if (config.prefix === null && !config.noneValue) {
        return Number(offset < bytes.length);
      }
      if (config.prefix === null && config.noneValue != null) {
        const zeroValue = config.noneValue === "zeroes" ? new Uint8Array(noneValue.fixedSize).fill(0) : config.noneValue;
        return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_0__.containsBytes)(bytes, zeroValue, offset) ? 0 : 1;
      }
      return Number(prefix.read(bytes, offset)[0]);
    }
  );
}
function getOptionCodec(item, config = {}) {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_0__.combineCodec)(
    getOptionEncoder(item, config),
    getOptionDecoder(item, config)
  );
}

// src/unwrap-option-recursively.ts
function unwrapOptionRecursively(input, fallback) {
  if (!input || ArrayBuffer.isView(input)) {
    return input;
  }
  const next = (x) => fallback ? unwrapOptionRecursively(x, fallback) : unwrapOptionRecursively(x);
  if (isOption(input)) {
    if (isSome(input)) return next(input.value);
    return fallback ? fallback() : null;
  }
  if (Array.isArray(input)) {
    return input.map(next);
  }
  if (typeof input === "object") {
    return Object.fromEntries(Object.entries(input).map(([k, v]) => [k, next(v)]));
  }
  return input;
}


//# sourceMappingURL=index.browser.mjs.map
//# sourceMappingURL=index.browser.mjs.map

/***/ }),

/***/ "./node_modules/@solana/programs/dist/index.browser.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/@solana/programs/dist/index.browser.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isProgramError": () => (/* binding */ isProgramError)
/* harmony export */ });
/* harmony import */ var _solana_errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @solana/errors */ "./node_modules/@solana/errors/dist/index.browser.mjs");


// src/program-error.ts
function isProgramError(error, transactionMessage, programAddress, code) {
  if (!(0,_solana_errors__WEBPACK_IMPORTED_MODULE_0__.isSolanaError)(error, _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM)) {
    return false;
  }
  const instructionProgramAddress = transactionMessage.instructions[error.context.index]?.programAddress;
  if (!instructionProgramAddress || instructionProgramAddress !== programAddress) {
    return false;
  }
  return typeof code === "undefined" || error.context.code === code;
}


//# sourceMappingURL=index.browser.mjs.map
//# sourceMappingURL=index.browser.mjs.map

/***/ }),

/***/ "./node_modules/@solana/signers/dist/index.browser.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/@solana/signers/dist/index.browser.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addSignersToInstruction": () => (/* binding */ addSignersToInstruction),
/* harmony export */   "addSignersToTransactionMessage": () => (/* binding */ addSignersToTransactionMessage),
/* harmony export */   "assertIsKeyPairSigner": () => (/* binding */ assertIsKeyPairSigner),
/* harmony export */   "assertIsMessageModifyingSigner": () => (/* binding */ assertIsMessageModifyingSigner),
/* harmony export */   "assertIsMessagePartialSigner": () => (/* binding */ assertIsMessagePartialSigner),
/* harmony export */   "assertIsMessageSigner": () => (/* binding */ assertIsMessageSigner),
/* harmony export */   "assertIsTransactionMessageWithSingleSendingSigner": () => (/* binding */ assertIsTransactionMessageWithSingleSendingSigner),
/* harmony export */   "assertIsTransactionModifyingSigner": () => (/* binding */ assertIsTransactionModifyingSigner),
/* harmony export */   "assertIsTransactionPartialSigner": () => (/* binding */ assertIsTransactionPartialSigner),
/* harmony export */   "assertIsTransactionSendingSigner": () => (/* binding */ assertIsTransactionSendingSigner),
/* harmony export */   "assertIsTransactionSigner": () => (/* binding */ assertIsTransactionSigner),
/* harmony export */   "createKeyPairSignerFromBytes": () => (/* binding */ createKeyPairSignerFromBytes),
/* harmony export */   "createKeyPairSignerFromPrivateKeyBytes": () => (/* binding */ createKeyPairSignerFromPrivateKeyBytes),
/* harmony export */   "createNoopSigner": () => (/* binding */ createNoopSigner),
/* harmony export */   "createSignableMessage": () => (/* binding */ createSignableMessage),
/* harmony export */   "createSignerFromKeyPair": () => (/* binding */ createSignerFromKeyPair),
/* harmony export */   "generateKeyPairSigner": () => (/* binding */ generateKeyPairSigner),
/* harmony export */   "getSignersFromInstruction": () => (/* binding */ getSignersFromInstruction),
/* harmony export */   "getSignersFromTransactionMessage": () => (/* binding */ getSignersFromTransactionMessage),
/* harmony export */   "isKeyPairSigner": () => (/* binding */ isKeyPairSigner),
/* harmony export */   "isMessageModifyingSigner": () => (/* binding */ isMessageModifyingSigner),
/* harmony export */   "isMessagePartialSigner": () => (/* binding */ isMessagePartialSigner),
/* harmony export */   "isMessageSigner": () => (/* binding */ isMessageSigner),
/* harmony export */   "isTransactionMessageWithSingleSendingSigner": () => (/* binding */ isTransactionMessageWithSingleSendingSigner),
/* harmony export */   "isTransactionModifyingSigner": () => (/* binding */ isTransactionModifyingSigner),
/* harmony export */   "isTransactionPartialSigner": () => (/* binding */ isTransactionPartialSigner),
/* harmony export */   "isTransactionSendingSigner": () => (/* binding */ isTransactionSendingSigner),
/* harmony export */   "isTransactionSigner": () => (/* binding */ isTransactionSigner),
/* harmony export */   "partiallySignTransactionMessageWithSigners": () => (/* binding */ partiallySignTransactionMessageWithSigners),
/* harmony export */   "setTransactionMessageFeePayerSigner": () => (/* binding */ setTransactionMessageFeePayerSigner),
/* harmony export */   "signAndSendTransactionMessageWithSigners": () => (/* binding */ signAndSendTransactionMessageWithSigners),
/* harmony export */   "signTransactionMessageWithSigners": () => (/* binding */ signTransactionMessageWithSigners)
/* harmony export */ });
/* harmony import */ var _solana_errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @solana/errors */ "./node_modules/@solana/errors/dist/index.browser.mjs");
/* harmony import */ var _solana_instructions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @solana/instructions */ "./node_modules/@solana/instructions/dist/index.browser.mjs");
/* harmony import */ var _solana_addresses__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @solana/addresses */ "./node_modules/@solana/addresses/dist/index.browser.mjs");
/* harmony import */ var _solana_keys__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @solana/keys */ "./node_modules/@solana/keys/dist/index.browser.mjs");
/* harmony import */ var _solana_transactions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @solana/transactions */ "./node_modules/@solana/transactions/dist/index.browser.mjs");






// src/deduplicate-signers.ts
function deduplicateSigners(signers) {
  const deduplicated = {};
  signers.forEach((signer) => {
    if (!deduplicated[signer.address]) {
      deduplicated[signer.address] = signer;
    } else if (deduplicated[signer.address] !== signer) {
      throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__SIGNER__ADDRESS_CANNOT_HAVE_MULTIPLE_SIGNERS, {
        address: signer.address
      });
    }
  });
  return Object.values(deduplicated);
}
function isTransactionModifyingSigner(value) {
  return "modifyAndSignTransactions" in value && typeof value.modifyAndSignTransactions === "function";
}
function assertIsTransactionModifyingSigner(value) {
  if (!isTransactionModifyingSigner(value)) {
    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_MODIFYING_SIGNER, {
      address: value.address
    });
  }
}
function isTransactionPartialSigner(value) {
  return "signTransactions" in value && typeof value.signTransactions === "function";
}
function assertIsTransactionPartialSigner(value) {
  if (!isTransactionPartialSigner(value)) {
    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_PARTIAL_SIGNER, {
      address: value.address
    });
  }
}
function isTransactionSendingSigner(value) {
  return "signAndSendTransactions" in value && typeof value.signAndSendTransactions === "function";
}
function assertIsTransactionSendingSigner(value) {
  if (!isTransactionSendingSigner(value)) {
    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SENDING_SIGNER, {
      address: value.address
    });
  }
}

// src/transaction-signer.ts
function isTransactionSigner(value) {
  return isTransactionPartialSigner(value) || isTransactionModifyingSigner(value) || isTransactionSendingSigner(value);
}
function assertIsTransactionSigner(value) {
  if (!isTransactionSigner(value)) {
    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__SIGNER__EXPECTED_TRANSACTION_SIGNER, {
      address: value.address
    });
  }
}

// src/account-signer-meta.ts
function getSignersFromInstruction(instruction) {
  return deduplicateSigners(
    (instruction.accounts ?? []).flatMap((account) => "signer" in account ? account.signer : [])
  );
}
function getSignersFromTransactionMessage(transaction) {
  return deduplicateSigners([
    ...transaction.feePayer && isTransactionSigner(transaction.feePayer) ? [transaction.feePayer] : [],
    ...transaction.instructions.flatMap(getSignersFromInstruction)
  ]);
}
function addSignersToInstruction(signers, instruction) {
  if (!instruction.accounts || instruction.accounts.length === 0) {
    return instruction;
  }
  const signerByAddress = new Map(deduplicateSigners(signers).map((signer) => [signer.address, signer]));
  return Object.freeze({
    ...instruction,
    accounts: instruction.accounts.map((account) => {
      const signer = signerByAddress.get(account.address);
      if (!(0,_solana_instructions__WEBPACK_IMPORTED_MODULE_1__.isSignerRole)(account.role) || "signer" in account || !signer) {
        return account;
      }
      return Object.freeze({ ...account, signer });
    })
  });
}
function addSignersToTransactionMessage(signers, transactionMessage) {
  const feePayerSigner = hasAddressOnlyFeePayer(transactionMessage) ? signers.find((signer) => signer.address === transactionMessage.feePayer.address) : undefined;
  if (!feePayerSigner && transactionMessage.instructions.length === 0) {
    return transactionMessage;
  }
  return Object.freeze({
    ...transactionMessage,
    ...feePayerSigner ? { feePayer: feePayerSigner } : null,
    instructions: transactionMessage.instructions.map((instruction) => addSignersToInstruction(signers, instruction))
  });
}
function hasAddressOnlyFeePayer(message) {
  return !!message && "feePayer" in message && !!message.feePayer && typeof message.feePayer.address === "string" && !isTransactionSigner(message.feePayer);
}

// src/fee-payer-signer.ts
function setTransactionMessageFeePayerSigner(feePayer, transactionMessage) {
  Object.freeze(feePayer);
  const out = { ...transactionMessage, feePayer };
  Object.freeze(out);
  return out;
}
function isMessagePartialSigner(value) {
  return "signMessages" in value && typeof value.signMessages === "function";
}
function assertIsMessagePartialSigner(value) {
  if (!isMessagePartialSigner(value)) {
    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_PARTIAL_SIGNER, {
      address: value.address
    });
  }
}

// src/keypair-signer.ts
function isKeyPairSigner(value) {
  return "keyPair" in value && typeof value.keyPair === "object" && isMessagePartialSigner(value) && isTransactionPartialSigner(value);
}
function assertIsKeyPairSigner(value) {
  if (!isKeyPairSigner(value)) {
    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__SIGNER__EXPECTED_KEY_PAIR_SIGNER, {
      address: value.address
    });
  }
}
async function createSignerFromKeyPair(keyPair) {
  const address = await (0,_solana_addresses__WEBPACK_IMPORTED_MODULE_2__.getAddressFromPublicKey)(keyPair.publicKey);
  const out = {
    address,
    keyPair,
    signMessages: (messages) => Promise.all(
      messages.map(
        async (message) => Object.freeze({ [address]: await (0,_solana_keys__WEBPACK_IMPORTED_MODULE_3__.signBytes)(keyPair.privateKey, message.content) })
      )
    ),
    signTransactions: (transactions) => Promise.all(
      transactions.map(async (transaction) => {
        const signedTransaction = await (0,_solana_transactions__WEBPACK_IMPORTED_MODULE_4__.partiallySignTransaction)([keyPair], transaction);
        return Object.freeze({ [address]: signedTransaction.signatures[address] });
      })
    )
  };
  return Object.freeze(out);
}
async function generateKeyPairSigner() {
  return await createSignerFromKeyPair(await (0,_solana_keys__WEBPACK_IMPORTED_MODULE_3__.generateKeyPair)());
}
async function createKeyPairSignerFromBytes(bytes, extractable) {
  return await createSignerFromKeyPair(await (0,_solana_keys__WEBPACK_IMPORTED_MODULE_3__.createKeyPairFromBytes)(bytes, extractable));
}
async function createKeyPairSignerFromPrivateKeyBytes(bytes, extractable) {
  return await createSignerFromKeyPair(await (0,_solana_keys__WEBPACK_IMPORTED_MODULE_3__.createKeyPairFromPrivateKeyBytes)(bytes, extractable));
}
function isMessageModifyingSigner(value) {
  return (0,_solana_addresses__WEBPACK_IMPORTED_MODULE_2__.isAddress)(value.address) && "modifyAndSignMessages" in value && typeof value.modifyAndSignMessages === "function";
}
function assertIsMessageModifyingSigner(value) {
  if (!isMessageModifyingSigner(value)) {
    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_MODIFYING_SIGNER, {
      address: value.address
    });
  }
}
function isMessageSigner(value) {
  return isMessagePartialSigner(value) || isMessageModifyingSigner(value);
}
function assertIsMessageSigner(value) {
  if (!isMessageSigner(value)) {
    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__SIGNER__EXPECTED_MESSAGE_SIGNER, {
      address: value.address
    });
  }
}

// src/noop-signer.ts
function createNoopSigner(address) {
  const out = {
    address,
    signMessages: (messages) => Promise.resolve(messages.map(() => Object.freeze({}))),
    signTransactions: (transactions) => Promise.resolve(transactions.map(() => Object.freeze({})))
  };
  return Object.freeze(out);
}
function isTransactionMessageWithSingleSendingSigner(transaction) {
  try {
    assertIsTransactionMessageWithSingleSendingSigner(transaction);
    return true;
  } catch {
    return false;
  }
}
function assertIsTransactionMessageWithSingleSendingSigner(transaction) {
  const signers = getSignersFromTransactionMessage(transaction);
  const sendingSigners = signers.filter(isTransactionSendingSigner);
  if (sendingSigners.length === 0) {
    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__SIGNER__TRANSACTION_SENDING_SIGNER_MISSING);
  }
  const sendingOnlySigners = sendingSigners.filter(
    (signer) => !isTransactionPartialSigner(signer) && !isTransactionModifyingSigner(signer)
  );
  if (sendingOnlySigners.length > 1) {
    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__SIGNER__TRANSACTION_CANNOT_HAVE_MULTIPLE_SENDING_SIGNERS);
  }
}

// src/sign-transaction.ts
async function partiallySignTransactionMessageWithSigners(transactionMessage, config) {
  const { partialSigners, modifyingSigners } = categorizeTransactionSigners(
    deduplicateSigners(getSignersFromTransactionMessage(transactionMessage).filter(isTransactionSigner)),
    { identifySendingSigner: false }
  );
  return await signModifyingAndPartialTransactionSigners(
    transactionMessage,
    modifyingSigners,
    partialSigners,
    config
  );
}
async function signTransactionMessageWithSigners(transactionMessage, config) {
  const signedTransaction = await partiallySignTransactionMessageWithSigners(transactionMessage, config);
  (0,_solana_transactions__WEBPACK_IMPORTED_MODULE_4__.assertTransactionIsFullySigned)(signedTransaction);
  return signedTransaction;
}
async function signAndSendTransactionMessageWithSigners(transaction, config) {
  assertIsTransactionMessageWithSingleSendingSigner(transaction);
  const abortSignal = config?.abortSignal;
  const { partialSigners, modifyingSigners, sendingSigner } = categorizeTransactionSigners(
    deduplicateSigners(getSignersFromTransactionMessage(transaction).filter(isTransactionSigner))
  );
  abortSignal?.throwIfAborted();
  const signedTransaction = await signModifyingAndPartialTransactionSigners(
    transaction,
    modifyingSigners,
    partialSigners,
    config
  );
  if (!sendingSigner) {
    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__SIGNER__TRANSACTION_SENDING_SIGNER_MISSING);
  }
  abortSignal?.throwIfAborted();
  const [signature] = await sendingSigner.signAndSendTransactions([signedTransaction], config);
  abortSignal?.throwIfAborted();
  return signature;
}
function categorizeTransactionSigners(signers, config = {}) {
  const identifySendingSigner = config.identifySendingSigner ?? true;
  const sendingSigner = identifySendingSigner ? identifyTransactionSendingSigner(signers) : null;
  const otherSigners = signers.filter(
    (signer) => signer !== sendingSigner && (isTransactionModifyingSigner(signer) || isTransactionPartialSigner(signer))
  );
  const modifyingSigners = identifyTransactionModifyingSigners(otherSigners);
  const partialSigners = otherSigners.filter(isTransactionPartialSigner).filter((signer) => !modifyingSigners.includes(signer));
  return Object.freeze({ modifyingSigners, partialSigners, sendingSigner });
}
function identifyTransactionSendingSigner(signers) {
  const sendingSigners = signers.filter(isTransactionSendingSigner);
  if (sendingSigners.length === 0) return null;
  const sendingOnlySigners = sendingSigners.filter(
    (signer) => !isTransactionModifyingSigner(signer) && !isTransactionPartialSigner(signer)
  );
  if (sendingOnlySigners.length > 0) {
    return sendingOnlySigners[0];
  }
  return sendingSigners[0];
}
function identifyTransactionModifyingSigners(signers) {
  const modifyingSigners = signers.filter(isTransactionModifyingSigner);
  if (modifyingSigners.length === 0) return [];
  const nonPartialSigners = modifyingSigners.filter((signer) => !isTransactionPartialSigner(signer));
  if (nonPartialSigners.length > 0) return nonPartialSigners;
  return [modifyingSigners[0]];
}
async function signModifyingAndPartialTransactionSigners(transactionMessage, modifyingSigners = [], partialSigners = [], config) {
  const transaction = (0,_solana_transactions__WEBPACK_IMPORTED_MODULE_4__.compileTransaction)(transactionMessage);
  const modifiedTransaction = await modifyingSigners.reduce(
    async (transaction2, modifyingSigner) => {
      config?.abortSignal?.throwIfAborted();
      const [tx] = await modifyingSigner.modifyAndSignTransactions([await transaction2], config);
      return Object.freeze(tx);
    },
    Promise.resolve(transaction)
  );
  config?.abortSignal?.throwIfAborted();
  const signatureDictionaries = await Promise.all(
    partialSigners.map(async (partialSigner) => {
      const [signatures] = await partialSigner.signTransactions([modifiedTransaction], config);
      return signatures;
    })
  );
  const signedTransaction = {
    ...modifiedTransaction,
    signatures: Object.freeze(
      signatureDictionaries.reduce((signatures, signatureDictionary) => {
        return { ...signatures, ...signatureDictionary };
      }, modifiedTransaction.signatures ?? {})
    )
  };
  return Object.freeze(signedTransaction);
}
var o = globalThis.TextEncoder;

// src/signable-message.ts
function createSignableMessage(content, signatures = {}) {
  return Object.freeze({
    content: typeof content === "string" ? new o().encode(content) : content,
    signatures: Object.freeze({ ...signatures })
  });
}


//# sourceMappingURL=index.browser.mjs.map
//# sourceMappingURL=index.browser.mjs.map

/***/ }),

/***/ "./node_modules/@solana/transaction-messages/dist/index.browser.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/@solana/transaction-messages/dist/index.browser.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "appendTransactionMessageInstruction": () => (/* binding */ appendTransactionMessageInstruction),
/* harmony export */   "appendTransactionMessageInstructions": () => (/* binding */ appendTransactionMessageInstructions),
/* harmony export */   "assertIsDurableNonceTransactionMessage": () => (/* binding */ assertIsDurableNonceTransactionMessage),
/* harmony export */   "assertIsTransactionMessageWithBlockhashLifetime": () => (/* binding */ assertIsTransactionMessageWithBlockhashLifetime),
/* harmony export */   "compileTransactionMessage": () => (/* binding */ compileTransactionMessage),
/* harmony export */   "compressTransactionMessageUsingAddressLookupTables": () => (/* binding */ compressTransactionMessageUsingAddressLookupTables),
/* harmony export */   "createTransactionMessage": () => (/* binding */ createTransactionMessage),
/* harmony export */   "decompileTransactionMessage": () => (/* binding */ decompileTransactionMessage),
/* harmony export */   "getCompiledTransactionMessageCodec": () => (/* binding */ getCompiledTransactionMessageCodec),
/* harmony export */   "getCompiledTransactionMessageDecoder": () => (/* binding */ getCompiledTransactionMessageDecoder),
/* harmony export */   "getCompiledTransactionMessageEncoder": () => (/* binding */ getCompiledTransactionMessageEncoder),
/* harmony export */   "getTransactionVersionCodec": () => (/* binding */ getTransactionVersionCodec),
/* harmony export */   "getTransactionVersionDecoder": () => (/* binding */ getTransactionVersionDecoder),
/* harmony export */   "getTransactionVersionEncoder": () => (/* binding */ getTransactionVersionEncoder),
/* harmony export */   "isAdvanceNonceAccountInstruction": () => (/* binding */ isAdvanceNonceAccountInstruction),
/* harmony export */   "isDurableNonceTransaction": () => (/* binding */ isDurableNonceTransaction),
/* harmony export */   "isTransactionMessageWithBlockhashLifetime": () => (/* binding */ isTransactionMessageWithBlockhashLifetime),
/* harmony export */   "prependTransactionMessageInstruction": () => (/* binding */ prependTransactionMessageInstruction),
/* harmony export */   "prependTransactionMessageInstructions": () => (/* binding */ prependTransactionMessageInstructions),
/* harmony export */   "setTransactionMessageFeePayer": () => (/* binding */ setTransactionMessageFeePayer),
/* harmony export */   "setTransactionMessageLifetimeUsingBlockhash": () => (/* binding */ setTransactionMessageLifetimeUsingBlockhash),
/* harmony export */   "setTransactionMessageLifetimeUsingDurableNonce": () => (/* binding */ setTransactionMessageLifetimeUsingDurableNonce)
/* harmony export */ });
/* harmony import */ var _solana_errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @solana/errors */ "./node_modules/@solana/errors/dist/index.browser.mjs");
/* harmony import */ var _solana_rpc_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @solana/rpc-types */ "./node_modules/@solana/rpc-types/dist/index.browser.mjs");
/* harmony import */ var _solana_addresses__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @solana/addresses */ "./node_modules/@solana/addresses/dist/index.browser.mjs");
/* harmony import */ var _solana_codecs_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @solana/codecs-core */ "./node_modules/@solana/codecs-core/dist/index.browser.mjs");
/* harmony import */ var _solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @solana/codecs-data-structures */ "./node_modules/@solana/codecs-data-structures/dist/index.browser.mjs");
/* harmony import */ var _solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @solana/codecs-numbers */ "./node_modules/@solana/codecs-numbers/dist/index.browser.mjs");
/* harmony import */ var _solana_instructions__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @solana/instructions */ "./node_modules/@solana/instructions/dist/index.browser.mjs");
/* harmony import */ var _solana_functional__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @solana/functional */ "./node_modules/@solana/functional/dist/index.browser.mjs");









// src/blockhash.ts
function isTransactionMessageWithBlockhashLifetime(transaction) {
  const lifetimeConstraintShapeMatches = "lifetimeConstraint" in transaction && typeof transaction.lifetimeConstraint.blockhash === "string" && typeof transaction.lifetimeConstraint.lastValidBlockHeight === "bigint";
  if (!lifetimeConstraintShapeMatches) return false;
  try {
    (0,_solana_rpc_types__WEBPACK_IMPORTED_MODULE_0__.assertIsBlockhash)(transaction.lifetimeConstraint.blockhash);
    return true;
  } catch {
    return false;
  }
}
function assertIsTransactionMessageWithBlockhashLifetime(transaction) {
  if (!isTransactionMessageWithBlockhashLifetime(transaction)) {
    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_1__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_1__.SOLANA_ERROR__TRANSACTION__EXPECTED_BLOCKHASH_LIFETIME);
  }
}
function setTransactionMessageLifetimeUsingBlockhash(blockhashLifetimeConstraint, transaction) {
  if ("lifetimeConstraint" in transaction && transaction.lifetimeConstraint.blockhash === blockhashLifetimeConstraint.blockhash && transaction.lifetimeConstraint.lastValidBlockHeight === blockhashLifetimeConstraint.lastValidBlockHeight) {
    return transaction;
  }
  const out = {
    ...transaction,
    lifetimeConstraint: Object.freeze(blockhashLifetimeConstraint)
  };
  Object.freeze(out);
  return out;
}
function assertValidBaseString(alphabet4, testValue, givenValue = testValue) {
  if (!testValue.match(new RegExp(`^[${alphabet4}]*$`))) {
    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_1__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_1__.SOLANA_ERROR__CODECS__INVALID_STRING_FOR_BASE, {
      alphabet: alphabet4,
      base: alphabet4.length,
      value: givenValue
    });
  }
}
var getBaseXEncoder = (alphabet4) => {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_2__.createEncoder)({
    getSizeFromValue: (value) => {
      const [leadingZeroes, tailChars] = partitionLeadingZeroes(value, alphabet4[0]);
      if (!tailChars) return value.length;
      const base10Number = getBigIntFromBaseX(tailChars, alphabet4);
      return leadingZeroes.length + Math.ceil(base10Number.toString(16).length / 2);
    },
    write(value, bytes, offset) {
      assertValidBaseString(alphabet4, value);
      if (value === "") return offset;
      const [leadingZeroes, tailChars] = partitionLeadingZeroes(value, alphabet4[0]);
      if (!tailChars) {
        bytes.set(new Uint8Array(leadingZeroes.length).fill(0), offset);
        return offset + leadingZeroes.length;
      }
      let base10Number = getBigIntFromBaseX(tailChars, alphabet4);
      const tailBytes = [];
      while (base10Number > 0n) {
        tailBytes.unshift(Number(base10Number % 256n));
        base10Number /= 256n;
      }
      const bytesToAdd = [...Array(leadingZeroes.length).fill(0), ...tailBytes];
      bytes.set(bytesToAdd, offset);
      return offset + bytesToAdd.length;
    }
  });
};
var getBaseXDecoder = (alphabet4) => {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_2__.createDecoder)({
    read(rawBytes, offset) {
      const bytes = offset === 0 ? rawBytes : rawBytes.slice(offset);
      if (bytes.length === 0) return ["", 0];
      let trailIndex = bytes.findIndex((n) => n !== 0);
      trailIndex = trailIndex === -1 ? bytes.length : trailIndex;
      const leadingZeroes = alphabet4[0].repeat(trailIndex);
      if (trailIndex === bytes.length) return [leadingZeroes, rawBytes.length];
      const base10Number = bytes.slice(trailIndex).reduce((sum, byte) => sum * 256n + BigInt(byte), 0n);
      const tailChars = getBaseXFromBigInt(base10Number, alphabet4);
      return [leadingZeroes + tailChars, rawBytes.length];
    }
  });
};
function partitionLeadingZeroes(value, zeroCharacter) {
  const [leadingZeros, tailChars] = value.split(new RegExp(`((?!${zeroCharacter}).*)`));
  return [leadingZeros, tailChars];
}
function getBigIntFromBaseX(value, alphabet4) {
  const base = BigInt(alphabet4.length);
  let sum = 0n;
  for (const char of value) {
    sum *= base;
    sum += BigInt(alphabet4.indexOf(char));
  }
  return sum;
}
function getBaseXFromBigInt(value, alphabet4) {
  const base = BigInt(alphabet4.length);
  const tailChars = [];
  while (value > 0n) {
    tailChars.unshift(alphabet4[Number(value % base)]);
    value /= base;
  }
  return tailChars.join("");
}
var alphabet2 = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
var getBase58Encoder = () => getBaseXEncoder(alphabet2);
var getBase58Decoder = () => getBaseXDecoder(alphabet2);
var memoizedAddressTableLookupEncoder;
function getAddressTableLookupEncoder() {
  if (!memoizedAddressTableLookupEncoder) {
    memoizedAddressTableLookupEncoder = (0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_3__.getStructEncoder)([
      ["lookupTableAddress", (0,_solana_addresses__WEBPACK_IMPORTED_MODULE_4__.getAddressEncoder)()],
      [
        "writableIndices",
        (0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_3__.getArrayEncoder)((0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_5__.getU8Encoder)(), { size: (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_5__.getShortU16Encoder)() })
      ],
      [
        "readableIndices",
        (0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_3__.getArrayEncoder)((0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_5__.getU8Encoder)(), { size: (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_5__.getShortU16Encoder)() })
      ]
    ]);
  }
  return memoizedAddressTableLookupEncoder;
}
var memoizedAddressTableLookupDecoder;
function getAddressTableLookupDecoder() {
  if (!memoizedAddressTableLookupDecoder) {
    memoizedAddressTableLookupDecoder = (0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_3__.getStructDecoder)([
      ["lookupTableAddress", (0,_solana_addresses__WEBPACK_IMPORTED_MODULE_4__.getAddressDecoder)()],
      ["writableIndices", (0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_3__.getArrayDecoder)((0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_5__.getU8Decoder)(), { size: (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_5__.getShortU16Decoder)() })],
      ["readableIndices", (0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_3__.getArrayDecoder)((0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_5__.getU8Decoder)(), { size: (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_5__.getShortU16Decoder)() })]
    ]);
  }
  return memoizedAddressTableLookupDecoder;
}
var memoizedU8Encoder;
function getMemoizedU8Encoder() {
  if (!memoizedU8Encoder) memoizedU8Encoder = (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_5__.getU8Encoder)();
  return memoizedU8Encoder;
}
var memoizedU8Decoder;
function getMemoizedU8Decoder() {
  if (!memoizedU8Decoder) memoizedU8Decoder = (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_5__.getU8Decoder)();
  return memoizedU8Decoder;
}
function getMessageHeaderEncoder() {
  return (0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_3__.getStructEncoder)([
    ["numSignerAccounts", getMemoizedU8Encoder()],
    ["numReadonlySignerAccounts", getMemoizedU8Encoder()],
    ["numReadonlyNonSignerAccounts", getMemoizedU8Encoder()]
  ]);
}
function getMessageHeaderDecoder() {
  return (0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_3__.getStructDecoder)([
    ["numSignerAccounts", getMemoizedU8Decoder()],
    ["numReadonlySignerAccounts", getMemoizedU8Decoder()],
    ["numReadonlyNonSignerAccounts", getMemoizedU8Decoder()]
  ]);
}
var memoizedGetInstructionEncoder;
function getInstructionEncoder() {
  if (!memoizedGetInstructionEncoder) {
    memoizedGetInstructionEncoder = (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_2__.transformEncoder)(
      (0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_3__.getStructEncoder)([
        ["programAddressIndex", (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_5__.getU8Encoder)()],
        ["accountIndices", (0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_3__.getArrayEncoder)((0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_5__.getU8Encoder)(), { size: (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_5__.getShortU16Encoder)() })],
        ["data", (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_2__.addEncoderSizePrefix)((0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_3__.getBytesEncoder)(), (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_5__.getShortU16Encoder)())]
      ]),
      // Convert an instruction to have all fields defined
      (instruction) => {
        if (instruction.accountIndices !== undefined && instruction.data !== undefined) {
          return instruction;
        }
        return {
          ...instruction,
          accountIndices: instruction.accountIndices ?? [],
          data: instruction.data ?? new Uint8Array(0)
        };
      }
    );
  }
  return memoizedGetInstructionEncoder;
}
var memoizedGetInstructionDecoder;
function getInstructionDecoder() {
  if (!memoizedGetInstructionDecoder) {
    memoizedGetInstructionDecoder = (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_2__.transformDecoder)(
      (0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_3__.getStructDecoder)([
        ["programAddressIndex", (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_5__.getU8Decoder)()],
        ["accountIndices", (0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_3__.getArrayDecoder)((0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_5__.getU8Decoder)(), { size: (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_5__.getShortU16Decoder)() })],
        [
          "data",
          (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_2__.addDecoderSizePrefix)((0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_3__.getBytesDecoder)(), (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_5__.getShortU16Decoder)())
        ]
      ]),
      // Convert an instruction to exclude optional fields if they are empty
      (instruction) => {
        if (instruction.accountIndices.length && instruction.data.byteLength) {
          return instruction;
        }
        const { accountIndices, data, ...rest } = instruction;
        return {
          ...rest,
          ...accountIndices.length ? { accountIndices } : null,
          ...data.byteLength ? { data } : null
        };
      }
    );
  }
  return memoizedGetInstructionDecoder;
}
var VERSION_FLAG_MASK = 128;
function getTransactionVersionEncoder() {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_2__.createEncoder)({
    getSizeFromValue: (value) => value === "legacy" ? 0 : 1,
    maxSize: 1,
    write: (value, bytes, offset) => {
      if (value === "legacy") {
        return offset;
      }
      if (value < 0 || value > 127) {
        throw new _solana_errors__WEBPACK_IMPORTED_MODULE_1__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_1__.SOLANA_ERROR__TRANSACTION__VERSION_NUMBER_OUT_OF_RANGE, {
          actualVersion: value
        });
      }
      bytes.set([value | VERSION_FLAG_MASK], offset);
      return offset + 1;
    }
  });
}
function getTransactionVersionDecoder() {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_2__.createDecoder)({
    maxSize: 1,
    read: (bytes, offset) => {
      const firstByte = bytes[offset];
      if ((firstByte & VERSION_FLAG_MASK) === 0) {
        return ["legacy", offset];
      } else {
        const version = firstByte ^ VERSION_FLAG_MASK;
        return [version, offset + 1];
      }
    }
  });
}
function getTransactionVersionCodec() {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_2__.combineCodec)(getTransactionVersionEncoder(), getTransactionVersionDecoder());
}

// src/codecs/message.ts
function getCompiledMessageLegacyEncoder() {
  return (0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_3__.getStructEncoder)(getPreludeStructEncoderTuple());
}
function getCompiledMessageVersionedEncoder() {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_2__.transformEncoder)(
    (0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_3__.getStructEncoder)([
      ...getPreludeStructEncoderTuple(),
      ["addressTableLookups", getAddressTableLookupArrayEncoder()]
    ]),
    (value) => {
      if (value.version === "legacy") {
        return value;
      }
      return {
        ...value,
        addressTableLookups: value.addressTableLookups ?? []
      };
    }
  );
}
function getPreludeStructEncoderTuple() {
  return [
    ["version", getTransactionVersionEncoder()],
    ["header", getMessageHeaderEncoder()],
    ["staticAccounts", (0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_3__.getArrayEncoder)((0,_solana_addresses__WEBPACK_IMPORTED_MODULE_4__.getAddressEncoder)(), { size: (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_5__.getShortU16Encoder)() })],
    ["lifetimeToken", (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_2__.fixEncoderSize)(getBase58Encoder(), 32)],
    ["instructions", (0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_3__.getArrayEncoder)(getInstructionEncoder(), { size: (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_5__.getShortU16Encoder)() })]
  ];
}
function getPreludeStructDecoderTuple() {
  return [
    ["version", getTransactionVersionDecoder()],
    ["header", getMessageHeaderDecoder()],
    ["staticAccounts", (0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_3__.getArrayDecoder)((0,_solana_addresses__WEBPACK_IMPORTED_MODULE_4__.getAddressDecoder)(), { size: (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_5__.getShortU16Decoder)() })],
    ["lifetimeToken", (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_2__.fixDecoderSize)(getBase58Decoder(), 32)],
    ["instructions", (0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_3__.getArrayDecoder)(getInstructionDecoder(), { size: (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_5__.getShortU16Decoder)() })],
    ["addressTableLookups", getAddressTableLookupArrayDecoder()]
  ];
}
function getAddressTableLookupArrayEncoder() {
  return (0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_3__.getArrayEncoder)(getAddressTableLookupEncoder(), { size: (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_5__.getShortU16Encoder)() });
}
function getAddressTableLookupArrayDecoder() {
  return (0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_3__.getArrayDecoder)(getAddressTableLookupDecoder(), { size: (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_5__.getShortU16Decoder)() });
}
function getCompiledTransactionMessageEncoder() {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_2__.createEncoder)({
    getSizeFromValue: (compiledMessage) => {
      if (compiledMessage.version === "legacy") {
        return getCompiledMessageLegacyEncoder().getSizeFromValue(compiledMessage);
      } else {
        return getCompiledMessageVersionedEncoder().getSizeFromValue(compiledMessage);
      }
    },
    write: (compiledMessage, bytes, offset) => {
      if (compiledMessage.version === "legacy") {
        return getCompiledMessageLegacyEncoder().write(compiledMessage, bytes, offset);
      } else {
        return getCompiledMessageVersionedEncoder().write(compiledMessage, bytes, offset);
      }
    }
  });
}
function getCompiledTransactionMessageDecoder() {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_2__.transformDecoder)(
    (0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_3__.getStructDecoder)(getPreludeStructDecoderTuple()),
    ({ addressTableLookups, ...restOfMessage }) => {
      if (restOfMessage.version === "legacy" || !addressTableLookups?.length) {
        return restOfMessage;
      }
      return { ...restOfMessage, addressTableLookups };
    }
  );
}
function getCompiledTransactionMessageCodec() {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_2__.combineCodec)(getCompiledTransactionMessageEncoder(), getCompiledTransactionMessageDecoder());
}
function upsert(addressMap, address, update) {
  addressMap[address] = update(addressMap[address] ?? { role: _solana_instructions__WEBPACK_IMPORTED_MODULE_6__.AccountRole.READONLY });
}
var TYPE = Symbol("AddressMapTypeProperty");
function getAddressMapFromInstructions(feePayer, instructions) {
  const addressMap = {
    [feePayer]: { [TYPE]: 0 /* FEE_PAYER */, role: _solana_instructions__WEBPACK_IMPORTED_MODULE_6__.AccountRole.WRITABLE_SIGNER }
  };
  const addressesOfInvokedPrograms = /* @__PURE__ */ new Set();
  for (const instruction of instructions) {
    upsert(addressMap, instruction.programAddress, (entry) => {
      addressesOfInvokedPrograms.add(instruction.programAddress);
      if (TYPE in entry) {
        if ((0,_solana_instructions__WEBPACK_IMPORTED_MODULE_6__.isWritableRole)(entry.role)) {
          switch (entry[TYPE]) {
            case 0 /* FEE_PAYER */:
              throw new _solana_errors__WEBPACK_IMPORTED_MODULE_1__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_1__.SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_CANNOT_PAY_FEES, {
                programAddress: instruction.programAddress
              });
            default:
              throw new _solana_errors__WEBPACK_IMPORTED_MODULE_1__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_1__.SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_MUST_NOT_BE_WRITABLE, {
                programAddress: instruction.programAddress
              });
          }
        }
        if (entry[TYPE] === 2 /* STATIC */) {
          return entry;
        }
      }
      return { [TYPE]: 2 /* STATIC */, role: _solana_instructions__WEBPACK_IMPORTED_MODULE_6__.AccountRole.READONLY };
    });
    let addressComparator;
    if (!instruction.accounts) {
      continue;
    }
    for (const account of instruction.accounts) {
      upsert(addressMap, account.address, (entry) => {
        const {
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          address: _,
          ...accountMeta
        } = account;
        if (TYPE in entry) {
          switch (entry[TYPE]) {
            case 0 /* FEE_PAYER */:
              return entry;
            case 1 /* LOOKUP_TABLE */: {
              const nextRole = (0,_solana_instructions__WEBPACK_IMPORTED_MODULE_6__.mergeRoles)(entry.role, accountMeta.role);
              if ("lookupTableAddress" in accountMeta) {
                const shouldReplaceEntry = (
                  // Consider using the new LOOKUP_TABLE if its address is different...
                  entry.lookupTableAddress !== accountMeta.lookupTableAddress && // ...and sorts before the existing one.
                  (addressComparator ||= (0,_solana_addresses__WEBPACK_IMPORTED_MODULE_4__.getAddressComparator)())(
                    accountMeta.lookupTableAddress,
                    entry.lookupTableAddress
                  ) < 0
                );
                if (shouldReplaceEntry) {
                  return {
                    [TYPE]: 1 /* LOOKUP_TABLE */,
                    ...accountMeta,
                    role: nextRole
                  };
                }
              } else if ((0,_solana_instructions__WEBPACK_IMPORTED_MODULE_6__.isSignerRole)(accountMeta.role)) {
                return {
                  [TYPE]: 2 /* STATIC */,
                  role: nextRole
                };
              }
              if (entry.role !== nextRole) {
                return {
                  ...entry,
                  role: nextRole
                };
              } else {
                return entry;
              }
            }
            case 2 /* STATIC */: {
              const nextRole = (0,_solana_instructions__WEBPACK_IMPORTED_MODULE_6__.mergeRoles)(entry.role, accountMeta.role);
              if (
                // Check to see if this address represents a program that is invoked
                // in this transaction.
                addressesOfInvokedPrograms.has(account.address)
              ) {
                if ((0,_solana_instructions__WEBPACK_IMPORTED_MODULE_6__.isWritableRole)(accountMeta.role)) {
                  throw new _solana_errors__WEBPACK_IMPORTED_MODULE_1__.SolanaError(
                    _solana_errors__WEBPACK_IMPORTED_MODULE_1__.SOLANA_ERROR__TRANSACTION__INVOKED_PROGRAMS_MUST_NOT_BE_WRITABLE,
                    {
                      programAddress: account.address
                    }
                  );
                }
                if (entry.role !== nextRole) {
                  return {
                    ...entry,
                    role: nextRole
                  };
                } else {
                  return entry;
                }
              } else if ("lookupTableAddress" in accountMeta && // Static accounts can be 'upgraded' to lookup table accounts as
              // long as they are not require to sign the transaction.
              !(0,_solana_instructions__WEBPACK_IMPORTED_MODULE_6__.isSignerRole)(entry.role)) {
                return {
                  ...accountMeta,
                  [TYPE]: 1 /* LOOKUP_TABLE */,
                  role: nextRole
                };
              } else {
                if (entry.role !== nextRole) {
                  return {
                    ...entry,
                    role: nextRole
                  };
                } else {
                  return entry;
                }
              }
            }
          }
        }
        if ("lookupTableAddress" in accountMeta) {
          return {
            ...accountMeta,
            [TYPE]: 1 /* LOOKUP_TABLE */
          };
        } else {
          return {
            ...accountMeta,
            [TYPE]: 2 /* STATIC */
          };
        }
      });
    }
  }
  return addressMap;
}
function getOrderedAccountsFromAddressMap(addressMap) {
  let addressComparator;
  const orderedAccounts = Object.entries(addressMap).sort(([leftAddress, leftEntry], [rightAddress, rightEntry]) => {
    if (leftEntry[TYPE] !== rightEntry[TYPE]) {
      if (leftEntry[TYPE] === 0 /* FEE_PAYER */) {
        return -1;
      } else if (rightEntry[TYPE] === 0 /* FEE_PAYER */) {
        return 1;
      } else if (leftEntry[TYPE] === 2 /* STATIC */) {
        return -1;
      } else if (rightEntry[TYPE] === 2 /* STATIC */) {
        return 1;
      }
    }
    const leftIsSigner = (0,_solana_instructions__WEBPACK_IMPORTED_MODULE_6__.isSignerRole)(leftEntry.role);
    if (leftIsSigner !== (0,_solana_instructions__WEBPACK_IMPORTED_MODULE_6__.isSignerRole)(rightEntry.role)) {
      return leftIsSigner ? -1 : 1;
    }
    const leftIsWritable = (0,_solana_instructions__WEBPACK_IMPORTED_MODULE_6__.isWritableRole)(leftEntry.role);
    if (leftIsWritable !== (0,_solana_instructions__WEBPACK_IMPORTED_MODULE_6__.isWritableRole)(rightEntry.role)) {
      return leftIsWritable ? -1 : 1;
    }
    addressComparator ||= (0,_solana_addresses__WEBPACK_IMPORTED_MODULE_4__.getAddressComparator)();
    if (leftEntry[TYPE] === 1 /* LOOKUP_TABLE */ && rightEntry[TYPE] === 1 /* LOOKUP_TABLE */ && leftEntry.lookupTableAddress !== rightEntry.lookupTableAddress) {
      return addressComparator(leftEntry.lookupTableAddress, rightEntry.lookupTableAddress);
    } else {
      return addressComparator(leftAddress, rightAddress);
    }
  }).map(([address, addressMeta]) => ({
    address,
    ...addressMeta
  }));
  return orderedAccounts;
}
function getCompiledAddressTableLookups(orderedAccounts) {
  const index = {};
  for (const account of orderedAccounts) {
    if (!("lookupTableAddress" in account)) {
      continue;
    }
    const entry = index[account.lookupTableAddress] ||= {
      readableIndices: [],
      writableIndices: []
    };
    if (account.role === _solana_instructions__WEBPACK_IMPORTED_MODULE_6__.AccountRole.WRITABLE) {
      entry.writableIndices.push(account.addressIndex);
    } else {
      entry.readableIndices.push(account.addressIndex);
    }
  }
  return Object.keys(index).sort((0,_solana_addresses__WEBPACK_IMPORTED_MODULE_4__.getAddressComparator)()).map((lookupTableAddress) => ({
    lookupTableAddress,
    ...index[lookupTableAddress]
  }));
}
function getCompiledMessageHeader(orderedAccounts) {
  let numReadonlyNonSignerAccounts = 0;
  let numReadonlySignerAccounts = 0;
  let numSignerAccounts = 0;
  for (const account of orderedAccounts) {
    if ("lookupTableAddress" in account) {
      break;
    }
    const accountIsWritable = (0,_solana_instructions__WEBPACK_IMPORTED_MODULE_6__.isWritableRole)(account.role);
    if ((0,_solana_instructions__WEBPACK_IMPORTED_MODULE_6__.isSignerRole)(account.role)) {
      numSignerAccounts++;
      if (!accountIsWritable) {
        numReadonlySignerAccounts++;
      }
    } else if (!accountIsWritable) {
      numReadonlyNonSignerAccounts++;
    }
  }
  return {
    numReadonlyNonSignerAccounts,
    numReadonlySignerAccounts,
    numSignerAccounts
  };
}

// src/compile/instructions.ts
function getAccountIndex(orderedAccounts) {
  const out = {};
  for (const [index, account] of orderedAccounts.entries()) {
    out[account.address] = index;
  }
  return out;
}
function getCompiledInstructions(instructions, orderedAccounts) {
  const accountIndex = getAccountIndex(orderedAccounts);
  return instructions.map(({ accounts, data, programAddress }) => {
    return {
      programAddressIndex: accountIndex[programAddress],
      ...accounts ? { accountIndices: accounts.map(({ address }) => accountIndex[address]) } : null,
      ...data ? { data } : null
    };
  });
}

// src/compile/lifetime-token.ts
function getCompiledLifetimeToken(lifetimeConstraint) {
  if ("nonce" in lifetimeConstraint) {
    return lifetimeConstraint.nonce;
  }
  return lifetimeConstraint.blockhash;
}

// src/compile/static-accounts.ts
function getCompiledStaticAccounts(orderedAccounts) {
  const firstLookupTableAccountIndex = orderedAccounts.findIndex((account) => "lookupTableAddress" in account);
  const orderedStaticAccounts = firstLookupTableAccountIndex === -1 ? orderedAccounts : orderedAccounts.slice(0, firstLookupTableAccountIndex);
  return orderedStaticAccounts.map(({ address }) => address);
}

// src/compile/message.ts
function compileTransactionMessage(transaction) {
  const addressMap = getAddressMapFromInstructions(transaction.feePayer.address, transaction.instructions);
  const orderedAccounts = getOrderedAccountsFromAddressMap(addressMap);
  return {
    ...transaction.version !== "legacy" ? { addressTableLookups: getCompiledAddressTableLookups(orderedAccounts) } : null,
    header: getCompiledMessageHeader(orderedAccounts),
    instructions: getCompiledInstructions(transaction.instructions, orderedAccounts),
    lifetimeToken: getCompiledLifetimeToken(transaction.lifetimeConstraint),
    staticAccounts: getCompiledStaticAccounts(orderedAccounts),
    version: transaction.version
  };
}
function findAddressInLookupTables(address, role, addressesByLookupTableAddress) {
  for (const [lookupTableAddress, addresses] of Object.entries(addressesByLookupTableAddress)) {
    for (let i = 0; i < addresses.length; i++) {
      if (address === addresses[i]) {
        return {
          address,
          addressIndex: i,
          lookupTableAddress,
          role
        };
      }
    }
  }
}
function compressTransactionMessageUsingAddressLookupTables(transactionMessage, addressesByLookupTableAddress) {
  const lookupTableAddresses = new Set(Object.values(addressesByLookupTableAddress).flatMap((a) => a));
  const newInstructions = [];
  let updatedAnyInstructions = false;
  for (const instruction of transactionMessage.instructions) {
    if (!instruction.accounts) {
      newInstructions.push(instruction);
      continue;
    }
    const newAccounts = [];
    let updatedAnyAccounts = false;
    for (const account of instruction.accounts) {
      if ("lookupTableAddress" in account || !lookupTableAddresses.has(account.address) || (0,_solana_instructions__WEBPACK_IMPORTED_MODULE_6__.isSignerRole)(account.role)) {
        newAccounts.push(account);
        continue;
      }
      const lookupMetaAccount = findAddressInLookupTables(
        account.address,
        account.role,
        addressesByLookupTableAddress
      );
      newAccounts.push(Object.freeze(lookupMetaAccount));
      updatedAnyAccounts = true;
      updatedAnyInstructions = true;
    }
    newInstructions.push(
      Object.freeze(updatedAnyAccounts ? { ...instruction, accounts: newAccounts } : instruction)
    );
  }
  return Object.freeze(
    updatedAnyInstructions ? { ...transactionMessage, instructions: newInstructions } : transactionMessage
  );
}

// src/create-transaction-message.ts
function createTransactionMessage({
  version
}) {
  return Object.freeze({
    instructions: Object.freeze([]),
    version
  });
}
var RECENT_BLOCKHASHES_SYSVAR_ADDRESS = "SysvarRecentB1ockHashes11111111111111111111";
var SYSTEM_PROGRAM_ADDRESS = "11111111111111111111111111111111";
function assertIsDurableNonceTransactionMessage(transaction) {
  if (!isDurableNonceTransaction(transaction)) {
    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_1__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_1__.SOLANA_ERROR__TRANSACTION__EXPECTED_NONCE_LIFETIME);
  }
}
function createAdvanceNonceAccountInstruction(nonceAccountAddress, nonceAuthorityAddress) {
  return {
    accounts: [
      { address: nonceAccountAddress, role: _solana_instructions__WEBPACK_IMPORTED_MODULE_6__.AccountRole.WRITABLE },
      {
        address: RECENT_BLOCKHASHES_SYSVAR_ADDRESS,
        role: _solana_instructions__WEBPACK_IMPORTED_MODULE_6__.AccountRole.READONLY
      },
      { address: nonceAuthorityAddress, role: _solana_instructions__WEBPACK_IMPORTED_MODULE_6__.AccountRole.READONLY_SIGNER }
    ],
    data: new Uint8Array([4, 0, 0, 0]),
    programAddress: SYSTEM_PROGRAM_ADDRESS
  };
}
function isAdvanceNonceAccountInstruction(instruction) {
  return instruction.programAddress === SYSTEM_PROGRAM_ADDRESS && // Test for `AdvanceNonceAccount` instruction data
  instruction.data != null && isAdvanceNonceAccountInstructionData(instruction.data) && // Test for exactly 3 accounts
  instruction.accounts?.length === 3 && // First account is nonce account address
  instruction.accounts[0].address != null && instruction.accounts[0].role === _solana_instructions__WEBPACK_IMPORTED_MODULE_6__.AccountRole.WRITABLE && // Second account is recent blockhashes sysvar
  instruction.accounts[1].address === RECENT_BLOCKHASHES_SYSVAR_ADDRESS && instruction.accounts[1].role === _solana_instructions__WEBPACK_IMPORTED_MODULE_6__.AccountRole.READONLY && // Third account is nonce authority account
  instruction.accounts[2].address != null && (0,_solana_instructions__WEBPACK_IMPORTED_MODULE_6__.isSignerRole)(instruction.accounts[2].role);
}
function isAdvanceNonceAccountInstructionData(data) {
  return data.byteLength === 4 && data[0] === 4 && data[1] === 0 && data[2] === 0 && data[3] === 0;
}
function isDurableNonceTransaction(transaction) {
  return "lifetimeConstraint" in transaction && typeof transaction.lifetimeConstraint.nonce === "string" && transaction.instructions[0] != null && isAdvanceNonceAccountInstruction(transaction.instructions[0]);
}
function isAdvanceNonceAccountInstructionForNonce(instruction, nonceAccountAddress, nonceAuthorityAddress) {
  return instruction.accounts[0].address === nonceAccountAddress && instruction.accounts[2].address === nonceAuthorityAddress;
}
function setTransactionMessageLifetimeUsingDurableNonce({
  nonce,
  nonceAccountAddress,
  nonceAuthorityAddress
}, transaction) {
  let newInstructions;
  const firstInstruction = transaction.instructions[0];
  if (firstInstruction && isAdvanceNonceAccountInstruction(firstInstruction)) {
    if (isAdvanceNonceAccountInstructionForNonce(firstInstruction, nonceAccountAddress, nonceAuthorityAddress)) {
      if (isDurableNonceTransaction(transaction) && transaction.lifetimeConstraint.nonce === nonce) {
        return transaction;
      } else {
        newInstructions = [firstInstruction, ...transaction.instructions.slice(1)];
      }
    } else {
      newInstructions = [
        Object.freeze(createAdvanceNonceAccountInstruction(nonceAccountAddress, nonceAuthorityAddress)),
        ...transaction.instructions.slice(1)
      ];
    }
  } else {
    newInstructions = [
      Object.freeze(createAdvanceNonceAccountInstruction(nonceAccountAddress, nonceAuthorityAddress)),
      ...transaction.instructions
    ];
  }
  return Object.freeze({
    ...transaction,
    instructions: Object.freeze(newInstructions),
    lifetimeConstraint: Object.freeze({
      nonce
    })
  });
}

// src/fee-payer.ts
function setTransactionMessageFeePayer(feePayer, transactionMessage) {
  if ("feePayer" in transactionMessage && feePayer === transactionMessage.feePayer?.address && isAddressOnlyFeePayer(transactionMessage.feePayer)) {
    return transactionMessage;
  }
  const out = {
    ...transactionMessage,
    feePayer: Object.freeze({ address: feePayer })
  };
  Object.freeze(out);
  return out;
}
function isAddressOnlyFeePayer(feePayer) {
  return !!feePayer && "address" in feePayer && typeof feePayer.address === "string" && Object.keys(feePayer).length === 1;
}

// src/instructions.ts
function appendTransactionMessageInstruction(instruction, transaction) {
  return appendTransactionMessageInstructions([instruction], transaction);
}
function appendTransactionMessageInstructions(instructions, transaction) {
  return Object.freeze({
    ...transaction,
    instructions: Object.freeze([...transaction.instructions, ...instructions])
  });
}
function prependTransactionMessageInstruction(instruction, transaction) {
  return prependTransactionMessageInstructions([instruction], transaction);
}
function prependTransactionMessageInstructions(instructions, transaction) {
  return Object.freeze({
    ...transaction,
    instructions: Object.freeze([...instructions, ...transaction.instructions])
  });
}

// src/decompile-message.ts
function getAccountMetas(message) {
  const { header } = message;
  const numWritableSignerAccounts = header.numSignerAccounts - header.numReadonlySignerAccounts;
  const numWritableNonSignerAccounts = message.staticAccounts.length - header.numSignerAccounts - header.numReadonlyNonSignerAccounts;
  const accountMetas = [];
  let accountIndex = 0;
  for (let i = 0; i < numWritableSignerAccounts; i++) {
    accountMetas.push({
      address: message.staticAccounts[accountIndex],
      role: _solana_instructions__WEBPACK_IMPORTED_MODULE_6__.AccountRole.WRITABLE_SIGNER
    });
    accountIndex++;
  }
  for (let i = 0; i < header.numReadonlySignerAccounts; i++) {
    accountMetas.push({
      address: message.staticAccounts[accountIndex],
      role: _solana_instructions__WEBPACK_IMPORTED_MODULE_6__.AccountRole.READONLY_SIGNER
    });
    accountIndex++;
  }
  for (let i = 0; i < numWritableNonSignerAccounts; i++) {
    accountMetas.push({
      address: message.staticAccounts[accountIndex],
      role: _solana_instructions__WEBPACK_IMPORTED_MODULE_6__.AccountRole.WRITABLE
    });
    accountIndex++;
  }
  for (let i = 0; i < header.numReadonlyNonSignerAccounts; i++) {
    accountMetas.push({
      address: message.staticAccounts[accountIndex],
      role: _solana_instructions__WEBPACK_IMPORTED_MODULE_6__.AccountRole.READONLY
    });
    accountIndex++;
  }
  return accountMetas;
}
function getAddressLookupMetas(compiledAddressTableLookups, addressesByLookupTableAddress) {
  const compiledAddressTableLookupAddresses = compiledAddressTableLookups.map((l) => l.lookupTableAddress);
  const missing = compiledAddressTableLookupAddresses.filter((a) => addressesByLookupTableAddress[a] === undefined);
  if (missing.length > 0) {
    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_1__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_1__.SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_CONTENTS_MISSING, {
      lookupTableAddresses: missing
    });
  }
  const readOnlyMetas = [];
  const writableMetas = [];
  for (const lookup of compiledAddressTableLookups) {
    const addresses = addressesByLookupTableAddress[lookup.lookupTableAddress];
    const highestIndex = Math.max(...lookup.readableIndices, ...lookup.writableIndices);
    if (highestIndex >= addresses.length) {
      throw new _solana_errors__WEBPACK_IMPORTED_MODULE_1__.SolanaError(
        _solana_errors__WEBPACK_IMPORTED_MODULE_1__.SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_ADDRESS_LOOKUP_TABLE_INDEX_OUT_OF_RANGE,
        {
          highestKnownIndex: addresses.length - 1,
          highestRequestedIndex: highestIndex,
          lookupTableAddress: lookup.lookupTableAddress
        }
      );
    }
    const readOnlyForLookup = lookup.readableIndices.map((r) => ({
      address: addresses[r],
      addressIndex: r,
      lookupTableAddress: lookup.lookupTableAddress,
      role: _solana_instructions__WEBPACK_IMPORTED_MODULE_6__.AccountRole.READONLY
    }));
    readOnlyMetas.push(...readOnlyForLookup);
    const writableForLookup = lookup.writableIndices.map((w) => ({
      address: addresses[w],
      addressIndex: w,
      lookupTableAddress: lookup.lookupTableAddress,
      role: _solana_instructions__WEBPACK_IMPORTED_MODULE_6__.AccountRole.WRITABLE
    }));
    writableMetas.push(...writableForLookup);
  }
  return [...writableMetas, ...readOnlyMetas];
}
function convertInstruction(instruction, accountMetas) {
  const programAddress = accountMetas[instruction.programAddressIndex]?.address;
  if (!programAddress) {
    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_1__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_1__.SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_INSTRUCTION_PROGRAM_ADDRESS_NOT_FOUND, {
      index: instruction.programAddressIndex
    });
  }
  const accounts = instruction.accountIndices?.map((accountIndex) => accountMetas[accountIndex]);
  const { data } = instruction;
  return Object.freeze({
    programAddress,
    ...accounts && accounts.length ? { accounts: Object.freeze(accounts) } : {},
    ...data && data.length ? { data } : {}
  });
}
function getLifetimeConstraint(messageLifetimeToken, firstInstruction, lastValidBlockHeight) {
  if (!firstInstruction || !isAdvanceNonceAccountInstruction(firstInstruction)) {
    return {
      blockhash: messageLifetimeToken,
      lastValidBlockHeight: lastValidBlockHeight ?? 2n ** 64n - 1n
      // U64 MAX
    };
  } else {
    const nonceAccountAddress = firstInstruction.accounts[0].address;
    (0,_solana_addresses__WEBPACK_IMPORTED_MODULE_4__.assertIsAddress)(nonceAccountAddress);
    const nonceAuthorityAddress = firstInstruction.accounts[2].address;
    (0,_solana_addresses__WEBPACK_IMPORTED_MODULE_4__.assertIsAddress)(nonceAuthorityAddress);
    return {
      nonce: messageLifetimeToken,
      nonceAccountAddress,
      nonceAuthorityAddress
    };
  }
}
function decompileTransactionMessage(compiledTransactionMessage, config) {
  const feePayer = compiledTransactionMessage.staticAccounts[0];
  if (!feePayer) {
    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_1__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_1__.SOLANA_ERROR__TRANSACTION__FAILED_TO_DECOMPILE_FEE_PAYER_MISSING);
  }
  const accountMetas = getAccountMetas(compiledTransactionMessage);
  const accountLookupMetas = "addressTableLookups" in compiledTransactionMessage && compiledTransactionMessage.addressTableLookups !== undefined && compiledTransactionMessage.addressTableLookups.length > 0 ? getAddressLookupMetas(
    compiledTransactionMessage.addressTableLookups,
    config?.addressesByLookupTableAddress ?? {}
  ) : [];
  const transactionMetas = [...accountMetas, ...accountLookupMetas];
  const instructions = compiledTransactionMessage.instructions.map(
    (compiledInstruction) => convertInstruction(compiledInstruction, transactionMetas)
  );
  const firstInstruction = instructions[0];
  const lifetimeConstraint = getLifetimeConstraint(
    compiledTransactionMessage.lifetimeToken,
    firstInstruction,
    config?.lastValidBlockHeight
  );
  return (0,_solana_functional__WEBPACK_IMPORTED_MODULE_7__.pipe)(
    createTransactionMessage({ version: compiledTransactionMessage.version }),
    (tx) => setTransactionMessageFeePayer(feePayer, tx),
    (tx) => instructions.reduce((acc, instruction) => {
      return appendTransactionMessageInstruction(instruction, acc);
    }, tx),
    (tx) => "blockhash" in lifetimeConstraint ? setTransactionMessageLifetimeUsingBlockhash(lifetimeConstraint, tx) : setTransactionMessageLifetimeUsingDurableNonce(lifetimeConstraint, tx)
  );
}


//# sourceMappingURL=index.browser.mjs.map
//# sourceMappingURL=index.browser.mjs.map

/***/ }),

/***/ "./node_modules/@solana/transactions/dist/index.browser.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@solana/transactions/dist/index.browser.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "assertTransactionIsFullySigned": () => (/* binding */ assertTransactionIsFullySigned),
/* harmony export */   "compileTransaction": () => (/* binding */ compileTransaction),
/* harmony export */   "getBase64EncodedWireTransaction": () => (/* binding */ getBase64EncodedWireTransaction),
/* harmony export */   "getSignatureFromTransaction": () => (/* binding */ getSignatureFromTransaction),
/* harmony export */   "getTransactionCodec": () => (/* binding */ getTransactionCodec),
/* harmony export */   "getTransactionDecoder": () => (/* binding */ getTransactionDecoder),
/* harmony export */   "getTransactionEncoder": () => (/* binding */ getTransactionEncoder),
/* harmony export */   "partiallySignTransaction": () => (/* binding */ partiallySignTransaction),
/* harmony export */   "signTransaction": () => (/* binding */ signTransaction)
/* harmony export */ });
/* harmony import */ var _solana_addresses__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @solana/addresses */ "./node_modules/@solana/addresses/dist/index.browser.mjs");
/* harmony import */ var _solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @solana/codecs-core */ "./node_modules/@solana/codecs-core/dist/index.browser.mjs");
/* harmony import */ var _solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @solana/codecs-data-structures */ "./node_modules/@solana/codecs-data-structures/dist/index.browser.mjs");
/* harmony import */ var _solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @solana/codecs-numbers */ "./node_modules/@solana/codecs-numbers/dist/index.browser.mjs");
/* harmony import */ var _solana_errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @solana/errors */ "./node_modules/@solana/errors/dist/index.browser.mjs");
/* harmony import */ var _solana_transaction_messages__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @solana/transaction-messages */ "./node_modules/@solana/transaction-messages/dist/index.browser.mjs");
/* harmony import */ var _solana_codecs_strings__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @solana/codecs-strings */ "./node_modules/@solana/codecs-strings/dist/index.browser.mjs");
/* harmony import */ var _solana_keys__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @solana/keys */ "./node_modules/@solana/keys/dist/index.browser.mjs");









// src/codecs/transaction-codec.ts
function getSignaturesToEncode(signaturesMap) {
  const signatures = Object.values(signaturesMap);
  if (signatures.length === 0) {
    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__TRANSACTION__CANNOT_ENCODE_WITH_EMPTY_SIGNATURES);
  }
  return signatures.map((signature) => {
    if (!signature) {
      return new Uint8Array(64).fill(0);
    }
    return signature;
  });
}
function getSignaturesEncoder() {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.transformEncoder)(
    (0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_2__.getArrayEncoder)((0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.fixEncoderSize)((0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_2__.getBytesEncoder)(), 64), { size: (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_3__.getShortU16Encoder)() }),
    getSignaturesToEncode
  );
}

// src/codecs/transaction-codec.ts
function getTransactionEncoder() {
  return (0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_2__.getStructEncoder)([
    ["signatures", getSignaturesEncoder()],
    ["messageBytes", (0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_2__.getBytesEncoder)()]
  ]);
}
function getTransactionDecoder() {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.transformDecoder)(
    (0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_2__.getStructDecoder)([
      ["signatures", (0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_2__.getArrayDecoder)((0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.fixDecoderSize)((0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_2__.getBytesDecoder)(), 64), { size: (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_3__.getShortU16Decoder)() })],
      ["messageBytes", (0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_2__.getBytesDecoder)()]
    ]),
    decodePartiallyDecodedTransaction
  );
}
function getTransactionCodec() {
  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.combineCodec)(getTransactionEncoder(), getTransactionDecoder());
}
function decodePartiallyDecodedTransaction(transaction) {
  const { messageBytes, signatures } = transaction;
  const signerAddressesDecoder = (0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_2__.getTupleDecoder)([
    // read transaction version
    (0,_solana_transaction_messages__WEBPACK_IMPORTED_MODULE_4__.getTransactionVersionDecoder)(),
    // read first byte of header, `numSignerAccounts`
    // padRight to skip the next 2 bytes, `numReadOnlySignedAccounts` and `numReadOnlyUnsignedAccounts` which we don't need
    (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.padRightDecoder)((0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_3__.getU8Decoder)(), 2),
    // read static addresses
    (0,_solana_codecs_data_structures__WEBPACK_IMPORTED_MODULE_2__.getArrayDecoder)((0,_solana_addresses__WEBPACK_IMPORTED_MODULE_5__.getAddressDecoder)(), { size: (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_3__.getShortU16Decoder)() })
  ]);
  const [_txVersion, numRequiredSignatures, staticAddresses] = signerAddressesDecoder.decode(messageBytes);
  const signerAddresses = staticAddresses.slice(0, numRequiredSignatures);
  if (signerAddresses.length !== signatures.length) {
    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__TRANSACTION__MESSAGE_SIGNATURES_MISMATCH, {
      numRequiredSignatures,
      signaturesLength: signatures.length,
      signerAddresses
    });
  }
  const signaturesMap = {};
  signerAddresses.forEach((address, index) => {
    const signatureForAddress = signatures[index];
    if (signatureForAddress.every((b) => b === 0)) {
      signaturesMap[address] = null;
    } else {
      signaturesMap[address] = signatureForAddress;
    }
  });
  return {
    messageBytes,
    signatures: Object.freeze(signaturesMap)
  };
}
function compileTransaction(transactionMessage) {
  const compiledMessage = (0,_solana_transaction_messages__WEBPACK_IMPORTED_MODULE_4__.compileTransactionMessage)(transactionMessage);
  const messageBytes = (0,_solana_transaction_messages__WEBPACK_IMPORTED_MODULE_4__.getCompiledTransactionMessageEncoder)().encode(compiledMessage);
  const transactionSigners = compiledMessage.staticAccounts.slice(0, compiledMessage.header.numSignerAccounts);
  const signatures = {};
  for (const signerAddress of transactionSigners) {
    signatures[signerAddress] = null;
  }
  let lifetimeConstraint;
  if ((0,_solana_transaction_messages__WEBPACK_IMPORTED_MODULE_4__.isTransactionMessageWithBlockhashLifetime)(transactionMessage)) {
    lifetimeConstraint = {
      blockhash: transactionMessage.lifetimeConstraint.blockhash,
      lastValidBlockHeight: transactionMessage.lifetimeConstraint.lastValidBlockHeight
    };
  } else {
    lifetimeConstraint = {
      nonce: transactionMessage.lifetimeConstraint.nonce,
      nonceAccountAddress: transactionMessage.instructions[0].accounts[0].address
    };
  }
  const transaction = {
    lifetimeConstraint,
    messageBytes,
    signatures: Object.freeze(signatures)
  };
  return Object.freeze(transaction);
}
var base58Decoder;
function getSignatureFromTransaction(transaction) {
  if (!base58Decoder) base58Decoder = (0,_solana_codecs_strings__WEBPACK_IMPORTED_MODULE_6__.getBase58Decoder)();
  const signatureBytes = Object.values(transaction.signatures)[0];
  if (!signatureBytes) {
    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__TRANSACTION__FEE_PAYER_SIGNATURE_MISSING);
  }
  const transactionSignature = base58Decoder.decode(signatureBytes);
  return transactionSignature;
}
function uint8ArraysEqual(arr1, arr2) {
  return arr1.length === arr2.length && arr1.every((value, index) => value === arr2[index]);
}
async function partiallySignTransaction(keyPairs, transaction) {
  let newSignatures;
  let unexpectedSigners;
  await Promise.all(
    keyPairs.map(async (keyPair) => {
      const address = await (0,_solana_addresses__WEBPACK_IMPORTED_MODULE_5__.getAddressFromPublicKey)(keyPair.publicKey);
      const existingSignature = transaction.signatures[address];
      if (existingSignature === undefined) {
        unexpectedSigners ||= /* @__PURE__ */ new Set();
        unexpectedSigners.add(address);
        return;
      }
      if (unexpectedSigners) {
        return;
      }
      const newSignature = await (0,_solana_keys__WEBPACK_IMPORTED_MODULE_7__.signBytes)(keyPair.privateKey, transaction.messageBytes);
      if (existingSignature !== null && uint8ArraysEqual(newSignature, existingSignature)) {
        return;
      }
      newSignatures ||= {};
      newSignatures[address] = newSignature;
    })
  );
  if (unexpectedSigners && unexpectedSigners.size > 0) {
    const expectedSigners = Object.keys(transaction.signatures);
    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__TRANSACTION__ADDRESSES_CANNOT_SIGN_TRANSACTION, {
      expectedAddresses: expectedSigners,
      unexpectedAddresses: [...unexpectedSigners]
    });
  }
  if (!newSignatures) {
    return transaction;
  }
  return Object.freeze({
    ...transaction,
    signatures: Object.freeze({
      ...transaction.signatures,
      ...newSignatures
    })
  });
}
async function signTransaction(keyPairs, transaction) {
  const out = await partiallySignTransaction(keyPairs, transaction);
  assertTransactionIsFullySigned(out);
  Object.freeze(out);
  return out;
}
function assertTransactionIsFullySigned(transaction) {
  const missingSigs = [];
  Object.entries(transaction.signatures).forEach(([address, signatureBytes]) => {
    if (!signatureBytes) {
      missingSigs.push(address);
    }
  });
  if (missingSigs.length > 0) {
    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__TRANSACTION__SIGNATURES_MISSING, {
      addresses: missingSigs
    });
  }
}
function getBase64EncodedWireTransaction(transaction) {
  const wireTransactionBytes = getTransactionEncoder().encode(transaction);
  return (0,_solana_codecs_strings__WEBPACK_IMPORTED_MODULE_6__.getBase64Decoder)().decode(wireTransactionBytes);
}


//# sourceMappingURL=index.browser.mjs.map
//# sourceMappingURL=index.browser.mjs.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,