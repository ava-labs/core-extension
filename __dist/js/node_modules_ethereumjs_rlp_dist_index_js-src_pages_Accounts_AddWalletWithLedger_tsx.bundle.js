"use strict";
(self["webpackChunkavalanche_extension"] = self["webpackChunkavalanche_extension"] || []).push([["node_modules_ethereumjs_rlp_dist_index_js-src_pages_Accounts_AddWalletWithLedger_tsx"],{

/***/ "./node_modules/@ethereumjs/rlp/dist/index.js":
/*!****************************************************!*\
  !*** ./node_modules/@ethereumjs/rlp/dist/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RLP = exports.utils = exports.decode = exports.encode = void 0;
/**
 * RLP Encoding based on https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/
 * This function takes in data, converts it to Uint8Array if not,
 * and adds a length for recursion.
 * @param input Will be converted to Uint8Array
 * @returns Uint8Array of encoded data
 **/
function encode(input) {
    if (Array.isArray(input)) {
        const output = [];
        let outputLength = 0;
        for (let i = 0; i < input.length; i++) {
            const encoded = encode(input[i]);
            output.push(encoded);
            outputLength += encoded.length;
        }
        return concatBytes(encodeLength(outputLength, 192), ...output);
    }
    const inputBuf = toBytes(input);
    if (inputBuf.length === 1 && inputBuf[0] < 128) {
        return inputBuf;
    }
    return concatBytes(encodeLength(inputBuf.length, 128), inputBuf);
}
exports.encode = encode;
/**
 * Slices a Uint8Array, throws if the slice goes out-of-bounds of the Uint8Array.
 * E.g. `safeSlice(hexToBytes('aa'), 1, 2)` will throw.
 * @param input
 * @param start
 * @param end
 */
function safeSlice(input, start, end) {
    if (end > input.length) {
        throw new Error('invalid RLP (safeSlice): end slice of Uint8Array out-of-bounds');
    }
    return input.slice(start, end);
}
/**
 * Parse integers. Check if there is no leading zeros
 * @param v The value to parse
 */
function decodeLength(v) {
    if (v[0] === 0) {
        throw new Error('invalid RLP: extra zeros');
    }
    return parseHexByte(bytesToHex(v));
}
function encodeLength(len, offset) {
    if (len < 56) {
        return Uint8Array.from([len + offset]);
    }
    const hexLength = numberToHex(len);
    const lLength = hexLength.length / 2;
    const firstByte = numberToHex(offset + 55 + lLength);
    return Uint8Array.from(hexToBytes(firstByte + hexLength));
}
function decode(input, stream = false) {
    if (typeof input === 'undefined' || input === null || input.length === 0) {
        return Uint8Array.from([]);
    }
    const inputBytes = toBytes(input);
    const decoded = _decode(inputBytes);
    if (stream) {
        return decoded;
    }
    if (decoded.remainder.length !== 0) {
        throw new Error('invalid RLP: remainder must be zero');
    }
    return decoded.data;
}
exports.decode = decode;
/** Decode an input with RLP */
function _decode(input) {
    let length, llength, data, innerRemainder, d;
    const decoded = [];
    const firstByte = input[0];
    if (firstByte <= 0x7f) {
        // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.
        return {
            data: input.slice(0, 1),
            remainder: input.slice(1),
        };
    }
    else if (firstByte <= 0xb7) {
        // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string
        // The range of the first byte is [0x80, 0xb7]
        length = firstByte - 0x7f;
        // set 0x80 null to 0
        if (firstByte === 0x80) {
            data = Uint8Array.from([]);
        }
        else {
            data = safeSlice(input, 1, length);
        }
        if (length === 2 && data[0] < 0x80) {
            throw new Error('invalid RLP encoding: invalid prefix, single byte < 0x80 are not prefixed');
        }
        return {
            data,
            remainder: input.slice(length),
        };
    }
    else if (firstByte <= 0xbf) {
        // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),
        // followed by the length, followed by the string
        llength = firstByte - 0xb6;
        if (input.length - 1 < llength) {
            throw new Error('invalid RLP: not enough bytes for string length');
        }
        length = decodeLength(safeSlice(input, 1, llength));
        if (length <= 55) {
            throw new Error('invalid RLP: expected string length to be greater than 55');
        }
        data = safeSlice(input, llength, length + llength);
        return {
            data,
            remainder: input.slice(length + llength),
        };
    }
    else if (firstByte <= 0xf7) {
        // a list between 0-55 bytes long
        length = firstByte - 0xbf;
        innerRemainder = safeSlice(input, 1, length);
        while (innerRemainder.length) {
            d = _decode(innerRemainder);
            decoded.push(d.data);
            innerRemainder = d.remainder;
        }
        return {
            data: decoded,
            remainder: input.slice(length),
        };
    }
    else {
        // a list over 55 bytes long
        llength = firstByte - 0xf6;
        length = decodeLength(safeSlice(input, 1, llength));
        if (length < 56) {
            throw new Error('invalid RLP: encoded list too short');
        }
        const totalLength = llength + length;
        if (totalLength > input.length) {
            throw new Error('invalid RLP: total length is larger than the data');
        }
        innerRemainder = safeSlice(input, llength, totalLength);
        while (innerRemainder.length) {
            d = _decode(innerRemainder);
            decoded.push(d.data);
            innerRemainder = d.remainder;
        }
        return {
            data: decoded,
            remainder: input.slice(totalLength),
        };
    }
}
const cachedHexes = Array.from({ length: 256 }, (_v, i) => i.toString(16).padStart(2, '0'));
function bytesToHex(uint8a) {
    // Pre-caching chars with `cachedHexes` speeds this up 6x
    let hex = '';
    for (let i = 0; i < uint8a.length; i++) {
        hex += cachedHexes[uint8a[i]];
    }
    return hex;
}
function parseHexByte(hexByte) {
    const byte = Number.parseInt(hexByte, 16);
    if (Number.isNaN(byte))
        throw new Error('Invalid byte sequence');
    return byte;
}
// Caching slows it down 2-3x
function hexToBytes(hex) {
    if (typeof hex !== 'string') {
        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);
    }
    if (hex.length % 2)
        throw new Error('hexToBytes: received invalid unpadded hex');
    const array = new Uint8Array(hex.length / 2);
    for (let i = 0; i < array.length; i++) {
        const j = i * 2;
        array[i] = parseHexByte(hex.slice(j, j + 2));
    }
    return array;
}
/** Concatenates two Uint8Arrays into one. */
function concatBytes(...arrays) {
    if (arrays.length === 1)
        return arrays[0];
    const length = arrays.reduce((a, arr) => a + arr.length, 0);
    const result = new Uint8Array(length);
    for (let i = 0, pad = 0; i < arrays.length; i++) {
        const arr = arrays[i];
        result.set(arr, pad);
        pad += arr.length;
    }
    return result;
}
function utf8ToBytes(utf) {
    return new TextEncoder().encode(utf);
}
/** Transform an integer into its hexadecimal value */
function numberToHex(integer) {
    if (integer < 0) {
        throw new Error('Invalid integer as argument, must be unsigned!');
    }
    const hex = integer.toString(16);
    return hex.length % 2 ? `0${hex}` : hex;
}
/** Pad a string to be even */
function padToEven(a) {
    return a.length % 2 ? `0${a}` : a;
}
/** Check if a string is prefixed by 0x */
function isHexPrefixed(str) {
    return str.length >= 2 && str[0] === '0' && str[1] === 'x';
}
/** Removes 0x from a given String */
function stripHexPrefix(str) {
    if (typeof str !== 'string') {
        return str;
    }
    return isHexPrefixed(str) ? str.slice(2) : str;
}
/** Transform anything into a Uint8Array */
function toBytes(v) {
    if (v instanceof Uint8Array) {
        return v;
    }
    if (typeof v === 'string') {
        if (isHexPrefixed(v)) {
            return hexToBytes(padToEven(stripHexPrefix(v)));
        }
        return utf8ToBytes(v);
    }
    if (typeof v === 'number' || typeof v === 'bigint') {
        if (!v) {
            return Uint8Array.from([]);
        }
        return hexToBytes(numberToHex(v));
    }
    if (v === null || v === undefined) {
        return Uint8Array.from([]);
    }
    throw new Error('toBytes: received unsupported type ' + typeof v);
}
exports.utils = {
    bytesToHex,
    concatBytes,
    hexToBytes,
    utf8ToBytes,
};
exports.RLP = { encode, decode };
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./src/hooks/useKeyboardShortcuts.ts":
/*!*******************************************!*\
  !*** ./src/hooks/useKeyboardShortcuts.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "useKeyboardShortcuts": () => (/* binding */ useKeyboardShortcuts)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");

const useKeyboardShortcuts = shortcuts => {
  const onKeyDown = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async event => {
    const callback = shortcuts[event.key];
    if (typeof callback === 'function') {
      event.preventDefault();
      await callback();
    }
  }, [shortcuts]);
  return {
    onKeyDown
  };
};

/***/ }),

/***/ "./src/pages/Accounts/AddWalletWithLedger.tsx":
/*!****************************************************!*\
  !*** ./src/pages/Accounts/AddWalletWithLedger.tsx ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AddWalletWithLedger": () => (/* binding */ AddWalletWithLedger)
/* harmony export */ });
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@mui/material/styles/useTheme.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/react-hot-toast/dist/index.mjs");
/* harmony import */ var _src_components_common_PageTitle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @src/components/common/PageTitle */ "./src/components/common/PageTitle.tsx");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Ledger_LedgerWrongVersionOverlay__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Ledger/LedgerWrongVersionOverlay */ "./src/pages/Ledger/LedgerWrongVersionOverlay.tsx");
/* harmony import */ var _components_NameYourWallet__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/NameYourWallet */ "./src/pages/Accounts/components/NameYourWallet.tsx");
/* harmony import */ var _avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @avalabs/core-wallets-sdk */ "./node_modules/@avalabs/core-wallets-sdk/esm/EVM/constants.js");
/* harmony import */ var _src_background_services_secrets_models__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @src/background/services/secrets/models */ "./src/background/services/secrets/models.ts");
/* harmony import */ var _hooks_useImportLedger__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./hooks/useImportLedger */ "./src/pages/Accounts/hooks/useImportLedger.ts");
/* harmony import */ var _components_ledger_LedgerConnector__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../components/ledger/LedgerConnector */ "./src/components/ledger/LedgerConnector.tsx");
/* harmony import */ var _components_ledger_LedgerTroublesSteps__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../components/ledger/LedgerTroublesSteps */ "./src/components/ledger/LedgerTroublesSteps.tsx");
/* harmony import */ var _src_contexts_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @src/contexts/AnalyticsProvider */ "./src/contexts/AnalyticsProvider.tsx");
/* harmony import */ var _src_monitoring_sentryCaptureException__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @src/monitoring/sentryCaptureException */ "./src/monitoring/sentryCaptureException.ts");
/* harmony import */ var _src_hooks_useErrorMessage__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @src/hooks/useErrorMessage */ "./src/hooks/useErrorMessage.ts");
/* harmony import */ var _src_contexts_LedgerProvider__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @src/contexts/LedgerProvider */ "./src/contexts/LedgerProvider.tsx");
/* harmony import */ var _src_components_common_Overlay__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @src/components/common/Overlay */ "./src/components/common/Overlay.tsx");
/* harmony import */ var _src_components_common_AppBackground__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @src/components/common/AppBackground */ "./src/components/common/AppBackground.tsx");
/* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! webextension-polyfill */ "./node_modules/webextension-polyfill/dist/browser-polyfill.js");
/* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(webextension_polyfill__WEBPACK_IMPORTED_MODULE_14__);
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");


















var Step = /*#__PURE__*/function (Step) {
  Step[Step["Import"] = 0] = "Import";
  Step[Step["Name"] = 1] = "Name";
  Step[Step["Troubleshoot"] = 2] = "Troubleshoot";
  Step[Step["Completed"] = 3] = "Completed";
  return Step;
}(Step || {});
function AddWalletWithLedger() {
  const theme = (0,_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_15__["default"])();
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_16__.useTranslation)();
  const {
    capture
  } = (0,_src_contexts_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_8__.useAnalyticsContext)();
  const getErrorMessage = (0,_src_hooks_useErrorMessage__WEBPACK_IMPORTED_MODULE_10__.useErrorMessage)();
  const [xpub, setXpub] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');
  const [xpubXP, setXpubXP] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');
  const [publicKeys, setPublicKeys] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();
  const {
    isImporting,
    importLedger
  } = (0,_hooks_useImportLedger__WEBPACK_IMPORTED_MODULE_5__.useImportLedger)();
  const [step, setStep] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(Step.Import);
  const [hasPublicKeys, setHasPublicKeys] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
  const [pathSpec, setPathSpec] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(_avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_17__.DerivationPath.BIP44);
  const lastAccountIndexWithBalance = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(0);
  const {
    popDeviceSelection
  } = (0,_src_contexts_LedgerProvider__WEBPACK_IMPORTED_MODULE_11__.useLedgerContext)();
  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {
    popDeviceSelection();
    // Do this exactly once, all retries should be initiated by the user
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  async function onSuccess(data) {
    setXpub(data.xpub);
    setXpubXP(data.xpubXP);
    setPublicKeys(data.publicKeys);
    setHasPublicKeys(data.hasPublicKeys);
    setPathSpec(data.pathSpec);
    lastAccountIndexWithBalance.current = data.lastAccountIndexWithBalance;
  }
  const LedgerLiveSupportButton = () => /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Button, {
    variant: "text",
    onClick: () => {
      window.open('https://www.ledger.com/ledger-live', '_blank', 'noreferrer');
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.ExternalLinkIcon, {
    size: 16,
    sx: {
      color: 'secondary.main'
    }
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Typography, {
    variant: "caption",
    sx: {
      ml: 1,
      color: 'secondary.main'
    }
  }, t('Ledger Live Support')));
  const handleImport = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async name => {
    try {
      capture('LedgerImportStarted');
      await importLedger({
        xpub,
        xpubXP,
        pubKeys: publicKeys,
        name,
        secretType: pathSpec === _avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_17__.DerivationPath.BIP44 ? _src_background_services_secrets_models__WEBPACK_IMPORTED_MODULE_4__.SecretType.Ledger : _src_background_services_secrets_models__WEBPACK_IMPORTED_MODULE_4__.SecretType.LedgerLive,
        numberOfAccountsToCreate: lastAccountIndexWithBalance.current + 1
      });
      capture('SeedphraseImportSuccess');
      setStep(Step.Completed);
    } catch (err) {
      capture('LedgerImportFailure');
      (0,_src_monitoring_sentryCaptureException__WEBPACK_IMPORTED_MODULE_9__["default"])(err, _src_monitoring_sentryCaptureException__WEBPACK_IMPORTED_MODULE_9__.SentryExceptionTypes.WALLET_IMPORT);
      const {
        title
      } = getErrorMessage(err);
      _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_19__["default"].error(title);
    }
  }, [capture, getErrorMessage, importLedger, lastAccountIndexWithBalance, pathSpec, publicKeys, xpub, xpubXP]);

  // This will create a fake background that overlay is going to blur for design.
  const BackgroundPlaceholder = () => /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Grid, {
    container: true,
    spacing: 2
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Grid, {
    item: true,
    xs: 6,
    md: 6,
    sx: {
      px: 20
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Stack, {
    sx: {
      height: 724,
      width: 550,
      justifyContent: 'space-between',
      pt: 10,
      pl: 15
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Stack, {
    sx: {
      pt: 15,
      justifyContent: 'center'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Typography, {
    variant: "h2"
  }, 'The best way to connect to crypto'), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Typography, {
    variant: "h2",
    sx: {
      color: 'secondary.main'
    }
  }, 'Core Extension')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Stack, {
    sx: {
      p: 10,
      justifyContent: 'center'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Button, {
    sx: {
      width: 300
    }
  }, t('Next'))))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Grid, {
    item: true,
    xs: 6,
    md: 6,
    sx: {
      backgroundColor: 'background.paper'
    }
  }, /*#__PURE__*/React.createElement(_src_components_common_AppBackground__WEBPACK_IMPORTED_MODULE_13__.AppBackground, null)));
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(BackgroundPlaceholder, null), /*#__PURE__*/React.createElement(_src_components_common_Overlay__WEBPACK_IMPORTED_MODULE_12__.Overlay, {
    isBackgroundFilled: false
  }, step === Step.Completed && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Stack, {
    sx: {
      width: 393,
      height: 386,
      textAlign: 'center',
      justifyContent: 'space-between',
      backgroundColor: 'background.paper',
      borderRadius: 1,
      px: 2,
      py: 4
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Stack, {
    sx: {
      height: 140,
      justifyContent: 'space-between',
      alignItems: 'center'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.CheckIcon, {
    size: 32
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Typography, {
    variant: "h3"
  }, t('Wallet Added Successfully'))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Stack, {
    sx: {
      height: 124,
      justifyContent: 'space-between',
      alignItems: 'center'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Typography, {
    variant: "body2",
    sx: {
      color: 'text.secondary'
    }
  }, t('Please close this tab and open the Core Browser Extension to see the newly imported wallet.')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Button, {
    onClick: () => {
      webextension_polyfill__WEBPACK_IMPORTED_MODULE_14___default().action.openPopup();
      window.close();
    },
    sx: {
      width: '50%'
    }
  }, t('Close')))), step === Step.Troubleshoot && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Stack, {
    sx: {
      height: 724,
      width: 432,
      borderRadius: 1,
      justifyContent: 'space-between',
      backgroundColor: 'background.paper'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Stack, {
    justifyContent: "space-between",
    sx: {
      height: '100%'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Stack, {
    alignItems: "flex-start",
    sx: {
      mt: 2.5,
      mb: 0.5
    }
  }, /*#__PURE__*/React.createElement(_src_components_common_PageTitle__WEBPACK_IMPORTED_MODULE_0__.PageTitle, {
    onBackClick: () => setStep(Step.Import)
  }, t('Trouble Connecting')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Stack, {
    sx: {
      px: 2
    }
  }, /*#__PURE__*/React.createElement(_components_ledger_LedgerTroublesSteps__WEBPACK_IMPORTED_MODULE_7__.LedgerTroubleSteps, {
    fontVariant: _components_ledger_LedgerTroublesSteps__WEBPACK_IMPORTED_MODULE_7__.LedgerTroubleStepsFontVariant.large
  }))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Stack, {
    sx: {
      p: 2
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Button, {
    onClick: () => setStep(Step.Import)
  }, t('Back')), /*#__PURE__*/React.createElement(LedgerLiveSupportButton, null)))), step === Step.Name && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Stack, {
    sx: {
      height: 724,
      width: 432,
      borderRadius: 1,
      justifyContent: 'space-between',
      backgroundColor: 'background.paper'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Stack, {
    justifyContent: "space-between",
    sx: {
      height: '100%',
      width: '100%'
    }
  }, /*#__PURE__*/React.createElement(_components_NameYourWallet__WEBPACK_IMPORTED_MODULE_3__.NameYourWallet, {
    isImporting: isImporting,
    onSave: handleImport,
    onBackClick: () => setStep(Step.Import),
    backgroundColor: theme.palette.background.default
  }))), step === Step.Import && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Stack, {
    sx: {
      height: 724,
      width: 432,
      borderRadius: 1,
      justifyContent: 'space-between',
      backgroundColor: 'background.paper'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Stack, {
    justifyContent: "space-between",
    sx: {
      height: '100%',
      pt: 1
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Stack, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Stack, {
    direction: "row",
    alignItems: "flex-start",
    sx: {
      mb: 1
    }
  }, /*#__PURE__*/React.createElement(_src_components_common_PageTitle__WEBPACK_IMPORTED_MODULE_0__.PageTitle, {
    showBackButton: false
  }, t('Add Wallet with Ledger'))), /*#__PURE__*/React.createElement(_components_ledger_LedgerConnector__WEBPACK_IMPORTED_MODULE_6__.LedgerConnector, {
    onSuccess: onSuccess,
    onTroubleshoot: () => setStep(Step.Troubleshoot),
    checkIfWalletExists: true
  })), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Stack, {
    sx: {
      p: 2,
      mb: 2,
      rowGap: 1
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Stack, {
    sx: {
      flexDirection: 'row',
      columnGap: 2
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Stack, {
    sx: {
      width: '50%'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Tooltip, {
    title: t('Clicking the cancel button will close the tab and open the extension for you. If the extension doesn’t open automatically, please open it manually.')
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Button, {
    color: "secondary",
    onClick: () => {
      webextension_polyfill__WEBPACK_IMPORTED_MODULE_14___default().action.openPopup();
      window.close();
    },
    fullWidth: true
  }, t('Cancel')))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Button, {
    disabled: !hasPublicKeys,
    onClick: () => setStep(Step.Name),
    sx: {
      width: '50%'
    },
    fullWidth: true
  }, t('Next'))), /*#__PURE__*/React.createElement(LedgerLiveSupportButton, null))))), /*#__PURE__*/React.createElement(_Ledger_LedgerWrongVersionOverlay__WEBPACK_IMPORTED_MODULE_2__.LedgerWrongVersionOverlay, null));
}

/***/ }),

/***/ "./src/pages/Accounts/components/NameYourWallet.tsx":
/*!**********************************************************!*\
  !*** ./src/pages/Accounts/components/NameYourWallet.tsx ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NameYourWallet": () => (/* binding */ NameYourWallet)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@mui/material/styles/useTheme.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _src_components_common_PageTitle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/components/common/PageTitle */ "./src/components/common/PageTitle.tsx");
/* harmony import */ var _src_hooks_useKeyboardShortcuts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @src/hooks/useKeyboardShortcuts */ "./src/hooks/useKeyboardShortcuts.ts");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");






function NameYourWallet({
  isImporting,
  onSave,
  onBackClick,
  backgroundColor
}) {
  const theme = (0,_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__["default"])();
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_5__.useTranslation)();
  const [name, setName] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');
  const handleSave = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(() => {
    onSave(name);
  }, [name, onSave]);
  const keyboardShortcuts = (0,_src_hooks_useKeyboardShortcuts__WEBPACK_IMPORTED_MODULE_3__.useKeyboardShortcuts)({
    Enter: handleSave,
    Escape: onBackClick
  });
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Stack, {
    sx: {
      width: '100%',
      height: '100%',
      background: backgroundColor ?? theme.palette.background.paper
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Stack, {
    direction: "row",
    sx: {
      mt: 2.5,
      mb: 0.5,
      pr: 1
    }
  }, /*#__PURE__*/React.createElement(_src_components_common_PageTitle__WEBPACK_IMPORTED_MODULE_2__.PageTitle, {
    onBackClick: onBackClick
  }, t('Name your Wallet'))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Stack, {
    sx: {
      px: 2,
      pt: 1,
      flexGrow: 1,
      gap: 3
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.TextField, (0,_babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({
    autoFocus: true,
    "data-testid": "wallet-name-input",
    fullWidth: true,
    label: t('Wallet Name'),
    inputLabelProps: {
      sx: {
        transform: 'none',
        fontSize: 'body2.fontSize',
        mb: 1
      }
    },
    onChange: ev => setName(ev.target.value),
    value: name,
    placeholder: t('My New Wallet')
  }, keyboardShortcuts))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Stack, {
    sx: {
      py: 3,
      px: 2,
      gap: 1,
      width: 1
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Button, {
    fullWidth: true,
    disabled: !name || isImporting,
    isLoading: isImporting,
    size: "large",
    "data-testid": "save-wallet-name",
    onClick: handleSave
  }, t('Save')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Button, {
    variant: "text",
    fullWidth: true,
    disabled: isImporting,
    size: "large",
    "data-testid": "skip-wallet-name",
    onClick: () => onSave()
  }, t('Skip'))));
}

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,