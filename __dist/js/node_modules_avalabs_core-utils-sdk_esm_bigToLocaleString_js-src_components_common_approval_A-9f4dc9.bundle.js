"use strict";
(self["webpackChunkavalanche_extension"] = self["webpackChunkavalanche_extension"] || []).push([["node_modules_avalabs_core-utils-sdk_esm_bigToLocaleString_js-src_components_common_approval_A-9f4dc9"],{

/***/ "./node_modules/@avalabs/core-utils-sdk/esm/bigIntToString.js":
/*!********************************************************************!*\
  !*** ./node_modules/@avalabs/core-utils-sdk/esm/bigIntToString.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bigIntToString": () => (/* binding */ t)
/* harmony export */ });
function t(t,n){n=Math.floor(n);const e=t.toString(),o=Math.max(e.length-n,0),r=e.slice(o).padStart(n,"0"),a=e.slice(0,o)||"0";return r.length?`${a}.${r}`:a}


/***/ }),

/***/ "./node_modules/@avalabs/core-utils-sdk/esm/bigToLocaleString.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@avalabs/core-utils-sdk/esm/bigToLocaleString.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bigToLocaleString": () => (/* binding */ t)
/* harmony export */ });
function t(t,n=9){const e=t.toFixed(n).split("."),r=parseInt(e[0]).toLocaleString("en-US");if(1===e.length)return r;{let t=e[1],o=t.charAt(t.length-1);for(;"0"===o;)t=t.substring(0,t.length-1),o=t.charAt(t.length-1);const s=t.substring(0,n);return s?`${r}.${s}`:r}}


/***/ }),

/***/ "./src/components/common/HallidayBanner.tsx":
/*!**************************************************!*\
  !*** ./src/components/common/HallidayBanner.tsx ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HallidayBanner": () => (/* binding */ HallidayBanner)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _src_utils_getCoreWebUrl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/utils/getCoreWebUrl */ "./src/utils/getCoreWebUrl.ts");
/* harmony import */ var _src_hooks_useDismissedBanners__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/hooks/useDismissedBanners */ "./src/hooks/useDismissedBanners.ts");
/* harmony import */ var _src_contexts_FeatureFlagsProvider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @src/contexts/FeatureFlagsProvider */ "./src/contexts/FeatureFlagsProvider.tsx");
/* harmony import */ var _src_background_services_featureFlags_models__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @src/background/services/featureFlags/models */ "./src/background/services/featureFlags/models.ts");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");







const HALLIDAY_BANNER_ID = 'halliday-e2d6f109-2175-4303-9321-17b010781371';
const HallidayBanner = () => {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_5__.useTranslation)();
  const [isOpen, setIsOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const {
    isDismissed,
    dismiss
  } = (0,_src_hooks_useDismissedBanners__WEBPACK_IMPORTED_MODULE_2__.useDismissedBanners)();
  const {
    isFlagEnabled
  } = (0,_src_contexts_FeatureFlagsProvider__WEBPACK_IMPORTED_MODULE_3__.useFeatureFlagContext)();
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!isFlagEnabled(_src_background_services_featureFlags_models__WEBPACK_IMPORTED_MODULE_4__.FeatureGates.HALLIDAY_BRIDGE_BANNER)) {
      setIsOpen(false);
      return;
    }
    let isMounted = true;
    isDismissed(HALLIDAY_BANNER_ID).then(isHallidayDismissed => {
      if (!isMounted) {
        return;
      }
      setIsOpen(!isHallidayDismissed);
    });
    return () => {
      isMounted = false;
    };
  }, [isDismissed, isFlagEnabled]);
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Grow, {
    in: isOpen,
    unmountOnExit: true,
    mountOnEnter: true
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Card, {
    sx: {
      mx: 2,
      mb: 2,
      position: 'relative'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.IconButton, {
    size: "small",
    sx: {
      position: 'absolute',
      top: 4,
      right: 4,
      zIndex: 9999
    },
    onClick: () => {
      setIsOpen(false);
      dismiss(HALLIDAY_BANNER_ID);
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.XIcon, {
    size: 20
  })), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.CardActionArea, {
    component: _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Link,
    href: `${(0,_src_utils_getCoreWebUrl__WEBPACK_IMPORTED_MODULE_1__.getCoreWebUrl)()}/bridge?useHalliday=1`,
    rel: "noopener noreferrer",
    target: "_blank"
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Stack, {
    sx: {
      gap: 1,
      py: 1,
      px: 2
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Stack, {
    sx: {
      flexDirection: 'row',
      gap: 1,
      alignItems: 'center'
    }
  }, /*#__PURE__*/React.createElement("img", {
    src: "/images/halliday-icon.png",
    style: {
      height: 24
    },
    alt: "Halliday Logo"
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Typography, {
    variant: "button",
    sx: {
      fontSize: 'body2.fontSize'
    }
  }, t('Bridge using Halliday'))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Typography, {
    variant: "caption",
    sx: {
      color: 'text.secondary',
      lineHeight: 1.5
    }
  }, t('Buy and bridge USD and other currencies directly to L1s using Halliday.'))))));
};

/***/ }),

/***/ "./src/components/common/approval/ApprovalSection.tsx":
/*!************************************************************!*\
  !*** ./src/components/common/approval/ApprovalSection.tsx ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ApprovalSection": () => (/* binding */ ApprovalSection),
/* harmony export */   "ApprovalSectionBody": () => (/* binding */ ApprovalSectionBody),
/* harmony export */   "ApprovalSectionHeader": () => (/* binding */ ApprovalSectionHeader)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@mui/material/styles/useTheme.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");



const ApprovalSectionHeader = ({
  label,
  tooltip,
  tooltipIcon = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.InfoCircleIcon, null),
  children
}) => /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.Stack, {
  sx: {
    width: '100%',
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center'
  }
}, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.Stack, {
  sx: {
    flexDirection: 'row',
    alignItems: 'center'
  }
}, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.Typography, {
  component: "h6",
  sx: {
    fontWeight: 600
  }
}, label), tooltip && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.Tooltip, {
  sx: {
    cursor: 'pointer',
    ml: 1
  },
  title: tooltip
}, tooltipIcon)), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.Box, null, children));
const ApprovalSectionBody = ({
  sx = {},
  ...rest
}) => {
  const theme = (0,_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__["default"])();
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.Stack, (0,_babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({
    sx: {
      width: '100%',
      backgroundColor: 'background.paper',
      borderRadius: 1,
      p: 2,
      gap: 1,
      ...(typeof sx === 'function' ? sx(theme) : sx)
    }
  }, rest));
};
const ApprovalSection = ({
  sx = {},
  ...rest
}) => {
  const theme = (0,_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__["default"])();
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.Stack, (0,_babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({
    sx: {
      width: '100%',
      gap: 0.5,
      ...(typeof sx === 'function' ? sx(theme) : sx)
    }
  }, rest));
};

/***/ }),

/***/ "./src/hooks/useDismissedBanners.ts":
/*!******************************************!*\
  !*** ./src/hooks/useDismissedBanners.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "useDismissedBanners": () => (/* binding */ useDismissedBanners)
/* harmony export */ });
/* harmony import */ var _useLocalStorage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./useLocalStorage */ "./src/hooks/useLocalStorage.ts");

const DISMISSED_BANNERS_STORAGE_KEY = 'dismissed-banners';
const useDismissedBanners = () => {
  const {
    get,
    set
  } = (0,_useLocalStorage__WEBPACK_IMPORTED_MODULE_0__.useLocalStorage)();
  return {
    async isDismissed(bannerId) {
      const dismissedBanners = await get(DISMISSED_BANNERS_STORAGE_KEY);
      return dismissedBanners && Array.isArray(dismissedBanners) ? dismissedBanners.includes(bannerId) : false;
    },
    async dismiss(bannerId) {
      const alreadyDismissedBanners = await get(DISMISSED_BANNERS_STORAGE_KEY);
      const newDismissedBanners = alreadyDismissedBanners ? [...alreadyDismissedBanners, bannerId] : [bannerId];
      return set(DISMISSED_BANNERS_STORAGE_KEY, newDismissedBanners);
    }
  };
};

/***/ }),

/***/ "./src/hooks/useLocalStorage.ts":
/*!**************************************!*\
  !*** ./src/hooks/useLocalStorage.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "useLocalStorage": () => (/* binding */ useLocalStorage)
/* harmony export */ });
/* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! webextension-polyfill */ "./node_modules/webextension-polyfill/dist/browser-polyfill.js");
/* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__);

const useLocalStorage = () => {
  return {
    async get(key) {
      const stored = await webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__.storage.local.get(key);
      return stored[key];
    },
    async set(key, value) {
      return webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__.storage.local.set({
        [key]: value
      });
    }
  };
};

/***/ }),

/***/ "./src/pages/Bridge/Bridge.tsx":
/*!*************************************!*\
  !*** ./src/pages/Bridge/Bridge.tsx ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bridge": () => (/* binding */ Bridge),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react_router_dom__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! react-router-dom */ "./node_modules/react-router/esm/react-router.js");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/react-hot-toast/dist/index.mjs");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _src_components_common_PageTitle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/components/common/PageTitle */ "./src/components/common/PageTitle.tsx");
/* harmony import */ var _src_contexts_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @src/contexts/AnalyticsProvider */ "./src/contexts/AnalyticsProvider.tsx");
/* harmony import */ var _src_components_common_FunctionIsOffline__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @src/components/common/FunctionIsOffline */ "./src/components/common/FunctionIsOffline.tsx");
/* harmony import */ var _src_hooks_usePageHistory__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @src/hooks/usePageHistory */ "./src/hooks/usePageHistory.ts");
/* harmony import */ var _src_contexts_AccountsProvider__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @src/contexts/AccountsProvider */ "./src/contexts/AccountsProvider.tsx");
/* harmony import */ var _src_contexts_NetworkProvider__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @src/contexts/NetworkProvider */ "./src/contexts/NetworkProvider.tsx");
/* harmony import */ var _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @avalabs/vm-module-types */ "./node_modules/@avalabs/vm-module-types/dist/index.js");
/* harmony import */ var _src_hooks_useIsFunctionAvailable__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @src/hooks/useIsFunctionAvailable */ "./src/hooks/useIsFunctionAvailable.ts");
/* harmony import */ var _src_hooks_useErrorMessage__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @src/hooks/useErrorMessage */ "./src/hooks/useErrorMessage.ts");
/* harmony import */ var _src_background_services_network_utils_isBitcoinNetwork__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @src/background/services/network/utils/isBitcoinNetwork */ "./src/background/services/network/utils/isBitcoinNetwork.ts");
/* harmony import */ var _src_hooks_useLiveBalance__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @src/hooks/useLiveBalance */ "./src/hooks/useLiveBalance.ts");
/* harmony import */ var _src_contexts_NetworkFeeProvider__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @src/contexts/NetworkFeeProvider */ "./src/contexts/NetworkFeeProvider.tsx");
/* harmony import */ var _src_components_common_HallidayBanner__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @src/components/common/HallidayBanner */ "./src/components/common/HallidayBanner.tsx");
/* harmony import */ var _hooks_useBridge__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./hooks/useBridge */ "./src/pages/Bridge/hooks/useBridge.ts");
/* harmony import */ var _components_BridgeForm__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./components/BridgeForm */ "./src/pages/Bridge/components/BridgeForm.tsx");
/* harmony import */ var _components_BridgeUnknownNetwork__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./components/BridgeUnknownNetwork */ "./src/pages/Bridge/components/BridgeUnknownNetwork.tsx");
/* harmony import */ var _hooks_useBridgeTxHandling__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./hooks/useBridgeTxHandling */ "./src/pages/Bridge/hooks/useBridgeTxHandling.ts");
/* harmony import */ var _components_BridgeFormSkeleton__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./components/BridgeFormSkeleton */ "./src/pages/Bridge/components/BridgeFormSkeleton.tsx");
/* harmony import */ var _components_BridgeSanctions__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./components/BridgeSanctions */ "./src/pages/Bridge/components/BridgeSanctions.tsx");
/* harmony import */ var _utils_isAddressBlockedError__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./utils/isAddressBlockedError */ "./src/pages/Bridge/utils/isAddressBlockedError.ts");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");

























const POLLED_BALANCES = [_avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_8__.TokenType.NATIVE, _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_8__.TokenType.ERC20];
function Bridge() {
  (0,_src_hooks_useLiveBalance__WEBPACK_IMPORTED_MODULE_12__.useLiveBalance)(POLLED_BALANCES); // Make sure we always use the latest balances.

  const {
    amount,
    setAmount,
    bridgableTokens,
    availableChainIds,
    bridgeFee,
    estimateGas,
    isReady,
    minimum,
    maximum,
    receiveAmount,
    setTargetChain,
    possibleTargetChains,
    asset,
    setAsset,
    targetChain,
    transferableAssets,
    sourceBalance,
    transfer
  } = (0,_hooks_useBridge__WEBPACK_IMPORTED_MODULE_15__.useBridge)();
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_22__.useTranslation)();
  const {
    isFunctionAvailable
  } = (0,_src_hooks_useIsFunctionAvailable__WEBPACK_IMPORTED_MODULE_9__.useIsFunctionAvailable)(_src_hooks_useIsFunctionAvailable__WEBPACK_IMPORTED_MODULE_9__.FunctionNames.BRIDGE);
  const [bridgeError, setBridgeError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');
  const history = (0,react_router_dom__WEBPACK_IMPORTED_MODULE_23__.useHistory)();
  const {
    captureEncrypted
  } = (0,_src_contexts_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_3__.useAnalyticsContext)();
  const {
    networkFee
  } = (0,_src_contexts_NetworkFeeProvider__WEBPACK_IMPORTED_MODULE_13__.useNetworkFeeContext)();
  const {
    getPageHistoryData,
    setNavigationHistoryData
  } = (0,_src_hooks_usePageHistory__WEBPACK_IMPORTED_MODULE_5__.usePageHistory)();
  const getTranslatedError = (0,_src_hooks_useErrorMessage__WEBPACK_IMPORTED_MODULE_10__.useErrorMessage)();
  const {
    accounts: {
      active: activeAccount
    }
  } = (0,_src_contexts_AccountsProvider__WEBPACK_IMPORTED_MODULE_6__.useAccountsContext)();
  const {
    network,
    setNetwork
  } = (0,_src_contexts_NetworkProvider__WEBPACK_IMPORTED_MODULE_7__.useNetworkContext)();
  const activeAddress = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => network ? (0,_src_background_services_network_utils_isBitcoinNetwork__WEBPACK_IMPORTED_MODULE_11__.isBitcoinNetwork)(network) ? activeAccount?.addressBTC : activeAccount?.addressC : undefined, [activeAccount?.addressBTC, activeAccount?.addressC, network]);
  const bridgePageHistoryData = getPageHistoryData();
  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {
    if (!asset && bridgePageHistoryData.selectedToken) {
      const matchingAsset = transferableAssets.find(a => a.symbol === bridgePageHistoryData.selectedToken);
      if (matchingAsset) {
        setAsset(matchingAsset);
      }
    }
    if (typeof amount !== 'bigint' && bridgePageHistoryData.inputAmount) {
      setAmount(BigInt(bridgePageHistoryData.inputAmount));
    }
  }, [amount, asset, setAsset, transferableAssets, bridgePageHistoryData.inputAmount, bridgePageHistoryData.selectedToken, setAmount]);
  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {
    if (!asset || transferableAssets.length === 0) {
      return;
    }
    const sourceSymbols = transferableAssets.map(({
      symbol
    }) => symbol);
    const prevSymbol = asset.symbol;
    if (prevSymbol && sourceSymbols.length) {
      const prevAsset = transferableAssets.find(({
        symbol
      }) => symbol === prevSymbol);
      if (prevAsset) {
        setAsset(prevAsset);
      }
    }
  }, [asset, setAsset, transferableAssets]);
  const [isAmountTooLow, setIsAmountTooLow] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
  const onInitiated = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(() => {
    captureEncrypted('BridgeTransferStarted', {
      address: activeAddress,
      sourceBlockchain: network?.caipId,
      targetBlockchain: targetChain?.caipId
    });
  }, [captureEncrypted, activeAddress, network?.caipId, targetChain?.caipId]);
  const onRejected = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(() => {
    captureEncrypted('BridgeTransferRequestUserRejectedError', {
      address: activeAddress,
      sourceBlockchain: network?.caipId,
      targetBlockchain: targetChain?.caipId,
      fee: Number(bridgeFee ?? 0)
    });
  }, [activeAddress, captureEncrypted, network?.caipId, targetChain?.caipId, bridgeFee]);
  const [isAddressBlocked, setIsAddressBlocked] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
  const onFailure = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(transferError => {
    setBridgeError(t('There was a problem with the transfer'));
    captureEncrypted('BridgeTransferRequestError', {
      address: activeAddress,
      sourceBlockchain: network?.caipId,
      targetBlockchain: targetChain?.caipId
    });
    if ((0,_utils_isAddressBlockedError__WEBPACK_IMPORTED_MODULE_21__.isAddressBlockedError)(transferError)) {
      setIsAddressBlocked(true);
      return;
    }
    const {
      title,
      hint
    } = getTranslatedError(transferError);
    _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_24__["default"].custom( /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_25__.ToastCard, {
      variant: "error"
    }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_25__.Typography, {
      variant: "subtitle2"
    }, title), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_25__.Typography, {
      variant: "caption",
      color: "text.primary"
    }, hint)), {
      duration: 5000
    });
  }, [activeAddress, captureEncrypted, getTranslatedError, network?.caipId, t, targetChain?.caipId]);
  const onSuccess = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(hash => {
    captureEncrypted('BridgeTransferRequestSucceeded', {
      address: activeAddress,
      txHash: hash,
      sourceBlockchain: network?.caipId,
      targetBlockchain: targetChain?.caipId
    });
    const timestamp = Date.now();

    // Navigate to transaction status page
    history.push(`/bridge/transaction-status/${network?.caipId}/${hash}/${timestamp}`);
  }, [activeAddress, captureEncrypted, history, network?.caipId, targetChain?.caipId]);
  const handleSourceChainChange = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(chain => {
    setNetwork(chain);
    setNavigationHistoryData({
      selectedToken: asset ? asset.symbol : undefined,
      inputAmount: amount
    });

    // Reset because a denomination change will change its value
    setAmount(0n);
    setBridgeError('');
  }, [amount, asset, setAmount, setNavigationHistoryData, setNetwork, setBridgeError]);
  const {
    onTransfer,
    isPending
  } = (0,_hooks_useBridgeTxHandling__WEBPACK_IMPORTED_MODULE_18__.useBridgeTxHandling)({
    transfer,
    onInitiated,
    onSuccess,
    onFailure,
    onRejected
  });
  const formProps = {
    onInitiated,
    onSuccess,
    onFailure,
    onRejected,
    handleSourceChainChange,
    amount,
    bridgeError,
    isAmountTooLow,
    isReady,
    asset,
    setAsset,
    availableChainIds,
    transferableAssets,
    transfer,
    onTransfer,
    isPending,
    setIsAmountTooLow,
    setAmount,
    setBridgeError,
    setNavigationHistoryData,
    targetChain,
    estimateGas,
    minimum,
    maximum,
    receiveAmount,
    setTargetChain,
    possibleTargetChains,
    bridgableTokens,
    sourceBalance
  };
  if (!isFunctionAvailable) {
    return /*#__PURE__*/React.createElement(_src_components_common_FunctionIsOffline__WEBPACK_IMPORTED_MODULE_4__.FunctionIsOffline, {
      functionName: _src_hooks_useIsFunctionAvailable__WEBPACK_IMPORTED_MODULE_9__.FunctionNames.BRIDGE
    }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_25__.Button, {
      href: "https://status.avax.network/",
      target: "_blank",
      rel: "noopener noreferrer",
      sx: {
        mt: 3
      }
    }, t('Go to the status page')));
  }
  if (isAddressBlocked) {
    return /*#__PURE__*/React.createElement(_components_BridgeSanctions__WEBPACK_IMPORTED_MODULE_20__.BridgeSanctions, null);
  }
  if (isReady && transferableAssets.length === 0) {
    return /*#__PURE__*/React.createElement(_components_BridgeUnknownNetwork__WEBPACK_IMPORTED_MODULE_17__.BridgeUnknownNetwork, {
      onSelect: handleSourceChainChange,
      availableChainIds: availableChainIds,
      network: network
    });
  }
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_25__.Stack, {
    sx: {
      height: '100%',
      width: '100%'
    }
  }, /*#__PURE__*/React.createElement(_src_components_common_PageTitle__WEBPACK_IMPORTED_MODULE_2__.PageTitle, {
    onBackClick: () => {
      history.replace('/home');
    }
  }, t('Bridge')), /*#__PURE__*/React.createElement(_src_components_common_HallidayBanner__WEBPACK_IMPORTED_MODULE_14__.HallidayBanner, null), isReady && networkFee ? /*#__PURE__*/React.createElement(_components_BridgeForm__WEBPACK_IMPORTED_MODULE_16__.BridgeForm, (0,_babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({}, formProps, {
    networkFee: networkFee
  })) : /*#__PURE__*/React.createElement(_components_BridgeFormSkeleton__WEBPACK_IMPORTED_MODULE_19__.BridgeFormSkeleton, null));
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Bridge);

/***/ }),

/***/ "./src/pages/Bridge/components/BridgeForm.tsx":
/*!****************************************************!*\
  !*** ./src/pages/Bridge/components/BridgeForm.tsx ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BridgeForm": () => (/* binding */ BridgeForm)
/* harmony export */ });
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@mui/material/styles/useTheme.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var _avalabs_core_utils_sdk__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @avalabs/core-utils-sdk */ "./node_modules/@avalabs/core-utils-sdk/esm/bigIntToString.js");
/* harmony import */ var _avalabs_core_utils_sdk__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @avalabs/core-utils-sdk */ "./node_modules/@avalabs/core-utils-sdk/esm/tokenUnit.js");
/* harmony import */ var _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @avalabs/bridge-unified */ "./node_modules/@avalabs/bridge-unified/dist/index.js");
/* harmony import */ var _src_components_common_TokenSelect__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/components/common/TokenSelect */ "./src/components/common/TokenSelect.tsx");
/* harmony import */ var _src_contexts_SettingsProvider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @src/contexts/SettingsProvider */ "./src/contexts/SettingsProvider.tsx");
/* harmony import */ var _src_hooks_useSendAnalyticsData__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @src/hooks/useSendAnalyticsData */ "./src/hooks/useSendAnalyticsData.ts");
/* harmony import */ var _src_contexts_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @src/contexts/AnalyticsProvider */ "./src/contexts/AnalyticsProvider.tsx");
/* harmony import */ var _src_contexts_NetworkProvider__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @src/contexts/NetworkProvider */ "./src/contexts/NetworkProvider.tsx");
/* harmony import */ var _hooks_useHasEnoughtForGas__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../hooks/useHasEnoughtForGas */ "./src/pages/Bridge/hooks/useHasEnoughtForGas.ts");
/* harmony import */ var _NetworkSelector__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./NetworkSelector */ "./src/pages/Bridge/components/NetworkSelector.tsx");
/* harmony import */ var _utils_findMatchingBridgeAsset__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/findMatchingBridgeAsset */ "./src/pages/Bridge/utils/findMatchingBridgeAsset.ts");
/* harmony import */ var _BridgeTypeFootnote__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./BridgeTypeFootnote */ "./src/pages/Bridge/components/BridgeTypeFootnote.tsx");
/* harmony import */ var _src_background_services_network_utils_isBitcoinNetwork__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @src/background/services/network/utils/isBitcoinNetwork */ "./src/background/services/network/utils/isBitcoinNetwork.ts");
/* harmony import */ var _src_components_common_CustomFees__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @src/components/common/CustomFees */ "./src/components/common/CustomFees.tsx");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
















const BridgeForm = ({
  amount,
  asset,
  setAsset,
  isAmountTooLow,
  setIsAmountTooLow,
  minimum,
  maximum,
  receiveAmount,
  networkFee,
  sourceBalance,
  targetChain,
  setTargetChain,
  price,
  estimateGas,
  bridgeError,
  setBridgeError,
  setNavigationHistoryData,
  setAmount,
  onTransfer,
  isPending,
  handleSourceChainChange,
  availableChainIds,
  possibleTargetChains,
  bridgableTokens,
  transferableAssets
}) => {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_13__.useTranslation)();
  const theme = (0,_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_14__["default"])();
  const cardRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const formRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const {
    setNetwork,
    network
  } = (0,_src_contexts_NetworkProvider__WEBPACK_IMPORTED_MODULE_6__.useNetworkContext)();
  const {
    currencyFormatter,
    currency
  } = (0,_src_contexts_SettingsProvider__WEBPACK_IMPORTED_MODULE_3__.useSettingsContext)();
  const {
    sendTokenSelectedAnalytics,
    sendAmountEnteredAnalytics
  } = (0,_src_hooks_useSendAnalyticsData__WEBPACK_IMPORTED_MODULE_4__.useSendAnalyticsData)();
  const {
    capture
  } = (0,_src_contexts_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_5__.useAnalyticsContext)();
  const [isTokenSelectOpen, setIsTokenSelectOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const [feeRate, setFeeRate] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(networkFee.low.maxFeePerGas);
  const denomination = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!sourceBalance) {
      return 0;
    }
    return sourceBalance.decimals;
  }, [sourceBalance]);
  const gasToken = network?.networkToken.symbol ?? '';
  const [neededGas, setNeededGas] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0n);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (minimum && amount && amount < minimum) {
      setIsAmountTooLow(true);
    } else {
      setIsAmountTooLow(false);
    }
  }, [minimum, amount, setIsAmountTooLow]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    let isMounted = true;
    if (amount && !isAmountTooLow) {
      estimateGas().then(limit => {
        if (isMounted && typeof limit === 'bigint') {
          setNeededGas(limit);
        }
      });
      return () => {
        isMounted = false;
      };
    }
  }, [estimateGas, amount, isAmountTooLow]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (typeof maximum === 'bigint' && amount && amount > maximum) {
      const errorMessage = t('Insufficient balance');
      setBridgeError(prevError => {
        if (prevError === errorMessage) {
          return prevError;
        }
        capture('BridgeTokenSelectError', {
          errorMessage
        });
        return errorMessage;
      });
    }
  }, [amount, capture, maximum, setBridgeError, t]);
  const hasEnoughForNetworkFee = (0,_hooks_useHasEnoughtForGas__WEBPACK_IMPORTED_MODULE_7__.useHasEnoughForGas)(asset && (0,_avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_1__.isNativeAsset)(asset) ? amount : 0n,
  // Bridge amount does not matter if we're not bridging the native token
  feeRate, neededGas);
  const errorTooltipContent = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!hasEnoughForNetworkFee) {
      return t('Insufficient balance to cover gas costs. Please add {{token}} or slightly lower the amount.', {
        token: gasToken
      });
    }
    if (amount && minimum && isAmountTooLow) {
      return t(`Amount too low -- minimum is {{minimum}}`, {
        minimum: (0,_avalabs_core_utils_sdk__WEBPACK_IMPORTED_MODULE_15__.bigIntToString)(minimum, denomination)
      });
    }
    return bridgeError ?? '';
  }, [bridgeError, gasToken, hasEnoughForNetworkFee, isAmountTooLow, minimum, amount, denomination, t]);
  const formatCurrency = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(targetAmount => {
    return targetAmount ? `${currencyFormatter(targetAmount).replace(currency, '')} ${currency}` : '-';
  }, [currency, currencyFormatter]);
  const formattedReceiveAmount = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (typeof receiveAmount !== 'bigint' || !asset) {
      return '-';
    }
    return `${(0,_avalabs_core_utils_sdk__WEBPACK_IMPORTED_MODULE_15__.bigIntToString)(receiveAmount, asset.decimals)} ${asset.symbol}`;
  }, [receiveAmount, asset]);
  const formattedReceiveAmountCurrency = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!price || typeof receiveAmount !== 'bigint' || !asset) {
      return '-';
    }
    const unit = new _avalabs_core_utils_sdk__WEBPACK_IMPORTED_MODULE_16__.TokenUnit(receiveAmount, asset.decimals, asset.symbol);
    return `~${formatCurrency(price * unit.toDisplay({
      asNumber: true
    }))}`;
  }, [formatCurrency, price, receiveAmount, asset]);
  const handleAmountChanged = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(value => {
    setNavigationHistoryData({
      selectedToken: asset ? asset.symbol : undefined,
      inputAmount: String(value.bigint)
    });
    setAmount(value.bigint);
    sendAmountEnteredAnalytics('Bridge');
  }, [asset, sendAmountEnteredAnalytics, setAmount, setNavigationHistoryData]);
  const handleSelect = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(token => {
    const foundAsset = (0,_utils_findMatchingBridgeAsset__WEBPACK_IMPORTED_MODULE_9__.findMatchingBridgeAsset)(transferableAssets, token);
    if (!foundAsset) {
      return;
    }
    setNavigationHistoryData({
      selectedToken: foundAsset.symbol,
      inputAmount: undefined
    });
    setAmount(0n);
    setAsset(foundAsset);
    sendTokenSelectedAnalytics('Bridge');
  }, [setAsset, sendTokenSelectedAnalytics, setAmount, setNavigationHistoryData, transferableAssets]);
  const handleBlockchainSwap = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    if (targetChain && network) {
      setNavigationHistoryData({
        selectedToken: asset ? asset.symbol : undefined,
        inputAmount: undefined
      });
      setAmount(0n);
      setTargetChain(network);
      setNetwork(targetChain);
      setBridgeError('');
    }
  }, [setNetwork, setBridgeError, setAmount, setNavigationHistoryData, targetChain, asset, network, setTargetChain]);
  const disableTransfer = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => bridgeError.length > 0 || isPending || isAmountTooLow || !amount || !hasEnoughForNetworkFee || !networkFee, [amount, bridgeError.length, hasEnoughForNetworkFee, isAmountTooLow, isPending, networkFee]);
  // NOTE: we operate on the assumption that UnifiedBridge SDK will
  // use the first matching bridge from the `destinations` array
  const [bridgeType] = asset?.destinations[targetChain?.caipId ?? ''] ?? [];
  const withFeeBox = network ? (0,_src_background_services_network_utils_isBitcoinNetwork__WEBPACK_IMPORTED_MODULE_11__.isBitcoinNetwork)(network) : false;
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Stack, {
    sx: {
      flex: 1,
      flexGrow: 1,
      px: 2,
      height: 1,
      mb: isTokenSelectOpen ? 2 : 0
    },
    ref: formRef
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Scrollbars, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Stack, {
    sx: {
      flex: 1,
      opacity: isPending ? 0.6 : 1,
      pointerEvents: isPending ? 'none' : 'auto'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Stack, {
    ref: cardRef,
    sx: {
      p: 0,
      overflow: 'unset'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Stack, {
    sx: {
      width: '100%'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Card, {
    sx: {
      p: 0,
      backgroundColor: 'grey.850',
      overflow: 'unset',
      zIndex: 1
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Stack, {
    sx: {
      width: '100%'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Stack, {
    direction: "row",
    sx: {
      justifyContent: 'space-between',
      alignItems: 'center',
      p: 2,
      pr: 1
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Typography, {
    variant: "body2",
    sx: {
      fontWeight: 'fontWeightSemibold'
    }
  }, t('From')), /*#__PURE__*/React.createElement(_NetworkSelector__WEBPACK_IMPORTED_MODULE_8__.NetworkSelector, {
    testId: "bridge-from-chain-selector",
    selected: network,
    onSelect: handleSourceChainChange,
    chainIds: availableChainIds
  })), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Stack, {
    sx: {
      flexGrow: 1,
      maxHeight: 'unset',
      height: '100%'
    }
  }, /*#__PURE__*/React.createElement(_src_components_common_TokenSelect__WEBPACK_IMPORTED_MODULE_2__.TokenSelect, {
    maxAmount: maximum,
    tokensList: bridgableTokens,
    selectedToken: sourceBalance,
    onTokenChange: handleSelect,
    inputAmount:
    // Reset BNInput when programmatically setting the amount to zero
    !sourceBalance || amount === 0n ? undefined : amount,
    onInputAmountChange: handleAmountChanged,
    onSelectToggle: () => {
      setIsTokenSelectOpen(!isTokenSelectOpen);
    },
    isOpen: isTokenSelectOpen,
    setIsOpen: setIsTokenSelectOpen,
    padding: "0 16px 8px",
    skipHandleMaxAmount: true,
    label: "",
    containerRef: possibleTargetChains.length > 0 ? cardRef : formRef
  })), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Stack, {
    direction: "row",
    sx: {
      height: 28,
      position: 'relative',
      top: -25,
      justifyContent: 'center'
    }
  }, errorTooltipContent && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Tooltip, {
    placement: "bottom",
    title: errorTooltipContent
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Stack, {
    sx: {
      flexDirection: 'row',
      columnGap: 0.5,
      cursor: 'pointer',
      mt: 0.5
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Typography, {
    variant: "caption",
    color: theme.palette.error.main
  }, t('Error')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.AlertCircleIcon, {
    size: 12,
    color: theme.palette.error.main
  })))))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Grow, {
    in: !isTokenSelectOpen && possibleTargetChains.length > 0,
    unmountOnExit: true,
    mountOnEnter: true
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Stack, {
    sx: {
      alignItems: 'center',
      mt: -2.5,
      pb: 1,
      zIndex: 1
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Tooltip, {
    title: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Typography, null, t('Switch'))
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Button, {
    "data-testid": "bridge-switch-button",
    usehigherzindex: isTokenSelectOpen ? '0' : '1',
    onClick: handleBlockchainSwap,
    disabled: !targetChain,
    sx: {
      width: 40,
      height: 40
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.SwapIcon, {
    size: 20,
    sx: {
      transform: 'rotate(90deg)'
    }
  }))))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Slide, {
    in: possibleTargetChains.length > 0,
    mountOnEnter: true,
    unmountOnExit: true
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Card, {
    sx: {
      background: 'background.paper',
      zIndex: 0,
      pt: 6,
      mt: -6
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Stack, {
    sx: {
      width: '100%',
      p: 2,
      pt: 1,
      rowGap: 2
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Stack, {
    direction: "row",
    sx: {
      justifyContent: 'space-between',
      alignItems: 'center'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Typography, {
    variant: "body2",
    sx: {
      fontWeight: 'fontWeightSemibold'
    }
  }, t('To')), /*#__PURE__*/React.createElement(_NetworkSelector__WEBPACK_IMPORTED_MODULE_8__.NetworkSelector, {
    testId: "bridge-to-chain-selector",
    selected: targetChain,
    onSelect: setTargetChain,
    chainIds: possibleTargetChains
  })), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Divider, {
    divider: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Divider, null),
    sx: {
      rowGap: 2
    }
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Stack, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Stack, {
    sx: {
      flexDirection: 'row',
      justifyContent: 'space-between',
      alignItems: 'center',
      mb: 1
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Typography, null, t('Receive')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Typography, null, formattedReceiveAmount)), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Stack, {
    sx: {
      flexDirection: 'row',
      justifyContent: 'space-between',
      alignItems: 'center'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Typography, {
    variant: "caption",
    color: theme.palette.text.secondary
  }, t('Estimated')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Typography, {
    variant: "caption",
    color: theme.palette.text.secondary
  }, formattedReceiveAmountCurrency))))))))), withFeeBox && neededGas && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Stack, {
    sx: {
      pt: 2
    }
  }, /*#__PURE__*/React.createElement(_src_components_common_CustomFees__WEBPACK_IMPORTED_MODULE_12__.CustomFees, {
    maxFeePerGas: networkFee.low.maxFeePerGas,
    limit: Number(neededGas),
    networkFee: networkFee,
    network: network,
    isLimitReadonly: true,
    onChange: ({
      maxFeePerGas
    }) => {
      setFeeRate(maxFeePerGas);
    }
  })))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Stack, {
    sx: {
      display: isTokenSelectOpen ? 'none' : 'flex',
      bottom: 0,
      width: 1,
      maxWidth: 375,
      px: 2,
      pt: 1.5,
      pb: 2,
      backgroundColor: 'rgba(0,0,0,0.85)',
      backdropFilter: 'blur(12px)',
      gap: 1
    }
  }, asset && targetChain && bridgeType && /*#__PURE__*/React.createElement(_BridgeTypeFootnote__WEBPACK_IMPORTED_MODULE_10__.BridgeTypeFootnote, {
    bridgeType: bridgeType
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Button, {
    "data-testid": "bridger-transfer-button",
    fullWidth: true,
    size: "large",
    disabled: disableTransfer,
    onClick: () => onTransfer({
      bridgeType,
      gasSettings: withFeeBox && feeRate ? {
        price: feeRate
      } : undefined
    }),
    isLoading: isPending
  }, isPending ? t('Bridging...') : t('Bridge'))));
};

/***/ }),

/***/ "./src/pages/Bridge/components/BridgeFormSkeleton.tsx":
/*!************************************************************!*\
  !*** ./src/pages/Bridge/components/BridgeFormSkeleton.tsx ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BridgeFormSkeleton": () => (/* binding */ BridgeFormSkeleton)
/* harmony export */ });
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");

const BridgeFormSkeleton = () => /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__.Stack, {
  sx: {
    flex: 1,
    px: 2,
    flexGrow: 1,
    justifyContent: 'space-between'
  }
}, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__.Stack, {
  sx: {
    width: 1
  }
}, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__.Card, {
  sx: {
    width: 1,
    height: 176,
    p: 0,
    backgroundColor: 'grey.850',
    overflow: 'unset',
    zIndex: 1
  }
}, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__.Stack, {
  sx: {
    width: 1,
    p: 2,
    gap: 1
  }
}, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__.Stack, {
  sx: {
    flexDirection: 'row',
    justifyContent: 'space-between'
  }
}, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__.Skeleton, {
  variant: "text",
  sx: {
    width: 35
  }
}), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__.Skeleton, {
  variant: "rectangular",
  sx: {
    width: 190,
    height: 24
  }
})), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__.Stack, {
  sx: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center'
  }
}, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__.Skeleton, {
  variant: "text",
  sx: {
    width: 80
  }
}), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__.Stack, {
  sx: {
    gap: 0.5,
    textAlign: 'right',
    alignItems: 'flex-end'
  }
}, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__.Skeleton, {
  variant: "text",
  sx: {
    width: 50
  }
}), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__.Skeleton, {
  variant: "rectangular",
  sx: {
    width: 190,
    height: 40
  }
}), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__.Skeleton, {
  variant: "text",
  sx: {
    width: 50
  }
}))))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__.Card, {
  sx: {
    width: 1,
    height: 150,
    p: 0,
    backgroundColor: 'none',
    mt: -1
  }
}, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__.Stack, {
  sx: {
    width: 1,
    p: 2,
    gap: 1,
    pt: 4
  }
}, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__.Stack, {
  sx: {
    flexDirection: 'row',
    justifyContent: 'space-between'
  }
}, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__.Skeleton, {
  variant: "text",
  sx: {
    width: 35
  }
}), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__.Skeleton, {
  variant: "text",
  sx: {
    width: 150
  }
})), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__.Divider, {
  sx: {
    my: 1
  }
}), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__.Skeleton, {
  variant: "text",
  sx: {
    width: 60
  }
}), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__.Skeleton, {
  variant: "text",
  sx: {
    width: 60
  }
})))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__.Stack, {
  sx: {
    height: 76,
    alignItems: 'center'
  }
}, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__.Skeleton, {
  variant: "rectangular",
  sx: {
    width: 1,
    height: 40
  }
})));

/***/ }),

/***/ "./src/pages/Bridge/components/BridgeSanctions.tsx":
/*!*********************************************************!*\
  !*** ./src/pages/Bridge/components/BridgeSanctions.tsx ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BridgeSanctions": () => (/* binding */ BridgeSanctions)
/* harmony export */ });
/* harmony import */ var _src_components_common_PageTitle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @src/components/common/PageTitle */ "./src/components/common/PageTitle.tsx");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");



const BridgeSanctions = () => {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_1__.useTranslation)();
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.Stack, {
    sx: {
      alignItems: 'center',
      rowGap: 2,
      height: '100%'
    }
  }, /*#__PURE__*/React.createElement(_src_components_common_PageTitle__WEBPACK_IMPORTED_MODULE_0__.PageTitle, {
    variant: _src_components_common_PageTitle__WEBPACK_IMPORTED_MODULE_0__.PageTitleVariant.PRIMARY
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.AlertCircleIcon, {
    size: 72,
    sx: {
      mt: 5
    }
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.Typography, {
    variant: "h4"
  }, t('Failed to connect')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.Typography, {
    variant: "body2",
    sx: {
      mx: 5,
      color: 'text.secondary',
      textAlign: 'center'
    }
  }, t('Users may not use the Bridge if they are on the Specially Designated Nationals (SDN) List of the Office of Foreign Assets Control (OFAC) or any other sanctions or are otherwise a sanctioned person or from a sanctioned jurisdiction')));
};

/***/ }),

/***/ "./src/pages/Bridge/components/BridgeTypeFootnote.tsx":
/*!************************************************************!*\
  !*** ./src/pages/Bridge/components/BridgeTypeFootnote.tsx ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BridgeTypeFootnote": () => (/* binding */ BridgeTypeFootnote)
/* harmony export */ });
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/Trans.js");
/* harmony import */ var _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @avalabs/bridge-unified */ "./node_modules/@avalabs/bridge-unified/dist/index.js");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");



const BridgeTypeFootnote = ({
  bridgeType
}) => {
  if (bridgeType === _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_0__.BridgeType.CCTP) {
    return /*#__PURE__*/React.createElement(CTTPFootnote, null);
  }
  if (bridgeType === _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_0__.BridgeType.ICTT_ERC20_ERC20) {
    return /*#__PURE__*/React.createElement(ICTTFootnote, null);
  }
  return null;
};
const CTTPFootnote = () => {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_1__.useTranslation)();
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.Stack, {
    direction: "row",
    sx: {
      justifyContent: 'center',
      alignItems: 'center',
      gap: 0.5
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.Typography, {
    variant: "caption"
  }, t('Powered by')), /*#__PURE__*/React.createElement("img", {
    src: "/images/logos/circle.png",
    style: {
      height: 14
    },
    alt: "Circle"
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.Tooltip, {
    PopperProps: {
      sx: {
        maxWidth: 188
      }
    },
    title: /*#__PURE__*/React.createElement(react_i18next__WEBPACK_IMPORTED_MODULE_3__.Trans, {
      i18nKey: "USDC is routed through Circle's Cross-Chain Transfer Protocol. <faqLink>Bridge FAQs</faqLink>",
      components: {
        faqLink: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.Link, {
          href: "https://support.avax.network/en/articles/6092559-avalanche-bridge-faq",
          target: "_blank",
          rel: "noreferrer",
          sx: {
            fontSize: 'caption.fontSize',
            display: 'inline-flex',
            color: 'secondary.dark'
          }
        })
      }
    })
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.InfoCircleIcon, {
    sx: {
      cursor: 'pointer'
    }
  })));
};
const ICTTFootnote = () => {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_1__.useTranslation)();
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.Stack, {
    sx: {
      justifyContent: 'center',
      alignItems: 'center',
      gap: 0
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.Typography, {
    variant: "caption",
    fontSize: 10
  }, t('Powered by')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.Stack, {
    sx: {
      gap: 0.5,
      flexDirection: 'row',
      alignItems: 'center'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.AvalancheAchromaticIcon, {
    size: 20,
    sx: {
      filter: 'invert(1)'
    }
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.Typography, {
    variant: "caption",
    fontSize: 10
  }, /*#__PURE__*/React.createElement("b", null, "AVALANCHE"), " ICM"), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.Tooltip, {
    PopperProps: {
      sx: {
        maxWidth: 188
      }
    },
    title: /*#__PURE__*/React.createElement(react_i18next__WEBPACK_IMPORTED_MODULE_3__.Trans, {
      i18nKey: "Bridging this token pair utilizes Avalanche Interchain Messaging. <faqLink>Bridge FAQs</faqLink>",
      components: {
        faqLink: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.Link, {
          href: "https://support.avax.network/en/articles/6092559-avalanche-bridge-faq",
          target: "_blank",
          rel: "noreferrer",
          sx: {
            fontSize: 'caption.fontSize',
            display: 'inline-flex',
            color: 'secondary.dark'
          }
        })
      }
    })
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.InfoCircleIcon, {
    sx: {
      cursor: 'pointer'
    }
  }))));
};

/***/ }),

/***/ "./src/pages/Bridge/components/BridgeUnknownNetwork.tsx":
/*!**************************************************************!*\
  !*** ./src/pages/Bridge/components/BridgeUnknownNetwork.tsx ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BridgeUnknownNetwork": () => (/* binding */ BridgeUnknownNetwork)
/* harmony export */ });
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _src_components_common_PageTitle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @src/components/common/PageTitle */ "./src/components/common/PageTitle.tsx");
/* harmony import */ var _NetworkSelector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./NetworkSelector */ "./src/pages/Bridge/components/NetworkSelector.tsx");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");




const BridgeUnknownNetwork = ({
  onSelect,
  network,
  availableChainIds
}) => {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_2__.useTranslation)();
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Stack, {
    height: "100%",
    width: "100%"
  }, /*#__PURE__*/React.createElement(_src_components_common_PageTitle__WEBPACK_IMPORTED_MODULE_0__.PageTitle, {
    variant: _src_components_common_PageTitle__WEBPACK_IMPORTED_MODULE_0__.PageTitleVariant.PRIMARY
  }, t('Back')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Stack, {
    sx: {
      alignItems: 'center',
      justifyContent: 'center',
      flexGrow: 1,
      mx: 2
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Typography, {
    variant: "h5"
  }, t('Network not supported.')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Typography, {
    variant: "body1",
    sx: {
      mt: 1,
      mb: 3,
      textAlign: 'center'
    }
  }, t('Network is not supported. Change network to supported network to continue.')), /*#__PURE__*/React.createElement(_NetworkSelector__WEBPACK_IMPORTED_MODULE_1__.NetworkSelector, {
    testId: "NonBridgableChainNetworkSelector",
    chainIds: availableChainIds,
    selected: network,
    onSelect: onSelect
  })));
};

/***/ }),

/***/ "./src/pages/Bridge/components/NetworkSelector.tsx":
/*!*********************************************************!*\
  !*** ./src/pages/Bridge/components/NetworkSelector.tsx ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NetworkSelector": () => (/* binding */ NetworkSelector)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var _src_contexts_NetworkProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/contexts/NetworkProvider */ "./src/contexts/NetworkProvider.tsx");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");




function NetworkSelector({
  testId,
  disabled,
  selected,
  onSelect,
  chainIds
}) {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_2__.useTranslation)();
  const [isOpen, setIsOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const selectButtonRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const {
    getNetwork
  } = (0,_src_contexts_NetworkProvider__WEBPACK_IMPORTED_MODULE_1__.useNetworkContext)();
  const handleClose = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(network => {
    setIsOpen(false);
    onSelect?.(network);
  }, [onSelect]);
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Stack, {
    sx: {
      alignItems: 'flex-end'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Button, {
    variant: "text",
    disableRipple: true,
    "data-testid": testId,
    disabled: disabled || chainIds.length <= 1,
    onClick: () => {
      setIsOpen(!isOpen);
    },
    ref: selectButtonRef,
    sx: {
      color: 'primary.main',
      p: 0.5,
      '&.Mui-disabled': {
        color: 'primary.main'
      }
    },
    endIcon: chainIds.length > 1 && (isOpen ? /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.ChevronUpIcon, null) : /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.ChevronDownIcon, null))
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Stack, {
    direction: "row",
    sx: {
      columnGap: 1,
      justifyContent: 'flex-end',
      alignItems: 'center'
    }
  }, selected ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("img", {
    src: selected.logoUri,
    width: 16,
    height: 16,
    alt: ""
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Typography, {
    variant: "body2",
    sx: {
      transform: 'capitalize',
      fontWeight: 'fontWeightSemibold'
    }
  }, selected.chainName)) : /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Typography, {
    variant: "body2"
  }, t('Select target chain')))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Menu, {
    anchorEl: selectButtonRef.current,
    open: isOpen,
    onClose: () => {
      setIsOpen(false);
    },
    PaperProps: {
      sx: {
        width: 220,
        backgroundColor: 'grey.800',
        mr: 3
      }
    },
    anchorOrigin: {
      vertical: 'bottom',
      horizontal: 'right'
    },
    transformOrigin: {
      vertical: 'top',
      horizontal: 'right'
    }
  }, chainIds.map(chainId => getNetwork(chainId)).filter(n => typeof n !== 'undefined').map(network => {
    return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.MenuItem, {
      key: network.caipId,
      "data-testid": `blockchaind-${network.caipId}`,
      onClick: () => {
        handleClose(network);
      },
      disableRipple: true,
      sx: {
        minHeight: 'auto',
        py: 1
      }
    }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Stack, {
      direction: "row",
      sx: {
        justifyContent: 'space-between',
        alignItems: 'center',
        width: '100%'
      }
    }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Stack, {
      direction: "row",
      sx: {
        columnGap: 1,
        alignItems: 'center'
      }
    }, /*#__PURE__*/React.createElement("img", {
      src: network.logoUri,
      width: 16,
      height: 16,
      alt: ""
    }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Typography, {
      variant: "body2"
    }, network.chainName)), selected === network && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.CheckIcon, {
      size: 16
    })));
  })));
}

/***/ }),

/***/ "./src/pages/Bridge/hooks/useBridge.ts":
/*!*********************************************!*\
  !*** ./src/pages/Bridge/hooks/useBridge.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "useBridge": () => (/* binding */ useBridge)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @avalabs/bridge-unified */ "./node_modules/@avalabs/bridge-unified/dist/index.js");
/* harmony import */ var _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @avalabs/vm-module-types */ "./node_modules/@avalabs/vm-module-types/dist/index.js");
/* harmony import */ var _src_contexts_NetworkProvider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @src/contexts/NetworkProvider */ "./src/contexts/NetworkProvider.tsx");
/* harmony import */ var _src_contexts_UnifiedBridgeProvider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @src/contexts/UnifiedBridgeProvider */ "./src/contexts/UnifiedBridgeProvider.tsx");
/* harmony import */ var _src_contexts_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @src/contexts/AnalyticsProvider */ "./src/contexts/AnalyticsProvider.tsx");
/* harmony import */ var _src_hooks_useTokensWithBalances__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @src/hooks/useTokensWithBalances */ "./src/hooks/useTokensWithBalances.ts");
/* harmony import */ var _src_background_services_balances_nft_utils_isNFT__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @src/background/services/balances/nft/utils/isNFT */ "./src/background/services/balances/nft/utils/isNFT.ts");
/* harmony import */ var _utils_findMatchingBridgeAsset__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/findMatchingBridgeAsset */ "./src/pages/Bridge/utils/findMatchingBridgeAsset.ts");









function useBridge() {
  const {
    network,
    getNetwork
  } = (0,_src_contexts_NetworkProvider__WEBPACK_IMPORTED_MODULE_3__.useNetworkContext)();
  const {
    capture
  } = (0,_src_contexts_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_5__.useAnalyticsContext)();
  const {
    availableChainIds,
    estimateTransferGas,
    getFee,
    isReady,
    transferableAssets,
    transferAsset,
    getMinimumTransferAmount
  } = (0,_src_contexts_UnifiedBridgeProvider__WEBPACK_IMPORTED_MODULE_4__.useUnifiedBridgeContext)();
  const [amount, setAmount] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const [asset, setAsset] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const firstTargetChainId = Object.keys(asset?.destinations ?? {})[0] ?? '';
  const [targetChain, setTargetChain] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(firstTargetChainId ? getNetwork(firstTargetChainId) : undefined);
  const [receiveAmount, setReceiveAmount] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const [maximum, setMaximum] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const [minimum, setMinimum] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const [bridgeFee, setBridgeFee] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const balances = (0,_src_hooks_useTokensWithBalances__WEBPACK_IMPORTED_MODULE_6__.useTokensWithBalances)({
    network,
    forceShowTokensWithoutBalances: true
  });
  const bridgableTokens = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    const nonNFTs = balances.filter(t => !(0,_src_background_services_balances_nft_utils_isNFT__WEBPACK_IMPORTED_MODULE_7__.isNFT)(t));
    return nonNFTs.filter(t => (0,_utils_findMatchingBridgeAsset__WEBPACK_IMPORTED_MODULE_8__.findMatchingBridgeAsset)(transferableAssets, t));
  }, [balances, transferableAssets]);
  const sourceBalance = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!asset) {
      return;
    }
    return bridgableTokens.find(token => {
      if (asset.type === _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_1__.TokenType.NATIVE && token.type === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.NATIVE) {
        return asset.symbol.toLowerCase() === token.symbol.toLowerCase();
      }
      if (asset.type === _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_1__.TokenType.ERC20 && token.type === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.ERC20) {
        return asset.address?.toLowerCase() === token.address.toLowerCase();
      }
      return false;
    });
  }, [asset, bridgableTokens]);
  const possibleTargetChains = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return Object.keys(asset?.destinations ?? {});
  }, [asset?.destinations]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    setMaximum(sourceBalance?.balance);
  }, [sourceBalance?.balance]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    let isMounted = true;
    if (asset && amount && targetChain) {
      getFee(asset.symbol, amount, targetChain.caipId).then(fee => {
        if (!isMounted) {
          return;
        }
        setBridgeFee(fee);
        setReceiveAmount(amount - fee);
      });
      getMinimumTransferAmount(asset, amount, targetChain.caipId).then(min => {
        if (!isMounted) {
          return;
        }
        setMinimum(min);
      });
    } else {
      setMinimum(undefined);
      setBridgeFee(undefined);
      setReceiveAmount(undefined);
    }
    return () => {
      isMounted = false;
    };
  }, [amount, asset, getFee, targetChain, getMinimumTransferAmount]);
  const estimateGas = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async () => {
    if (!asset?.symbol || !amount || !targetChain?.caipId) {
      return 0n;
    }
    return estimateTransferGas(asset.symbol, amount, targetChain?.caipId);
  }, [estimateTransferGas, targetChain?.caipId, asset?.symbol, amount]);
  const transfer = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async options => {
    if (!amount) {
      throw new Error('No amount chosen');
    }
    if (!asset) {
      throw new Error('No asset chosen');
    }
    if (!network?.caipId) {
      throw new Error('No source chain chosen');
    }
    if (!targetChain?.caipId) {
      throw new Error('No target chain chosen');
    }
    capture('unifedBridgeTransferStarted', {
      bridgeType: options.bridgeType,
      sourceBlockchain: network.caipId,
      targetBlockchain: targetChain.caipId
    });
    const hash = await transferAsset(asset.symbol, amount, targetChain?.caipId, options.gasSettings);
    return hash;
  }, [amount, asset, targetChain?.caipId, transferAsset, capture, network?.caipId]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (targetChain && possibleTargetChains.includes(targetChain.caipId)) {
      return;
    }
    if (possibleTargetChains[0]) {
      const foundChain = getNetwork(possibleTargetChains[0]);
      if (foundChain) {
        setTargetChain(foundChain);
      }
    }
  }, [getNetwork, targetChain, possibleTargetChains]);
  return {
    amount,
    setAmount,
    bridgableTokens: bridgableTokens,
    availableChainIds,
    bridgeFee,
    estimateGas,
    isReady,
    minimum,
    maximum,
    receiveAmount,
    asset,
    setAsset,
    sourceBalance,
    targetChain,
    setTargetChain,
    possibleTargetChains,
    transferableAssets,
    transfer
  };
}

/***/ }),

/***/ "./src/pages/Bridge/hooks/useBridgeTxHandling.ts":
/*!*******************************************************!*\
  !*** ./src/pages/Bridge/hooks/useBridgeTxHandling.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "useBridgeTxHandling": () => (/* binding */ useBridgeTxHandling)
/* harmony export */ });
/* harmony import */ var _src_utils_handleTxOutcome__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @src/utils/handleTxOutcome */ "./src/utils/handleTxOutcome.ts");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");


const useBridgeTxHandling = ({
  transfer,
  onInitiated,
  onSuccess,
  onFailure,
  onRejected
}) => {
  const [isPending, setIsPending] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
  const onTransfer = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async options => {
    setIsPending(true);
    try {
      onInitiated();
      const {
        isApproved,
        hasError,
        result: txHash,
        error: txError
      } = await (0,_src_utils_handleTxOutcome__WEBPACK_IMPORTED_MODULE_0__.handleTxOutcome)(transfer(options));
      if (isApproved) {
        if (hasError) {
          onFailure(txError);
        } else {
          onSuccess(txHash);
        }
      } else {
        onRejected();
      }
    } finally {
      setIsPending(false);
    }
  }, [onInitiated, onRejected, onFailure, onSuccess, transfer]);
  return {
    onTransfer,
    isPending
  };
};

/***/ }),

/***/ "./src/pages/Bridge/hooks/useHasEnoughtForGas.ts":
/*!*******************************************************!*\
  !*** ./src/pages/Bridge/hooks/useHasEnoughtForGas.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "useHasEnoughForGas": () => (/* binding */ useHasEnoughForGas)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @avalabs/vm-module-types */ "./node_modules/@avalabs/vm-module-types/dist/index.js");
/* harmony import */ var _src_hooks_useTokensWithBalances__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/hooks/useTokensWithBalances */ "./src/hooks/useTokensWithBalances.ts");



const useHasEnoughForGas = (sendAmount, feeRate, gasLimit) => {
  const tokens = (0,_src_hooks_useTokensWithBalances__WEBPACK_IMPORTED_MODULE_2__.useTokensWithBalances)();
  const [hasEnough, setHasEnough] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!tokens || !gasLimit || typeof sendAmount !== 'bigint' || typeof feeRate !== 'bigint') return;
    const token = tokens.find(x => x.type === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.NATIVE);

    // If the native token has no blance, we do not have enough
    if (!token) {
      setHasEnough(false);
      return;
    }

    // get gasPrice of network
    const balance = token && token.balance;
    const estimatedGasCost = feeRate * gasLimit;

    // check if balance > gasPrice
    if (balance && estimatedGasCost) {
      setHasEnough(balance >= sendAmount + estimatedGasCost);
    }
  }, [tokens, feeRate, sendAmount, gasLimit]);
  return hasEnough;
};

/***/ }),

/***/ "./src/pages/Bridge/utils/findMatchingBridgeAsset.ts":
/*!***********************************************************!*\
  !*** ./src/pages/Bridge/utils/findMatchingBridgeAsset.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "findMatchingBridgeAsset": () => (/* binding */ findMatchingBridgeAsset)
/* harmony export */ });
/* harmony import */ var _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @avalabs/bridge-unified */ "./node_modules/@avalabs/bridge-unified/dist/index.js");
/* harmony import */ var _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @avalabs/vm-module-types */ "./node_modules/@avalabs/vm-module-types/dist/index.js");


const findMatchingBridgeAsset = (assets, token) => {
  return assets.find(a => {
    if (a.type === _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_0__.TokenType.NATIVE && token.type === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.NATIVE) {
      return a.symbol.toLowerCase() === token.symbol.toLowerCase();
    }
    if (a.type === _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_0__.TokenType.ERC20 && token.type === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.ERC20) {
      return a.address.toLowerCase() === token.address.toLowerCase();
    }
    return false;
  });
};

/***/ }),

/***/ "./src/pages/Bridge/utils/isAddressBlockedError.ts":
/*!*********************************************************!*\
  !*** ./src/pages/Bridge/utils/isAddressBlockedError.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isAddressBlockedError": () => (/* binding */ isAddressBlockedError)
/* harmony export */ });
/* harmony import */ var _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @avalabs/bridge-unified */ "./node_modules/@avalabs/bridge-unified/dist/index.js");

const isAddressBlockedError = err => {
  return !!err && err instanceof Error && err.message === _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_0__.ErrorReason.ADDRESS_IS_BLOCKED;
};

/***/ }),

/***/ "./src/utils/handleTxOutcome.ts":
/*!**************************************!*\
  !*** ./src/utils/handleTxOutcome.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "handleTxOutcome": () => (/* binding */ handleTxOutcome)
/* harmony export */ });
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors */ "./src/utils/errors/index.ts");


/**
 * Use this util function to distinguish between the user rejecting the
 */
async function handleTxOutcome(txRequestPromise) {
  try {
    const result = await txRequestPromise;
    return {
      isApproved: true,
      hasError: false,
      result
    };
  } catch (err) {
    return {
      isApproved: !(0,_errors__WEBPACK_IMPORTED_MODULE_0__.isUserRejectionError)(err),
      hasError: true,
      error: err
    };
  }
}

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,