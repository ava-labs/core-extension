(self["webpackChunkavalanche_extension"] = self["webpackChunkavalanche_extension"] || []).push([["App"],{

/***/ "./src/background/connections/dAppConnection/models.ts":
/*!*************************************************************!*\
  !*** ./src/background/connections/dAppConnection/models.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DAppProviderRequest": () => (/* binding */ DAppProviderRequest),
/* harmony export */   "Web3Event": () => (/* binding */ Web3Event)
/* harmony export */ });
let DAppProviderRequest = /*#__PURE__*/function (DAppProviderRequest) {
  DAppProviderRequest["DOMAIN_METADATA_METHOD"] = "avalanche_sendDomainMetadata";
  DAppProviderRequest["CONNECT_METHOD"] = "eth_requestAccounts";
  DAppProviderRequest["INIT_DAPP_STATE"] = "avalanche_getProviderState";
  DAppProviderRequest["ETH_ACCOUNTS"] = "eth_accounts";
  DAppProviderRequest["WALLET_PERMISSIONS"] = "wallet_requestPermissions";
  DAppProviderRequest["WALLET_GET_PERMISSIONS"] = "wallet_getPermissions";
  DAppProviderRequest["WALLET_ADD_CHAIN"] = "wallet_addEthereumChain";
  DAppProviderRequest["WALLET_GET_CHAIN"] = "wallet_getEthereumChain";
  DAppProviderRequest["WALLET_SWITCH_ETHEREUM_CHAIN"] = "wallet_switchEthereumChain";
  DAppProviderRequest["WALLET_WATCH_ASSET"] = "wallet_watchAsset";
  DAppProviderRequest["PERSONAL_EC_RECOVER"] = "personal_ecRecover";
  DAppProviderRequest["PERSONAL_SIGN"] = "personal_sign";
  DAppProviderRequest["ETH_SIGN_TYPED_DATA_V4"] = "eth_signTypedData_v4";
  DAppProviderRequest["ETH_SIGN_TYPED_DATA_V3"] = "eth_signTypedData_v3";
  DAppProviderRequest["ETH_SIGN_TYPED_DATA_V1"] = "eth_signTypedData_v1";
  DAppProviderRequest["ETH_SIGN_TYPED_DATA"] = "eth_signTypedData";
  DAppProviderRequest["ETH_SIGN"] = "eth_sign";
  DAppProviderRequest["AVALANCHE_GET_CONTACTS"] = "avalanche_getContacts";
  DAppProviderRequest["AVALANCHE_CREATE_CONTACT"] = "avalanche_createContact";
  DAppProviderRequest["AVALANCHE_UPDATE_CONTACT"] = "avalanche_updateContact";
  DAppProviderRequest["AVALANCHE_REMOVE_CONTACT"] = "avalanche_removeContact";
  DAppProviderRequest["AVALANCHE_GET_ACCOUNTS"] = "avalanche_getAccounts";
  DAppProviderRequest["AVALANCHE_GET_ADDRESSES_IN_RANGE"] = "avalanche_getAddressesInRange";
  DAppProviderRequest["AVALANCHE_BRIDGE_ASSET"] = "avalanche_bridgeAsset";
  DAppProviderRequest["AVALANCHE_GET_BRIDGE_STATE"] = "avalanche_getBridgeState";
  DAppProviderRequest["AVALANCHE_SELECT_WALLET"] = "avalanche_selectWallet";
  DAppProviderRequest["AVALANCHE_SET_DEVELOPER_MODE"] = "avalanche_setDeveloperMode";
  DAppProviderRequest["ACCOUNT_SELECT"] = "avalanche_selectAccount";
  DAppProviderRequest["ACCOUNT_RENAME"] = "avalanche_renameAccount";
  DAppProviderRequest["ACCOUNTS_DELETE"] = "avalanche_deleteAccounts";
  DAppProviderRequest["AVALANCHE_GET_ACCOUNT_PUB_KEY"] = "avalanche_getAccountPubKey";
  DAppProviderRequest["AVALANCHE_SEND_TRANSACTION"] = "avalanche_sendTransaction";
  DAppProviderRequest["AVALANCHE_SIGN_TRANSACTION"] = "avalanche_signTransaction";
  DAppProviderRequest["AVALANCHE_SIGN_MESSAGE"] = "avalanche_signMessage";
  DAppProviderRequest["BITCOIN_SEND_TRANSACTION"] = "bitcoin_sendTransaction";
  DAppProviderRequest["WALLET_RENAME"] = "avalanche_renameWallet";
  DAppProviderRequest["WALLET_ADD_NETWORK"] = "wallet_addNetwork";
  DAppProviderRequest["WALLET_GET_PUBKEY"] = "wallet_getPublicKey";
  DAppProviderRequest["WALLET_CONNECT"] = "wallet_requestAccountPermission";
  return DAppProviderRequest;
}({});
let Web3Event = /*#__PURE__*/function (Web3Event) {
  Web3Event["CONNECT"] = "connect";
  Web3Event["DISCONNECT"] = "disconnect";
  Web3Event["ACCOUNTS_CHANGED"] = "accountsChanged";
  Web3Event["ACCOUNTS_CHANGED_CA"] = "accountsChangedCA";
  Web3Event["CHAIN_CHANGED"] = "chainChanged";
  return Web3Event;
}({});

/***/ }),

/***/ "./src/background/models.ts":
/*!**********************************!*\
  !*** ./src/background/models.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ACTION_HANDLED_BY_MODULE": () => (/* binding */ ACTION_HANDLED_BY_MODULE)
/* harmony export */ });
// A helper generic that turns only given keys (K) of type T
// from optional to required.
// A helper generic that turns all keys of given type to "never" defined.
const ACTION_HANDLED_BY_MODULE = '__handled.via.vm.modules__';

/***/ }),

/***/ "./src/background/services/accounts/events/accountsUpdatedEventListener.ts":
/*!*********************************************************************************!*\
  !*** ./src/background/services/accounts/events/accountsUpdatedEventListener.ts ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "accountsUpdatedEventListener": () => (/* binding */ accountsUpdatedEventListener)
/* harmony export */ });
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models */ "./src/background/services/accounts/models.ts");

function accountsUpdatedEventListener(evt) {
  return evt.name === _models__WEBPACK_IMPORTED_MODULE_0__.AccountsEvents.ACCOUNTS_UPDATED;
}

/***/ }),

/***/ "./src/background/services/accounts/models.ts":
/*!****************************************************!*\
  !*** ./src/background/services/accounts/models.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ACCOUNTS_STORAGE_KEY": () => (/* binding */ ACCOUNTS_STORAGE_KEY),
/* harmony export */   "AccountType": () => (/* binding */ AccountType),
/* harmony export */   "AccountsEvents": () => (/* binding */ AccountsEvents),
/* harmony export */   "GetPrivateKeyErrorTypes": () => (/* binding */ GetPrivateKeyErrorTypes),
/* harmony export */   "IMPORT_TYPE_TO_ACCOUNT_TYPE_MAP": () => (/* binding */ IMPORT_TYPE_TO_ACCOUNT_TYPE_MAP),
/* harmony export */   "ImportType": () => (/* binding */ ImportType),
/* harmony export */   "PrivateKeyChain": () => (/* binding */ PrivateKeyChain)
/* harmony export */ });
let AccountType = /*#__PURE__*/function (AccountType) {
  AccountType["PRIMARY"] = "primary";
  AccountType["IMPORTED"] = "imported";
  AccountType["WALLET_CONNECT"] = "walletConnect";
  AccountType["FIREBLOCKS"] = "fireblocks";
  return AccountType;
}({});
let ImportType = /*#__PURE__*/function (ImportType) {
  ImportType["PRIVATE_KEY"] = "privateKey";
  ImportType["WALLET_CONNECT"] = "walletConnect";
  ImportType["FIREBLOCKS"] = "fireblocks";
  return ImportType;
}({});
const IMPORT_TYPE_TO_ACCOUNT_TYPE_MAP = {
  [ImportType.PRIVATE_KEY]: AccountType.IMPORTED,
  [ImportType.WALLET_CONNECT]: AccountType.WALLET_CONNECT,
  [ImportType.FIREBLOCKS]: AccountType.FIREBLOCKS
};
const ACCOUNTS_STORAGE_KEY = 'accounts';
let AccountsEvents = /*#__PURE__*/function (AccountsEvents) {
  AccountsEvents["ACCOUNTS_UPDATED"] = "accounts-updated";
  AccountsEvents["ACTIVE_ACCOUNT_CHANGED"] = "active-account-changed";
  return AccountsEvents;
}({});
let GetPrivateKeyErrorTypes = /*#__PURE__*/function (GetPrivateKeyErrorTypes) {
  GetPrivateKeyErrorTypes["Password"] = "password";
  GetPrivateKeyErrorTypes["Type"] = "type";
  GetPrivateKeyErrorTypes["Chain"] = "chain";
  GetPrivateKeyErrorTypes["DerivePath"] = "derivePath";
  GetPrivateKeyErrorTypes["Mnemonic"] = "mnemonic";
  return GetPrivateKeyErrorTypes;
}({});
let PrivateKeyChain = /*#__PURE__*/function (PrivateKeyChain) {
  PrivateKeyChain["C"] = "C";
  PrivateKeyChain["XP"] = "XP";
  return PrivateKeyChain;
}({});

/***/ }),

/***/ "./src/background/services/actions/events/actionEventFilters.ts":
/*!**********************************************************************!*\
  !*** ./src/background/services/actions/events/actionEventFilters.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isActionsUpdate": () => (/* binding */ isActionsUpdate)
/* harmony export */ });
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models */ "./src/background/services/actions/models.ts");

const isActionsUpdate = ev => ev.name === _models__WEBPACK_IMPORTED_MODULE_0__.ActionsEvent.ACTION_UPDATED;

/***/ }),

/***/ "./src/background/services/actions/models.ts":
/*!***************************************************!*\
  !*** ./src/background/services/actions/models.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ACTIONS_STORAGE_KEY": () => (/* binding */ ACTIONS_STORAGE_KEY),
/* harmony export */   "ActionCompletedEventType": () => (/* binding */ ActionCompletedEventType),
/* harmony export */   "ActionStatus": () => (/* binding */ ActionStatus),
/* harmony export */   "ActionType": () => (/* binding */ ActionType),
/* harmony export */   "ActionsEvent": () => (/* binding */ ActionsEvent),
/* harmony export */   "buildActionForRequest": () => (/* binding */ buildActionForRequest),
/* harmony export */   "isBatchApprovalAction": () => (/* binding */ isBatchApprovalAction)
/* harmony export */ });
/* harmony import */ var _src_background_models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @src/background/models */ "./src/background/models.ts");

let ActionStatus = /*#__PURE__*/function (ActionStatus) {
  ActionStatus["PENDING"] = "pending";
  ActionStatus["SUBMITTING"] = "submitting";
  ActionStatus["COMPLETED"] = "completed";
  ActionStatus["ERROR"] = "error";
  ActionStatus["ERROR_USER_CANCELED"] = "error-user-canceled";
  return ActionStatus;
}({});
let ActionType = /*#__PURE__*/function (ActionType) {
  ActionType["Single"] = "single";
  ActionType["Batch"] = "batch";
  return ActionType;
}({});
const ACTIONS_STORAGE_KEY = 'actions';
let ActionsEvent = /*#__PURE__*/function (ActionsEvent) {
  ActionsEvent["ACTION_UPDATED"] = "action-updated";
  ActionsEvent["ACTION_COMPLETED"] = "action-completed";
  return ActionsEvent;
}({});
let ActionCompletedEventType = /*#__PURE__*/function (ActionCompletedEventType) {
  ActionCompletedEventType["COMPLETED"] = "completed";
  ActionCompletedEventType["ERROR"] = "error";
  return ActionCompletedEventType;
}({});
const isBatchApprovalAction = action => action && action.type === ActionType.Batch;
const buildActionForRequest = (request, params) => {
  return {
    ...request,
    type: ActionType.Single,
    scope: params.scope,
    displayData: params.displayData
  };
};

/***/ }),

/***/ "./src/background/services/approvals/events/approvalEventFilters.ts":
/*!**************************************************************************!*\
  !*** ./src/background/services/approvals/events/approvalEventFilters.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isApprovalRequest": () => (/* binding */ isApprovalRequest)
/* harmony export */ });
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models */ "./src/background/services/approvals/models.ts");

function isApprovalRequest(evt) {
  return evt?.name === _models__WEBPACK_IMPORTED_MODULE_0__.ApprovalEvent.ApprovalRequested;
}

/***/ }),

/***/ "./src/background/services/approvals/models.ts":
/*!*****************************************************!*\
  !*** ./src/background/services/approvals/models.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ApprovalEvent": () => (/* binding */ ApprovalEvent)
/* harmony export */ });
let ApprovalEvent = /*#__PURE__*/function (ApprovalEvent) {
  ApprovalEvent["ApprovalRequested"] = "approval-requested";
  return ApprovalEvent;
}({});

/***/ }),

/***/ "./src/background/services/balances/events/balancesUpdatedEventListener.ts":
/*!*********************************************************************************!*\
  !*** ./src/background/services/balances/events/balancesUpdatedEventListener.ts ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "balancesUpdatedEventListener": () => (/* binding */ balancesUpdatedEventListener)
/* harmony export */ });
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models */ "./src/background/services/balances/models.ts");

function balancesUpdatedEventListener(evt) {
  return evt.name === _models__WEBPACK_IMPORTED_MODULE_0__.BalanceServiceEvents.UPDATED;
}

/***/ }),

/***/ "./src/background/services/balances/models.ts":
/*!****************************************************!*\
  !*** ./src/background/services/balances/models.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BALANCES_CACHE_KEY": () => (/* binding */ BALANCES_CACHE_KEY),
/* harmony export */   "BalanceServiceEvents": () => (/* binding */ BalanceServiceEvents),
/* harmony export */   "GlacierUnhealthyError": () => (/* binding */ GlacierUnhealthyError),
/* harmony export */   "getUnconfirmedBalanceInCurrency": () => (/* binding */ getUnconfirmedBalanceInCurrency),
/* harmony export */   "hasUnconfirmedBTCBalance": () => (/* binding */ hasUnconfirmedBTCBalance),
/* harmony export */   "isAvaxWithUnavailableBalance": () => (/* binding */ isAvaxWithUnavailableBalance)
/* harmony export */ });
const BALANCES_CACHE_KEY = 'balances-service-cache';
let BalanceServiceEvents = /*#__PURE__*/function (BalanceServiceEvents) {
  BalanceServiceEvents["UPDATED"] = "BalanceServiceEvents:updated";
  return BalanceServiceEvents;
}({});

// store balances in the structure of network ID -> address -> tokens

class GlacierUnhealthyError extends Error {
  message = 'Glacier is unhealthy. Try again later.';
}
const hasUnconfirmedBTCBalance = token => Boolean(token && 'unconfirmedBalance' in token);
const isAvaxWithUnavailableBalance = token => Boolean(token && 'balancePerType' in token && token.available && token.available !== token.balance);
const getUnconfirmedBalanceInCurrency = token => {
  if (!token || !hasUnconfirmedBTCBalance(token)) {
    return undefined;
  }
  return token.unconfirmedBalanceInCurrency;
};

/***/ }),

/***/ "./src/background/services/balances/nft/utils/getSmallImageForNFT.ts":
/*!***************************************************************************!*\
  !*** ./src/background/services/balances/nft/utils/getSmallImageForNFT.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getSmallImageForNFT": () => (/* binding */ getSmallImageForNFT)
/* harmony export */ });
/* harmony import */ var _src_utils_ipsfResolverWithFallback__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @src/utils/ipsfResolverWithFallback */ "./src/utils/ipsfResolverWithFallback.ts");

const COVALENT_IMG_SIZER = 'https://image-proxy.svc.prod.covalenthq.com/cdn-cgi/image';

/**
 * Covalent has an on the fly image resizer, it resolves image urls then resizes the image.
 *
 * This allows us to request smaller images depending on the UI needs
 *
 * @param imgUrl the url of the image to convert to size
 * @returns The url to the image which is sized at the time of request
 */
function getSmallImageForNFT(imgUrl, imageSize = '256') {
  const url = (0,_src_utils_ipsfResolverWithFallback__WEBPACK_IMPORTED_MODULE_0__.ipfsResolverWithFallback)(imgUrl);
  return `${COVALENT_IMG_SIZER}/width=${imageSize},fit/${url}`;
}

/***/ }),

/***/ "./src/background/services/bridge/events/listeners.ts":
/*!************************************************************!*\
  !*** ./src/background/services/bridge/events/listeners.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isBridgeConfigUpdateEventListener": () => (/* binding */ isBridgeConfigUpdateEventListener),
/* harmony export */   "isBridgeStateUpdateEventListener": () => (/* binding */ isBridgeStateUpdateEventListener),
/* harmony export */   "isBridgeTransferEventListener": () => (/* binding */ isBridgeTransferEventListener)
/* harmony export */ });
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models */ "./src/background/services/bridge/models.ts");

function isBridgeStateUpdateEventListener(evt) {
  return evt.name === _models__WEBPACK_IMPORTED_MODULE_0__.BridgeEvents.BRIDGE_STATE_UPDATE_EVENT;
}
function isBridgeConfigUpdateEventListener(evt) {
  return evt?.name === _models__WEBPACK_IMPORTED_MODULE_0__.BridgeEvents.BRIDGE_CONFIG_UPDATE_EVENT;
}
function isBridgeTransferEventListener(evt) {
  return evt?.name === _models__WEBPACK_IMPORTED_MODULE_0__.BridgeEvents.BRIDGE_TRANSFER_EVENT;
}

/***/ }),

/***/ "./src/background/services/bridge/models.ts":
/*!**************************************************!*\
  !*** ./src/background/services/bridge/models.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BRIDGE_STORAGE_KEY": () => (/* binding */ BRIDGE_STORAGE_KEY),
/* harmony export */   "BridgeEvents": () => (/* binding */ BridgeEvents),
/* harmony export */   "DefaultBridgeState": () => (/* binding */ DefaultBridgeState),
/* harmony export */   "TransferEventType": () => (/* binding */ TransferEventType)
/* harmony export */ });
let TransferEventType = /*#__PURE__*/function (TransferEventType) {
  TransferEventType["WRAP_STATUS"] = "wrap_status";
  TransferEventType["TX_HASH"] = "tx_hash";
  return TransferEventType;
}({});
let BridgeEvents = /*#__PURE__*/function (BridgeEvents) {
  BridgeEvents["BRIDGE_CONFIG_UPDATE_EVENT"] = "BRIDGE_CONFIG_UPDATE_EVENT";
  BridgeEvents["BRIDGE_STATE_UPDATE_EVENT"] = "BRIDGE_STATE_UPDATE_EVENT";
  BridgeEvents["BRIDGE_TRANSFER_EVENT"] = "BRIDGE_TRANSFER_EVENT";
  return BridgeEvents;
}({});
const BRIDGE_STORAGE_KEY = 'bridge';
const DefaultBridgeState = {
  bridgeTransactions: {},
  isDevEnv: false
};

/***/ }),

/***/ "./src/background/services/bridge/utils.ts":
/*!*************************************************!*\
  !*** ./src/background/services/bridge/utils.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "filterBridgeStateToNetwork": () => (/* binding */ filterBridgeStateToNetwork)
/* harmony export */ });
/* harmony import */ var _network_utils_isAvalancheNetwork__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../network/utils/isAvalancheNetwork */ "./src/background/services/network/utils/isAvalancheNetwork.ts");
/* harmony import */ var _network_utils_isEthereumNetwork__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../network/utils/isEthereumNetwork */ "./src/background/services/network/utils/isEthereumNetwork.ts");
/* harmony import */ var _network_utils_isBitcoinNetwork__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../network/utils/isBitcoinNetwork */ "./src/background/services/network/utils/isBitcoinNetwork.ts");



var BridgeNetwork = /*#__PURE__*/function (BridgeNetwork) {
  BridgeNetwork["AVALANCHE"] = "avalanche";
  BridgeNetwork["BITCOIN"] = "bitcoin";
  BridgeNetwork["ETHEREUM"] = "ethereum";
  return BridgeNetwork;
}(BridgeNetwork || {});
/**
 * Remove bridgeTransactions that don't belong to the given network.
 */
function filterBridgeStateToNetwork(bridge, network) {
  const networkNameToCheck = (0,_network_utils_isBitcoinNetwork__WEBPACK_IMPORTED_MODULE_2__.isBitcoinNetwork)(network) ? BridgeNetwork.BITCOIN : (0,_network_utils_isAvalancheNetwork__WEBPACK_IMPORTED_MODULE_0__.isAvalancheNetwork)(network) ? BridgeNetwork.AVALANCHE : (0,_network_utils_isEthereumNetwork__WEBPACK_IMPORTED_MODULE_1__.isEthereumNetwork)(network) ? BridgeNetwork.ETHEREUM : null;
  const isMainnet = !network.isTestnet;
  const bridgeTransactions = Object.values(bridge.bridgeTransactions).reduce((txs, btx) => {
    if ((btx.sourceChain.valueOf() === networkNameToCheck || btx.targetChain.valueOf() === networkNameToCheck) && btx.environment === (isMainnet ? 'main' : 'test')) {
      txs[btx.sourceTxHash] = btx;
    }
    return txs;
  }, {});
  return {
    ...bridge,
    bridgeTransactions
  };
}

/***/ }),

/***/ "./src/background/services/contacts/events/listeners.ts":
/*!**************************************************************!*\
  !*** ./src/background/services/contacts/events/listeners.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "contactsUpdatedEventListener": () => (/* binding */ contactsUpdatedEventListener)
/* harmony export */ });
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models */ "./src/background/services/contacts/models.ts");

function contactsUpdatedEventListener(evt) {
  return evt.name === _models__WEBPACK_IMPORTED_MODULE_0__.ContactsEvents.CONTACTS_UPDATED;
}

/***/ }),

/***/ "./src/background/services/contacts/models.ts":
/*!****************************************************!*\
  !*** ./src/background/services/contacts/models.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CONTACTS_STORAGE_KEY": () => (/* binding */ CONTACTS_STORAGE_KEY),
/* harmony export */   "ContactsEvents": () => (/* binding */ ContactsEvents)
/* harmony export */ });
let ContactsEvents = /*#__PURE__*/function (ContactsEvents) {
  ContactsEvents["CONTACTS_UPDATED"] = "ContactsEvents: CONTACTS_UPDATED";
  return ContactsEvents;
}({});
const CONTACTS_STORAGE_KEY = 'contacts';

/***/ }),

/***/ "./src/background/services/currency/events/listeners.ts":
/*!**************************************************************!*\
  !*** ./src/background/services/currency/events/listeners.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "currencyRatesUpdatedEventListener": () => (/* binding */ currencyRatesUpdatedEventListener)
/* harmony export */ });
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models */ "./src/background/services/currency/models.ts");

function currencyRatesUpdatedEventListener(evt) {
  return evt.name === _models__WEBPACK_IMPORTED_MODULE_0__.CurrencyServiceEvents.RatesUpdated;
}

/***/ }),

/***/ "./src/background/services/currency/models.ts":
/*!****************************************************!*\
  !*** ./src/background/services/currency/models.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CURRENCY_EXCHANGE_RATES_REFRESH_INTERVAL": () => (/* binding */ CURRENCY_EXCHANGE_RATES_REFRESH_INTERVAL),
/* harmony export */   "CURRENCY_EXCHANGE_RATES_STORAGE_KEY": () => (/* binding */ CURRENCY_EXCHANGE_RATES_STORAGE_KEY),
/* harmony export */   "CURRENCY_EXCHANGE_RATES_URL": () => (/* binding */ CURRENCY_EXCHANGE_RATES_URL),
/* harmony export */   "CurrencyServiceEvents": () => (/* binding */ CurrencyServiceEvents),
/* harmony export */   "ExchangeRatesSchema": () => (/* binding */ ExchangeRatesSchema)
/* harmony export */ });
/* harmony import */ var joi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! joi */ "./node_modules/joi/lib/index.js");
/* harmony import */ var joi__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(joi__WEBPACK_IMPORTED_MODULE_0__);

const ExchangeRatesSchema = joi__WEBPACK_IMPORTED_MODULE_0___default().object({
  date: joi__WEBPACK_IMPORTED_MODULE_0___default().string().required(),
  usd: joi__WEBPACK_IMPORTED_MODULE_0___default().object().pattern(joi__WEBPACK_IMPORTED_MODULE_0___default().string(), joi__WEBPACK_IMPORTED_MODULE_0___default().number())
});
let CurrencyServiceEvents = /*#__PURE__*/function (CurrencyServiceEvents) {
  CurrencyServiceEvents["RatesUpdated"] = "CurrencyService::RatesUpdated";
  return CurrencyServiceEvents;
}({});

// We're only loading exchange rates for USD at the moment.
const CURRENCY_EXCHANGE_RATES_URL = 'https://cdn.jsdelivr.net/npm/@fawazahmed0/currency-api@latest/v1/currencies/usd.min.json';

// We refresh data every one hour.
// No need to do it more often, since the above API updates the exchange rates daily.
const CURRENCY_EXCHANGE_RATES_REFRESH_INTERVAL = 1000 * 60 * 60;
const CURRENCY_EXCHANGE_RATES_STORAGE_KEY = 'currency-exchange-rates';

/***/ }),

/***/ "./src/background/services/defi/events/listeners.ts":
/*!**********************************************************!*\
  !*** ./src/background/services/defi/events/listeners.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "defiPortfolioUpdatedEventListener": () => (/* binding */ defiPortfolioUpdatedEventListener)
/* harmony export */ });
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models */ "./src/background/services/defi/models.ts");

function defiPortfolioUpdatedEventListener(evt) {
  return evt.name === _models__WEBPACK_IMPORTED_MODULE_0__.DefiServiceEvents.PortfolioUpdated;
}

/***/ }),

/***/ "./src/background/services/defi/models.ts":
/*!************************************************!*\
  !*** ./src/background/services/defi/models.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DefiItemType": () => (/* binding */ DefiItemType),
/* harmony export */   "DefiServiceEvents": () => (/* binding */ DefiServiceEvents)
/* harmony export */ });
let DefiItemType = /*#__PURE__*/function (DefiItemType) {
  DefiItemType["Common"] = "common";
  DefiItemType["Locked"] = "locked";
  DefiItemType["Lending"] = "lending";
  DefiItemType["Vesting"] = "vesting";
  DefiItemType["Reward"] = "reward";
  DefiItemType["InsuranceBuyer"] = "insurance_buyer";
  DefiItemType["Perpetual"] = "perpetual";
  return DefiItemType;
}({});

// Represents a singular DeFi investment

// Groups DefiItems under one name (e.g. 'Lending', 'Liquidity Pool')

let DefiServiceEvents = /*#__PURE__*/function (DefiServiceEvents) {
  DefiServiceEvents["PortfolioUpdated"] = "DefiService::PortfolioUpdated";
  return DefiServiceEvents;
}({});

/***/ }),

/***/ "./src/background/services/gasless/events/gaslessChallangeUpdateListener.ts":
/*!**********************************************************************************!*\
  !*** ./src/background/services/gasless/events/gaslessChallangeUpdateListener.ts ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "gaslessChallangeUpdateEventListener": () => (/* binding */ gaslessChallangeUpdateEventListener)
/* harmony export */ });
/* harmony import */ var _model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../model */ "./src/background/services/gasless/model.ts");

function gaslessChallangeUpdateEventListener(evt) {
  return evt.name === _model__WEBPACK_IMPORTED_MODULE_0__.GaslessEvents.STATE_UPDATE;
}

/***/ }),

/***/ "./src/background/services/gasless/model.ts":
/*!**************************************************!*\
  !*** ./src/background/services/gasless/model.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GaslessEvents": () => (/* binding */ GaslessEvents),
/* harmony export */   "GaslessPhase": () => (/* binding */ GaslessPhase)
/* harmony export */ });
let GaslessEvents = /*#__PURE__*/function (GaslessEvents) {
  GaslessEvents["SEND_OFFSCREEN_MESSAGE"] = "Gasless: SEND_OFFSCREEN_MESSAGE";
  GaslessEvents["STATE_UPDATE"] = "Gasless: STATE_UPDATE";
  return GaslessEvents;
}({});
let GaslessPhase = /*#__PURE__*/function (GaslessPhase) {
  GaslessPhase["NOT_READY"] = "not_ready";
  GaslessPhase["NOT_ELIGIBLE"] = "not_eligible";
  GaslessPhase["READY"] = "ready";
  GaslessPhase["FUNDING_IN_PROGRESS"] = "funding_in_progress";
  GaslessPhase["FUNDED"] = "funded";
  GaslessPhase["ERROR"] = "error";
  return GaslessPhase;
}({});

/***/ }),

/***/ "./src/background/services/keystone/models.ts":
/*!****************************************************!*\
  !*** ./src/background/services/keystone/models.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "KeystoneEvent": () => (/* binding */ KeystoneEvent)
/* harmony export */ });
let KeystoneEvent = /*#__PURE__*/function (KeystoneEvent) {
  KeystoneEvent["DEVICE_REQUEST"] = "KeystoneEvent:device_request";
  return KeystoneEvent;
}({});

/***/ }),

/***/ "./src/background/services/ledger/events/ledgerDiscoverTransportsEventListener.ts":
/*!****************************************************************************************!*\
  !*** ./src/background/services/ledger/events/ledgerDiscoverTransportsEventListener.ts ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ledgerDiscoverTransportsEventListener": () => (/* binding */ ledgerDiscoverTransportsEventListener)
/* harmony export */ });
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models */ "./src/background/services/ledger/models.ts");

function ledgerDiscoverTransportsEventListener(evt) {
  return evt.name === _models__WEBPACK_IMPORTED_MODULE_0__.LedgerEvent.DISCOVER_TRANSPORTS;
}

/***/ }),

/***/ "./src/background/services/ledger/models.ts":
/*!**************************************************!*\
  !*** ./src/background/services/ledger/models.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LEDGER_TX_SIZE_LIMIT_BYTES": () => (/* binding */ LEDGER_TX_SIZE_LIMIT_BYTES),
/* harmony export */   "LEDGER_VERSION_WARNING_WAS_CLOSED": () => (/* binding */ LEDGER_VERSION_WARNING_WAS_CLOSED),
/* harmony export */   "LedgerEvent": () => (/* binding */ LedgerEvent)
/* harmony export */ });
let LedgerEvent = /*#__PURE__*/function (LedgerEvent) {
  LedgerEvent["TRANSPORT_REQUEST"] = "LedgerEvent:transport_request";
  LedgerEvent["DISCOVER_TRANSPORTS"] = "LedgerEvent:discover_transports";
  LedgerEvent["TRANSPORT_CLOSE_REQUEST"] = "LedgerEvent:transport_close";
  return LedgerEvent;
}({});
const LEDGER_VERSION_WARNING_WAS_CLOSED = 'LEDGER_VERSION_WARNING_WAS_CLOSED';

/**
 * Ledger app will throw an error if the tx to sign is too large.
 * Approximately `8kb` is the current limit.
 */
const LEDGER_TX_SIZE_LIMIT_BYTES = 8192;

/***/ }),

/***/ "./src/background/services/lock/events/lockStateChangedEventListener.ts":
/*!******************************************************************************!*\
  !*** ./src/background/services/lock/events/lockStateChangedEventListener.ts ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "lockStateChangedEventListener": () => (/* binding */ lockStateChangedEventListener)
/* harmony export */ });
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models */ "./src/background/services/lock/models.ts");

function lockStateChangedEventListener(evt) {
  return evt.name === _models__WEBPACK_IMPORTED_MODULE_0__.LockEvents.LOCK_STATE_CHANGED;
}

/***/ }),

/***/ "./src/background/services/lock/models.ts":
/*!************************************************!*\
  !*** ./src/background/services/lock/models.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AlarmsEvents": () => (/* binding */ AlarmsEvents),
/* harmony export */   "LOCK_TIMEOUT": () => (/* binding */ LOCK_TIMEOUT),
/* harmony export */   "LockEvents": () => (/* binding */ LockEvents),
/* harmony export */   "SESSION_AUTH_DATA_KEY": () => (/* binding */ SESSION_AUTH_DATA_KEY)
/* harmony export */ });
const SESSION_AUTH_DATA_KEY = 'SESSION_AUTH_DATA_KEY';
const LOCK_TIMEOUT = 1000 * 60 * 60 * 12; // 12 hours
let LockEvents = /*#__PURE__*/function (LockEvents) {
  LockEvents["LOCK_STATE_CHANGED"] = "LockServiceEvents:Lock";
  return LockEvents;
}({});
let AlarmsEvents = /*#__PURE__*/function (AlarmsEvents) {
  AlarmsEvents["AUTO_LOCK"] = "auto-lock";
  return AlarmsEvents;
}({});

/***/ }),

/***/ "./src/background/services/network/events/isNetworkUpdatedEvent.ts":
/*!*************************************************************************!*\
  !*** ./src/background/services/network/events/isNetworkUpdatedEvent.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isNetworkUpdatedEvent": () => (/* binding */ isNetworkUpdatedEvent)
/* harmony export */ });
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models */ "./src/background/services/network/models.ts");

function isNetworkUpdatedEvent(evt) {
  return evt.name === _models__WEBPACK_IMPORTED_MODULE_0__.NetworkEvents.NETWORK_UPDATE_EVENT;
}

/***/ }),

/***/ "./src/background/services/network/events/networksUpdatedEventListener.ts":
/*!********************************************************************************!*\
  !*** ./src/background/services/network/events/networksUpdatedEventListener.ts ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "networksUpdatedEventListener": () => (/* binding */ networksUpdatedEventListener)
/* harmony export */ });
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models */ "./src/background/services/network/models.ts");

function networksUpdatedEventListener(evt) {
  return evt.name === _models__WEBPACK_IMPORTED_MODULE_0__.NetworkEvents.NETWORKS_UPDATED_EVENT;
}

/***/ }),

/***/ "./src/background/services/network/models.ts":
/*!***************************************************!*\
  !*** ./src/background/services/network/models.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NETWORK_LIST_STORAGE_KEY": () => (/* binding */ NETWORK_LIST_STORAGE_KEY),
/* harmony export */   "NETWORK_OVERRIDES_STORAGE_KEY": () => (/* binding */ NETWORK_OVERRIDES_STORAGE_KEY),
/* harmony export */   "NETWORK_STORAGE_KEY": () => (/* binding */ NETWORK_STORAGE_KEY),
/* harmony export */   "NetworkEvents": () => (/* binding */ NetworkEvents),
/* harmony export */   "PLACEHOLDER_RPC_HEADERS": () => (/* binding */ PLACEHOLDER_RPC_HEADERS)
/* harmony export */ });
let NetworkEvents = /*#__PURE__*/function (NetworkEvents) {
  NetworkEvents["NETWORK_UPDATE_EVENT"] = "network-updated";
  NetworkEvents["DEVELOPER_MODE_CHANGED"] = "developer-mode-changed";
  NetworkEvents["NETWORKS_UPDATED_EVENT"] = "networks-updated";
  return NetworkEvents;
}({});
const NETWORK_STORAGE_KEY = 'NETWORK_STORAGE_KEY';
const NETWORK_LIST_STORAGE_KEY = 'NETWORK_LIST_STORAGE_KEY';
const NETWORK_OVERRIDES_STORAGE_KEY = 'NETWORK_OVERRIDES_STORAGE_KEY';
const PLACEHOLDER_RPC_HEADERS = {
  '': ''
};

/***/ }),

/***/ "./src/background/services/network/utils/isAvalancheNetwork.ts":
/*!*********************************************************************!*\
  !*** ./src/background/services/network/utils/isAvalancheNetwork.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isAvalancheChainId": () => (/* binding */ isAvalancheChainId),
/* harmony export */   "isAvalancheNetwork": () => (/* binding */ isAvalancheNetwork)
/* harmony export */ });
/* harmony import */ var _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @avalabs/core-chains-sdk */ "./node_modules/@avalabs/core-chains-sdk/esm/models.js");

function isAvalancheNetwork(network) {
  return isAvalancheChainId(network.chainId);
}
function isAvalancheChainId(chainId) {
  return _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.AVALANCHE_MAINNET_ID === chainId || _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.AVALANCHE_LOCAL_ID === chainId || _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.AVALANCHE_TESTNET_ID === chainId;
}

/***/ }),

/***/ "./src/background/services/network/utils/isBitcoinNetwork.ts":
/*!*******************************************************************!*\
  !*** ./src/background/services/network/utils/isBitcoinNetwork.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isBitcoinChainId": () => (/* binding */ isBitcoinChainId),
/* harmony export */   "isBitcoinNetwork": () => (/* binding */ isBitcoinNetwork)
/* harmony export */ });
/* harmony import */ var _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @avalabs/core-chains-sdk */ "./node_modules/@avalabs/core-chains-sdk/esm/models.js");

function isBitcoinNetwork(network) {
  return isBitcoinChainId(network.chainId);
}
function isBitcoinChainId(chainId) {
  return _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.BITCOIN === chainId || _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.BITCOIN_TESTNET === chainId;
}

/***/ }),

/***/ "./src/background/services/network/utils/isEthereumNetwork.ts":
/*!********************************************************************!*\
  !*** ./src/background/services/network/utils/isEthereumNetwork.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isEthereumChainId": () => (/* binding */ isEthereumChainId),
/* harmony export */   "isEthereumNetwork": () => (/* binding */ isEthereumNetwork)
/* harmony export */ });
/* harmony import */ var _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @avalabs/core-chains-sdk */ "./node_modules/@avalabs/core-chains-sdk/esm/models.js");

function isEthereumNetwork(network) {
  return isEthereumChainId(network.chainId);
}
function isEthereumChainId(chainId) {
  return _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.ETHEREUM_HOMESTEAD === chainId || _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.ETHEREUM_TEST_GOERLY === chainId || _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.ETHEREUM_TEST_RINKEBY === chainId || _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.ETHEREUM_TEST_SEPOLIA === chainId;
}

/***/ }),

/***/ "./src/background/services/onboarding/events/listeners.ts":
/*!****************************************************************!*\
  !*** ./src/background/services/onboarding/events/listeners.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "onboardingUpdatedEventListener": () => (/* binding */ onboardingUpdatedEventListener)
/* harmony export */ });
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models */ "./src/background/services/onboarding/models.ts");

function onboardingUpdatedEventListener(evt) {
  return evt.name === _models__WEBPACK_IMPORTED_MODULE_0__.OnboardingEvents.ONBOARDING_UPDATED_EVENT;
}

/***/ }),

/***/ "./src/background/services/onboarding/models.ts":
/*!******************************************************!*\
  !*** ./src/background/services/onboarding/models.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ONBOARDING_EVENT_NAMES": () => (/* binding */ ONBOARDING_EVENT_NAMES),
/* harmony export */   "ONBOARDING_STORAGE_KEY": () => (/* binding */ ONBOARDING_STORAGE_KEY),
/* harmony export */   "OnboardingEvents": () => (/* binding */ OnboardingEvents),
/* harmony export */   "OnboardingPhase": () => (/* binding */ OnboardingPhase),
/* harmony export */   "OnboardingURLs": () => (/* binding */ OnboardingURLs)
/* harmony export */ });
let OnboardingPhase = /*#__PURE__*/function (OnboardingPhase) {
  OnboardingPhase["CREATE_WALLET"] = "create_wallet";
  OnboardingPhase["IMPORT_WALLET"] = "import_wallet";
  OnboardingPhase["PASSWORD"] = "password";
  OnboardingPhase["CONFIRM"] = "confirm";
  OnboardingPhase["FINALIZE"] = "finalize";
  OnboardingPhase["RESTART"] = "restart";
  OnboardingPhase["LEDGER"] = "ledger";
  OnboardingPhase["LEDGER_TROUBLE"] = "ledger_trouble";
  OnboardingPhase["ANALYTICS_CONSENT"] = "analytics_consent";
  OnboardingPhase["KEYSTONE"] = "keystone";
  OnboardingPhase["KEYSTONE_TUTORIAL"] = "keystone_tutorial";
  OnboardingPhase["SEEDLESS_GOOGLE"] = "seedless_google";
  OnboardingPhase["SEEDLESS_APPLE"] = "seedless_apple";
  return OnboardingPhase;
}({});
let OnboardingURLs = /*#__PURE__*/function (OnboardingURLs) {
  OnboardingURLs["ONBOARDING_HOME"] = "/onboarding";
  OnboardingURLs["CREATE_WALLET"] = "/onboarding/create-wallet";
  OnboardingURLs["SEED_PHRASE"] = "/onboarding/seed-phrase";
  OnboardingURLs["KEYSTONE"] = "/onboarding/keystone";
  OnboardingURLs["LEDGER"] = "/onboarding/ledger";
  OnboardingURLs["CREATE_PASSWORD"] = "/onboarding/create-password";
  OnboardingURLs["ANALYTICS_CONSENT"] = "/onboarding/analytics-consent";
  OnboardingURLs["LEDGER_TROUBLE"] = "/onboarding/ledger-trouble";
  OnboardingURLs["SIGN_IN"] = "/onboarding/sign-in";
  OnboardingURLs["RECOVERY_METHODS"] = "/onboarding/recovery-methods";
  OnboardingURLs["RECOVERY_METHODS_LOGIN"] = "/onboarding/recovery-methods-login";
  return OnboardingURLs;
}({});
const ONBOARDING_EVENT_NAMES = {
  [OnboardingPhase.CREATE_WALLET]: 'OnboardingCreateNewWalletSelected',
  [OnboardingPhase.IMPORT_WALLET]: 'OnboardingImportMnemonicSelected',
  [OnboardingPhase.LEDGER]: 'OnboardingImportLedgerSelected',
  [OnboardingPhase.KEYSTONE]: 'OnboardingKeystoneSelected',
  [OnboardingPhase.SEEDLESS_GOOGLE]: 'OnboardingSeedlessGoogleSelected',
  [OnboardingPhase.SEEDLESS_APPLE]: 'OnboardingSeedlessAppleSelected'
};
let OnboardingEvents = /*#__PURE__*/function (OnboardingEvents) {
  OnboardingEvents["ONBOARDING_UPDATED_EVENT"] = "ONBOARDING_UPDATED_EVENT";
  return OnboardingEvents;
}({});
const ONBOARDING_STORAGE_KEY = 'onboarding';

/***/ }),

/***/ "./src/background/services/permissions/events/permissionsStateUpdatesListener.ts":
/*!***************************************************************************************!*\
  !*** ./src/background/services/permissions/events/permissionsStateUpdatesListener.ts ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "permissionsUpdatedEventListener": () => (/* binding */ permissionsUpdatedEventListener)
/* harmony export */ });
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models */ "./src/background/services/permissions/models.ts");

function permissionsUpdatedEventListener(evt) {
  return evt.name === _models__WEBPACK_IMPORTED_MODULE_0__.PermissionEvents.PERMISSIONS_STATE_UPDATE;
}

/***/ }),

/***/ "./src/background/services/permissions/models.ts":
/*!*******************************************************!*\
  !*** ./src/background/services/permissions/models.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PERMISSION_STORAGE_KEY": () => (/* binding */ PERMISSION_STORAGE_KEY),
/* harmony export */   "PermissionEvents": () => (/* binding */ PermissionEvents)
/* harmony export */ });
let PermissionEvents = /*#__PURE__*/function (PermissionEvents) {
  PermissionEvents["PERMISSIONS_STATE_UPDATE"] = "permissions-state-updated";
  return PermissionEvents;
}({});
const PERMISSION_STORAGE_KEY = 'permissions';

/***/ }),

/***/ "./src/background/services/secrets/events/WalletUpdatedEventListener.ts":
/*!******************************************************************************!*\
  !*** ./src/background/services/secrets/events/WalletUpdatedEventListener.ts ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "walletStateChangedEventListener": () => (/* binding */ walletStateChangedEventListener)
/* harmony export */ });
/* harmony import */ var _wallet_models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../wallet/models */ "./src/background/services/wallet/models.ts");

function walletStateChangedEventListener(evt) {
  return evt.name === _wallet_models__WEBPACK_IMPORTED_MODULE_0__.WalletEvents.WALLET_STATE_UPDATE;
}

/***/ }),

/***/ "./src/background/services/secrets/models.ts":
/*!***************************************************!*\
  !*** ./src/background/services/secrets/models.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AVALANCHE_BASE_DERIVATION_PATH": () => (/* binding */ AVALANCHE_BASE_DERIVATION_PATH),
/* harmony export */   "EVM_BASE_DERIVATION_PATH": () => (/* binding */ EVM_BASE_DERIVATION_PATH),
/* harmony export */   "SecretType": () => (/* binding */ SecretType)
/* harmony export */ });
let SecretType = /*#__PURE__*/function (SecretType) {
  SecretType["Mnemonic"] = "mnemonic";
  SecretType["Ledger"] = "ledger";
  SecretType["LedgerLive"] = "ledger-live";
  SecretType["Keystone"] = "keystone";
  SecretType["Seedless"] = "seedless";
  SecretType["PrivateKey"] = "private-key";
  SecretType["WalletConnect"] = "wallet-connect";
  SecretType["Fireblocks"] = "fireblocks";
  return SecretType;
}({});
const EVM_BASE_DERIVATION_PATH = "m/44'/60'/0'";
const AVALANCHE_BASE_DERIVATION_PATH = "m/44'/9000'/0'";

/***/ }),

/***/ "./src/background/services/seedless/events/eventFilters.ts":
/*!*****************************************************************!*\
  !*** ./src/background/services/seedless/events/eventFilters.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isSeedlessMfaChoiceRequest": () => (/* binding */ isSeedlessMfaChoiceRequest),
/* harmony export */   "isSeedlessMfaEvent": () => (/* binding */ isSeedlessMfaEvent),
/* harmony export */   "isSeedlessMfaMethodsUpdatedEvent": () => (/* binding */ isSeedlessMfaMethodsUpdatedEvent),
/* harmony export */   "isSeedlessTokenEvent": () => (/* binding */ isSeedlessTokenEvent)
/* harmony export */ });
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models */ "./src/background/services/seedless/models.ts");

function isSeedlessTokenEvent(evt) {
  return evt?.name === _models__WEBPACK_IMPORTED_MODULE_0__.SeedlessEvents.TokenExpired || evt?.name === _models__WEBPACK_IMPORTED_MODULE_0__.SeedlessEvents.TokenRefreshed;
}
function isSeedlessMfaEvent(evt) {
  return evt?.name === _models__WEBPACK_IMPORTED_MODULE_0__.SeedlessEvents.MfaRequest || evt?.name === _models__WEBPACK_IMPORTED_MODULE_0__.SeedlessEvents.MfaFailure || evt?.name === _models__WEBPACK_IMPORTED_MODULE_0__.SeedlessEvents.MfaClear;
}
function isSeedlessMfaMethodsUpdatedEvent(evt) {
  return evt?.name === _models__WEBPACK_IMPORTED_MODULE_0__.SeedlessEvents.MfaMethodsUpdated;
}
function isSeedlessMfaChoiceRequest(evt) {
  return evt?.name === _models__WEBPACK_IMPORTED_MODULE_0__.SeedlessEvents.MfaChoiceRequest;
}

/***/ }),

/***/ "./src/background/services/seedless/models.ts":
/*!****************************************************!*\
  !*** ./src/background/services/seedless/models.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AuthErrorCode": () => (/* binding */ AuthErrorCode),
/* harmony export */   "CoreApiError": () => (/* binding */ CoreApiError),
/* harmony export */   "FidoDeviceType": () => (/* binding */ FidoDeviceType),
/* harmony export */   "MfaRequestType": () => (/* binding */ MfaRequestType),
/* harmony export */   "RecoveryMethodType": () => (/* binding */ RecoveryMethodType),
/* harmony export */   "SeedlessError": () => (/* binding */ SeedlessError),
/* harmony export */   "SeedlessEvents": () => (/* binding */ SeedlessEvents),
/* harmony export */   "TOTP_ISSUER": () => (/* binding */ TOTP_ISSUER)
/* harmony export */ });
const TOTP_ISSUER = 'Core';
class CoreApiError extends Error {}
let SeedlessEvents = /*#__PURE__*/function (SeedlessEvents) {
  SeedlessEvents["TokenExpired"] = "token-expired";
  SeedlessEvents["TokenRefreshed"] = "token-refreshed";
  SeedlessEvents["MfaRequest"] = "mfa-request";
  SeedlessEvents["MfaFailure"] = "mfa-failure";
  SeedlessEvents["MfaClear"] = "mfa-clear";
  SeedlessEvents["MfaMethodsUpdated"] = "mfa-methods-updated";
  SeedlessEvents["MfaChoiceRequest"] = "mfa-choice-request";
  return SeedlessEvents;
}({});
let MfaRequestType = /*#__PURE__*/function (MfaRequestType) {
  MfaRequestType["Totp"] = "totp";
  MfaRequestType["Fido"] = "fido";
  MfaRequestType["FidoRegister"] = "FidoRegister";
  return MfaRequestType;
}({});
let SeedlessError = /*#__PURE__*/function (SeedlessError) {
  SeedlessError["NoMfaMethodAvailable"] = "no-mfa-method-available";
  return SeedlessError;
}({});
let RecoveryMethodType = /*#__PURE__*/function (RecoveryMethodType) {
  RecoveryMethodType["Passkey"] = "Passkey";
  RecoveryMethodType["Yubikey"] = "Yubikey";
  RecoveryMethodType["Authenticator"] = "Authenticator";
  return RecoveryMethodType;
}({});
let AuthErrorCode = /*#__PURE__*/function (AuthErrorCode) {
  AuthErrorCode["InvalidTotpCode"] = "invalid-totp-code";
  AuthErrorCode["TotpVerificationError"] = "totp-verification-error";
  AuthErrorCode["NoMfaDetails"] = "no-mfa-details";
  AuthErrorCode["UnknownError"] = "unknown-error";
  AuthErrorCode["UnsupportedProvider"] = "unsupported-provider";
  AuthErrorCode["FailedToFetchOidcToken"] = "failed-to-fetch-oidc-token";
  AuthErrorCode["MismatchingEmail"] = "mismatching-email";
  AuthErrorCode["MissingUserId"] = "missing-user-id";
  AuthErrorCode["MismatchingUserId"] = "mismatching-user-id";
  AuthErrorCode["UnsupportedMfaMethod"] = "unsupported-mfa-method";
  AuthErrorCode["FidoChallengeNotApproved"] = "fido-challenge-not-approved";
  AuthErrorCode["FidoChallengeFailed"] = "fido-challenge-failed";
  AuthErrorCode["NoMfaMethodsConfigured"] = "no-mfa-methods-configured";
  AuthErrorCode["WrongMfaResponseAttempt"] = "wrong-mfa-response-attempt";
  return AuthErrorCode;
}({});
let FidoDeviceType = /*#__PURE__*/function (FidoDeviceType) {
  FidoDeviceType["Passkey"] = "Passkey";
  FidoDeviceType["Yubikey"] = "Yubikey";
  return FidoDeviceType;
}({});

/***/ }),

/***/ "./src/background/services/seedless/seedlessAnalytics.ts":
/*!***************************************************************!*\
  !*** ./src/background/services/seedless/seedlessAnalytics.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SeedlessExportAnalytics": () => (/* binding */ SeedlessExportAnalytics)
/* harmony export */ });
const ExportRecoveryPhrasePrefix = 'Seedless.ExportRecoveryPhrase';
let SeedlessExportAnalytics = /*#__PURE__*/function (SeedlessExportAnalytics) {
  SeedlessExportAnalytics["MenuItemClicked"] = "Seedless.ExportRecoveryPhrase.MenuItemClicked";
  SeedlessExportAnalytics["Resigned"] = "Seedless.ExportRecoveryPhrase.Resigned";
  SeedlessExportAnalytics["PopupOpened"] = "Seedless.ExportRecoveryPhrase.PopupOpened";
  SeedlessExportAnalytics["InitiationStarted"] = "Seedless.ExportRecoveryPhrase.InitiationStarted";
  SeedlessExportAnalytics["InitiationSucceeded"] = "Seedless.ExportRecoveryPhrase.InitiationSucceeded";
  SeedlessExportAnalytics["InitiationFailed"] = "Seedless.ExportRecoveryPhrase.InitiationFailed";
  SeedlessExportAnalytics["CancellationStarted"] = "Seedless.ExportRecoveryPhrase.CancellationStarted";
  SeedlessExportAnalytics["CancellationSucceeded"] = "Seedless.ExportRecoveryPhrase.CancellationSucceeded";
  SeedlessExportAnalytics["CancellationFailed"] = "Seedless.ExportRecoveryPhrase.CancellationFailed";
  SeedlessExportAnalytics["DecryptionStarted"] = "Seedless.ExportRecoveryPhrase.DecryptionStarted";
  SeedlessExportAnalytics["DecryptionSucceeded"] = "Seedless.ExportRecoveryPhrase.DecryptionSucceeded";
  SeedlessExportAnalytics["DecryptionFailed"] = "Seedless.ExportRecoveryPhrase.DecryptionFailed";
  SeedlessExportAnalytics["PhraseCopied"] = "Seedless.ExportRecoveryPhrase.PhraseCopied";
  return SeedlessExportAnalytics;
}({});

/***/ }),

/***/ "./src/background/services/unifiedBridge/events/eventFilters.ts":
/*!**********************************************************************!*\
  !*** ./src/background/services/unifiedBridge/events/eventFilters.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isUnifiedBridgeStateUpdate": () => (/* binding */ isUnifiedBridgeStateUpdate),
/* harmony export */   "isUnifiedBridgeTransferStepChanged": () => (/* binding */ isUnifiedBridgeTransferStepChanged)
/* harmony export */ });
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models */ "./src/background/services/unifiedBridge/models.ts");

const isUnifiedBridgeStateUpdate = ev => ev.name === _models__WEBPACK_IMPORTED_MODULE_0__.UnifiedBridgeEvent.StateUpdated;
const isUnifiedBridgeTransferStepChanged = ev => ev.name === _models__WEBPACK_IMPORTED_MODULE_0__.UnifiedBridgeEvent.TransferStepChange;

/***/ }),

/***/ "./src/background/services/unifiedBridge/models.ts":
/*!*********************************************************!*\
  !*** ./src/background/services/unifiedBridge/models.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UNIFIED_BRIDGE_DEFAULT_STATE": () => (/* binding */ UNIFIED_BRIDGE_DEFAULT_STATE),
/* harmony export */   "UNIFIED_BRIDGE_STATE_STORAGE_KEY": () => (/* binding */ UNIFIED_BRIDGE_STATE_STORAGE_KEY),
/* harmony export */   "UNIFIED_BRIDGE_TRACKED_FLAGS": () => (/* binding */ UNIFIED_BRIDGE_TRACKED_FLAGS),
/* harmony export */   "UnifiedBridgeError": () => (/* binding */ UnifiedBridgeError),
/* harmony export */   "UnifiedBridgeEvent": () => (/* binding */ UnifiedBridgeEvent)
/* harmony export */ });
/* harmony import */ var _featureFlags_models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../featureFlags/models */ "./src/background/services/featureFlags/models.ts");

let UnifiedBridgeError = /*#__PURE__*/function (UnifiedBridgeError) {
  UnifiedBridgeError["UnknownAsset"] = "unknown-asset";
  UnifiedBridgeError["AmountLessThanFee"] = "amount-less-than-fee";
  UnifiedBridgeError["InvalidFee"] = "invalid-fee";
  UnifiedBridgeError["UnsupportedNetwork"] = "unsupported-network";
  UnifiedBridgeError["InvalidTxPayload"] = "invalid-tx-payload";
  UnifiedBridgeError["NonBitcoinAccount"] = "non-bitcoin-account";
  return UnifiedBridgeError;
}({});
const UNIFIED_BRIDGE_TRACKED_FLAGS = [_featureFlags_models__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.UNIFIED_BRIDGE_CCTP, _featureFlags_models__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.UNIFIED_BRIDGE_ICTT, _featureFlags_models__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.UNIFIED_BRIDGE_AB_AVA_TO_BTC, _featureFlags_models__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.UNIFIED_BRIDGE_AB_BTC_TO_AVA, _featureFlags_models__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.UNIFIED_BRIDGE_AB_EVM];
const UNIFIED_BRIDGE_DEFAULT_STATE = {
  pendingTransfers: {}
};
const UNIFIED_BRIDGE_STATE_STORAGE_KEY = 'UNIFIED_BRIDGE_STATE';
let UnifiedBridgeEvent = /*#__PURE__*/function (UnifiedBridgeEvent) {
  UnifiedBridgeEvent["StateUpdated"] = "UNIFIED_BRIDGE_STATE_UPDATED";
  UnifiedBridgeEvent["TransferStepChange"] = "UNIFIED_BRIDGE_TRASNFER_STEP_CHANGE";
  UnifiedBridgeEvent["AssetsUpdated"] = "UNIFIED_BRIDGE_ASSETS_UPDATED";
  return UnifiedBridgeEvent;
}({});

/***/ }),

/***/ "./src/background/services/wallet/models.ts":
/*!**************************************************!*\
  !*** ./src/background/services/wallet/models.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SUPPORTED_PRIMARY_SECRET_TYPES": () => (/* binding */ SUPPORTED_PRIMARY_SECRET_TYPES),
/* harmony export */   "SeedlessAuthProvider": () => (/* binding */ SeedlessAuthProvider),
/* harmony export */   "WALLET_STORAGE_KEY": () => (/* binding */ WALLET_STORAGE_KEY),
/* harmony export */   "WalletEvents": () => (/* binding */ WalletEvents),
/* harmony export */   "isSolanaSigningRequest": () => (/* binding */ isSolanaSigningRequest)
/* harmony export */ });
/* harmony import */ var _secrets_models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../secrets/models */ "./src/background/services/secrets/models.ts");
/* harmony import */ var _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @avalabs/vm-module-types */ "./node_modules/@avalabs/vm-module-types/dist/index.js");


const isSolanaSigningRequest = sigReq => 'type' in sigReq && (sigReq.type === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_1__.RpcMethod.SOLANA_SIGN_AND_SEND_TRANSACTION || sigReq.type === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_1__.RpcMethod.SOLANA_SIGN_TRANSACTION);
let WalletEvents = /*#__PURE__*/function (WalletEvents) {
  WalletEvents["WALLET_STATE_UPDATE"] = "wallet-state-updated";
  return WalletEvents;
}({});
const WALLET_STORAGE_KEY = 'wallet';
const SUPPORTED_PRIMARY_SECRET_TYPES = [_secrets_models__WEBPACK_IMPORTED_MODULE_0__.SecretType.Mnemonic, _secrets_models__WEBPACK_IMPORTED_MODULE_0__.SecretType.Keystone, _secrets_models__WEBPACK_IMPORTED_MODULE_0__.SecretType.Ledger, _secrets_models__WEBPACK_IMPORTED_MODULE_0__.SecretType.LedgerLive, _secrets_models__WEBPACK_IMPORTED_MODULE_0__.SecretType.Seedless];
let SeedlessAuthProvider = /*#__PURE__*/function (SeedlessAuthProvider) {
  SeedlessAuthProvider["Google"] = "google";
  SeedlessAuthProvider["Apple"] = "apple";
  return SeedlessAuthProvider;
}({});

/**
 * Used for Ledger Live accounts on ledger.
 */

/***/ }),

/***/ "./src/background/services/walletConnect/events/eventFilters.ts":
/*!**********************************************************************!*\
  !*** ./src/background/services/walletConnect/events/eventFilters.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isSessionPermissionsMismatchEvent": () => (/* binding */ isSessionPermissionsMismatchEvent),
/* harmony export */   "isUriGeneratedEvent": () => (/* binding */ isUriGeneratedEvent),
/* harmony export */   "isWalletConnectEvent": () => (/* binding */ isWalletConnectEvent)
/* harmony export */ });
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models */ "./src/background/services/walletConnect/models.ts");

function isUriGeneratedEvent(evt) {
  return evt?.name === _models__WEBPACK_IMPORTED_MODULE_0__.WalletConnectEvent.UriGenerated;
}
function isSessionPermissionsMismatchEvent(evt) {
  return evt?.name === _models__WEBPACK_IMPORTED_MODULE_0__.WalletConnectEvent.SessionPermissionsMismatch;
}
function isWalletConnectEvent(evt) {
  const wcEvents = Object.values(_models__WEBPACK_IMPORTED_MODULE_0__.WalletConnectEvent);
  return wcEvents.includes(evt?.name);
}

/***/ }),

/***/ "./src/background/services/walletConnect/models.ts":
/*!*********************************************************!*\
  !*** ./src/background/services/walletConnect/models.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CORE_MOBILE_WALLET_ID": () => (/* binding */ CORE_MOBILE_WALLET_ID),
/* harmony export */   "FIREBLOCKS_APP_NAME": () => (/* binding */ FIREBLOCKS_APP_NAME),
/* harmony export */   "WALLET_CONNECT_APP_METADATA": () => (/* binding */ WALLET_CONNECT_APP_METADATA),
/* harmony export */   "WalletConnectError": () => (/* binding */ WalletConnectError),
/* harmony export */   "WalletConnectErrorCode": () => (/* binding */ WalletConnectErrorCode),
/* harmony export */   "WalletConnectEvent": () => (/* binding */ WalletConnectEvent),
/* harmony export */   "isNoMatchingKeyError": () => (/* binding */ isNoMatchingKeyError),
/* harmony export */   "isProposalExpiredError": () => (/* binding */ isProposalExpiredError)
/* harmony export */ });
/* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! webextension-polyfill */ "./node_modules/webextension-polyfill/dist/browser-polyfill.js");
/* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _src_utils_environment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/utils/environment */ "./src/utils/environment.ts");


let WalletConnectEvent = /*#__PURE__*/function (WalletConnectEvent) {
  WalletConnectEvent["UriGenerated"] = "WalletConnect:uri_generated";
  WalletConnectEvent["SessionPermissionsMismatch"] = "WalletConnect:session_permissions_mismatch";
  return WalletConnectEvent;
}({});
const CORE_MOBILE_WALLET_ID = 'c3de833a-9cb0-4274-bb52-86e402ecfcd3';
const FIREBLOCKS_APP_NAME = 'Fireblocks';
const WALLET_CONNECT_APP_METADATA = {
  name: webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().i18n.getMessage('appName'),
  // When connecting to Core Mobile, it will allow us to send avalanche_*
  // requests, as long as it recognizes us as part of the Core product.
  //
  // In local development, the extension ID may change from one machine
  // to another, so we use localhost to make it work.
  //
  // For production & blue builds, Core Mobile is able to recognize their
  // extension IDs, since they are permanent.
  url: (0,_src_utils_environment__WEBPACK_IMPORTED_MODULE_1__.isDevelopment)() ? 'https://localhost' : location.origin,
  description: webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().i18n.getMessage('appDesc'),
  icons: ['https://extension.core.app/apple-touch-icon.png']
};
const isProposalExpiredError = err => err instanceof Error && err.message === 'Proposal expired';
const isNoMatchingKeyError = err => err instanceof Error && err.message.includes('No matching key');
let WalletConnectErrorCode = /*#__PURE__*/function (WalletConnectErrorCode) {
  WalletConnectErrorCode["NoAccountsConnected"] = "no-accounts-connected";
  WalletConnectErrorCode["NoClient"] = "client-not-initialized";
  WalletConnectErrorCode["ClientInitFailed"] = "client-init-failed";
  WalletConnectErrorCode["ProposalExpired"] = "proposal-expired";
  WalletConnectErrorCode["IncorrectAddress"] = "incorrect-address";
  WalletConnectErrorCode["UnknownError"] = "unknown-error";
  WalletConnectErrorCode["UserRejected"] = "user-rejected";
  return WalletConnectErrorCode;
}({});
class WalletConnectError extends Error {
  constructor(message, code, originalError) {
    super(message);
    this.code = code;
    this.originalError = originalError;
  }
}

/***/ }),

/***/ "./src/components/common/ArcProgress.tsx":
/*!***********************************************!*\
  !*** ./src/components/common/ArcProgress.tsx ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ArcProgress": () => (/* binding */ ArcProgress)
/* harmony export */ });
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@mui/material/styles/useTheme.js");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");

const ArcProgress = ({
  size,
  value,
  thickness = 5,
  bgColor,
  color
}) => {
  const theme = (0,_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__["default"])();
  const width = size;
  const height = size / 2;
  const xStart = thickness;
  const xEnd = xStart + width;
  const y = height + thickness;
  const radius = (width - thickness) / 2;

  // Path of the arc to draw:
  const d = `M ${thickness} ${y} A ${radius} ${radius} 180 0 1 ${xEnd} ${y}`;

  // Since the arc is coded to always be exactly half of the circle,
  // we can calculate the % values based on a formula for circumference of a circle.
  const circumference = 2 * Math.PI * (size / 2);
  const progressValue = (100 - value) / 100 * circumference;
  return /*#__PURE__*/React.createElement("svg", {
    width: size + 2 * thickness,
    height: size / 2 + 2 * thickness,
    strokeLinecap: "round",
    fill: "none"
  }, /*#__PURE__*/React.createElement("path", {
    d: d,
    strokeWidth: thickness,
    stroke: bgColor ?? theme.palette.grey[800]
  }), /*#__PURE__*/React.createElement("path", {
    d: d,
    strokeWidth: thickness,
    stroke: color ?? theme.palette.secondary.main,
    strokeDasharray: circumference / 2,
    strokeDashoffset: progressValue / 2,
    style: {
      transition: 'stroke-dashoffset .15s ease-in-out'
    }
  }));
};

/***/ }),

/***/ "./src/components/common/ConnectionIndicatorK2.tsx":
/*!*********************************************************!*\
  !*** ./src/components/common/ConnectionIndicatorK2.tsx ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConnectionIndicatorK2": () => (/* binding */ ConnectionIndicatorK2)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@mui/material/styles/useTheme.js");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");



/**
 * Used for positioning the tooltip content so that the conainer overlaps with the indicator dot.
 * This prevents the Conent from disappearing when the mouse is moved over it.
 */
const ContentContainer = props => /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__.Stack, (0,_babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({
  sx: {
    position: 'absolute',
    display: 'none',
    minWidth: 260,
    maxWidth: 320,
    transform: 'translate(-25%)',
    zIndex: 1,
    top: 0
  }
}, props));
const Content = props => {
  const theme = (0,_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__["default"])();
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__.Stack, (0,_babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({
    sx: {
      position: 'relative',
      borderRadius: 1,
      background: theme.palette.grey[850],
      boxShadow: 10,
      backdropFilter: 'blur(25px)',
      mt: 2.5,
      py: 1,
      px: 2,
      minWidth: '260px',
      gap: 0.5
    }
  }, props));
};
const IndicatorDot = ({
  size,
  connected,
  ...rest
}) => {
  const theme = (0,_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__["default"])();
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__.Box, (0,_babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({
    sx: {
      width: size,
      height: size,
      borderRadius: theme.shape.borderRadius,
      position: 'relative',
      background: connected ? theme.palette.success.main : theme.palette.error.main,
      ':hover .content_container': {
        display: 'flex'
      }
    }
  }, rest));
};
function ConnectionIndicatorK2({
  children,
  connected,
  size = 12,
  className
}) {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_3__.useTranslation)();
  const theme = (0,_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__["default"])();
  const statusColor = connected ? theme.palette.success.main : theme.palette.error.main;
  return /*#__PURE__*/React.createElement(IndicatorDot, {
    size: size,
    connected: connected,
    className: className
  }, children && /*#__PURE__*/React.createElement(ContentContainer, {
    className: "content_container"
  }, /*#__PURE__*/React.createElement(Content, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__.Stack, {
    sx: {
      gap: 0.75
    },
    divider: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__.Divider, {
      sx: {
        mx: -2
      }
    })
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__.Typography, {
    variant: "subtitle2",
    color: statusColor
  }, connected ? t('Connected') : t('Not Connected')), children), /*#__PURE__*/React.createElement("svg", {
    viewBox: "180.861 57.728 13.662 5.192",
    width: "13.662",
    height: "5.192",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    style: {
      position: 'absolute',
      bottom: '100%',
      marginBottom: '-1px',
      left: '25%'
    }
  }, /*#__PURE__*/React.createElement("path", {
    d: "M 88.831 21.526 L 75.169 21.526 C 75.834 21.526 76.472 21.261 76.941 20.79 L 80.937 16.776 C 81.523 16.187 82.477 16.187 83.063 16.776 L 87.059 20.79 C 87.529 21.261 88.166 21.526 88.831 21.526 Z",
    fill: `${theme.palette.grey[850]}`,
    shapeRendering: "crispEdges",
    transform: "matrix(1, 0, 0, 1, 105.69223, 41.39344)"
  })))));
}

/***/ }),

/***/ "./src/components/common/Dialog.tsx":
/*!******************************************!*\
  !*** ./src/components/common/Dialog.tsx ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");

const Dialog = ({
  open,
  onClose,
  title,
  content,
  bgColorDefault = false,
  isCloseable = true
}) => {
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__.Dialog, {
    open: open,
    showCloseIcon: isCloseable,
    onClose: () => {
      if (isCloseable) {
        onClose();
      }
    },
    slotProps: {
      backdrop: {
        sx: {
          backdropFilter: `${bgColorDefault ? 'undefined' : 'none'}`,
          backgroundColor: `${bgColorDefault ? 'background.default' : 'undefined'}`
        }
      }
    },
    PaperProps: {
      sx: {
        width: '100%',
        backgroundColor: 'background.paper',
        mx: 2,
        my: 4,
        py: 3,
        px: 2
      }
    }
  }, title && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__.Typography, {
    variant: "h5",
    align: "left",
    sx: {
      fontWeight: 700,
      lineHeight: '28px',
      mb: 0.5
    }
  }, title), content);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Dialog);

/***/ }),

/***/ "./src/components/common/ImageWithFallback.tsx":
/*!*****************************************************!*\
  !*** ./src/components/common/ImageWithFallback.tsx ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ImageWithFallback": () => (/* binding */ ImageWithFallback)
/* harmony export */ });
/* harmony import */ var _src_utils_ipsfResolverWithFallback__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @src/utils/ipsfResolverWithFallback */ "./src/utils/ipsfResolverWithFallback.ts");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");


function ImageWithFallback({
  src,
  onError,
  onLoad,
  className,
  id
}) {
  const [fallbackImage, setFallbackImage] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');
  const imageOnErrorHandler = event => {
    setFallbackImage('images/no_image.svg');
    onError?.(event);
  };
  return /*#__PURE__*/React.createElement("img", {
    crossOrigin: "anonymous",
    src: fallbackImage || (0,_src_utils_ipsfResolverWithFallback__WEBPACK_IMPORTED_MODULE_0__.ipfsResolverWithFallback)(src),
    onError: imageOnErrorHandler,
    onLoad: event => {
      onLoad?.(event);
    },
    className: className,
    id: id
  });
}

/***/ }),

/***/ "./src/components/common/InAppApprovalOverlay.tsx":
/*!********************************************************!*\
  !*** ./src/components/common/InAppApprovalOverlay.tsx ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InAppApprovalOverlay": () => (/* binding */ InAppApprovalOverlay)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@mui/material/styles/useTheme.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _src_contexts_ApprovalsProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/contexts/ApprovalsProvider */ "./src/contexts/ApprovalsProvider.tsx");
/* harmony import */ var _src_popup_ApprovalRoutes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/popup/ApprovalRoutes */ "./src/popup/ApprovalRoutes.tsx");
/* harmony import */ var _Overlay__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Overlay */ "./src/components/common/Overlay.tsx");
/* harmony import */ var _TestnetBanner__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./TestnetBanner */ "./src/components/common/TestnetBanner.tsx");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");






const InAppApprovalOverlay = () => {
  const theme = (0,_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__["default"])();
  const {
    approval
  } = (0,_src_contexts_ApprovalsProvider__WEBPACK_IMPORTED_MODULE_1__.useApprovalsContext)();

  // We provide fake location to the router to avoid having to
  // change URL when we trigger the in-app approval screens.
  const fakeLocation = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!approval) {
      return {
        ...window.location,
        state: null
      };
    }
    const url = new URL(approval.url, window.location.href);
    return {
      hash: url.hash,
      pathname: url.pathname,
      search: url.search,
      state: null
    };
  }, [approval]);
  return /*#__PURE__*/React.createElement(_Overlay__WEBPACK_IMPORTED_MODULE_3__.Overlay, {
    TransitionComponent: _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Fade,
    in: Boolean(approval),
    sx: {
      zIndex: theme.zIndex.modal
    },
    isBackgroundFilled: true
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Stack, {
    sx: {
      width: 1,
      height: 1
    }
  }, /*#__PURE__*/React.createElement(_TestnetBanner__WEBPACK_IMPORTED_MODULE_4__.TestnetBanner, null), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Stack, {
    sx: {
      width: 1,
      height: 1,
      pt: 1
    }
  }, /*#__PURE__*/React.createElement(_src_popup_ApprovalRoutes__WEBPACK_IMPORTED_MODULE_2__.ApprovalRoutes, {
    location: fakeLocation
  }))));
};

/***/ }),

/***/ "./src/components/common/NetworkLogo.tsx":
/*!***********************************************!*\
  !*** ./src/components/common/NetworkLogo.tsx ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GlobeIconContainer": () => (/* binding */ GlobeIconContainer),
/* harmony export */   "NetworkLogo": () => (/* binding */ NetworkLogo)
/* harmony export */ });
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@mui/material/styles/styled.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _src_utils_ipsfResolverWithFallback__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @src/utils/ipsfResolverWithFallback */ "./src/utils/ipsfResolverWithFallback.ts");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");


const GlobeIconContainer = (0,_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__["default"])('div')`
  width: ${({
  width
}) => width ?? '32px'};
  height: ${({
  height
}) => height ?? '32px'};
  position: ${({
  position
}) => position ?? 'static'};
  top: 0;
  left: 0;
  border-radius: 50%;
  margin: ${({
  margin
}) => margin ?? '0'};
  z-index: ${({
  zIndex
}) => zIndex ?? '0'};
  background: ${({
  withBackground,
  theme
}) => withBackground ? theme.palette.background.default : 'none'};
  border: ${({
  withBackground,
  showGlobeMargin
}) => withBackground && showGlobeMargin ? '4px solid' : 'none'};
  border-color: ${({
  withBackground,
  theme
}) => withBackground ? theme.palette.background.default : 'none'};
  border-radius: ${({
  withBackground
}) => withBackground ? '50%' : 'none'};
`;
const NetworkLogoImage = (0,_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__["default"])('img')`
  width: ${({
  width
}) => width ?? 'auto'};
  height: ${({
  height
}) => height ?? '32px'};
  position: ${({
  position
}) => position ?? 'static'};
  margin: ${({
  margin
}) => margin ?? '0'};
  padding: ${({
  padding
}) => padding ?? '0'};
  z-index: ${({
  zIndex
}) => zIndex ?? '0'};
  top: 0;
  left: 0;
  background: ${({
  withBackground,
  theme
}) => withBackground ? theme.palette.background.default : 'none'};

  border: ${({
  withBackground
}) => withBackground ? '8px solid' : 'none'};
  border-color: ${({
  withBackground,
  theme
}) => withBackground ? theme.palette.background.default : 'none'};
  border-radius: ${({
  withBackground
}) => withBackground ? '50%' : 'none'};
`;
const CheckContainer = (0,_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__["default"])(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.Stack)`
  position: absolute;
  background: ${({
  theme
}) => theme.palette.success.main};
  width: 24px;
  height: 24px;
  border-radius: 50%;
  align-items: center;
  justify-content: center;
  z-index: 5;
  border: ${({
  theme
}) => `4px solid ${theme.palette.background.default}`};
`;
function NetworkLogo({
  src,
  width,
  height,
  position,
  margin,
  zIndex,
  withBackground = false,
  defaultSize,
  showComplete = false,
  showGlobeMargin
}) {
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.Stack, {
    sx: {
      position: 'relative'
    }
  }, showComplete && /*#__PURE__*/React.createElement(CheckContainer, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.CheckIcon, {
    size: 10
  })), src ? /*#__PURE__*/React.createElement(NetworkLogoImage, {
    height: height,
    width: width,
    src: (0,_src_utils_ipsfResolverWithFallback__WEBPACK_IMPORTED_MODULE_0__.ipfsResolverWithFallback)(src),
    position: position,
    margin: margin,
    zIndex: zIndex,
    withBackground: withBackground
  }) : /*#__PURE__*/React.createElement(GlobeIconContainer, {
    width: width,
    height: height,
    position: position,
    margin: margin,
    zIndex: zIndex,
    withBackground: withBackground,
    showGlobeMargin: showGlobeMargin
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.GlobeIcon, {
    size: defaultSize,
    sx: {
      m: 'auto',
      display: 'block',
      position: 'absolute'
    }
  })));
}

/***/ }),

/***/ "./src/components/common/Overlay.tsx":
/*!*******************************************!*\
  !*** ./src/components/common/Overlay.tsx ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Overlay": () => (/* binding */ Overlay)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@mui/material/styles/useTheme.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");


const Overlay = ({
  children,
  isBackgroundFilled,
  sx,
  ...props
}) => {
  const theme = (0,_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__["default"])();
  const backgroundStyles = isBackgroundFilled ? {
    backdropFilter: 'none',
    backgroundColor: theme.palette.background.default
  } : {
    backdropFilter: 'blur(12.5px)',
    backgroundColor: 'transparent'
  };
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.Backdrop, (0,_babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({
    open: true,
    sx: [{
      zIndex: 10,
      ...backgroundStyles
    }, ...(Array.isArray(sx) ? sx : [sx])]
  }, props), children);
};

/***/ }),

/***/ "./src/components/common/PageTitle.tsx":
/*!*********************************************!*\
  !*** ./src/components/common/PageTitle.tsx ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PageTitle": () => (/* binding */ PageTitle),
/* harmony export */   "PageTitleVariant": () => (/* binding */ PageTitleVariant)
/* harmony export */ });
/* harmony import */ var _src_components_common_ImageWithFallback__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @src/components/common/ImageWithFallback */ "./src/components/common/ImageWithFallback.tsx");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@emotion/react/dist/emotion-react.browser.esm.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@mui/material/styles/styled.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _src_hooks_useGoBack__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/hooks/useGoBack */ "./src/hooks/useGoBack.ts");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");



const ShowThumbnailImageAnimation = _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.keyframes`
  0% {
    transform: scale(0);
  }
  100% {
    transform: scale(1);
  }
`;
const ThumbnailImage = (0,_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__["default"])(_src_components_common_ImageWithFallback__WEBPACK_IMPORTED_MODULE_0__.ImageWithFallback)`
  width: 32px;
  height: 32px;
  margin-right: 8px;
  border-radius: 8px;
  animation: 0.3s ease-in-out ${ShowThumbnailImageAnimation};
`;
let PageTitleVariant = /*#__PURE__*/function (PageTitleVariant) {
  PageTitleVariant[PageTitleVariant["SECONDARY"] = 0] = "SECONDARY";
  PageTitleVariant[PageTitleVariant["PRIMARY"] = 1] = "PRIMARY";
  return PageTitleVariant;
}({}); // Use this when the global header is hidden and this is the primary page header.
const PageTitle = ({
  children,
  onBackClick,
  showBackButton = true,
  variant = PageTitleVariant.SECONDARY,
  buttonPadding,
  thumbnailImage,
  margin = '8px 0'
}) => {
  const goBack = (0,_src_hooks_useGoBack__WEBPACK_IMPORTED_MODULE_1__.useGoBack)();
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.Stack, {
    sx: {
      flexDirection: 'row',
      alignItems: 'flex-start',
      position: 'relative',
      width: '100%',
      pt: variant === PageTitleVariant.PRIMARY ? 2 : 0,
      margin
    }
  }, showBackButton && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.IconButton, {
    onClick: () => onBackClick ? onBackClick() : goBack(),
    padding: buttonPadding,
    "data-testid": "page-title-back-button",
    disableRipple: true
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.ChevronLeftIcon, {
    size: 32
  })), thumbnailImage && /*#__PURE__*/React.createElement(ThumbnailImage, {
    src: thumbnailImage
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.Typography, {
    variant: "h4",
    sx: {
      width: '100%',
      marginLeft: showBackButton ? 0 : 2,
      pt: 1
    }
  }, children));
};

/***/ }),

/***/ "./src/components/common/PasswordStrength.tsx":
/*!****************************************************!*\
  !*** ./src/components/common/PasswordStrength.tsx ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PasswordStrength": () => (/* binding */ PasswordStrength),
/* harmony export */   "getPasswordErrorMessage": () => (/* binding */ getPasswordErrorMessage)
/* harmony export */ });
/* harmony import */ var i18next__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! i18next */ "./node_modules/i18next/dist/esm/i18next.js");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@mui/material/styles/useTheme.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var zxcvbn__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zxcvbn */ "./node_modules/zxcvbn/lib/main.js");
/* harmony import */ var zxcvbn__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(zxcvbn__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");





const REQUIRED_PASSWORD_STRENTGH = 2; // can be 0-4

const verifyPasswordsMatch = (pass1, pass2) => {
  const isVerified = !!(pass1 && pass2 && pass1 === pass2);
  return isVerified;
};
const getPasswordErrorMessage = (isFieldsFilled, newPassword, confirmPassword, passwordStrength, considerStrength = true) => {
  const PASSWORD_STRENGTH_ERROR = (0,i18next__WEBPACK_IMPORTED_MODULE_0__.t)('The new password is too weak');
  const PASSWORDS_MATCH_ERROR = (0,i18next__WEBPACK_IMPORTED_MODULE_0__.t)('Passwords do not match');
  if (isFieldsFilled && !verifyPasswordsMatch(newPassword, confirmPassword)) {
    return PASSWORDS_MATCH_ERROR;
  }
  if (considerStrength && isFieldsFilled && passwordStrength < REQUIRED_PASSWORD_STRENTGH) {
    return PASSWORD_STRENGTH_ERROR;
  }
  return '';
};
const getColors = theme => {
  return [theme.palette.error.main, theme.palette.error.light, theme.palette.warning.main, theme.palette.success.light, theme.palette.success.light];
};
function PasswordStrength({
  password,
  setPasswordStrength
}) {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_3__.useTranslation)();
  const theme = (0,_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__["default"])();
  const {
    score: strength
  } = zxcvbn__WEBPACK_IMPORTED_MODULE_1___default()(password);
  (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(() => {
    setPasswordStrength(strength);
  }, [setPasswordStrength, strength]);
  const scoreWords = [t('Strength: weak. Keep adding characters.'), t('Strength: weak. Keep adding characters.'), t('Strength: medium. This will do. '), t('Strength: strong. Keep this one!'), t('Strength: strong. Keep this one!')];
  const colors = getColors(theme);
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__.Stack, {
    sx: {
      mt: 1
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__.Typography, {
    color: colors[strength],
    sx: {
      textAlign: 'left'
    },
    variant: "caption"
  }, scoreWords[strength]));
}

/***/ }),

/***/ "./src/components/common/SimpleAddress.tsx":
/*!*************************************************!*\
  !*** ./src/components/common/SimpleAddress.tsx ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SimpleAddress": () => (/* binding */ SimpleAddress)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/react-hot-toast/dist/index.mjs");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var _src_utils_truncateAddress__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/utils/truncateAddress */ "./src/utils/truncateAddress.ts");





function SimpleAddress({
  address,
  iconColor,
  textColor,
  copyCallback,
  ...props
}) {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_3__.useTranslation)();
  const copyAddress = e => {
    e.stopPropagation();
    navigator.clipboard.writeText(address);
    _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__["default"].success(t('Copied!'), {
      duration: 2000
    });
    if (copyCallback) {
      copyCallback();
    }
  };
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__.Stack, (0,_babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({
    direction: "row",
    sx: {
      gap: 1,
      cursor: 'pointer',
      alignItems: 'center',
      textAlign: 'center'
    },
    onClick: copyAddress
  }, props), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__.CopyIcon, {
    sx: {
      ...(iconColor ? {
        color: iconColor
      } : {})
    }
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__.Typography, {
    variant: "caption",
    color: textColor
  }, (0,_src_utils_truncateAddress__WEBPACK_IMPORTED_MODULE_2__.truncateAddress)(address)));
}

/***/ }),

/***/ "./src/components/common/TestnetBanner.tsx":
/*!*************************************************!*\
  !*** ./src/components/common/TestnetBanner.tsx ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TestnetBanner": () => (/* binding */ TestnetBanner)
/* harmony export */ });
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@mui/material/styles/useTheme.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _src_contexts_NetworkProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @src/contexts/NetworkProvider */ "./src/contexts/NetworkProvider.tsx");
/* harmony import */ var i18next__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! i18next */ "./node_modules/i18next/dist/esm/i18next.js");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");



const TestnetBanner = () => {
  const {
    isDeveloperMode
  } = (0,_src_contexts_NetworkProvider__WEBPACK_IMPORTED_MODULE_0__.useNetworkContext)();
  const theme = (0,_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__["default"])();
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Slide, {
    direction: "down",
    in: isDeveloperMode,
    mountOnEnter: true,
    unmountOnExit: true
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Stack, {
    sx: {
      pt: 1
    },
    "data-testid": "testnet-banner"
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Stack, {
    sx: {
      background: `linear-gradient(90deg, ${theme.palette.warning.main} 0%, ${theme.palette.warning.dark} 100%)`,
      width: 1,
      px: 2,
      height: '24px',
      justifyContent: 'center'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Typography, {
    sx: {
      color: 'warning.contrastText',
      fontWeight: theme.typography.fontWeightSemibold
    }
  }, (0,i18next__WEBPACK_IMPORTED_MODULE_1__.t)('Testnet')))));
};

/***/ }),

/***/ "./src/components/common/TokenIcon.tsx":
/*!*********************************************!*\
  !*** ./src/components/common/TokenIcon.tsx ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TokenIcon": () => (/* binding */ TokenIcon)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _src_utils_ipsfResolverWithFallback__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/utils/ipsfResolverWithFallback */ "./src/utils/ipsfResolverWithFallback.ts");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");




const TOKEN_IMAGE_BORDER_RADIUS = '50%';
const TOKEN_IMAGE_DEFAULT_SIZE = '32px';
const getTokenIconInitials = name => {
  const names = (name || '').split(' ');
  const firstName = names[0];
  const lastName = names[names.length - 1];
  const initials = firstName && lastName ? firstName.substring(0, 1) + lastName.substring(0, 1) : firstName ? firstName.substring(0, 1) : '';
  return initials;
};
function TokenIcon({
  src,
  children,
  width,
  height,
  name,
  ...rest
}) {
  const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)();
  (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(() => {
    let isCancelled = false;
    new Promise((resolve, reject) => {
      if (!src) {
        reject('no source value');
        return;
      }
      const img = document.createElement('img');
      img.onerror = err => {
        reject(err);
      };
      img.onload = () => {
        resolve(img);
      };
      img.src = (0,_src_utils_ipsfResolverWithFallback__WEBPACK_IMPORTED_MODULE_1__.ipfsResolverWithFallback)(src);
    }).then(() => {
      setState({
        success: true
      });
    }).catch(() => {
      if (isCancelled) {
        return;
      }
      setState({
        error: true
      });
    });
    return () => {
      isCancelled = true;
    };
  }, [name, src]);
  if (!state) {
    return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Stack, (0,_babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({
      direction: "row",
      justifyContent: "center",
      alignItems: "center",
      sx: {
        borderRadius: TOKEN_IMAGE_BORDER_RADIUS,
        backgroundColor: 'grey.600',
        width: width || TOKEN_IMAGE_DEFAULT_SIZE,
        height: height || TOKEN_IMAGE_DEFAULT_SIZE,
        flexShrink: 0
      }
    }, rest), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.CircularProgress, {
      size: 5
    }));
  }
  if (state.success) {
    return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Stack, (0,_babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({
      direction: "row",
      sx: {
        borderRadius: TOKEN_IMAGE_BORDER_RADIUS,
        width: width || TOKEN_IMAGE_DEFAULT_SIZE,
        height: height || TOKEN_IMAGE_DEFAULT_SIZE,
        flexShrink: 0
      }
    }, rest, {
      as: "img",
      src: (0,_src_utils_ipsfResolverWithFallback__WEBPACK_IMPORTED_MODULE_1__.ipfsResolverWithFallback)(src)
    }));
  }
  if (state.error) {
    const logoText = getTokenIconInitials(name);
    return (/** Children here is so that a custom fallback element can be used */
      children ?? /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Stack, (0,_babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({
        direction: "row",
        justifyContent: "center",
        alignItems: "center",
        sx: {
          borderRadius: TOKEN_IMAGE_BORDER_RADIUS,
          backgroundColor: 'grey.600',
          width: width || TOKEN_IMAGE_DEFAULT_SIZE,
          height: height || TOKEN_IMAGE_DEFAULT_SIZE,
          flexShrink: 0
        }
      }, rest), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Typography, {
        variant: "body2",
        sx: {
          fontWeight: 'fontWeightSemibolds'
        }
      }, logoText))
    );
  }
}

/***/ }),

/***/ "./src/components/common/WalletChip.tsx":
/*!**********************************************!*\
  !*** ./src/components/common/WalletChip.tsx ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "WalletChip": () => (/* binding */ WalletChip)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _src_pages_Accounts_components_WalletTypeIcon__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/pages/Accounts/components/WalletTypeIcon */ "./src/pages/Accounts/components/WalletTypeIcon.tsx");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");




const WalletChip = ({
  walletDetails,
  sx,
  ...props
}) => {
  const [isOverflowing, setIsOverflowing] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
  const onLabelChange = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(label => {
    if (label?.parentElement) {
      setIsOverflowing(label.parentElement.scrollWidth > label.parentElement.offsetWidth);
    }
  }, []);
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Tooltip, {
    title: isOverflowing ? walletDetails.name : '',
    placement: "bottom"
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Chip, (0,_babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({
    icon: /*#__PURE__*/React.createElement(_src_pages_Accounts_components_WalletTypeIcon__WEBPACK_IMPORTED_MODULE_2__.WalletTypeIcon, {
      walletDetails: walletDetails,
      size: 16,
      sx: {
        flexShrink: 0
      }
    }),
    label: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Typography, {
      variant: "caption",
      ref: onLabelChange
    }, walletDetails.name),
    size: "small",
    sx: [{
      gap: 0.5,
      backgroundColor: 'grey.850'
    }, ...(Array.isArray(sx) ? sx : [sx])]
  }, props)));
};

/***/ }),

/***/ "./src/components/common/WalletLoading.tsx":
/*!*************************************************!*\
  !*** ./src/components/common/WalletLoading.tsx ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "WalletLoading": () => (/* binding */ WalletLoading)
/* harmony export */ });
/* harmony import */ var _src_contexts_WalletProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @src/contexts/WalletProvider */ "./src/contexts/WalletProvider.tsx");
/* harmony import */ var _src_popup_LoadingContent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/popup/LoadingContent */ "./src/popup/LoadingContent.tsx");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");


function WalletLoading({
  children
}) {
  const {
    isWalletLoading
  } = (0,_src_contexts_WalletProvider__WEBPACK_IMPORTED_MODULE_0__.useWalletContext)();
  if (isWalletLoading) {
    return /*#__PURE__*/React.createElement(_src_popup_LoadingContent__WEBPACK_IMPORTED_MODULE_1__.LoadingContent, null);
  }
  return children;
}

/***/ }),

/***/ "./src/components/common/account/AccountSelectorButton.tsx":
/*!*****************************************************************!*\
  !*** ./src/components/common/account/AccountSelectorButton.tsx ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AccountSelectorButton": () => (/* binding */ AccountSelectorButton)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _src_contexts_AccountsProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/contexts/AccountsProvider */ "./src/contexts/AccountsProvider.tsx");
/* harmony import */ var _src_contexts_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/contexts/AnalyticsProvider */ "./src/contexts/AnalyticsProvider.tsx");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react_router_dom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-router-dom */ "./node_modules/react-router/esm/react-router.js");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");






function AccountSelectorButton(props) {
  const history = (0,react_router_dom__WEBPACK_IMPORTED_MODULE_4__.useHistory)();
  const {
    capture
  } = (0,_src_contexts_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_2__.useAnalyticsContext)();
  const {
    accounts: {
      active: activeAccount
    }
  } = (0,_src_contexts_AccountsProvider__WEBPACK_IMPORTED_MODULE_1__.useAccountsContext)();
  const [isOverflowing, setIsOverflowing] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);
  const onRefChange = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(node => {
    if (node) {
      setIsOverflowing(node.scrollWidth > node.offsetWidth);
    }
  }, []);
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__.Button, (0,_babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({
    size: "xlarge",
    color: "primary",
    variant: "text",
    "data-testid": "account-selector-button",
    onClick: () => {
      history.push('/accounts');
      capture('AccountSelectorOpened');
    },
    endIcon: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__.ChevronDownIcon, null),
    sx: {
      p: 0,
      maxWidth: 200
    }
  }, props), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__.Tooltip, {
    title: isOverflowing ? activeAccount?.name : '',
    wrapWithSpan: false
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__.Typography, {
    component: "span",
    variant: "h6",
    sx: {
      textOverflow: 'ellipsis',
      overflow: 'hidden'
    },
    ref: onRefChange
  }, activeAccount?.name)));
}

/***/ }),

/***/ "./src/components/common/header/Header.tsx":
/*!*************************************************!*\
  !*** ./src/components/common/header/Header.tsx ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Header": () => (/* binding */ Header)
/* harmony export */ });
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@mui/material/styles/useTheme.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var _src_components_settings_SettingsMenu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @src/components/settings/SettingsMenu */ "./src/components/settings/SettingsMenu.tsx");
/* harmony import */ var _src_pages_Permissions_useCurrentDomain__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/pages/Permissions/useCurrentDomain */ "./src/pages/Permissions/useCurrentDomain.ts");
/* harmony import */ var _src_contexts_PermissionsProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/contexts/PermissionsProvider */ "./src/contexts/PermissionsProvider.tsx");
/* harmony import */ var _src_contexts_AccountsProvider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @src/contexts/AccountsProvider */ "./src/contexts/AccountsProvider.tsx");
/* harmony import */ var _src_contexts_NetworkProvider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @src/contexts/NetworkProvider */ "./src/contexts/NetworkProvider.tsx");
/* harmony import */ var _src_components_common_SimpleAddress__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @src/components/common/SimpleAddress */ "./src/components/common/SimpleAddress.tsx");
/* harmony import */ var _src_contexts_SettingsProvider__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @src/contexts/SettingsProvider */ "./src/contexts/SettingsProvider.tsx");
/* harmony import */ var _src_components_settings_models__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @src/components/settings/models */ "./src/components/settings/models.ts");
/* harmony import */ var _ConnectionIndicatorK2__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../ConnectionIndicatorK2 */ "./src/components/common/ConnectionIndicatorK2.tsx");
/* harmony import */ var _NetworkSwitcher__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./NetworkSwitcher */ "./src/components/common/header/NetworkSwitcher/index.ts");
/* harmony import */ var _account_AccountSelectorButton__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../account/AccountSelectorButton */ "./src/components/common/account/AccountSelectorButton.tsx");
/* harmony import */ var _src_contexts_WalletProvider__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @src/contexts/WalletProvider */ "./src/contexts/WalletProvider.tsx");
/* harmony import */ var _src_background_services_accounts_models__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @src/background/services/accounts/models */ "./src/background/services/accounts/models.ts");
/* harmony import */ var _WalletChip__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../WalletChip */ "./src/components/common/WalletChip.tsx");
/* harmony import */ var _src_utils_getAddressForChain__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @src/utils/getAddressForChain */ "./src/utils/getAddressForChain.ts");
/* harmony import */ var _src_utils_getAllAddressesForAccount__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @src/utils/getAllAddressesForAccount */ "./src/utils/getAllAddressesForAccount.ts");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");


















function Header() {
  const domain = (0,_src_pages_Permissions_useCurrentDomain__WEBPACK_IMPORTED_MODULE_1__.useCurrentDomain)();
  const {
    revokeAddressPermisson,
    isDomainConnectedToAccount
  } = (0,_src_contexts_PermissionsProvider__WEBPACK_IMPORTED_MODULE_2__.usePermissionContext)();
  const {
    accounts: {
      active: activeAccount
    }
  } = (0,_src_contexts_AccountsProvider__WEBPACK_IMPORTED_MODULE_3__.useAccountsContext)();
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_16__.useTranslation)();
  const {
    walletDetails,
    wallets
  } = (0,_src_contexts_WalletProvider__WEBPACK_IMPORTED_MODULE_11__.useWalletContext)();
  const {
    setIsSettingsOpen,
    setSettingsActivePage
  } = (0,_src_contexts_SettingsProvider__WEBPACK_IMPORTED_MODULE_6__.useSettingsContext)();
  const isConnected = isDomainConnectedToAccount && isDomainConnectedToAccount(domain, (0,_src_utils_getAllAddressesForAccount__WEBPACK_IMPORTED_MODULE_15__["default"])(activeAccount ?? {})) || false;
  const {
    network
  } = (0,_src_contexts_NetworkProvider__WEBPACK_IMPORTED_MODULE_4__.useNetworkContext)();
  const address = (0,_src_utils_getAddressForChain__WEBPACK_IMPORTED_MODULE_14__.getAddressForChain)(network, activeAccount);
  const theme = (0,_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__["default"])();
  const showWalletInfo = Boolean(walletDetails?.name && activeAccount?.type === _src_background_services_accounts_models__WEBPACK_IMPORTED_MODULE_12__.AccountType.PRIMARY && wallets.length > 1);
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Stack, {
    sx: {
      gap: 0.5,
      py: 1.5,
      px: 2
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Stack, {
    direction: "row",
    sx: {
      justifyContent: 'space-between',
      alignItems: 'center'
    }
  }, /*#__PURE__*/React.createElement(_src_components_settings_SettingsMenu__WEBPACK_IMPORTED_MODULE_0__.SettingsMenu, null), activeAccount ? /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Stack, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Stack, {
    direction: "row",
    sx: {
      alignItems: 'center',
      justifyContent: 'center',
      gap: 1.5
    }
  }, /*#__PURE__*/React.createElement(_ConnectionIndicatorK2__WEBPACK_IMPORTED_MODULE_8__.ConnectionIndicatorK2, {
    connected: isConnected
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Stack, {
    sx: {
      gap: 0.5
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Typography, {
    variant: "subtitle2",
    sx: {
      textAlign: 'center',
      maxWidth: 1,
      wordWrap: 'break-word'
    }
  }, domain), !isConnected && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Typography, {
    variant: "body2",
    color: "text.secondary"
  }, t('To connect, locate the connect button on their site.'))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Stack, {
    sx: {
      gap: 1
    }
  }, isConnected && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Button, {
    color: "secondary",
    fullWidth: true,
    sx: {
      mt: 0.5,
      backgroundColor: `${theme.palette.grey[700]}CC`,
      fontSize: 'caption.fontSize'
    },
    onClick: () => {
      if (domain && activeAccount) {
        revokeAddressPermisson(domain, (0,_src_utils_getAllAddressesForAccount__WEBPACK_IMPORTED_MODULE_15__["default"])(activeAccount));
      }
    }
  }, t('Disconnect')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Button, {
    variant: "text",
    size: "small",
    onClick: () => {
      setIsSettingsOpen(true);
      setSettingsActivePage(_src_components_settings_models__WEBPACK_IMPORTED_MODULE_7__.SettingsPages.CONNECTED_SITES);
    }
  }, t('View All Connected Sites')))), /*#__PURE__*/React.createElement(_account_AccountSelectorButton__WEBPACK_IMPORTED_MODULE_10__.AccountSelectorButton, null)), address && !showWalletInfo && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Stack, {
    direction: "row",
    sx: {
      pt: 0.5,
      justifyContent: 'center',
      gap: 1
    },
    "data-testid": "header-copy-address"
  }, /*#__PURE__*/React.createElement(_src_components_common_SimpleAddress__WEBPACK_IMPORTED_MODULE_5__.SimpleAddress, {
    address: address
  }))) : /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Skeleton, {
    variant: "rectangular",
    width: "102px",
    height: "24px"
  }), /*#__PURE__*/React.createElement(_NetworkSwitcher__WEBPACK_IMPORTED_MODULE_9__.NetworkSwitcher, null)), address && walletDetails && showWalletInfo && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Stack, {
    direction: "row",
    sx: {
      alignItems: 'center',
      justifyContent: 'center',
      gap: 1
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Stack, {
    direction: "row",
    sx: {
      pt: 0.5,
      justifyContent: 'center',
      gap: 1
    },
    "data-testid": "header-copy-address"
  }, /*#__PURE__*/React.createElement(_src_components_common_SimpleAddress__WEBPACK_IMPORTED_MODULE_5__.SimpleAddress, {
    address: address
  })), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_18__.Divider, {
    light: true,
    orientation: "vertical",
    sx: {
      py: 1.5,
      pl: 0.25
    }
  }), /*#__PURE__*/React.createElement(_WalletChip__WEBPACK_IMPORTED_MODULE_13__.WalletChip, {
    walletDetails: walletDetails,
    sx: {
      maxWidth: 140
    }
  })));
}

/***/ }),

/***/ "./src/components/common/header/NetworkSwitcher/NetworkSwitcher.tsx":
/*!**************************************************************************!*\
  !*** ./src/components/common/header/NetworkSwitcher/NetworkSwitcher.tsx ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NetworkSwitcher": () => (/* binding */ NetworkSwitcher)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var _src_contexts_NetworkProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/contexts/NetworkProvider */ "./src/contexts/NetworkProvider.tsx");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @avalabs/core-chains-sdk */ "./node_modules/@avalabs/core-chains-sdk/esm/models.js");
/* harmony import */ var react_router_dom__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! react-router-dom */ "./node_modules/react-router/esm/react-router.js");
/* harmony import */ var _NetworkLogo__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../NetworkLogo */ "./src/components/common/NetworkLogo.tsx");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@mui/material/styles/styled.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _src_contexts_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @src/contexts/AnalyticsProvider */ "./src/contexts/AnalyticsProvider.tsx");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");









const defaultNetworks = [_avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_5__.ChainId.AVALANCHE_MAINNET_ID, _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_5__.ChainId.AVALANCHE_TESTNET_ID];
const Chevron = (0,_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__["default"])(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.ChevronDownIcon, {
  shouldForwardProp: prop => prop !== 'isOpen'
})`
  transition: transform 0.3s ease-in-out;
  transform: rotateX(${({
  isOpen
}) => isOpen ? `180deg` : `0`});
`;
const NetworkSelectronMenuItem = (0,_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__["default"])(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.MenuItem)`
  color: ${({
  theme
}) => theme.palette.text.secondary};
`;
function NetworkSwitcher() {
  const {
    network,
    setNetwork,
    favoriteNetworks,
    networks
  } = (0,_src_contexts_NetworkProvider__WEBPACK_IMPORTED_MODULE_1__.useNetworkContext)();
  const networkList = [...networks.filter(networkItem => defaultNetworks.includes(networkItem.chainId) && networkItem.chainId !== network?.chainId), ...favoriteNetworks.filter(networkItem => !defaultNetworks.includes(networkItem.chainId) && networkItem.chainId !== network?.chainId)];
  const isActiveInList = networkList.find(networkItem => networkItem?.chainId === network?.chainId);
  const [isOpen, setIsOpen] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false);
  const selectButtonRef = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null);
  const history = (0,react_router_dom__WEBPACK_IMPORTED_MODULE_8__.useHistory)();
  const {
    capture
  } = (0,_src_contexts_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_4__.useAnalyticsContext)();
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_9__.useTranslation)();
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.ClickAwayListener, {
    onClickAway: () => setIsOpen(false)
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Box, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Chip, {
    clickable: true,
    "data-testid": "network-switcher-button",
    onClick: () => {
      if (!isOpen) {
        capture('NetworkSwitcherOpened');
      }
      setIsOpen(!isOpen);
    },
    ref: selectButtonRef,
    avatar: /*#__PURE__*/React.createElement(_NetworkLogo__WEBPACK_IMPORTED_MODULE_3__.NetworkLogo, {
      src: network?.logoUri,
      width: "16px",
      height: "16px",
      margin: "0 4px 0 0"
    }),
    label: /*#__PURE__*/React.createElement(Chevron, {
      size: 20,
      isOpen: isOpen
    })
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Popper, {
    open: isOpen,
    anchorEl: selectButtonRef.current,
    placement: "bottom-end",
    transition: true,
    sx: {
      zIndex: 1
    }
  }, ({
    TransitionProps
  }) => /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Grow, (0,_babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({}, TransitionProps, {
    timeout: 250
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.MenuList, {
    dense: true,
    sx: {
      p: 0,
      mt: 1
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Stack, null, !isActiveInList && network && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.MenuItem, {
    "data-testid": `active-network-${network.chainId}-button`,
    key: network.chainId,
    onClick: () => {
      setIsOpen(false);
    },
    sx: {
      flexDirection: 'row',
      alignItems: 'center',
      px: 1,
      color: 'text.primary'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Stack, {
    sx: {
      alignItems: 'center',
      flexDirection: 'row'
    }
  }, /*#__PURE__*/React.createElement(_NetworkLogo__WEBPACK_IMPORTED_MODULE_3__.NetworkLogo, {
    src: network.logoUri,
    width: "16px",
    height: "16px"
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Typography, {
    variant: "body2",
    sx: {
      ml: 1
    }
  }, network.chainName)), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.CheckIcon, {
    size: 16,
    sx: {
      pl: 1
    }
  })), networkList.filter(networkItem => {
    return networkItem.chainId !== _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_5__.ChainId.AVALANCHE_LOCAL_ID;
  }).map(networkItem => {
    if (!networkItem) {
      return null;
    }
    return /*#__PURE__*/React.createElement(NetworkSelectronMenuItem, {
      "data-testid": `select-network-${networkItem.chainId}-button`,
      key: networkItem.chainId,
      onClick: () => {
        setNetwork(networkItem);
        setIsOpen(false);
      },
      sx: {
        flexDirection: 'row',
        alignItems: 'center',
        px: 1,
        color: 'text.secondary'
      }
    }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Stack, {
      sx: {
        alignItems: 'center',
        flexDirection: 'row'
      }
    }, /*#__PURE__*/React.createElement(_NetworkLogo__WEBPACK_IMPORTED_MODULE_3__.NetworkLogo, {
      src: networkItem.logoUri,
      width: "16px",
      height: "16px"
    }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Typography, {
      variant: "body2",
      sx: {
        ml: 1
      }
    }, networkItem.chainName)), networkItem.chainId === network?.chainId && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.CheckIcon, {
      size: 16
    }));
  }), /*#__PURE__*/React.createElement(NetworkSelectronMenuItem, {
    "data-testid": "manage-networks-button",
    key: "NetworksPage",
    onClick: () => {
      capture('ManageNetworksClicked');
      history.push('/networks');
      setIsOpen(false);
    },
    sx: {
      flexDirection: 'row',
      alignItems: 'center',
      px: 1
    },
    dense: true,
    focusVisibleClassName: "sanyi"
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Stack, {
    sx: {
      alignItems: 'center',
      flexDirection: 'row'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.GearIcon, {
    size: 16
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Typography, {
    variant: "body2",
    sx: {
      ml: 1
    }
  }, t('Manage Networks'))))))))));
}

/***/ }),

/***/ "./src/components/common/header/NetworkSwitcher/index.ts":
/*!***************************************************************!*\
  !*** ./src/components/common/header/NetworkSwitcher/index.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NetworkSwitcher": () => (/* reexport safe */ _NetworkSwitcher__WEBPACK_IMPORTED_MODULE_0__.NetworkSwitcher)
/* harmony export */ });
/* harmony import */ var _NetworkSwitcher__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NetworkSwitcher */ "./src/components/common/header/NetworkSwitcher/NetworkSwitcher.tsx");


/***/ }),

/***/ "./src/components/common/seedless/SeedlessAuthPrompt.tsx":
/*!***************************************************************!*\
  !*** ./src/components/common/seedless/SeedlessAuthPrompt.tsx ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SeedlessAuthPrompt": () => (/* binding */ SeedlessAuthPrompt)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _src_contexts_WalletProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/contexts/WalletProvider */ "./src/contexts/WalletProvider.tsx");
/* harmony import */ var _src_utils_extensionUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/utils/extensionUtils */ "./src/utils/extensionUtils.ts");
/* harmony import */ var _src_hooks_useSeedlessAuthPromptState__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @src/hooks/useSeedlessAuthPromptState */ "./src/hooks/useSeedlessAuthPromptState.ts");
/* harmony import */ var _src_background_services_secrets_models__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @src/background/services/secrets/models */ "./src/background/services/secrets/models.ts");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");







const SeedlessAuthPrompt = () => {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_5__.useTranslation)();
  const {
    walletDetails
  } = (0,_src_contexts_WalletProvider__WEBPACK_IMPORTED_MODULE_1__.useWalletContext)();
  const {
    isAuthPromptVisible
  } = (0,_src_hooks_useSeedlessAuthPromptState__WEBPACK_IMPORTED_MODULE_3__.useSeedlessAuthPromptState)();
  const [isPopupOpen, setIsPopupOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const handleLogin = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async () => {
    const popup = await (0,_src_utils_extensionUtils__WEBPACK_IMPORTED_MODULE_2__.openExtensionNewWindow)('seedless-auth');
    if (popup.state) {
      setIsPopupOpen(true);
      const subscription = popup.removed.subscribe(() => {
        setIsPopupOpen(false);
      });
      return () => subscription.unsubscribe();
    }
  }, []);

  // Make sure not to render the prompt if it comes for the wrong wallet by mistake somehow.
  if (walletDetails?.type !== _src_background_services_secrets_models__WEBPACK_IMPORTED_MODULE_4__.SecretType.Seedless) {
    return null;
  }
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Dialog, {
    open: isAuthPromptVisible,
    PaperProps: {
      sx: {
        m: 2
      }
    },
    sx: {
      textAlign: 'center'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.DialogTitle, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Typography, {
    variant: "h5"
  }, t("You've Been Logged Out"))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.DialogContent, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Typography, {
    variant: "body2"
  }, t('For security reasons your session has timed out. Please log in again.'))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.DialogActions, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Button, {
    key: "seedlessAuthPrompedLoginButton",
    onClick: handleLogin,
    color: "primary",
    size: "large",
    fullWidth: true,
    isLoading: isPopupOpen,
    disabled: isPopupOpen
  }, t('Login'))));
};

/***/ }),

/***/ "./src/components/common/seedless/components/ExportError.tsx":
/*!*******************************************************************!*\
  !*** ./src/components/common/seedless/components/ExportError.tsx ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ExportError": () => (/* binding */ ExportError)
/* harmony export */ });
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _src_hooks_useSeedlessMnemonicExport__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @src/hooks/useSeedlessMnemonicExport */ "./src/hooks/useSeedlessMnemonicExport.ts");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");



const ExportError = ({
  error,
  onRetry,
  onClose
}) => {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_1__.useTranslation)();
  const isOutdated = error == _src_hooks_useSeedlessMnemonicExport__WEBPACK_IMPORTED_MODULE_0__.ExportErrorCode.RequestOutdated;
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.Stack, {
    sx: {
      width: 1,
      height: 1
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.Stack, {
    sx: {
      flexGrow: 1,
      justifyContent: 'center',
      alignItems: 'center',
      gap: 2
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.AlertCircleIcon, {
    size: 48,
    color: "error.light"
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.Typography, {
    variant: "h5"
  }, isOutdated ? t('Request Outdated') : t('Sorry, an unknown error occurred.')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.Typography, {
    variant: "body2",
    color: "text.secondary"
  }, isOutdated ? t('Please try again.') : t('Please try again later or contact Core support.'))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.Button, {
    color: "primary",
    size: "large",
    onClick: isOutdated ? onRetry : onClose,
    fullWidth: true
  }, isOutdated ? t('Try again') : t('Close')));
};

/***/ }),

/***/ "./src/components/common/seedless/components/ExportPending.tsx":
/*!*********************************************************************!*\
  !*** ./src/components/common/seedless/components/ExportPending.tsx ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ExportPending": () => (/* binding */ ExportPending)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/Trans.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/react-hot-toast/dist/index.mjs");
/* harmony import */ var _src_components_common_ArcProgress__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/components/common/ArcProgress */ "./src/components/common/ArcProgress.tsx");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");




const ExportPending = ({
  progress,
  timeLeft,
  cancelExport,
  isCancelling,
  showCloseWindowButton
}) => {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_2__.useTranslation)();
  const [isCancelPromptVisible, setIsCancelPromptVisible] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Stack, {
    sx: {
      width: 1,
      height: 1,
      px: 2,
      pt: 4,
      pb: 3,
      textAlign: 'center'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Stack, {
    sx: {
      flexGrow: 1,
      gap: 2,
      alignItems: 'center',
      justifyContent: 'center'
    }
  }, /*#__PURE__*/React.createElement(_src_components_common_ArcProgress__WEBPACK_IMPORTED_MODULE_1__.ArcProgress, {
    size: 150,
    value: progress,
    thickness: 8
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Typography, {
    variant: "h5"
  }, /*#__PURE__*/React.createElement(react_i18next__WEBPACK_IMPORTED_MODULE_4__.Trans, {
    i18nKey: "<capitalize>{{timeLeft}}</capitalize> Remaining",
    components: {
      capitalize: /*#__PURE__*/React.createElement("span", {
        style: {
          textTransform: 'capitalize'
        }
      })
    },
    values: {
      timeLeft
    }
  })), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Typography, {
    variant: "body2",
    color: "text.secondary"
  }, t('Your recovery phrase is loading. You will receive a notification when it is done. Please check back in a little while.'))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Stack, {
    sx: {
      width: 1,
      gap: 1
    }
  }, showCloseWindowButton && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Button, {
    color: "primary",
    size: "large",
    fullWidth: true,
    onClick: window.close
  }, t('Close')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Button, {
    color: "secondary",
    variant: showCloseWindowButton ? 'text' : 'contained',
    size: "large",
    fullWidth: true,
    onClick: () => setIsCancelPromptVisible(true),
    "data-testid": "seedless-export-recovery-phrase-init-cancellation"
  }, t('Cancel Export'))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Dialog, {
    open: isCancelPromptVisible,
    PaperProps: {
      sx: {
        m: 2,
        textAlign: 'center'
      }
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.DialogTitle, null, t('Confirm Cancel?')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.DialogContent, null, t('Canceling will require you to restart the 2 day waiting period.')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.DialogActions, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Button, {
    color: "primary",
    size: "large",
    fullWidth: true,
    onClick: async () => {
      await cancelExport();
      _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__["default"].error(t('Export Cancelled'));
    },
    isDisabled: isCancelling,
    isLoading: isCancelling,
    "data-testid": "seedless-export-recovery-phrase-confirm-cancellation"
  }, t('Confirm')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Button, {
    variant: "text",
    size: "large",
    onClick: () => setIsCancelPromptVisible(false),
    "data-testid": "seedless-export-recovery-phrase-cancel-cancellation"
  }, t('Cancel')))));
};

/***/ }),

/***/ "./src/components/common/seedless/components/FIDOChallenge.tsx":
/*!*********************************************************************!*\
  !*** ./src/components/common/seedless/components/FIDOChallenge.tsx ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FIDOChallenge": () => (/* binding */ FIDOChallenge)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _src_hooks_useFidoErrorMessage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/hooks/useFidoErrorMessage */ "./src/hooks/useFidoErrorMessage.ts");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/Trans.js");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");




const FIDOChallenge = ({
  error,
  deviceName,
  isLoading,
  completeFidoChallenge
}) => {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_2__.useTranslation)();
  const errorMessage = (0,_src_hooks_useFidoErrorMessage__WEBPACK_IMPORTED_MODULE_1__.useFidoErrorMessage)(error);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    // It looks like the browser's FIDO challenge popup acts
    // like window.alert() in the sense that it stops re-renders.
    // I force the FIDO challenge to fire a bit later so the
    // component can finish rendering and the popup isn't blank.
    const timer = setTimeout(completeFidoChallenge, 1);
    return () => {
      clearTimeout(timer);
    };
  }, [completeFidoChallenge]);
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Stack, {
    sx: {
      width: 1,
      height: 1
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Stack, {
    sx: {
      mt: 2,
      gap: 3,
      px: 2,
      flexGrow: 1,
      textAlign: 'center',
      justifyContent: 'center',
      alignItems: 'center'
    }
  }, !errorMessage && isLoading && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.CircularProgress, {
    size: 48,
    sx: {
      mb: 3
    }
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Typography, {
    variant: "body1"
  }, deviceName ? /*#__PURE__*/React.createElement(react_i18next__WEBPACK_IMPORTED_MODULE_4__.Trans, {
    i18nKey: "Please use your FIDO device (<b>{{ deviceName }}</b>) to continue.",
    components: {
      b: /*#__PURE__*/React.createElement("b", null)
    },
    values: {
      deviceName
    }
  }) : t('Please use your FIDO device to continue.'))), errorMessage && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.AlertCircleIcon, {
    size: 40
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Typography, {
    variant: "body2",
    color: "text.secondary"
  }, errorMessage), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Button, {
    size: "large",
    onClick: () => completeFidoChallenge(true)
  }, t('Try again')))));
};

/***/ }),

/***/ "./src/components/common/seedless/components/MfaChoicePrompt.tsx":
/*!***********************************************************************!*\
  !*** ./src/components/common/seedless/components/MfaChoicePrompt.tsx ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MfaChoicePrompt": () => (/* binding */ MfaChoicePrompt)
/* harmony export */ });
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var _src_components_common_seedless_components_RecoveryMethod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @src/components/common/seedless/components/RecoveryMethod */ "./src/components/common/seedless/components/RecoveryMethod.tsx");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");



const MfaChoicePrompt = ({
  mfaChoice,
  onChosen
}) => {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_1__.useTranslation)();
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.Dialog, {
    open: Boolean(mfaChoice),
    PaperProps: {
      sx: {
        m: 2
      }
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.DialogTitle, null, t('Choose Verification Method')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.DialogContent, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.Typography, {
    variant: "body1"
  }, t('Select one of the available verification methods below to proceed.'))), mfaChoice?.availableMethods?.length && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.DialogActions, {
    sx: {
      px: 1
    }
  }, mfaChoice.availableMethods.map(method => /*#__PURE__*/React.createElement(_src_components_common_seedless_components_RecoveryMethod__WEBPACK_IMPORTED_MODULE_0__.RecoveryMethod, {
    key: method.type === 'fido' ? method.id : 'authenticator',
    methodName: method.type === 'fido' ? method.name : t('Authenticator'),
    onClick: () => onChosen(method),
    asCard: true,
    sx: {
      width: 1,
      justifyContent: 'space-between'
    }
  }))));
};

/***/ }),

/***/ "./src/components/common/seedless/components/RecoveryMethod.tsx":
/*!**********************************************************************!*\
  !*** ./src/components/common/seedless/components/RecoveryMethod.tsx ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RecoveryMethod": () => (/* binding */ RecoveryMethod)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@mui/material/styles/styled.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@mui/material/styles/useTheme.js");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");


const MethodName = (0,_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__["default"])(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.Typography)`
  ${({
  theme
}) => ({
  ...theme.typography.body2,
  fontWeight: theme.typography.fontWeightSemibold
})}
`;
const Chevron = () => /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.ChevronRightIcon, {
  size: 24,
  sx: {
    alignSelf: 'center'
  },
  className: "chevron"
});
const RecoveryMethod = ({
  sx,
  methodName,
  methodDescription,
  methodIcon,
  asCard = false,
  ...props
}) => {
  const theme = (0,_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__["default"])();
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.Button, (0,_babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({
    variant: "text",
    color: "primary",
    sx: [{
      flexDirection: 'row',
      pl: 2,
      pr: 1.5,
      gap: 2,
      textAlign: 'start',
      alignItems: 'center',
      justifyContent: 'space-between',
      whiteSpace: 'normal',
      '& .chevron': {
        transition: theme.transitions.create('transform')
      },
      '&:hover .chevron': {
        transform: 'translateX(4px)'
      }
    }, asCard ? {
      backgroundColor: 'background.paper',
      borderRadius: 1,
      p: 2,
      '&.MuiButtonBase-root:hover': {
        backgroundColor: 'grey.850'
      }
    } : null, ...(Array.isArray(sx) ? sx : [sx])]
  }, props), methodIcon, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.Stack, {
    sx: {
      gap: 1
    }
  }, /*#__PURE__*/React.createElement(MethodName, null, methodName), methodDescription && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.Typography, {
    variant: "body2",
    color: "text.secondary"
  }, methodDescription)), /*#__PURE__*/React.createElement(Chevron, null));
};

/***/ }),

/***/ "./src/components/common/seedless/components/TOTPChallenge.tsx":
/*!*********************************************************************!*\
  !*** ./src/components/common/seedless/components/TOTPChallenge.tsx ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TOTPChallenge": () => (/* binding */ TOTPChallenge)
/* harmony export */ });
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _src_components_common_PageTitle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @src/components/common/PageTitle */ "./src/components/common/PageTitle.tsx");
/* harmony import */ var _src_hooks_useTotpErrorMessage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/hooks/useTotpErrorMessage */ "./src/hooks/useTotpErrorMessage.ts");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");





const TOTPChallenge = ({
  error,
  isLoading,
  onSubmit
}) => {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_3__.useTranslation)();
  const [code, setCode] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)('');
  const errorMessage = (0,_src_hooks_useTotpErrorMessage__WEBPACK_IMPORTED_MODULE_1__.useTotpErrorMessage)(error);
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.Stack, {
    sx: {
      width: 1,
      height: 1
    }
  }, /*#__PURE__*/React.createElement(_src_components_common_PageTitle__WEBPACK_IMPORTED_MODULE_0__.PageTitle, {
    showBackButton: false,
    variant: _src_components_common_PageTitle__WEBPACK_IMPORTED_MODULE_0__.PageTitleVariant.PRIMARY,
    margin: "0"
  }, t('Verify Code')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.Stack, {
    sx: {
      mt: 2,
      gap: 3,
      px: 2
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.Typography, {
    variant: "body1"
  }, t('Enter the code generated from your authenticator app.')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.TextField, {
    autoFocus: true,
    fullWidth: true,
    rows: 3,
    multiline: true,
    InputProps: {
      readOnly: isLoading
    },
    onChange: event => setCode(event.target.value),
    type: "tel",
    onKeyDown: event => {
      // Allow verifying by clicking Enter if we're not awaiting response yet.
      if (event.key === 'Enter') {
        event.preventDefault();
        if (code) {
          onSubmit(code);
        }
      }
    },
    error: !!errorMessage,
    helperText: errorMessage
  })), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.Stack, {
    sx: {
      flexGrow: 1,
      justifyContent: 'flex-end',
      py: 3,
      px: 2
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.Button, {
    color: "primary",
    size: "large",
    onClick: () => onSubmit(code),
    isLoading: isLoading,
    disabled: !code || isLoading,
    fullWidth: true
  }, isLoading ? t('Verifying...') : t('Verify'))));
};

/***/ }),

/***/ "./src/components/dialogs/AnalyticsOptInDialog.tsx":
/*!*********************************************************!*\
  !*** ./src/components/dialogs/AnalyticsOptInDialog.tsx ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AnalyticsOptInDialog": () => (/* binding */ AnalyticsOptInDialog)
/* harmony export */ });
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/Trans.js");
/* harmony import */ var _src_pages_Onboarding_components_TypographyLink__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @src/pages/Onboarding/components/TypographyLink */ "./src/pages/Onboarding/components/TypographyLink.tsx");
/* harmony import */ var _src_background_services_settings_models__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/background/services/settings/models */ "./src/background/services/settings/models.ts");
/* harmony import */ var _src_contexts_SettingsProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/contexts/SettingsProvider */ "./src/contexts/SettingsProvider.tsx");
/* harmony import */ var _src_hooks_useAnalyticsConsentCallbacks__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @src/hooks/useAnalyticsConsentCallbacks */ "./src/hooks/useAnalyticsConsentCallbacks.ts");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");






const AnalyticsOptInDialog = () => {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_4__.useTranslation)();
  const {
    analyticsConsent
  } = (0,_src_contexts_SettingsProvider__WEBPACK_IMPORTED_MODULE_2__.useSettingsContext)();
  const {
    isApproving,
    isRejecting,
    onApproval,
    onRejection
  } = (0,_src_hooks_useAnalyticsConsentCallbacks__WEBPACK_IMPORTED_MODULE_3__.useAnalyticsConsentCallbacks)('re-opt-in-dialog');
  if (analyticsConsent !== _src_background_services_settings_models__WEBPACK_IMPORTED_MODULE_1__.AnalyticsConsent.Pending) {
    return null;
  }
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__.Dialog, {
    open: true,
    showCloseIcon: false,
    PaperProps: {
      sx: {
        mx: 2,
        backgroundColor: 'grey.900'
      }
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__.DialogTitle, {
    typographyProps: {
      variant: 'h5'
    },
    sx: {
      px: 2
    }
  }, t('Help Us Improve Core')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__.DialogContent, {
    sx: {
      px: 2,
      pb: 5
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__.Stack, {
    sx: {
      gap: 2
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__.Typography, {
    variant: "body2",
    color: "text.secondary"
  }, t('Core would like to gather data using local storage and similar technologies to help us understand how our users interact with Core.')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__.Typography, {
    variant: "body2",
    color: "text.secondary"
  }, /*#__PURE__*/React.createElement(react_i18next__WEBPACK_IMPORTED_MODULE_6__.Trans, {
    i18nKey: "This enables us to develop improvements and enhance your experience, to find out more you can read our <typography>Privacy Policy</typography>.",
    components: {
      typography: /*#__PURE__*/React.createElement(_src_pages_Onboarding_components_TypographyLink__WEBPACK_IMPORTED_MODULE_0__.TypographyLink, {
        as: "a",
        target: "_blank",
        href: "https://www.avalabs.org/privacy-policy"
      })
    }
  })), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__.Typography, {
    variant: "body2",
    color: "text.secondary"
  }, t('You can always opt out by visiting the settings page.')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__.Typography, {
    variant: "body2",
    color: "text.secondary"
  }, /*#__PURE__*/React.createElement(react_i18next__WEBPACK_IMPORTED_MODULE_6__.Trans, {
    i18nKey: "Core will <b>never</b> sell or share data.",
    components: {
      b: /*#__PURE__*/React.createElement("b", null)
    }
  })))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__.DialogActions, {
    sx: {
      px: 2
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__.Button, {
    size: "large",
    color: "primary",
    disabled: isApproving || isRejecting,
    isLoading: isApproving,
    fullWidth: true,
    onClick: onApproval
  }, t('I Agree')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__.Button, {
    size: "large",
    color: "secondary",
    disabled: isApproving || isRejecting,
    isLoading: isRejecting,
    fullWidth: true,
    onClick: onRejection
  }, t('No Thanks'))));
};

/***/ }),

/***/ "./src/components/icons/BrandName.tsx":
/*!********************************************!*\
  !*** ./src/components/icons/BrandName.tsx ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BrandName": () => (/* binding */ BrandName)
/* harmony export */ });
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");

function BrandName({
  height,
  width,
  margin = '0',
  padding = '0'
}) {
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__.Stack, {
    sx: {
      margin,
      padding
    }
  }, /*#__PURE__*/React.createElement("img", {
    src: "/images/logo-transparent.svg",
    height: height,
    width: width
  }));
}

/***/ }),

/***/ "./src/components/icons/DangerIcon.tsx":
/*!*********************************************!*\
  !*** ./src/components/icons/DangerIcon.tsx ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@mui/material/styles/useTheme.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");

const DangerIcon = ({
  size = 72,
  innerBorderWidth = 14,
  outerBorderWidth = 2,
  borderGap = 5
}) => {
  const theme = (0,_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__["default"])();
  const innerCircleSize = size - 2 * outerBorderWidth - 2 * borderGap;
  const iconSize = innerCircleSize - 2 * innerBorderWidth;
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__.Stack, {
    sx: {
      width: size,
      height: size,
      borderRadius: '50%',
      border: `${outerBorderWidth}px solid ${theme.palette.error.main}`,
      justifyContent: 'center',
      alignItems: 'center',
      margin: '0 auto',
      '&:after': {
        content: "''",
        border: `${innerBorderWidth + 1}px solid ${theme.palette.error.main}`,
        width: innerCircleSize,
        height: innerCircleSize,
        position: 'absolute',
        borderRadius: '50%'
      }
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__.AlertCircleIcon, {
    size: iconSize,
    color: theme.palette.common.white,
    fill: theme.palette.error.main
  }));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DangerIcon);

/***/ }),

/***/ "./src/components/settings/SettingsHeader.tsx":
/*!****************************************************!*\
  !*** ./src/components/settings/SettingsHeader.tsx ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SettingsHeader": () => (/* binding */ SettingsHeader)
/* harmony export */ });
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");

function SettingsHeader({
  goBack,
  title,
  action,
  width
}) {
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__.Stack, {
    width: width,
    sx: {
      flexDirection: 'row',
      justifyContent: 'space-between',
      alignItems: 'center',
      mt: 1,
      py: 1.5,
      pr: 2
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__.Stack, {
    sx: {
      flexDirection: 'row',
      alignItems: 'center',
      position: 'relative'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__.IconButton, {
    "data-testid": "go-back-button",
    onClick: goBack,
    disableRipple: true
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__.ChevronLeftIcon, {
    size: 32
  })), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__.Typography, {
    variant: "h4"
  }, title)), action);
}

/***/ }),

/***/ "./src/components/settings/SettingsMenu.tsx":
/*!**************************************************!*\
  !*** ./src/components/settings/SettingsMenu.tsx ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SettingsMenu": () => (/* binding */ SettingsMenu)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _pages_MainPage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pages/MainPage */ "./src/components/settings/pages/MainPage.tsx");
/* harmony import */ var _pages_Currencies__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/Currencies */ "./src/components/settings/pages/Currencies.tsx");
/* harmony import */ var react_transition_group__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! react-transition-group */ "./node_modules/react-transition-group/esm/CSSTransition.js");
/* harmony import */ var react_transition_group__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! react-transition-group */ "./node_modules/react-transition-group/esm/TransitionGroup.js");
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./models */ "./src/components/settings/models.ts");
/* harmony import */ var _pages_SecurityAndPrivacy__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./pages/SecurityAndPrivacy */ "./src/components/settings/pages/SecurityAndPrivacy.tsx");
/* harmony import */ var _pages_ChangePassword__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./pages/ChangePassword */ "./src/components/settings/pages/ChangePassword.tsx");
/* harmony import */ var _pages_RecoveryPhrase__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./pages/RecoveryPhrase */ "./src/components/settings/pages/RecoveryPhrase.tsx");
/* harmony import */ var _pages_AddContact__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./pages/AddContact */ "./src/components/settings/pages/AddContact.tsx");
/* harmony import */ var _pages_ContactList__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./pages/ContactList */ "./src/components/settings/pages/ContactList.tsx");
/* harmony import */ var _components_ContactProfile__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./components/ContactProfile */ "./src/components/settings/components/ContactProfile.tsx");
/* harmony import */ var _pages_ConnectedSites__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./pages/ConnectedSites */ "./src/components/settings/pages/ConnectedSites.tsx");
/* harmony import */ var _pages_Ledger__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./pages/Ledger */ "./src/components/settings/pages/Ledger.tsx");
/* harmony import */ var _pages_Legal__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./pages/Legal */ "./src/components/settings/pages/Legal.tsx");
/* harmony import */ var _pages_Advanced__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./pages/Advanced */ "./src/components/settings/pages/Advanced.tsx");
/* harmony import */ var _pages_Language__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./pages/Language */ "./src/components/settings/pages/Language.tsx");
/* harmony import */ var _pages_Feedback__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./pages/Feedback */ "./src/components/settings/pages/Feedback.tsx");
/* harmony import */ var _src_contexts_SettingsProvider__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @src/contexts/SettingsProvider */ "./src/contexts/SettingsProvider.tsx");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@mui/material/styles/styled.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _pages_ExportRecoveryPhrase__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./pages/ExportRecoveryPhrase */ "./src/components/settings/pages/ExportRecoveryPhrase.tsx");
/* harmony import */ var _src_hooks_useSeedlessMnemonicExport__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @src/hooks/useSeedlessMnemonicExport */ "./src/hooks/useSeedlessMnemonicExport.ts");
/* harmony import */ var _pages_RecoveryMethods_RecoveryMethods__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./pages/RecoveryMethods/RecoveryMethods */ "./src/components/settings/pages/RecoveryMethods/RecoveryMethods.tsx");
/* harmony import */ var _src_contexts_SeedlessMfaManagementProvider__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @src/contexts/SeedlessMfaManagementProvider */ "./src/contexts/SeedlessMfaManagementProvider.tsx");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
























const AnimatedContainer = (0,_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_22__["default"])(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_23__.Stack)`
  height: 100%;
  max-height: 100%;
  width: fit-content;
  position: absolute;
  top: 0;

  &.slideNext-enter {
    z-index: 2;
    transform: translateX(100%);
  }
  &.slideNext-enter-active {
    z-index: 2;
    transform: translateX(0%);
    transition: transform 300ms ease-in-out;
  }
  &.slideNext-exit {
    z-index: 1;
    transform: translateX(0%);
  }
  &.slideNext-exit-active {
    z-index: 1;
    transform: translateX(-100%);
    transition: transform 300ms ease-in-out;
  }

  &.slideBack-enter {
    transform: translateX(-100%);
  }
  &.slideBack-enter-active {
    transform: translateX(0%);
  }
  &.slideBack-exit {
    transform: translateX(0%);
  }
  &.slideBack-exit-active {
    transform: translateX(100%);
  }
  &.slideBack-enter-active,
  &.slideBack-exit-active {
    transition: transform 300ms;
  }
`;
const dynamicChildFactory = classNames => child => /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_1__.cloneElement)(child, {
  classNames
});
function SettingsMenu() {
  const {
    isSettingsOpen,
    setIsSettingsOpen,
    settingsActivePage,
    setSettingsActivePage
  } = (0,_src_contexts_SettingsProvider__WEBPACK_IMPORTED_MODULE_17__.useSettingsContext)();
  const [navStack, setNavStack] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([settingsActivePage]);
  const [isBackAnimation, setIsBackAnimation] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
  const {
    state: seedlessExportState
  } = (0,_src_hooks_useSeedlessMnemonicExport__WEBPACK_IMPORTED_MODULE_19__.useSeedlessMnemonicExport)();
  const {
    isMfaSetupPromptVisible
  } = (0,_src_contexts_SeedlessMfaManagementProvider__WEBPACK_IMPORTED_MODULE_21__.useSeedlessMfaManager)();
  const showSeedlessExportDot = seedlessExportState === _src_hooks_useSeedlessMnemonicExport__WEBPACK_IMPORTED_MODULE_19__.ExportState.ReadyToExport;
  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {
    setNavStack([settingsActivePage]);
  }, [settingsActivePage]);
  const currentPage = navStack[navStack.length - 1];
  const goBack = () => {
    if (navStack.length === 1) {
      setIsSettingsOpen(false);
      return;
    }
    setIsBackAnimation(true);
    const newStack = navStack.slice(0, -1) || [];
    setNavStack([...newStack]);
  };
  const navigateTo = page => {
    setNavStack([...navStack, page]);
  };
  const resetNavigation = () => {
    setNavStack([_models__WEBPACK_IMPORTED_MODULE_4__.SettingsPages.MAIN_PAGE]);
    setSettingsActivePage(_models__WEBPACK_IMPORTED_MODULE_4__.SettingsPages.MAIN_PAGE);
  };
  let pageElement = null;
  const pageProps = {
    navigateTo,
    goBack,
    width: '319px',
    onClose: () => {
      setIsSettingsOpen(false);
      resetNavigation();
    }
  };
  switch (currentPage) {
    case _models__WEBPACK_IMPORTED_MODULE_4__.SettingsPages.CURRENCIES:
      pageElement = /*#__PURE__*/React.createElement(_pages_Currencies__WEBPACK_IMPORTED_MODULE_3__.Currencies, pageProps);
      break;
    case _models__WEBPACK_IMPORTED_MODULE_4__.SettingsPages.CONTACT_LIST:
      pageElement = /*#__PURE__*/React.createElement(_pages_ContactList__WEBPACK_IMPORTED_MODULE_9__.ContactList, pageProps);
      break;
    case _models__WEBPACK_IMPORTED_MODULE_4__.SettingsPages.CONTACT_PROFILE:
      pageElement = /*#__PURE__*/React.createElement(_components_ContactProfile__WEBPACK_IMPORTED_MODULE_10__.ContactProfile, pageProps);
      break;
    case _models__WEBPACK_IMPORTED_MODULE_4__.SettingsPages.ADD_CONTACT:
      pageElement = /*#__PURE__*/React.createElement(_pages_AddContact__WEBPACK_IMPORTED_MODULE_8__.AddContact, pageProps);
      break;
    case _models__WEBPACK_IMPORTED_MODULE_4__.SettingsPages.SECURITY_AND_PRIVACY:
      pageElement = /*#__PURE__*/React.createElement(_pages_SecurityAndPrivacy__WEBPACK_IMPORTED_MODULE_5__.SecurityAndPrivacy, (0,_babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({}, pageProps, {
        showNotificationDotOn: showSeedlessExportDot ? [_models__WEBPACK_IMPORTED_MODULE_4__.SettingsPages.EXPORT_RECOVERY_PHRASE] : []
      }));
      break;
    case _models__WEBPACK_IMPORTED_MODULE_4__.SettingsPages.CHANGE_PASSWORD:
      pageElement = /*#__PURE__*/React.createElement(_pages_ChangePassword__WEBPACK_IMPORTED_MODULE_6__.ChangePassword, pageProps);
      break;
    case _models__WEBPACK_IMPORTED_MODULE_4__.SettingsPages.RECOVERY_PHRASE:
      pageElement = /*#__PURE__*/React.createElement(_pages_RecoveryPhrase__WEBPACK_IMPORTED_MODULE_7__.RecoveryPhrase, pageProps);
      break;
    case _models__WEBPACK_IMPORTED_MODULE_4__.SettingsPages.EXPORT_RECOVERY_PHRASE:
      pageElement = /*#__PURE__*/React.createElement(_pages_ExportRecoveryPhrase__WEBPACK_IMPORTED_MODULE_18__.ExportRecoveryPhrase, pageProps);
      break;
    case _models__WEBPACK_IMPORTED_MODULE_4__.SettingsPages.RECOVERY_METHODS:
      pageElement = /*#__PURE__*/React.createElement(_pages_RecoveryMethods_RecoveryMethods__WEBPACK_IMPORTED_MODULE_20__.RecoveryMethods, pageProps);
      break;
    case _models__WEBPACK_IMPORTED_MODULE_4__.SettingsPages.CONNECTED_SITES:
      pageElement = /*#__PURE__*/React.createElement(_pages_ConnectedSites__WEBPACK_IMPORTED_MODULE_11__.ConnectedSites, pageProps);
      break;
    case _models__WEBPACK_IMPORTED_MODULE_4__.SettingsPages.LEDGER:
      pageElement = /*#__PURE__*/React.createElement(_pages_Ledger__WEBPACK_IMPORTED_MODULE_12__.Ledger, pageProps);
      break;
    case _models__WEBPACK_IMPORTED_MODULE_4__.SettingsPages.LEGAL:
      pageElement = /*#__PURE__*/React.createElement(_pages_Legal__WEBPACK_IMPORTED_MODULE_13__.Legal, pageProps);
      break;
    case _models__WEBPACK_IMPORTED_MODULE_4__.SettingsPages.ADVANCED:
      pageElement = /*#__PURE__*/React.createElement(_pages_Advanced__WEBPACK_IMPORTED_MODULE_14__.Advanced, pageProps);
      break;
    case _models__WEBPACK_IMPORTED_MODULE_4__.SettingsPages.LANGUAGE:
      pageElement = /*#__PURE__*/React.createElement(_pages_Language__WEBPACK_IMPORTED_MODULE_15__.Language, pageProps);
      break;
    case _models__WEBPACK_IMPORTED_MODULE_4__.SettingsPages.FEEDBACK:
      pageElement = /*#__PURE__*/React.createElement(_pages_Feedback__WEBPACK_IMPORTED_MODULE_16__.Feedback, pageProps);
      break;
    default:
      pageElement = /*#__PURE__*/React.createElement(_pages_MainPage__WEBPACK_IMPORTED_MODULE_2__.MainPage, (0,_babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({}, pageProps, {
        showNotificationDotOn: showSeedlessExportDot ? [_models__WEBPACK_IMPORTED_MODULE_4__.SettingsPages.SECURITY_AND_PRIVACY] : []
      }));
  }
  const animationClass = isBackAnimation ? 'slideBack' : 'slideNext';
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_23__.IconButton, {
    "data-testid": "hamburger-menu-button",
    onClick: () => setIsSettingsOpen(true),
    sx: {
      p: 0
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_23__.Badge, {
    color: "secondary",
    badgeContent: "1",
    anchorOrigin: {
      vertical: 'bottom',
      horizontal: 'right'
    },
    componentsProps: {
      badge: {
        style: {
          minWidth: 0,
          width: 16,
          height: 16
        }
      }
    },
    invisible: !showSeedlessExportDot && !isMfaSetupPromptVisible
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_23__.MenuIcon, {
    size: 24
  }))), /*#__PURE__*/React.createElement(react_transition_group__WEBPACK_IMPORTED_MODULE_24__["default"], {
    addEndListener: (node, done) => node.addEventListener('transitionend', done, false),
    onExited: () => {
      // only reset navigation once the drawer is closed
      resetNavigation();
    },
    in: isSettingsOpen,
    classNames: "slideIn",
    unmountOnExit: true
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_23__.Drawer, {
    open: isSettingsOpen,
    onClose: () => {
      setIsSettingsOpen(false);
      resetNavigation();
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_23__.Stack, {
    sx: {
      width: '319px',
      overflow: 'hidden',
      height: '100%',
      position: 'relative',
      backgroundColor: 'background.paper'
    }
  }, /*#__PURE__*/React.createElement(react_transition_group__WEBPACK_IMPORTED_MODULE_25__["default"], {
    childFactory: dynamicChildFactory(animationClass)
  }, /*#__PURE__*/React.createElement(react_transition_group__WEBPACK_IMPORTED_MODULE_24__["default"], {
    in: true,
    key: currentPage,
    addEndListener: (node, done) => {
      node.addEventListener('transitionend', done, false);
      setIsBackAnimation(false);
    },
    classNames: animationClass
  }, /*#__PURE__*/React.createElement(AnimatedContainer, {
    onClick: e => {
      e.stopPropagation();
    }
  }, pageElement)))))));
}

/***/ }),

/***/ "./src/components/settings/components/ContactForm.tsx":
/*!************************************************************!*\
  !*** ./src/components/settings/components/ContactForm.tsx ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ContactForm": () => (/* binding */ ContactForm)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _src_utils_isAddressValid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/utils/isAddressValid */ "./src/utils/isAddressValid.ts");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var _src_contexts_ContactsProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/contexts/ContactsProvider */ "./src/contexts/ContactsProvider.tsx");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");





const ContactForm = ({
  contact,
  handleChange,
  showErrors = false,
  autoFocus
}) => {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_3__.useTranslation)();
  const [nameError, setNameError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const [addressError, setAddressError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const [addressBtcError, setAddressBtcError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const [addressXpError, setAddressXpError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const {
    contacts
  } = (0,_src_contexts_ContactsProvider__WEBPACK_IMPORTED_MODULE_2__.useContactsContext)();
  const FormErrors = {
    NAME_ERROR: t('Name is required'),
    ADDRESS_ERROR: t('Not a valid Avalanche (C-Chain) address. C-Chain addresses being with 0x'),
    ADDRESS_BTC_ERROR: t('Not a valid Bitcoin address'),
    ADDRESS_XP_ERROR: t('Not a valid X/P-Chain address'),
    ADDRESS_XP_PREFIX_ERROR: t('Please remove address prefix. (P- or X-)'),
    ADDRESS_REQUIRED_ERROR: t('At least one address required'),
    ADDRESS_EXISTS: t('This address already exists in the address book')
  };
  const validateForm = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(updatedContact => {
    const nameExists = !!updatedContact.name;
    const addressExists = !!updatedContact.address;
    const btcExists = !!updatedContact.addressBTC;
    const xpExists = !!updatedContact.addressXP;
    let valid = true;
    // no name -> error
    if (!nameExists && showErrors) {
      setNameError(FormErrors.NAME_ERROR);
      valid = false;
    }
    // no address, btc address, pvm address -> error
    if (!addressExists && !btcExists && !xpExists && showErrors) {
      setAddressError(FormErrors.ADDRESS_REQUIRED_ERROR);
      setAddressBtcError(FormErrors.ADDRESS_REQUIRED_ERROR);
      setAddressXpError(FormErrors.ADDRESS_REQUIRED_ERROR);
      return false;
    }
    // no valid address -> error
    if (addressExists && !(0,_src_utils_isAddressValid__WEBPACK_IMPORTED_MODULE_1__.isValidAddress)(updatedContact.address)) {
      setAddressError(FormErrors.ADDRESS_ERROR);
      valid = false;
    }
    // no valid btc address -> error
    if (updatedContact.addressBTC && !(0,_src_utils_isAddressValid__WEBPACK_IMPORTED_MODULE_1__.isValidBtcAddress)(updatedContact.addressBTC)) {
      setAddressBtcError(FormErrors.ADDRESS_BTC_ERROR);
      valid = false;
    }
    // Invalid PVM address -> error

    if (updatedContact.addressXP) {
      if (updatedContact.addressXP.startsWith('P-') || updatedContact.addressXP.startsWith('X-')) {
        setAddressXpError(FormErrors.ADDRESS_XP_PREFIX_ERROR);
        valid = false;
      } else if (!(0,_src_utils_isAddressValid__WEBPACK_IMPORTED_MODULE_1__.isValidXPAddress)(updatedContact.addressXP)) {
        setAddressXpError(FormErrors.ADDRESS_XP_ERROR);
        valid = false;
      }
    }
    if (!nameExists || !btcExists && !addressExists && !xpExists) {
      valid = false;
    }
    if (updatedContact.address && contacts.find(({
      id,
      address
    }) => id !== updatedContact.id && address === updatedContact.address)) {
      setAddressError(FormErrors.ADDRESS_EXISTS);
      valid = false;
    }
    if (updatedContact.addressBTC && contacts.find(({
      id,
      addressBTC
    }) => id !== updatedContact.id && addressBTC === updatedContact.addressBTC)) {
      setAddressBtcError(FormErrors.ADDRESS_EXISTS);
      valid = false;
    }
    return valid;
  }, [showErrors, contacts, FormErrors.NAME_ERROR, FormErrors.ADDRESS_REQUIRED_ERROR, FormErrors.ADDRESS_ERROR, FormErrors.ADDRESS_BTC_ERROR, FormErrors.ADDRESS_XP_PREFIX_ERROR, FormErrors.ADDRESS_XP_ERROR, FormErrors.ADDRESS_EXISTS]);

  // Used when "Save" is clicked on New Contact when no iputs filled out.
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (showErrors) {
      validateForm(contact);
    }
  }, [showErrors, contact, validateForm]);
  const resetErrors = () => {
    setNameError('');
    setAddressError('');
    setAddressBtcError('');
    setAddressXpError('');
  };
  const sanitizeXPAddress = address => {
    if (address.startsWith('P-') || address.startsWith('X-')) {
      return address.substring(2, address.length);
    } else {
      return address;
    }
  };
  const handleUpdate = (name, value) => {
    resetErrors();
    const newContact = {
      ...contact,
      [name]: value
    };
    handleChange(newContact, validateForm(newContact));
  };
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.Stack, {
    sx: {
      width: '100%',
      rowGap: 4
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.TextField, {
    "data-testid": "address-name-input",
    autoFocus: autoFocus,
    onChange: e => {
      e.stopPropagation();
      handleUpdate('name', e.target.value);
    },
    label: t('Name'),
    error: !!nameError,
    placeholder: t('Enter address name'),
    helperText: nameError,
    fullWidth: true,
    value: contact.name,
    size: "small"
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.TextField, {
    "data-testid": "ava-address-textarea",
    size: "small",
    onChange: e => {
      e.stopPropagation();
      handleUpdate('address', e.target.value);
    },
    value: contact.address,
    label: t('Avalanche (C-Chain) Address'),
    error: !!addressError,
    helperText: addressError,
    placeholder: t(`Enter Avalanche (C-Chain) address`),
    fullWidth: true,
    multiline: true,
    rows: 2
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.TextField, {
    "data-testid": "xp-address-textarea",
    size: "small",
    onChange: e => {
      e.stopPropagation();
      handleUpdate('addressXP', e.target.value);
    },
    onPaste: e => {
      e.preventDefault();
      const pastedAddress = e.clipboardData.getData('Text');
      handleUpdate('addressXP', sanitizeXPAddress(pastedAddress));
    },
    value: contact.addressXP,
    label: t('Avalanche (X/P-Chain) Address'),
    error: !!addressXpError,
    helperText: addressXpError,
    placeholder: t(`Enter X/P-Chain address`),
    fullWidth: true,
    multiline: true,
    rows: 2
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.TextField, {
    "data-testid": "btc-address-textarea",
    size: "small",
    onChange: e => {
      e.stopPropagation();
      handleUpdate('addressBTC', e.target.value);
    },
    value: contact.addressBTC,
    label: t('Bitcoin Address'),
    error: !!addressBtcError,
    helperText: addressBtcError,
    placeholder: t(`Enter Bitcoin address`),
    fullWidth: true,
    multiline: true,
    rows: 2
  }));
};

/***/ }),

/***/ "./src/components/settings/components/ContactInfo.tsx":
/*!************************************************************!*\
  !*** ./src/components/settings/components/ContactInfo.tsx ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ContactInfo": () => (/* binding */ ContactInfo)
/* harmony export */ });
/* harmony import */ var _src_components_common_SimpleAddress__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @src/components/common/SimpleAddress */ "./src/components/common/SimpleAddress.tsx");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");


const ContactInfo = ({
  contact
}) => {
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__.Stack, {
    sx: {
      justifyContent: 'space-between',
      flexDirection: 'row',
      width: '100%',
      alignItems: 'center'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__.Typography, {
    variant: "body1",
    title: contact.name,
    sx: {
      maxWidth: '95%',
      textOverflow: 'ellipsis',
      overflow: 'hidden',
      whiteSpace: 'nowrap',
      fontWeight: 'fontWeightSemibold'
    }
  }, contact.name), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__.Stack, null, contact.address && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__.Stack, {
    sx: {
      flexDirection: 'row',
      alignItems: 'center',
      width: '120px'
    },
    "data-testid": "contact-li-copy-ava-address"
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__.AvalancheColorIcon, {
    sx: {
      mr: 0.5
    },
    size: 16
  }), /*#__PURE__*/React.createElement(_src_components_common_SimpleAddress__WEBPACK_IMPORTED_MODULE_0__.SimpleAddress, {
    address: contact.address
  })), contact.addressXP && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__.Stack, {
    sx: {
      flexDirection: 'row',
      alignItems: 'center',
      width: '120px',
      mt: 1
    },
    "data-testid": "contact-li-copy-xp-address"
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__.XAndPChainsIcon, {
    sx: {
      mr: 0.5
    },
    size: 16
  }), /*#__PURE__*/React.createElement(_src_components_common_SimpleAddress__WEBPACK_IMPORTED_MODULE_0__.SimpleAddress, {
    address: contact.addressXP
  })), contact.addressBTC && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__.Stack, {
    sx: {
      flexDirection: 'row',
      alignItems: 'center',
      width: '120px',
      mt: 1
    },
    "data-testid": "contact-li-copy-btc-address"
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__.BitcoinColorIcon, {
    sx: {
      mr: 0.5
    },
    size: 16
  }), /*#__PURE__*/React.createElement(_src_components_common_SimpleAddress__WEBPACK_IMPORTED_MODULE_0__.SimpleAddress, {
    address: contact.addressBTC
  }))));
};

/***/ }),

/***/ "./src/components/settings/components/ContactListItem.tsx":
/*!****************************************************************!*\
  !*** ./src/components/settings/components/ContactListItem.tsx ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ContactListItem": () => (/* binding */ ContactListItem)
/* harmony export */ });
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models */ "./src/components/settings/models.ts");
/* harmony import */ var react_router_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-router-dom */ "./node_modules/react-router/esm/react-router.js");
/* harmony import */ var _ContactInfo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ContactInfo */ "./src/components/settings/components/ContactInfo.tsx");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");




const ContactListItem = ({
  contact,
  navigateTo,
  index,
  length
}) => {
  const history = (0,react_router_dom__WEBPACK_IMPORTED_MODULE_2__.useHistory)();
  const {
    pathname
  } = (0,react_router_dom__WEBPACK_IMPORTED_MODULE_2__.useLocation)();
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.ListItem, {
    "data-testid": `contact-li-${index}`,
    onClick: () => {
      history.push({
        pathname: pathname,
        search: `?${new URLSearchParams({
          contactId: contact.id
        }).toString()}`
      });
      if (!navigateTo) {
        return;
      }
      navigateTo(_models__WEBPACK_IMPORTED_MODULE_0__.SettingsPages.CONTACT_PROFILE);
    },
    sx: {
      p: 0
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.ListItemButton, {
    sx: {
      minHeight: '68px',
      py: 1.25,
      px: 2,
      m: 0,
      '&:hover': {
        borderRadius: 0
      }
    }
  }, /*#__PURE__*/React.createElement(_ContactInfo__WEBPACK_IMPORTED_MODULE_1__.ContactInfo, {
    contact: contact
  }))), !(length - 1 === index) && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Divider, null));
};

/***/ }),

/***/ "./src/components/settings/components/ContactProfile.tsx":
/*!***************************************************************!*\
  !*** ./src/components/settings/components/ContactProfile.tsx ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ContactProfile": () => (/* binding */ ContactProfile)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _SettingsHeader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../SettingsHeader */ "./src/components/settings/SettingsHeader.tsx");
/* harmony import */ var _src_hooks_useContactIdFromParams__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/hooks/useContactIdFromParams */ "./src/hooks/useContactIdFromParams.ts");
/* harmony import */ var _src_contexts_ContactsProvider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @src/contexts/ContactsProvider */ "./src/contexts/ContactsProvider.tsx");
/* harmony import */ var _src_components_settings_components_ContactForm__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @src/components/settings/components/ContactForm */ "./src/components/settings/components/ContactForm.tsx");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/Trans.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@mui/material/styles/useTheme.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/react-hot-toast/dist/index.mjs");
/* harmony import */ var _src_components_common_Dialog__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @src/components/common/Dialog */ "./src/components/common/Dialog.tsx");
/* harmony import */ var _src_utils_truncateAddress__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @src/utils/truncateAddress */ "./src/utils/truncateAddress.ts");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");









const ContactProfile = ({
  goBack,
  width
}) => {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_7__.useTranslation)();
  const theme = (0,_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_8__["default"])();
  const {
    contactId
  } = (0,_src_hooks_useContactIdFromParams__WEBPACK_IMPORTED_MODULE_2__.useContactIdFromParams)();
  const {
    removeContact,
    updateContact,
    getContactById
  } = (0,_src_contexts_ContactsProvider__WEBPACK_IMPORTED_MODULE_3__.useContactsContext)();
  const [showDeleteDialog, setShowDeleteDialog] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const [contact, setContact] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(getContactById(contactId) || {
    id: '',
    name: '',
    address: ''
  });
  const [isEdit, setIsEdit] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const [isFormValid, setIsFormValid] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);
  const [showErrors, setShowErrors] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const showInitials = () => {
    return contact.name.split(' ').map(w => w[0]).join('').substring(0, 2).toUpperCase();
  };
  const handleChange = (newContact, formValid) => {
    setContact({
      ...newContact
    });
    setIsFormValid(formValid);
  };
  const deleteDialogContent = /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.Stack, {
    sx: {
      justifyContent: 'center',
      width: '100%'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.Typography, {
    variant: "h5",
    sx: {
      textAlign: 'center'
    }
  }, t('Delete Contact?')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.Typography, {
    variant: "body2",
    sx: {
      textAlign: 'center',
      mt: 1
    }
  }, /*#__PURE__*/React.createElement(react_i18next__WEBPACK_IMPORTED_MODULE_10__.Trans, {
    i18nKey: "Are you sure you want to delete<br /> this contact?"
  })), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.Stack, {
    sx: {
      mt: 3
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.Button, {
    sx: {
      mb: 1
    },
    onClick: () => {
      goBack();
      _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__["default"].promise(removeContact(contact), {
        loading: t('removing'),
        success: t('Contact Deleted'),
        error: t('Something went wrong')
      }, {
        success: {
          duration: 2000
        }
      });
      setShowDeleteDialog(false);
    }
  }, t('Delete')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.Button, {
    variant: "text",
    onClick: () => setShowDeleteDialog(false)
  }, t('Cancel'))));
  const renderEditAction = /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.Tooltip, {
    title: t('Edit Contact')
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.Button, {
    variant: "text",
    color: "secondary",
    "data-testid": "profile-edit-contact",
    onClick: () => setIsEdit(true)
  }, t('Edit')));
  const renderSaveAction = /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.Tooltip, {
    title: t('Save Contact')
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.Button, {
    variant: "text",
    color: "secondary",
    "data-testid": "profile-save-contact-button",
    onClick: () => {
      setShowErrors(true);
      if (!isFormValid) {
        return;
      }
      _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__["default"].promise(updateContact(contact), {
        loading: t('saving...'),
        success: t('Contact updated!'),
        error: t('Something went wrong')
      }, {
        success: {
          duration: 2000
        }
      });
      setIsEdit(false);
    }
  }, t('Save')));
  const copyAddress = address => {
    navigator.clipboard.writeText(address);
    _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__["default"].success(t('Copied!'), {
      duration: 2000
    });
  };
  const renderContactDetails = /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.Stack, {
    sx: {
      width: '100%'
    }
  }, contact.address && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.Tooltip, {
    title: contact.address,
    sx: {
      display: 'block'
    },
    disableInteractive: true
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.TextField, {
    size: "small",
    InputProps: {
      readOnly: true,
      endAdornment: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.CopyIcon, {
        onClick: ev => {
          ev.stopPropagation();
          copyAddress(contact.address);
        },
        sx: {
          cursor: 'pointer'
        }
      })
    },
    value: (0,_src_utils_truncateAddress__WEBPACK_IMPORTED_MODULE_6__.truncateAddress)(contact.address),
    label: t('Avalanche (C-Chain) Address'),
    placeholder: t(`Enter Avalanche (C-Chain) address`),
    fullWidth: true,
    rows: 2
  }))), contact.addressXP && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.Stack, {
    sx: {
      mt: 4
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.Tooltip, {
    title: contact.addressXP,
    sx: {
      display: 'block'
    },
    disableInteractive: true
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.TextField, {
    size: "small",
    InputProps: {
      readOnly: true,
      endAdornment: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.CopyIcon, {
        onClick: ev => {
          ev.stopPropagation();
          copyAddress(contact.addressXP || '');
        },
        sx: {
          cursor: 'pointer'
        }
      })
    },
    value: (0,_src_utils_truncateAddress__WEBPACK_IMPORTED_MODULE_6__.truncateAddress)(contact.addressXP),
    label: t('Avalanche (X/P-Chain) Address'),
    placeholder: t(`Enter X/P-Chain address`),
    fullWidth: true,
    rows: 2
  }))), contact.addressBTC && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.Stack, {
    sx: {
      mt: 4
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.Tooltip, {
    title: contact.addressBTC,
    sx: {
      display: 'block'
    },
    disableInteractive: true
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.TextField, {
    size: "small",
    InputProps: {
      readOnly: true,
      endAdornment: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.CopyIcon, {
        onClick: ev => {
          ev.stopPropagation();
          copyAddress(contact.addressBTC || '');
        },
        sx: {
          cursor: 'pointer'
        }
      })
    },
    value: (0,_src_utils_truncateAddress__WEBPACK_IMPORTED_MODULE_6__.truncateAddress)(contact.addressBTC),
    label: t('Bitcoin Address'),
    placeholder: t(`Enter Bitcoin address`),
    fullWidth: true,
    rows: 2
  }))));
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.Stack, {
    width: width,
    sx: {
      height: '100%',
      pb: 2
    }
  }, /*#__PURE__*/React.createElement(_SettingsHeader__WEBPACK_IMPORTED_MODULE_1__.SettingsHeader, {
    width: width,
    goBack: goBack,
    title: '',
    navigateTo: () => console.log('dont do anything'),
    action: isEdit ? renderSaveAction : renderEditAction
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.Scrollbars, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.Stack, {
    sx: {
      alignItems: 'center',
      width: '100%',
      px: 2
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.Avatar, {
    sx: {
      width: 80,
      height: 80,
      backgroundColor: `${theme.customPalette.alternates.blue.main}`
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.Typography, {
    variant: "h1",
    sx: {
      fontWeight: 'fontWeightBold'
    }
  }, showInitials())), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.Typography, {
    variant: "h4",
    sx: {
      my: 3
    }
  }, contact.name), isEdit ? /*#__PURE__*/React.createElement(_src_components_settings_components_ContactForm__WEBPACK_IMPORTED_MODULE_4__.ContactForm, {
    contact: contact,
    handleChange: handleChange,
    showErrors: showErrors
  }) : renderContactDetails), isEdit && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.Stack, {
    sx: {
      flexGrow: '1',
      justifyContent: 'flex-end',
      alignItems: 'center'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.Button, {
    "data-testid": "profile-delete-contact-button",
    variant: "text",
    size: "medium",
    color: "error",
    onClick: () => setShowDeleteDialog(true),
    sx: {
      mt: 2
    }
  }, t('Delete Contact')))), /*#__PURE__*/React.createElement(_src_components_common_Dialog__WEBPACK_IMPORTED_MODULE_5__["default"], {
    open: showDeleteDialog,
    onClose: () => setShowDeleteDialog(false),
    content: deleteDialogContent,
    bgColorDefault: true
  }));
};

/***/ }),

/***/ "./src/components/settings/components/StyledListItemButton.tsx":
/*!*********************************************************************!*\
  !*** ./src/components/settings/components/StyledListItemButton.tsx ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StyledListButton": () => (/* binding */ StyledListButton)
/* harmony export */ });
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@mui/material/styles/styled.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");

const StyledListButton = (0,_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__["default"])(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__.ListItemButton)`
  justify-content: space-between;
  padding: 10px 16px;
  margin: 0;
  &:hover {
    border-radius: 0;
  }
  &.Mui-selected {
    border-radius: 0;
  }
`;

/***/ }),

/***/ "./src/components/settings/pages/AddContact.tsx":
/*!******************************************************!*\
  !*** ./src/components/settings/pages/AddContact.tsx ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AddContact": () => (/* binding */ AddContact)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _SettingsHeader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../SettingsHeader */ "./src/components/settings/SettingsHeader.tsx");
/* harmony import */ var _src_contexts_ContactsProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/contexts/ContactsProvider */ "./src/contexts/ContactsProvider.tsx");
/* harmony import */ var _components_ContactForm__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../components/ContactForm */ "./src/components/settings/components/ContactForm.tsx");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@mui/material/styles/styled.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/react-hot-toast/dist/index.mjs");
/* harmony import */ var _src_contexts_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @src/contexts/AnalyticsProvider */ "./src/contexts/AnalyticsProvider.tsx");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");







const FlexScrollbars = (0,_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__["default"])(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Scrollbars)`
  flex-grow: 1;
  max-height: unset;
  height: 100%;
  width: 100%;

  & > div {
    display: flex;
    flex-direction: column;
  }
`;
function AddContact({
  goBack,
  navigateTo,
  width
}) {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_7__.useTranslation)();
  const [contact, setContact] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({
    id: '',
    name: '',
    address: '',
    addressBTC: '',
    addressXP: ''
  });
  const {
    createContact
  } = (0,_src_contexts_ContactsProvider__WEBPACK_IMPORTED_MODULE_2__.useContactsContext)();
  const {
    capture
  } = (0,_src_contexts_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_4__.useAnalyticsContext)();
  const [isFormValid, setIsFormValid] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const [showErrors, setShowErrors] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const handleChange = (newContact, formValid) => {
    setContact({
      ...newContact
    });
    setIsFormValid(formValid);
  };
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Stack, {
    sx: {
      width: `${width}`,
      height: '100%'
    }
  }, /*#__PURE__*/React.createElement(_SettingsHeader__WEBPACK_IMPORTED_MODULE_1__.SettingsHeader, {
    width: width,
    goBack: goBack,
    navigateTo: navigateTo,
    title: t('New Contact'),
    action: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Button, {
      variant: "text",
      color: "secondary",
      "data-testid": "add-new-contact-button",
      onClick: () => {
        setShowErrors(true);
        if (!isFormValid) {
          return;
        }
        _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_8__["default"].promise((async () => {
          try {
            const res = await createContact(contact);
            capture('AddContactSucceeded');
            return res;
          } catch (err) {
            capture('AddContactFailed');
            throw err;
          }
        })(), {
          loading: t('creating...'),
          success: t('Contact created!'),
          error: t('Something went wrong')
        }, {
          success: {
            duration: 2000
          }
        });
        goBack();
      }
    }, t('Save'))
  }), /*#__PURE__*/React.createElement(FlexScrollbars, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Stack, {
    sx: {
      px: 2
    }
  }, /*#__PURE__*/React.createElement(_components_ContactForm__WEBPACK_IMPORTED_MODULE_3__.ContactForm, {
    contact: contact,
    handleChange: handleChange,
    showErrors: showErrors,
    autoFocus: true
  }))));
}

/***/ }),

/***/ "./src/components/settings/pages/Advanced.tsx":
/*!****************************************************!*\
  !*** ./src/components/settings/pages/Advanced.tsx ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Advanced": () => (/* binding */ Advanced)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _src_contexts_BridgeProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/contexts/BridgeProvider */ "./src/contexts/BridgeProvider.tsx");
/* harmony import */ var _src_contexts_NetworkProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/contexts/NetworkProvider */ "./src/contexts/NetworkProvider.tsx");
/* harmony import */ var _src_utils_environment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @src/utils/environment */ "./src/utils/environment.ts");
/* harmony import */ var react_router_dom__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! react-router-dom */ "./node_modules/react-router/esm/react-router.js");
/* harmony import */ var _SettingsHeader__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../SettingsHeader */ "./src/components/settings/SettingsHeader.tsx");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/Trans.js");
/* harmony import */ var _src_contexts_SettingsProvider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @src/contexts/SettingsProvider */ "./src/contexts/SettingsProvider.tsx");
/* harmony import */ var _src_contexts_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @src/contexts/AnalyticsProvider */ "./src/contexts/AnalyticsProvider.tsx");
/* harmony import */ var _src_contexts_AccountsProvider__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @src/contexts/AccountsProvider */ "./src/contexts/AccountsProvider.tsx");
/* harmony import */ var _src_background_services_accounts_models__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @src/background/services/accounts/models */ "./src/background/services/accounts/models.ts");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");












function Advanced({
  goBack,
  navigateTo,
  width
}) {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_9__.useTranslation)();
  const {
    setDeveloperMode,
    isDeveloperMode
  } = (0,_src_contexts_NetworkProvider__WEBPACK_IMPORTED_MODULE_2__.useNetworkContext)();
  const {
    accounts: {
      active: activeAccount
    }
  } = (0,_src_contexts_AccountsProvider__WEBPACK_IMPORTED_MODULE_7__.useAccountsContext)();
  const {
    isBridgeDevEnv,
    setIsBridgeDevEnv
  } = (0,_src_contexts_BridgeProvider__WEBPACK_IMPORTED_MODULE_1__.useBridgeContext)();
  const {
    capture
  } = (0,_src_contexts_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_6__.useAnalyticsContext)();
  const {
    showTokensWithoutBalances,
    toggleShowTokensWithoutBalanceSetting
  } = (0,_src_contexts_SettingsProvider__WEBPACK_IMPORTED_MODULE_5__.useSettingsContext)();
  const history = (0,react_router_dom__WEBPACK_IMPORTED_MODULE_10__.useHistory)();
  const testnetModeUnavailableReason = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    const isFireblocksAccount = activeAccount?.type === _src_background_services_accounts_models__WEBPACK_IMPORTED_MODULE_8__.AccountType.FIREBLOCKS;
    if ((0,_src_utils_environment__WEBPACK_IMPORTED_MODULE_3__.isProductionBuild)() && isFireblocksAccount && !isDeveloperMode) {
      return t('Fireblocks accounts do not support the Testnet Mode currently');
    }
    return '';
  }, [activeAccount, isDeveloperMode, t]);
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.Stack, {
    sx: {
      width: `${width}`,
      height: '100%'
    }
  }, /*#__PURE__*/React.createElement(_SettingsHeader__WEBPACK_IMPORTED_MODULE_4__.SettingsHeader, {
    width: width,
    goBack: goBack,
    navigateTo: navigateTo,
    title: t('Advanced')
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.List, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItem, {
    "data-testid": "test-net-mode-menu-item"
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItemText, {
    sx: {
      alignItems: 'center',
      flex: 'none'
    },
    primaryTypographyProps: {
      variant: 'body2'
    }
  }, t('Testnet Mode')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.Tooltip, {
    sx: {
      ml: 0.5
    },
    PopperProps: {
      sx: {
        maxWidth: '240px'
      }
    },
    title: t('Testnet mode changes the interface to allow you to interact with supported testnets.')
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.InfoCircleIcon, {
    sx: {
      cursor: 'pointer'
    },
    size: "16"
  })), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.Tooltip, {
    title: testnetModeUnavailableReason,
    sx: {
      ml: 'auto'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.Switch, {
    size: "small",
    checked: isDeveloperMode,
    disabled: Boolean(testnetModeUnavailableReason),
    onChange: () => {
      const isEnabled = !isDeveloperMode;
      setDeveloperMode(isEnabled);
      capture(isEnabled ? 'DeveloperModeEnabled' : 'DeveloperModeDisabled');
      history.push('/home');
    },
    sx: {
      ml: 'auto',
      cursor: testnetModeUnavailableReason ? 'not-allowed' : 'pointer'
    }
  }))), !(0,_src_utils_environment__WEBPACK_IMPORTED_MODULE_3__.isProductionBuild)() ? /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItem, {
    "data-testid": "bridge-dev-env-menu-item"
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItemText, {
    sx: {
      alignItems: 'center',
      flex: 'none'
    },
    primaryTypographyProps: {
      variant: 'body2'
    }
  }, t('Bridge DEV Environment')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.Tooltip, {
    sx: {
      ml: 0.5
    },
    PopperProps: {
      sx: {
        maxWidth: '240px'
      }
    },
    title: /*#__PURE__*/React.createElement(react_i18next__WEBPACK_IMPORTED_MODULE_12__.Trans, {
      i18nKey: "When both this AND Testnet Mode are enabled then the Bridge will use the DEV warden config.<br /><br />Only available for internal builds."
    })
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.InfoCircleIcon, {
    sx: {
      cursor: 'pointer'
    },
    size: "16"
  })), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.Switch, {
    size: "small",
    checked: isBridgeDevEnv,
    onChange: () => {
      setIsBridgeDevEnv(!isBridgeDevEnv);
    },
    sx: {
      ml: 'auto'
    }
  })) : undefined, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItem, {
    "data-testid": "show-tokens-without-balance-option"
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItemText, {
    primaryTypographyProps: {
      variant: 'body2'
    }
  }, t('Show Tokens Without Balance')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.Switch, {
    size: "small",
    checked: showTokensWithoutBalances,
    onChange: () => toggleShowTokensWithoutBalanceSetting()
  }))));
}

/***/ }),

/***/ "./src/components/settings/pages/ChangePassword.tsx":
/*!**********************************************************!*\
  !*** ./src/components/settings/pages/ChangePassword.tsx ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ChangePassword": () => (/* binding */ ChangePassword)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _SettingsHeader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../SettingsHeader */ "./src/components/settings/SettingsHeader.tsx");
/* harmony import */ var _src_contexts_WalletProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/contexts/WalletProvider */ "./src/contexts/WalletProvider.tsx");
/* harmony import */ var _src_components_common_PasswordStrength__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @src/components/common/PasswordStrength */ "./src/components/common/PasswordStrength.tsx");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _src_contexts_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @src/contexts/AnalyticsProvider */ "./src/contexts/AnalyticsProvider.tsx");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");







function ChangePassword({
  goBack,
  navigateTo,
  width
}) {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_5__.useTranslation)();
  const {
    capture
  } = (0,_src_contexts_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_4__.useAnalyticsContext)();
  const [oldPassword, setOldPassword] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('');
  const [newPassword, setNewPassword] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('');
  const [newPasswordStrength, setNewPasswordStrength] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);
  const [confirmPassword, setConfirmPassword] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('');
  const [serverResponse, setServerResponse] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('');
  const [serverError, setServerError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('');
  const SERVER_SUCCESS = t('Your password has been changed succesfully.');
  const SERVER_ERROR = t('Something went wrong.');
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    setServerError('');
  }, [oldPassword, newPassword, confirmPassword]);
  const {
    changeWalletPassword
  } = (0,_src_contexts_WalletProvider__WEBPACK_IMPORTED_MODULE_2__.useWalletContext)();
  const isFieldsFilled = !!(oldPassword && newPassword && confirmPassword);
  const error = (0,_src_components_common_PasswordStrength__WEBPACK_IMPORTED_MODULE_3__.getPasswordErrorMessage)(isFieldsFilled, newPassword, confirmPassword, newPasswordStrength);
  const canSubmit = !error && isFieldsFilled;
  const resetInputFields = () => {
    setOldPassword('');
    setNewPassword('');
    setConfirmPassword('');
  };
  const handleChangePassword = () => {
    changeWalletPassword(newPassword, oldPassword).then(res => {
      resetInputFields();
      setServerResponse(res ? SERVER_SUCCESS : SERVER_ERROR);
      capture('ChangePasswordSucceeded');
    }).catch(err => {
      setServerError(err);
      capture('ChangePasswordFailed');
    });
  };
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Stack, {
    sx: {
      width: `${width}`,
      height: '100%'
    }
  }, /*#__PURE__*/React.createElement(_SettingsHeader__WEBPACK_IMPORTED_MODULE_1__.SettingsHeader, {
    width: width,
    goBack: goBack,
    navigateTo: navigateTo,
    title: t('Change Password')
  }), !serverResponse ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Stack, {
    sx: {
      mx: 2,
      flexDirection: 'row',
      alignItems: 'center'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.AlertTriangleIcon, {
    sx: {
      color: 'warning.main',
      fontSize: 24
    }
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Typography, {
    variant: "body2",
    sx: {
      ml: 2
    }
  }, t('Avoid using a password that you use with other websites or that might be easy for someone to guess.'))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Stack, {
    sx: {
      pt: 3,
      px: 2
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.TextField, {
    "data-testid": "old-password-input",
    type: "password",
    label: t('Old Password'),
    onChange: e => {
      setOldPassword(e.target.value);
    },
    placeholder: t('Old password'),
    error: !!serverError,
    helperText: serverError,
    size: "small",
    fullWidth: true,
    sx: {
      mb: 4
    }
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Stack, {
    sx: {
      mb: 0.25
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.TextField, {
    "data-testid": "new-password-input",
    type: "password",
    label: t('Create New Password'),
    onChange: e => {
      setNewPassword(e.target.value);
    },
    placeholder: t('New Password'),
    error: !!error,
    size: "small",
    fullWidth: true
  })), /*#__PURE__*/React.createElement(_src_components_common_PasswordStrength__WEBPACK_IMPORTED_MODULE_3__.PasswordStrength, {
    password: newPassword,
    setPasswordStrength: setNewPasswordStrength
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Stack, {
    sx: {
      mt: 1.5
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.TextField, {
    "data-testid": "confirm-new-password-input",
    type: "password",
    label: t('Confirm New Password'),
    onChange: e => {
      setConfirmPassword(e.target.value);
    },
    placeholder: t('Confirm Password'),
    error: !!error,
    helperText: error,
    size: "small",
    fullWidth: true
  }))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Stack, {
    sx: {
      justifyContent: 'flex-end',
      flexGrow: '1',
      mt: 2,
      my: 2,
      mb: 3,
      px: 2
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Button, {
    "data-testid": "save-password-button",
    variant: "contained",
    color: "secondary",
    fullWidth: true,
    onClick: handleChangePassword,
    disabled: !canSubmit
  }, t('Save')))) : /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Stack, {
    sx: {
      alignItems: 'center',
      flexGrow: '1',
      p: 2
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Typography, {
    variant: "body2",
    sx: {
      textAlign: 'center'
    }
  }, serverResponse)));
}

/***/ }),

/***/ "./src/components/settings/pages/ConnectedSites.tsx":
/*!**********************************************************!*\
  !*** ./src/components/settings/pages/ConnectedSites.tsx ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConnectedSites": () => (/* binding */ ConnectedSites)
/* harmony export */ });
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _src_contexts_AccountsProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @src/contexts/AccountsProvider */ "./src/contexts/AccountsProvider.tsx");
/* harmony import */ var _src_contexts_PermissionsProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/contexts/PermissionsProvider */ "./src/contexts/PermissionsProvider.tsx");
/* harmony import */ var _SettingsHeader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../SettingsHeader */ "./src/components/settings/SettingsHeader.tsx");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/Trans.js");
/* harmony import */ var _src_contexts_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @src/contexts/AnalyticsProvider */ "./src/contexts/AnalyticsProvider.tsx");
/* harmony import */ var _src_utils_getAllAddressesForAccount__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @src/utils/getAllAddressesForAccount */ "./src/utils/getAllAddressesForAccount.ts");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");







const getAccountConnectedSites = ({
  list,
  account
}) => {
  if (!account) {
    return [];
  }
  return Object.values(list).filter(listItem => Object.keys(listItem?.accounts).some(address => (0,_src_utils_getAllAddressesForAccount__WEBPACK_IMPORTED_MODULE_4__["default"])(account).includes(address)));
};
function ConnectedSites({
  goBack,
  navigateTo,
  width
}) {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_5__.useTranslation)();
  const {
    revokeAddressPermisson,
    permissions
  } = (0,_src_contexts_PermissionsProvider__WEBPACK_IMPORTED_MODULE_1__.usePermissionContext)();
  const {
    capture
  } = (0,_src_contexts_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_3__.useAnalyticsContext)();
  const {
    accounts: {
      active: activeAccount
    }
  } = (0,_src_contexts_AccountsProvider__WEBPACK_IMPORTED_MODULE_0__.useAccountsContext)();
  const connectedSitesList = getAccountConnectedSites({
    list: permissions,
    account: activeAccount
  });
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Stack, {
    sx: {
      width: `${width}`,
      height: '100%'
    }
  }, /*#__PURE__*/React.createElement(_SettingsHeader__WEBPACK_IMPORTED_MODULE_2__.SettingsHeader, {
    width: width,
    goBack: goBack,
    navigateTo: navigateTo,
    title: t('Connected Sites')
  }), !connectedSitesList.length && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Stack, {
    sx: {
      mt: 6
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.EmptySitesIcon, {
    sx: {
      justifyContent: 'center',
      fontSize: '64px'
    }
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Typography, {
    variant: "h4",
    sx: {
      textAlign: 'center',
      mt: 3,
      mb: 1
    }
  }, t('No Connected Sites')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Typography, {
    variant: "body2",
    sx: {
      textAlign: 'center',
      color: 'text.secondary'
    }
  }, /*#__PURE__*/React.createElement(react_i18next__WEBPACK_IMPORTED_MODULE_7__.Trans, {
    i18nKey: "Connect your wallet via the <br /> \"Connect Wallet\" button on the site"
  }))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Scrollbars, {
    style: {
      flexGrow: 1,
      maxHeight: 'unset',
      height: '100%'
    }
  }, !!connectedSitesList.length && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.List, null, connectedSitesList.map((site, index) => {
    return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.ListItem, {
      sx: {
        justifyContent: 'space-between',
        py: 1,
        pl: 2,
        pr: 5,
        m: 0,
        '&:hover': {
          borderRadius: 0
        }
      },
      key: site.domain,
      "data-testid": `connected-site-${index}`,
      secondaryAction: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.IconButton, {
        edge: "end",
        "data-testid": `connected-site-${index}-trash`,
        onClick: () => {
          if (activeAccount) {
            capture('ConnectedSiteRemoved');
            revokeAddressPermisson(site.domain, (0,_src_utils_getAllAddressesForAccount__WEBPACK_IMPORTED_MODULE_4__["default"])(activeAccount));
          }
        }
      }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.XIcon, {
        size: 24
      }))
    }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.ListItemIcon, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Avatar, {
      sx: {
        width: 32,
        height: 32
      }
    }, site.domain.substring(0, 2).toUpperCase())), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Tooltip, {
      title: site.domain,
      wrapWithSpan: false
    }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.ListItemText, {
      sx: {
        ml: 2,
        my: 0
      },
      primaryTypographyProps: {
        variant: 'body2',
        sx: {
          maxWidth: 1,
          textOverflow: 'ellipsis',
          overflow: 'hidden'
        }
      }
    }, site.domain)));
  }))));
}

/***/ }),

/***/ "./src/components/settings/pages/ContactList.tsx":
/*!*******************************************************!*\
  !*** ./src/components/settings/pages/ContactList.tsx ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ContactList": () => (/* binding */ ContactList)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models */ "./src/components/settings/models.ts");
/* harmony import */ var _SettingsHeader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../SettingsHeader */ "./src/components/settings/SettingsHeader.tsx");
/* harmony import */ var _src_contexts_ContactsProvider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @src/contexts/ContactsProvider */ "./src/contexts/ContactsProvider.tsx");
/* harmony import */ var _components_ContactListItem__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../components/ContactListItem */ "./src/components/settings/components/ContactListItem.tsx");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _src_contexts_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @src/contexts/AnalyticsProvider */ "./src/contexts/AnalyticsProvider.tsx");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");








function ContactList({
  goBack,
  navigateTo,
  width
}) {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_6__.useTranslation)();
  const {
    contacts
  } = (0,_src_contexts_ContactsProvider__WEBPACK_IMPORTED_MODULE_3__.useContactsContext)();
  const {
    capture
  } = (0,_src_contexts_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_5__.useAnalyticsContext)();
  const [searchTerm, setSearchTerm] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('');
  const filteredContacts = contacts.sort((a, b) => a.name > b.name ? 1 : b.name > a.name ? -1 : 0) // sort alphabetically
  .filter(c => !searchTerm || c.address.toLowerCase().includes(searchTerm) || c.name.toLowerCase().includes(searchTerm));
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Stack, {
    width: width,
    sx: {
      height: '100%'
    }
  }, /*#__PURE__*/React.createElement(_SettingsHeader__WEBPACK_IMPORTED_MODULE_2__.SettingsHeader, {
    width: width,
    goBack: goBack,
    navigateTo: navigateTo,
    title: t('Address Book'),
    action: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Tooltip, {
      title: t('New Contact')
    }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.IconButton, {
      "data-testid": "add-contact-plus-button",
      onClick: () => {
        capture('AddContactClicked');
        navigateTo(_models__WEBPACK_IMPORTED_MODULE_1__.SettingsPages.ADD_CONTACT);
      }
    }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.PlusIcon, {
      size: "24"
    })))
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Stack, {
    sx: {
      p: 2
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.SearchBar, {
    "data-testid": "contact-search-input",
    onChange: e => setSearchTerm(e.target.value),
    autoFocus: true
  })), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Scrollbars, null, filteredContacts.length === 0 && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Stack, {
    sx: {
      alignContent: 'center',
      mt: 12
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Typography, {
    variant: "h5",
    sx: {
      textAlign: 'center',
      mb: 1
    }
  }, t('No Contacts Saved')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Typography, {
    variant: "body2",
    sx: {
      textAlign: 'center',
      color: 'text.secondary'
    }
  }, t('Hit the + to add a new contact'))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.List, null, filteredContacts.map((contact, index) => /*#__PURE__*/React.createElement(_components_ContactListItem__WEBPACK_IMPORTED_MODULE_4__.ContactListItem, {
    key: contact.id,
    contact: contact,
    navigateTo: navigateTo,
    index: index,
    length: filteredContacts.length
  })))));
}

/***/ }),

/***/ "./src/components/settings/pages/Currencies.tsx":
/*!******************************************************!*\
  !*** ./src/components/settings/pages/Currencies.tsx ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Currencies": () => (/* binding */ Currencies),
/* harmony export */   "getCurrencyNames": () => (/* binding */ getCurrencyNames)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _SettingsHeader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../SettingsHeader */ "./src/components/settings/SettingsHeader.tsx");
/* harmony import */ var _src_contexts_SettingsProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/contexts/SettingsProvider */ "./src/contexts/SettingsProvider.tsx");
/* harmony import */ var _src_background_services_settings_models__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @src/background/services/settings/models */ "./src/background/services/settings/models.ts");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var _components_StyledListItemButton__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../components/StyledListItemButton */ "./src/components/settings/components/StyledListItemButton.tsx");
/* harmony import */ var _src_contexts_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @src/contexts/AnalyticsProvider */ "./src/contexts/AnalyticsProvider.tsx");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");









// TODO: bring back the commented currencies when the glacier supports them
const getCurrencyNames = t => {
  const currencyNames = {
    [_src_background_services_settings_models__WEBPACK_IMPORTED_MODULE_3__.CURRENCIES.USD]: t('United States Dollar'),
    [_src_background_services_settings_models__WEBPACK_IMPORTED_MODULE_3__.CURRENCIES.EUR]: t('Euro'),
    [_src_background_services_settings_models__WEBPACK_IMPORTED_MODULE_3__.CURRENCIES.GBP]: t('Pound Sterling'),
    [_src_background_services_settings_models__WEBPACK_IMPORTED_MODULE_3__.CURRENCIES.AUD]: t('Australian Dollar'),
    [_src_background_services_settings_models__WEBPACK_IMPORTED_MODULE_3__.CURRENCIES.CAD]: t('Canadian Dollar'),
    [_src_background_services_settings_models__WEBPACK_IMPORTED_MODULE_3__.CURRENCIES.CHF]: t('Swiss Franc'),
    [_src_background_services_settings_models__WEBPACK_IMPORTED_MODULE_3__.CURRENCIES.HKD]: t('Hong Kong Dollar')
    // { name: 'Japanese Yen', symbol: 'JPY' },
    // { name: 'Chinese Renminbi', symbol: 'CNH' },
    // { name: 'New Zealand Dollar', symbol: 'NZD' },
  };

  return currencyNames;
};
function Currencies({
  goBack,
  navigateTo,
  width
}) {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_6__.useTranslation)();
  const {
    updateCurrencySetting,
    currency
  } = (0,_src_contexts_SettingsProvider__WEBPACK_IMPORTED_MODULE_2__.useSettingsContext)();
  const {
    capture
  } = (0,_src_contexts_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_5__.useAnalyticsContext)();
  const [searchTerm, setSearchTerm] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('');
  const currencyNames = getCurrencyNames(t);
  const filteredCurrencies = Object.keys(_src_background_services_settings_models__WEBPACK_IMPORTED_MODULE_3__.CURRENCIES).map(symbol => ({
    symbol,
    name: currencyNames[symbol]
  })).filter(c => !searchTerm || c.symbol.toLowerCase().includes(searchTerm.toLowerCase()) || c.name.toLowerCase().includes(searchTerm.toLowerCase()));
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Stack, {
    sx: {
      width: `${width}`,
      height: '100%'
    }
  }, /*#__PURE__*/React.createElement(_SettingsHeader__WEBPACK_IMPORTED_MODULE_1__.SettingsHeader, {
    width: width,
    goBack: goBack,
    navigateTo: navigateTo,
    title: t('Currency')
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Stack, {
    sx: {
      pt: 1,
      px: 2,
      pb: 3
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.SearchBar, {
    "data-testid": "currency-search-input",
    onChange: e => setSearchTerm(e.target.value),
    autoFocus: true
  })), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Scrollbars, {
    style: {
      flexGrow: 1,
      maxHeight: 'unset',
      height: '100%'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.List, {
    sx: {
      py: 0
    }
  }, filteredCurrencies.map(c => /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.ListItem, {
    key: c.symbol,
    sx: {
      p: 0
    }
  }, /*#__PURE__*/React.createElement(_components_StyledListItemButton__WEBPACK_IMPORTED_MODULE_4__.StyledListButton, {
    "data-testid": `currency-menu-item-${c.symbol}`.toLowerCase(),
    selected: currency === c.symbol,
    onClick: () => {
      updateCurrencySetting(c.symbol);
      capture('CurrencySettingChanged', {
        currency: c.symbol
      });
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Typography, {
    variant: "body2"
  }, currencyNames[c.symbol], " (", c.symbol, ")"), currency === c.symbol && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.CheckIcon, {
    size: 16
  })))))));
}

/***/ }),

/***/ "./src/components/settings/pages/ExportRecoveryPhrase.tsx":
/*!****************************************************************!*\
  !*** ./src/components/settings/pages/ExportRecoveryPhrase.tsx ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ExportRecoveryPhrase": () => (/* binding */ ExportRecoveryPhrase)
/* harmony export */ });
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@mui/material/styles/styled.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _src_hooks_useSeedlessMnemonicExport__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/hooks/useSeedlessMnemonicExport */ "./src/hooks/useSeedlessMnemonicExport.ts");
/* harmony import */ var _src_contexts_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/contexts/AnalyticsProvider */ "./src/contexts/AnalyticsProvider.tsx");
/* harmony import */ var _src_background_services_seedless_seedlessAnalytics__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @src/background/services/seedless/seedlessAnalytics */ "./src/background/services/seedless/seedlessAnalytics.ts");
/* harmony import */ var _SettingsHeader__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../SettingsHeader */ "./src/components/settings/SettingsHeader.tsx");
/* harmony import */ var _src_utils_extensionUtils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @src/utils/extensionUtils */ "./src/utils/extensionUtils.ts");
/* harmony import */ var _src_components_common_seedless_components_ExportPending__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @src/components/common/seedless/components/ExportPending */ "./src/components/common/seedless/components/ExportPending.tsx");
/* harmony import */ var _src_components_common_seedless_components_ExportError__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @src/components/common/seedless/components/ExportError */ "./src/components/common/seedless/components/ExportError.tsx");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");










const ListItemBadge = (0,_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_8__["default"])(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.Chip)`
  font-size: 16px;
  padding: 2px 4px;
  width: 24px;
  height: 24px;
`;
function ExportRecoveryPhrase({
  goBack,
  navigateTo,
  width
}) {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_10__.useTranslation)();
  const {
    capture
  } = (0,_src_contexts_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_2__.useAnalyticsContext)();
  const {
    error,
    state,
    progress,
    timeLeft,
    cancelExport
  } = (0,_src_hooks_useSeedlessMnemonicExport__WEBPACK_IMPORTED_MODULE_1__.useSeedlessMnemonicExport)();
  const [isPopupOpen, setIsPopupOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const handleNextClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async () => {
    const popup = await (0,_src_utils_extensionUtils__WEBPACK_IMPORTED_MODULE_5__.openExtensionNewWindow)('seedless-export');
    if (popup.state) {
      setIsPopupOpen(true);
      capture(_src_background_services_seedless_seedlessAnalytics__WEBPACK_IMPORTED_MODULE_3__.SeedlessExportAnalytics.PopupOpened);
      const subscription = popup.removed.subscribe(() => {
        setIsPopupOpen(false);
      });
      return () => subscription.unsubscribe();
    }
  }, [capture]);
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.Stack, {
    sx: {
      width: 1,
      height: 1
    }
  }, /*#__PURE__*/React.createElement(_SettingsHeader__WEBPACK_IMPORTED_MODULE_4__.SettingsHeader, {
    width: width,
    goBack: goBack,
    navigateTo: navigateTo,
    title: t('Recovery Phrase')
  }), (state === _src_hooks_useSeedlessMnemonicExport__WEBPACK_IMPORTED_MODULE_1__.ExportState.Pending || state === _src_hooks_useSeedlessMnemonicExport__WEBPACK_IMPORTED_MODULE_1__.ExportState.Cancelling) && /*#__PURE__*/React.createElement(_src_components_common_seedless_components_ExportPending__WEBPACK_IMPORTED_MODULE_6__.ExportPending, {
    progress: progress,
    timeLeft: timeLeft,
    isCancelling: state === _src_hooks_useSeedlessMnemonicExport__WEBPACK_IMPORTED_MODULE_1__.ExportState.Cancelling,
    cancelExport: cancelExport
  }), state === _src_hooks_useSeedlessMnemonicExport__WEBPACK_IMPORTED_MODULE_1__.ExportState.Error && /*#__PURE__*/React.createElement(_src_components_common_seedless_components_ExportError__WEBPACK_IMPORTED_MODULE_7__.ExportError, {
    error: error,
    onRetry: handleNextClick,
    onClose: goBack
  }), state === _src_hooks_useSeedlessMnemonicExport__WEBPACK_IMPORTED_MODULE_1__.ExportState.ReadyToExport && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.Stack, {
    sx: {
      width: 1,
      px: 2,
      mt: -2,
      gap: 1,
      justifyContent: 'space-between',
      flexGrow: 1,
      pb: 3
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.Stack, {
    sx: {
      gap: 2,
      justifyContent: 'center',
      alignItems: 'center',
      textAlign: 'center',
      flexGrow: 1
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.CheckCircleIcon, {
    sx: {
      color: 'success.main'
    },
    size: 80
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.Typography, {
    variant: "h5"
  }, t('Your recovery phrase is ready')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.Typography, {
    variant: "body2"
  }, t('Click below to decrypt it.'))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.Button, {
    color: "primary",
    size: "large",
    fullWidth: true,
    disabled: state !== _src_hooks_useSeedlessMnemonicExport__WEBPACK_IMPORTED_MODULE_1__.ExportState.ReadyToExport,
    onClick: handleNextClick,
    "data-testid": "seedless-export-recovery-phrase-start-decryption-flow"
  }, t('Decrypt Recovery Phrase'))), state === _src_hooks_useSeedlessMnemonicExport__WEBPACK_IMPORTED_MODULE_1__.ExportState.Loading && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.Stack, {
    sx: {
      gap: 1,
      px: 2,
      mt: 2
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.Skeleton, {
    variant: "text"
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.Skeleton, {
    variant: "text"
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.Skeleton, {
    variant: "text"
  })), state === _src_hooks_useSeedlessMnemonicExport__WEBPACK_IMPORTED_MODULE_1__.ExportState.NotInitiated && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.List, {
    sx: {
      listStyle: 'decimal'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.ListItem, {
    sx: {
      gap: 1.5
    }
  }, /*#__PURE__*/React.createElement(ListItemBadge, {
    label: "1."
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.ListItemText, {
    primary: t('Login with your social account')
  })), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.ListItem, {
    sx: {
      gap: 1.5
    }
  }, /*#__PURE__*/React.createElement(ListItemBadge, {
    label: "2."
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.ListItemText, {
    primary: t('Verify recovery method')
  })), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.ListItem, {
    sx: {
      gap: 1.5
    }
  }, /*#__PURE__*/React.createElement(ListItemBadge, {
    label: "3."
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.ListItemText, {
    primary: t('Wait 2 days to retrieve phrase')
  }))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.Divider, {
    sx: {
      mt: 2,
      mb: 2
    }
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.Stack, {
    sx: {
      px: 2,
      pb: 3,
      flexGrow: 1,
      justifyContent: 'space-between'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.Alert, {
    severity: "warning",
    icon: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.InfoCircleIcon, null)
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.AlertTitle, null, t('2 Day Waiting Period')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.AlertContent, {
    sx: {
      lineHeight: 1.66
    }
  }, t('For your safety there is a 2 day waiting period to retrieve a phrase.'))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__.Button, {
    color: "primary",
    onClick: handleNextClick,
    fullWidth: true,
    size: "large",
    disabled: isPopupOpen,
    isLoading: isPopupOpen,
    "data-testid": "seedless-export-recovery-phrase-start-export-flow"
  }, t('Next')))));
}

/***/ }),

/***/ "./src/components/settings/pages/Feedback.tsx":
/*!****************************************************!*\
  !*** ./src/components/settings/pages/Feedback.tsx ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Feedback": () => (/* binding */ Feedback)
/* harmony export */ });
/* harmony import */ var _SettingsHeader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../SettingsHeader */ "./src/components/settings/SettingsHeader.tsx");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _src_contexts_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/contexts/AnalyticsProvider */ "./src/contexts/AnalyticsProvider.tsx");
/* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! webextension-polyfill */ "./node_modules/webextension-polyfill/dist/browser-polyfill.js");
/* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(webextension_polyfill__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");






const osMap = {
  mac: 'macOS',
  win: 'Windows',
  linux: 'Linux'
};
function Feedback({
  goBack,
  navigateTo,
  width
}) {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_4__.useTranslation)();
  const {
    capture
  } = (0,_src_contexts_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_1__.useAnalyticsContext)();
  const extensionVersion = webextension_polyfill__WEBPACK_IMPORTED_MODULE_2___default().runtime.getManifest().version;
  const [os, setOs] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)('');
  (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {
    webextension_polyfill__WEBPACK_IMPORTED_MODULE_2___default().runtime.getPlatformInfo().then(res => setOs(osMap[res.os]));
  }, []);
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__.Stack, {
    sx: {
      width,
      height: '100%'
    }
  }, /*#__PURE__*/React.createElement(_SettingsHeader__WEBPACK_IMPORTED_MODULE_0__.SettingsHeader, {
    width: width,
    goBack: goBack,
    navigateTo: navigateTo,
    title: t('Send Feedback')
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__.List, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__.ListItem, {
    sx: {
      p: 0
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__.ListItemButton, {
    sx: {
      py: 0.5,
      px: 2,
      m: 0,
      '&:hover': {
        borderRadius: 0
      }
    },
    onClick: async () => {
      try {
        await capture('ReportBugClicked');
      } catch (err) {
        console.error(err);
      }
      window.open(`https://docs.google.com/forms/d/e/1FAIpQLSdUQiVnJoqQ1g_6XTREpkSB5vxKKK8ba5DRjhzQf1XVeET8Rw/viewform?usp=pp_url&entry.2070152111=Core%20browser%20extension&entry.903657115=${extensionVersion}&entry.1148340936=${os}`, '_blank', 'noreferrer');
    },
    "data-testid": "report-bug-link"
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__.ListItemText, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__.Typography, {
    variant: "body2"
  }, t('Report a Bug'))))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__.ListItem, {
    sx: {
      p: 0
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__.ListItemButton, {
    sx: {
      py: 0.5,
      px: 2,
      m: 0,
      '&:hover': {
        borderRadius: 0
      }
    },
    onClick: async () => {
      try {
        await capture('ProductFeedbackRequestClicked');
      } catch (err) {
        console.error(err);
      }
      window.open('https://docs.google.com/forms/d/e/1FAIpQLSdQ9nOPPGjVPmrLXh3B9NR1NuXXUiW2fKW1ylrXpiW_vZB_hw/viewform?entry.2070152111=Core%20browser%20extension', '_blank', 'noreferrer');
    },
    "data-testid": "product-feedback-request-link"
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__.ListItemText, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__.Typography, {
    variant: "body2"
  }, t('Product Feedback & Feature Requests')))))));
}

/***/ }),

/***/ "./src/components/settings/pages/Language.tsx":
/*!****************************************************!*\
  !*** ./src/components/settings/pages/Language.tsx ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Language": () => (/* binding */ Language)
/* harmony export */ });
/* harmony import */ var _SettingsHeader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../SettingsHeader */ "./src/components/settings/SettingsHeader.tsx");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var _src_hooks_useLanguages__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/hooks/useLanguages */ "./src/hooks/useLanguages.ts");
/* harmony import */ var _src_contexts_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/contexts/AnalyticsProvider */ "./src/contexts/AnalyticsProvider.tsx");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _components_StyledListItemButton__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../components/StyledListItemButton */ "./src/components/settings/components/StyledListItemButton.tsx");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");






function Language({
  goBack,
  navigateTo,
  width
}) {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_4__.useTranslation)();
  const {
    availableLanguages,
    currentLanguage,
    changeLanguage
  } = (0,_src_hooks_useLanguages__WEBPACK_IMPORTED_MODULE_1__.useLanguage)();
  const {
    capture
  } = (0,_src_contexts_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_2__.useAnalyticsContext)();
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__.Stack, {
    sx: {
      width: `${width}`,
      height: '100%'
    }
  }, /*#__PURE__*/React.createElement(_SettingsHeader__WEBPACK_IMPORTED_MODULE_0__.SettingsHeader, {
    width: width,
    goBack: goBack,
    navigateTo: navigateTo,
    title: t('Language')
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__.Scrollbars, {
    style: {
      flexGrow: 1,
      maxHeight: 'unset',
      height: '100%'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__.List, {
    sx: {
      py: 0
    }
  }, availableLanguages.map(lang => /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__.ListItem, {
    key: lang.code,
    sx: {
      p: 0
    }
  }, /*#__PURE__*/React.createElement(_components_StyledListItemButton__WEBPACK_IMPORTED_MODULE_3__.StyledListButton, {
    "data-testid": `language-menu-item-${lang.code}`,
    selected: lang.code === currentLanguage?.code,
    onClick: () => {
      changeLanguage(lang.code);
      capture('AppLanguageChanged', {
        language: lang.code
      });
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__.Typography, {
    variant: "body2"
  }, lang.name, " (", lang.originalName, ")"), lang.code === currentLanguage?.code && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_5__.CheckIcon, {
    size: 16
  })))))));
}

/***/ }),

/***/ "./src/components/settings/pages/Ledger.tsx":
/*!**************************************************!*\
  !*** ./src/components/settings/pages/Ledger.tsx ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Ledger": () => (/* binding */ Ledger)
/* harmony export */ });
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@mui/material/styles/styled.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _SettingsHeader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../SettingsHeader */ "./src/components/settings/SettingsHeader.tsx");
/* harmony import */ var _src_contexts_LedgerProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/contexts/LedgerProvider */ "./src/contexts/LedgerProvider.tsx");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/Trans.js");
/* harmony import */ var _common_ConnectionIndicatorK2__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/ConnectionIndicatorK2 */ "./src/components/common/ConnectionIndicatorK2.tsx");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");





const StyledListNumber = (0,_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__["default"])(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.Box)`
  background-color: ${({
  theme
}) => theme.palette.grey[800]};
  height: 24px;
  min-width: 24px;
  border-radius: 50%;
  justify-content: center;
  align-items: center;
  margin-right: 12px;
  padding-left: 6px; // optically center the number because of the period
`;
const InstructionLink = (0,_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__["default"])(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.Typography)`
  font-size: 14px;
  line-height: 17px;
  font-weight: 600;
  cursor: pointer;
  color: ${({
  theme
}) => theme.palette.secondary.main};
`;
function Ledger({
  goBack,
  navigateTo,
  width
}) {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_5__.useTranslation)();
  const {
    hasLedgerTransport,
    avaxAppVersion
  } = (0,_src_contexts_LedgerProvider__WEBPACK_IMPORTED_MODULE_1__.useLedgerContext)();
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.Stack, {
    width: width,
    sx: {
      height: '100%',
      backgroundColor: 'background.paper'
    }
  }, /*#__PURE__*/React.createElement(_SettingsHeader__WEBPACK_IMPORTED_MODULE_0__.SettingsHeader, {
    width: width,
    goBack: goBack,
    navigateTo: navigateTo,
    title: t('Ledger')
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.Scrollbars, {
    style: {
      flexGrow: 1,
      maxHeight: 'unset',
      height: '100%'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.List, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.ListItem, {
    sx: {
      justifyContent: 'space-between'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.Typography, {
    variant: "body2"
  }, t('Status')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.Stack, {
    sx: {
      flexDirection: 'row',
      alignItems: 'center'
    }
  }, /*#__PURE__*/React.createElement(_common_ConnectionIndicatorK2__WEBPACK_IMPORTED_MODULE_2__.ConnectionIndicatorK2, {
    connected: hasLedgerTransport,
    size: 12
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.Typography, {
    variant: "body2",
    sx: {
      ml: 1
    }
  }, hasLedgerTransport ? t('Connected') : t('Disconnected')))), hasLedgerTransport && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.ListItem, {
    sx: {
      justifyContent: 'space-between'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.Typography, {
    variant: "body2"
  }, t('Ledger Version')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.Typography, {
    variant: "body2"
  }, avaxAppVersion))), !hasLedgerTransport && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.Stack, {
    sx: {
      width: '100%',
      py: 0,
      px: 2
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.Typography, {
    variant: "body2"
  }, t('To Connect:')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.List, {
    sx: {
      pt: 1.5,
      mb: 1
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.ListItem, {
    sx: {
      alignItems: 'flex-start',
      px: 0
    }
  }, /*#__PURE__*/React.createElement(StyledListNumber, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.Typography, {
    variant: "body1",
    sx: {
      fontWeight: 'fontWeightSemibold'
    }
  }, t('1.'))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.ListItemText, {
    sx: {
      m: 0
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.Typography, {
    variant: "body1"
  }, t('Connect the Ledger device to your computer.')))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.ListItem, {
    sx: {
      alignItems: 'flex-start',
      px: 0
    }
  }, /*#__PURE__*/React.createElement(StyledListNumber, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.Typography, {
    variant: "body1",
    sx: {
      fontWeight: 'fontWeightSemibold'
    }
  }, t('2.'))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.ListItemText, {
    sx: {
      m: 0
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.Typography, {
    variant: "body1"
  }, t('Enter your PIN and access your device.')))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.ListItem, {
    sx: {
      alignItems: 'flex-start',
      px: 0
    }
  }, /*#__PURE__*/React.createElement(StyledListNumber, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.Typography, {
    variant: "body1",
    sx: {
      fontWeight: 'fontWeightSemibold'
    }
  }, t('3.'))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.ListItemText, {
    sx: {
      m: 0
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.Typography, {
    variant: "body1"
  }, /*#__PURE__*/React.createElement(react_i18next__WEBPACK_IMPORTED_MODULE_6__.Trans, {
    i18nKey: "Ensure you have installed the <strong>Avalanche App v{{REQUIRED_LEDGER_VERSION}}</strong> (or above) and open it on your device.",
    values: {
      REQUIRED_LEDGER_VERSION: _src_contexts_LedgerProvider__WEBPACK_IMPORTED_MODULE_1__.REQUIRED_LEDGER_VERSION
    }
  }))))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.Divider, null), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.Typography, {
    variant: "body2",
    sx: {
      mt: 3,
      mb: 2
    }
  }, t('If you do not have the Avalanche app on your Ledger, please add it through the Ledger Live app manager.')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.Typography, {
    variant: "body2"
  }, /*#__PURE__*/React.createElement(react_i18next__WEBPACK_IMPORTED_MODULE_6__.Trans, {
    i18nKey: "More instructions can be found <instructionLink>here</instructionLink>.",
    components: {
      instructionLink: /*#__PURE__*/React.createElement(InstructionLink, {
        as: "a",
        target: "_blank",
        href: "https://support.ledger.com/hc/en-us/articles/4404389606417-Download-and-install-Ledger-Live?docs=true",
        rel: "noreferrer"
      })
    }
  })))));
}

/***/ }),

/***/ "./src/components/settings/pages/Legal.tsx":
/*!*************************************************!*\
  !*** ./src/components/settings/pages/Legal.tsx ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Legal": () => (/* binding */ Legal)
/* harmony export */ });
/* harmony import */ var _SettingsHeader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../SettingsHeader */ "./src/components/settings/SettingsHeader.tsx");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _src_contexts_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/contexts/AnalyticsProvider */ "./src/contexts/AnalyticsProvider.tsx");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");




function Legal({
  goBack,
  navigateTo,
  width
}) {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_2__.useTranslation)();
  const {
    capture
  } = (0,_src_contexts_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_1__.useAnalyticsContext)();
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Stack, {
    sx: {
      width: `${width}`,
      height: '100%'
    }
  }, /*#__PURE__*/React.createElement(_SettingsHeader__WEBPACK_IMPORTED_MODULE_0__.SettingsHeader, {
    width: width,
    goBack: goBack,
    navigateTo: navigateTo,
    title: t('Legal')
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.List, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.ListItem, {
    sx: {
      p: 0
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.ListItemButton, {
    sx: {
      py: 0.5,
      px: 2,
      m: 0,
      '&:hover': {
        borderRadius: 0
      }
    },
    onClick: async () => {
      try {
        await capture('TermsOfUseClicked');
      } catch (err) {
        console.error(err);
      }
      window.open(`https://core.app/terms/core`, '_blank', 'noreferrer');
    },
    "data-testid": "terms-of-use-link"
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.ListItemText, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Typography, {
    variant: "body2"
  }, t('Terms of Use'))))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.ListItem, {
    sx: {
      p: 0
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.ListItemButton, {
    sx: {
      py: 0.5,
      px: 2,
      m: 0,
      '&:hover': {
        borderRadius: 0
      }
    },
    onClick: async () => {
      try {
        await capture('PrivacyPolicyClicked');
      } catch (err) {
        console.error(err);
      }
      window.open(`https://www.avalabs.org/privacy-policy`, '_blank', 'noreferrer');
    },
    "data-testid": "privacy-policy-link"
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.ListItemText, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Typography, {
    variant: "body2"
  }, t('Privacy Policy')))))));
}

/***/ }),

/***/ "./src/components/settings/pages/MainPage.tsx":
/*!****************************************************!*\
  !*** ./src/components/settings/pages/MainPage.tsx ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MainPage": () => (/* binding */ MainPage)
/* harmony export */ });
/* harmony import */ var _src_contexts_SettingsProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @src/contexts/SettingsProvider */ "./src/contexts/SettingsProvider.tsx");
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models */ "./src/components/settings/models.ts");
/* harmony import */ var _src_contexts_WalletProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/contexts/WalletProvider */ "./src/contexts/WalletProvider.tsx");
/* harmony import */ var _src_components_icons_BrandName__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @src/components/icons/BrandName */ "./src/components/icons/BrandName.tsx");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var _src_hooks_useLanguages__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @src/hooks/useLanguages */ "./src/hooks/useLanguages.ts");
/* harmony import */ var _src_contexts_AccountsProvider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @src/contexts/AccountsProvider */ "./src/contexts/AccountsProvider.tsx");
/* harmony import */ var _src_utils_getCoreWebUrl__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @src/utils/getCoreWebUrl */ "./src/utils/getCoreWebUrl.ts");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! webextension-polyfill */ "./node_modules/webextension-polyfill/dist/browser-polyfill.js");
/* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(webextension_polyfill__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _src_contexts_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @src/contexts/AnalyticsProvider */ "./src/contexts/AnalyticsProvider.tsx");
/* harmony import */ var _src_contexts_SeedlessMfaManagementProvider__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @src/contexts/SeedlessMfaManagementProvider */ "./src/contexts/SeedlessMfaManagementProvider.tsx");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");












function MainPage({
  navigateTo,
  width,
  onClose,
  showNotificationDotOn = []
}) {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_10__.useTranslation)();
  const {
    isLedgerWallet
  } = (0,_src_contexts_WalletProvider__WEBPACK_IMPORTED_MODULE_2__.useWalletContext)();
  const {
    lockWallet
  } = (0,_src_contexts_SettingsProvider__WEBPACK_IMPORTED_MODULE_0__.useSettingsContext)();
  const {
    currentLanguage
  } = (0,_src_hooks_useLanguages__WEBPACK_IMPORTED_MODULE_4__.useLanguage)();
  const {
    accounts: {
      active: activeAccount
    }
  } = (0,_src_contexts_AccountsProvider__WEBPACK_IMPORTED_MODULE_5__.useAccountsContext)();
  const {
    capture
  } = (0,_src_contexts_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_8__.useAnalyticsContext)();
  const {
    isMfaSetupPromptVisible
  } = (0,_src_contexts_SeedlessMfaManagementProvider__WEBPACK_IMPORTED_MODULE_9__.useSeedlessMfaManager)();
  const extensionVersion = webextension_polyfill__WEBPACK_IMPORTED_MODULE_7___default().runtime.getManifest().version;
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.Stack, {
    sx: {
      width: `${width}`,
      height: '100%',
      pt: 2,
      px: 0,
      py: 3,
      backgroundColor: 'background.paper'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.Stack, {
    sx: {
      mt: 0,
      mx: 0,
      mb: 2,
      py: 0,
      px: 2,
      flexDirection: 'row',
      height: '53px',
      justifyContent: 'space-between',
      alignContent: 'center'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.Stack, {
    sx: {
      flexDirection: 'row',
      alignItems: 'center'
    }
  }, /*#__PURE__*/React.createElement(_src_components_icons_BrandName__WEBPACK_IMPORTED_MODULE_3__.BrandName, {
    width: 90
  })), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.IconButton, {
    "data-testid": "close-settings-menu-button",
    onClick: onClose,
    disableRipple: true
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.XIcon, {
    size: 24
  }))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.List, null, isMfaSetupPromptVisible && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItem, {
    sx: {
      p: 0
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItemButton, {
    sx: {
      justifyContent: 'space-between',
      py: 1,
      px: 2,
      m: 0,
      '&:hover': {
        borderRadius: 0
      }
    },
    "data-testid": "seedless-mfa-prompt-button",
    onClick: () => navigateTo(_models__WEBPACK_IMPORTED_MODULE_1__.SettingsPages.RECOVERY_METHODS)
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItemIcon, {
    sx: {
      justifyContent: 'center',
      minWidth: 12
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.Box, {
    sx: {
      width: 12,
      height: 12,
      borderRadius: '50%',
      backgroundColor: 'secondary.main'
    }
  })), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItemText, {
    sx: {
      ml: 1,
      my: 0
    },
    primaryTypographyProps: {
      variant: 'body2'
    }
  }, t('Finish Setting Up Recovery Methods')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItemIcon, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ChevronRightIcon, {
    size: 24
  })))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.Divider, null)), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItem, {
    sx: {
      p: 0
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItemButton, {
    sx: {
      justifyContent: 'space-between',
      py: 1,
      px: 2,
      m: 0,
      '&:hover': {
        borderRadius: 0
      }
    },
    "data-testid": "core-web-link-button",
    onClick: () => {
      window.open((0,_src_utils_getCoreWebUrl__WEBPACK_IMPORTED_MODULE_6__.getCoreWebUrl)(activeAccount?.addressC), '_blank', 'noreferrer');
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItemIcon, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ComputerIcon, {
    size: 24
  })), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItemText, {
    sx: {
      ml: 1,
      my: 0
    },
    primaryTypographyProps: {
      variant: 'body2'
    }
  }, t('Core Web')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItemIcon, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.Chip, {
    label: t('New!'),
    size: "small",
    sx: {
      backgroundColor: 'secondary.dark',
      fontSize: '14px'
    }
  })))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItem, {
    sx: {
      p: 0
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItemButton, {
    sx: {
      justifyContent: 'space-between',
      py: 1,
      px: 2,
      m: 0,
      '&:hover': {
        borderRadius: 0
      }
    },
    "data-testid": "address-book-option",
    onClick: () => navigateTo(_models__WEBPACK_IMPORTED_MODULE_1__.SettingsPages.CONTACT_LIST)
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItemIcon, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.UserIcon, {
    size: 24
  })), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItemText, {
    sx: {
      ml: 1,
      my: 0
    },
    primaryTypographyProps: {
      variant: 'body2'
    }
  }, t('Address Book')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItemIcon, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ChevronRightIcon, {
    size: 24
  })))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItem, {
    sx: {
      p: 0
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItemButton, {
    sx: {
      justifyContent: 'space-between',
      py: 1,
      px: 2,
      m: 0,
      '&:hover': {
        borderRadius: 0
      }
    },
    "data-testid": "currency-option",
    onClick: () => {
      capture('CurrencySettingClicked');
      navigateTo(_models__WEBPACK_IMPORTED_MODULE_1__.SettingsPages.CURRENCIES);
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItemIcon, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.CurrencyIcon, {
    size: 24
  })), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItemText, {
    sx: {
      ml: 1,
      my: 0
    },
    primaryTypographyProps: {
      variant: 'body2'
    }
  }, t('Currency')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItemIcon, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ChevronRightIcon, {
    size: 24
  })))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItem, {
    sx: {
      p: 0
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItemButton, {
    sx: {
      justifyContent: 'space-between',
      py: 1,
      px: 2,
      m: 0,
      '&:hover': {
        borderRadius: 0
      }
    },
    "data-testid": "language-option",
    onClick: () => navigateTo(_models__WEBPACK_IMPORTED_MODULE_1__.SettingsPages.LANGUAGE)
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItemIcon, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.GlobeIcon, {
    size: 24
  })), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItemText, {
    sx: {
      ml: 1,
      my: 0
    },
    primaryTypographyProps: {
      variant: 'body2'
    }
  }, t('Language')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItemIcon, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ChevronRightIcon, {
    size: 24
  })))), isLedgerWallet && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItem, {
    sx: {
      p: 0
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItemButton, {
    sx: {
      justifyContent: 'space-between',
      py: 1,
      px: 2,
      m: 0,
      '&:hover': {
        borderRadius: 0
      }
    },
    onClick: () => navigateTo(_models__WEBPACK_IMPORTED_MODULE_1__.SettingsPages.LEDGER)
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItemIcon, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.LedgerIcon, {
    size: 24
  })), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItemText, {
    sx: {
      ml: 1,
      my: 0
    },
    primaryTypographyProps: {
      variant: 'body2'
    }
  }, t('Ledger')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItemIcon, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ChevronRightIcon, {
    size: 24
  })))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItem, {
    sx: {
      p: 0
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItemButton, {
    sx: {
      justifyContent: 'space-between',
      py: 1,
      px: 2,
      m: 0,
      '&:hover': {
        borderRadius: 0
      }
    },
    "data-testid": "advanced-option",
    onClick: () => navigateTo(_models__WEBPACK_IMPORTED_MODULE_1__.SettingsPages.ADVANCED)
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItemIcon, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.GearIcon, {
    size: 24
  })), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItemText, {
    sx: {
      ml: 1,
      my: 0
    },
    primaryTypographyProps: {
      variant: 'body2'
    }
  }, t('Advanced')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItemIcon, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ChevronRightIcon, {
    size: 24
  })))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItem, {
    sx: {
      p: 0
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItemButton, {
    sx: {
      justifyContent: 'space-between',
      py: 1,
      px: 2,
      m: 0,
      '&:hover': {
        borderRadius: 0
      }
    },
    "data-testid": "security-privacy-option",
    onClick: () => navigateTo(_models__WEBPACK_IMPORTED_MODULE_1__.SettingsPages.SECURITY_AND_PRIVACY)
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItemIcon, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.Badge, {
    color: "secondary",
    variant: "dot",
    invisible: !showNotificationDotOn.includes(_models__WEBPACK_IMPORTED_MODULE_1__.SettingsPages.SECURITY_AND_PRIVACY)
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.LockIcon, {
    size: 24
  }))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItemText, {
    sx: {
      ml: 1,
      my: 0
    },
    primaryTypographyProps: {
      variant: 'body2'
    }
  }, t('Security & Privacy')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItemIcon, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ChevronRightIcon, {
    size: 24
  }))))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.Divider, null), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.List, {
    dense: true
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItem, {
    sx: {
      p: 0
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItemButton, {
    sx: {
      py: 0.5,
      px: 2,
      m: 0,
      '&:hover': {
        borderRadius: 0
      }
    },
    onClick: () => {
      navigateTo(_models__WEBPACK_IMPORTED_MODULE_1__.SettingsPages.FEEDBACK);
    },
    "data-testid": "feedback-option"
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItemText, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.Typography, {
    variant: "body2"
  }, t('Send Feedback'))))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItem, {
    sx: {
      p: 0
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItemButton, {
    sx: {
      py: 0.5,
      px: 2,
      m: 0,
      '&:hover': {
        borderRadius: 0
      }
    },
    onClick: () => {
      capture(`LegalClicked`);
      navigateTo(_models__WEBPACK_IMPORTED_MODULE_1__.SettingsPages.LEGAL);
    },
    "data-testid": "legal-option"
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItemText, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.Typography, {
    variant: "body2"
  }, t('Legal'))))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItem, {
    sx: {
      p: 0
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItemButton, {
    sx: {
      py: 0.5,
      px: 2,
      m: 0,
      '&:hover': {
        borderRadius: 0
      }
    },
    onClick: async () => {
      try {
        await capture(`HelpCenterClicked`);
      } catch (err) {
        console.error(err);
      }
      window.open(`https://support.avax.network/${currentLanguage ? currentLanguage.linkCode : 'en'}/collections/3391518-core`, '_blank', 'noreferrer');
    },
    "data-testid": "help-center-option"
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItemText, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.Typography, {
    variant: "body2"
  }, t('Help Center'))))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItem, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.ListItemText, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.Typography, {
    variant: "caption",
    sx: {
      color: 'text.secondary'
    }
  }, `${t('Version')} ${extensionVersion}`)))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.Stack, {
    sx: {
      height: '100%',
      flexDirection: 'column-reverse',
      px: 2
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.Button, {
    variant: "contained",
    color: "secondary",
    fullWidth: true,
    onClick: lockWallet,
    "data-testid": "lock-core-wallet-button"
  }, t('Lock Core'))));
}

/***/ }),

/***/ "./src/components/settings/pages/RecoveryMethods/AddNewRecoveryMethod.tsx":
/*!********************************************************************************!*\
  !*** ./src/components/settings/pages/RecoveryMethods/AddNewRecoveryMethod.tsx ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AddNewRecoveryMethod": () => (/* binding */ AddNewRecoveryMethod)
/* harmony export */ });
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _src_components_common_Overlay__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @src/components/common/Overlay */ "./src/components/common/Overlay.tsx");
/* harmony import */ var _src_components_common_PageTitle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/components/common/PageTitle */ "./src/components/common/PageTitle.tsx");
/* harmony import */ var _RecoveryMethodsList__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./RecoveryMethodsList */ "./src/components/settings/pages/RecoveryMethods/RecoveryMethodsList.tsx");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");





function AddNewRecoveryMethod({
  onBackClick,
  onMethodClick,
  excludeTotp
}) {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_3__.useTranslation)();
  return /*#__PURE__*/React.createElement(_src_components_common_Overlay__WEBPACK_IMPORTED_MODULE_0__.Overlay, {
    isBackgroundFilled: true
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.Stack, {
    sx: {
      width: 1,
      height: 1,
      pt: 1.5,
      gap: 2
    }
  }, /*#__PURE__*/React.createElement(_src_components_common_PageTitle__WEBPACK_IMPORTED_MODULE_1__.PageTitle, {
    onBackClick: onBackClick
  }, t('Recovery Methods')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.Stack, {
    sx: {
      width: 1,
      px: 2,
      gap: 3
    }
  }, /*#__PURE__*/React.createElement(_RecoveryMethodsList__WEBPACK_IMPORTED_MODULE_2__.RecoveryMethodsList, {
    onMethodClick: onMethodClick,
    asCards: true,
    excludeTotp: excludeTotp
  }))));
}

/***/ }),

/***/ "./src/components/settings/pages/RecoveryMethods/AuthenticatorDetails.tsx":
/*!********************************************************************************!*\
  !*** ./src/components/settings/pages/RecoveryMethods/AuthenticatorDetails.tsx ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AuthenticatorDetails": () => (/* binding */ AuthenticatorDetails)
/* harmony export */ });
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/react-hot-toast/dist/index.mjs");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@mui/material/styles/styled.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! webextension-polyfill */ "./node_modules/webextension-polyfill/dist/browser-polyfill.js");
/* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(webextension_polyfill__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _src_components_common_Overlay__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/components/common/Overlay */ "./src/components/common/Overlay.tsx");
/* harmony import */ var _src_components_common_PageTitle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @src/components/common/PageTitle */ "./src/components/common/PageTitle.tsx");
/* harmony import */ var _src_hooks_useSeedlessMfa__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @src/hooks/useSeedlessMfa */ "./src/hooks/useSeedlessMfa.tsx");
/* harmony import */ var _src_components_common_seedless_components_TOTPChallenge__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @src/components/common/seedless/components/TOTPChallenge */ "./src/components/common/seedless/components/TOTPChallenge.tsx");
/* harmony import */ var _src_contexts_SeedlessMfaManagementProvider__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @src/contexts/SeedlessMfaManagementProvider */ "./src/contexts/SeedlessMfaManagementProvider.tsx");
/* harmony import */ var _src_background_services_seedless_models__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @src/background/services/seedless/models */ "./src/background/services/seedless/models.ts");
/* harmony import */ var _src_hooks_useIsSpecificContextContainer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @src/hooks/useIsSpecificContextContainer */ "./src/hooks/useIsSpecificContextContainer.ts");
/* harmony import */ var _AuthenticatorVerifyScreen__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./AuthenticatorVerifyScreen */ "./src/components/settings/pages/RecoveryMethods/AuthenticatorVerifyScreen.tsx");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");












var State = /*#__PURE__*/function (State) {
  State["Initial"] = "initial";
  State["Initiated"] = "initiated";
  State["ConfirmChange"] = "confirm-change";
  State["ConfirmRemoval"] = "confirm-removal";
  State["Pending"] = "pending";
  State["Completing"] = "completing";
  State["VerifyCode"] = "verify-code";
  State["Failure"] = "failure";
  return State;
}(State || {});
function AuthenticatorDetails({
  onBackClick,
  onUpdated,
  autoInitialize
}) {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_10__.useTranslation)();
  const {
    initAuthenticatorChange,
    completeAuthenticatorChange,
    hasFidoConfigured,
    hasTotpConfigured
  } = (0,_src_contexts_SeedlessMfaManagementProvider__WEBPACK_IMPORTED_MODULE_6__.useSeedlessMfaManager)();
  const {
    renderMfaPrompt
  } = (0,_src_hooks_useSeedlessMfa__WEBPACK_IMPORTED_MODULE_4__.useSeedlessMfa)();
  const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(State.Initial);
  const [totpChallenge, setTotpChallenge] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const initChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async () => {
    if (hasFidoConfigured) {
      webextension_polyfill__WEBPACK_IMPORTED_MODULE_1___default().tabs.create({
        url: `${_src_hooks_useIsSpecificContextContainer__WEBPACK_IMPORTED_MODULE_8__.ContextContainer.FULLSCREEN}#/update-recovery-methods`
      });
      return;
    }
    setState(State.Initiated);
    try {
      const challenge = await initAuthenticatorChange();
      setTotpChallenge(challenge);
      setState(State.Pending);
    } catch {
      setTotpChallenge(undefined);
      setState(State.Failure);
    }
  }, [initAuthenticatorChange, hasFidoConfigured]);
  const openRemoveTotpPopup = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async () => {
    webextension_polyfill__WEBPACK_IMPORTED_MODULE_1___default().tabs.create({
      url: `${_src_hooks_useIsSpecificContextContainer__WEBPACK_IMPORTED_MODULE_8__.ContextContainer.FULLSCREEN}#/remove-totp`
    });
  }, []);
  const completeChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (totpId, code) => {
    setState(State.Completing);
    try {
      await completeAuthenticatorChange(totpId, code);
      if (onUpdated) {
        onUpdated();
      } else {
        setState(State.Initial);
        _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__["default"].success(t('Authenticator updated'));
      }
    } catch (err) {
      // If invalid code, try again
      if (err === _src_background_services_seedless_models__WEBPACK_IMPORTED_MODULE_7__.AuthErrorCode.InvalidTotpCode) {
        setState(State.VerifyCode);
        setError(err);
        return;
      }
      setState(State.Failure);
    }
  }, [completeAuthenticatorChange, onUpdated, t]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (autoInitialize && state === State.Initial) {
      initChange();
    }
  }, [autoInitialize, initChange, onBackClick, state]);
  return /*#__PURE__*/React.createElement(_src_components_common_Overlay__WEBPACK_IMPORTED_MODULE_2__.Overlay, {
    isBackgroundFilled: true
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_12__.Stack, {
    sx: {
      width: 375,
      height: 600,
      pt: 1.5,
      gap: 2,
      alignSelf: 'center',
      backgroundColor: autoInitialize ? 'background.paper' : 'transparent',
      borderRadius: 1
    }
  }, state === State.Failure && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_12__.Stack, {
    sx: {
      width: 1,
      height: 1,
      px: 3,
      justifyContent: 'center',
      alignItems: 'center',
      gap: 2
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_12__.AlertCircleIcon, {
    size: 72
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_12__.Stack, {
    sx: {
      textAlign: 'center',
      gap: 0.5
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_12__.Typography, {
    variant: "h5",
    sx: {
      mb: 2
    }
  }, t('Something Went Wrong')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_12__.Typography, {
    variant: "body2"
  }, t('We encountered an unexpected issue.')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_12__.Typography, {
    variant: "body2"
  }, t('Please try again.'))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_12__.Button, {
    fullWidth: true,
    onClick: initChange,
    "data-testid": "btn-try-again",
    sx: {
      mt: 4
    }
  }, t('Try again')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_12__.Button, {
    fullWidth: true,
    variant: "text",
    onClick: onBackClick ?? window.close,
    "data-testid": "btn-go-back"
  }, onBackClick ? t('Go Back') : t('Close'))), (state === State.Initial || state === State.Initiated || state === State.ConfirmChange || state === State.ConfirmRemoval) && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_src_components_common_PageTitle__WEBPACK_IMPORTED_MODULE_3__.PageTitle, {
    onBackClick: onBackClick,
    showBackButton: Boolean(onBackClick)
  }, t('Authenticator App')), autoInitialize ? /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_12__.Stack, {
    sx: {
      width: 1,
      height: 1,
      justifyContent: 'center',
      alignItems: 'center'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_12__.CircularProgress, {
    size: 80
  })) : /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_12__.Stack, {
    sx: {
      width: 1,
      gap: 2,
      flexGrow: 1
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_12__.Card, {
    sx: {
      backgroundColor: 'grey.900',
      mx: 1,
      px: 2,
      py: 2
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_12__.Stack, {
    direction: "row",
    sx: {
      gap: 2,
      alignItems: 'center'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_12__.QRCodeIcon, {
    size: 24,
    sx: {
      width: 28
    }
  }), /*#__PURE__*/React.createElement(MethodName, null, t('Authenticator'))))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_12__.Stack, {
    sx: {
      width: 1,
      px: 2,
      py: 3
    }
  }, hasTotpConfigured && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_12__.Button, {
    color: "secondary",
    size: "large",
    fullWidth: true,
    onClick: () => setState(State.ConfirmChange),
    disabled: state === State.Initiated || state === State.ConfirmChange,
    isLoading: state === State.Initiated || state === State.ConfirmChange
  }, t('Change Authenticator App')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_12__.Tooltip, {
    sx: {
      width: 1
    },
    title: hasFidoConfigured ? '' : t('To remove the authenticator app, you first need to configure a different recovery method.')
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_12__.Button, {
    variant: "text",
    color: "error",
    size: "large",
    fullWidth: true,
    sx: {
      mt: 1.5
    },
    startIcon: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_12__.TrashIcon, null),
    onClick: () => setState(State.ConfirmRemoval),
    disabled: !hasFidoConfigured || state === State.ConfirmRemoval || state === State.Initiated,
    isLoading: state === State.ConfirmRemoval || state === State.Initiated
  }, t('Remove'))))), state === State.Initiated && renderMfaPrompt(), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_12__.Dialog, {
    open: state === State.ConfirmChange || state === State.ConfirmRemoval,
    PaperProps: {
      sx: {
        m: 2,
        textAlign: 'center'
      }
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_12__.DialogTitle, null, state === State.ConfirmChange ? t('Change Authenticator?') : t('Remove Authenticator?')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_12__.DialogContent, null, state === State.ConfirmChange ? t('You will no longer be able to use this authenticator once you switch. You can always re-add an authenticator app.') : t('You will no longer be able to use this authenticator once you remove it. You can always re-add it later.')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_12__.DialogActions, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_12__.Button, {
    key: "change",
    size: "large",
    onClick: state === State.ConfirmChange ? initChange : openRemoveTotpPopup
  }, state === State.ConfirmChange ? t('Change') : t('Remove')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_12__.Button, {
    key: "cancel",
    variant: "text",
    onClick: () => setState(State.Initial)
  }, t('Cancel'))))), state === State.Pending && totpChallenge && /*#__PURE__*/React.createElement(_AuthenticatorVerifyScreen__WEBPACK_IMPORTED_MODULE_9__.AuthenticatorVerifyScreen, {
    onBackClick: onBackClick,
    totpChallenge: totpChallenge,
    onNextClick: () => setState(State.VerifyCode)
  }), (state === State.Completing || state === State.VerifyCode) && totpChallenge && /*#__PURE__*/React.createElement(_src_components_common_seedless_components_TOTPChallenge__WEBPACK_IMPORTED_MODULE_5__.TOTPChallenge, {
    onSubmit: code => completeChange(totpChallenge.totpId, code),
    isLoading: state === State.Completing,
    error: error
  })));
}
const MethodName = (0,_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_13__["default"])(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_12__.Typography)`
  ${({
  theme
}) => ({
  ...theme.typography.body2,
  fontWeight: theme.typography.fontWeightSemibold
})}
`;

/***/ }),

/***/ "./src/components/settings/pages/RecoveryMethods/AuthenticatorVerifyScreen.tsx":
/*!*************************************************************************************!*\
  !*** ./src/components/settings/pages/RecoveryMethods/AuthenticatorVerifyScreen.tsx ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AuthenticatorVerifyScreen": () => (/* binding */ AuthenticatorVerifyScreen)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/Trans.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@mui/material/styles/useTheme.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/react-hot-toast/dist/index.mjs");
/* harmony import */ var qrcode_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! qrcode.react */ "./node_modules/qrcode.react/lib/index.js");
/* harmony import */ var qrcode_react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(qrcode_react__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _src_components_common_PageTitle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @src/components/common/PageTitle */ "./src/components/common/PageTitle.tsx");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");






var Screen = /*#__PURE__*/function (Screen) {
  Screen["Scan"] = "scan";
  Screen["Manual"] = "manual";
  Screen["LearnMore"] = "learn-more";
  return Screen;
}(Screen || {});
const AuthenticatorVerifyScreen = ({
  onBackClick,
  onNextClick,
  totpChallenge
}) => {
  const theme = (0,_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__["default"])();
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_5__.useTranslation)();
  const [screen, setScreen] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(Screen.Scan);
  const totpSecret = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {
    if (!totpChallenge) {
      return '';
    }
    return new URL(totpChallenge.totpUrl).searchParams.get('secret') ?? '';
  }, [totpChallenge]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_src_components_common_PageTitle__WEBPACK_IMPORTED_MODULE_3__.PageTitle, {
    onBackClick: () => {
      if (screen === Screen.Scan) {
        onBackClick();
      } else {
        setScreen(Screen.Scan);
      }
    }
  }, screen === Screen.Scan ? t('Scan QR Code') : screen === Screen.Manual ? t('Authenticator Setup') : t('Learn more')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Stack, {
    sx: {
      width: 1,
      gap: 2,
      flexGrow: 1,
      alignItems: 'center',
      px: 2
    }
  }, screen === Screen.Scan && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Typography, {
    variant: "body1"
  }, /*#__PURE__*/React.createElement(react_i18next__WEBPACK_IMPORTED_MODULE_7__.Trans, {
    i18nKey: "Use any <b>authenticator app</b> to scan the QR code. Or enter code manually.",
    components: {
      b: /*#__PURE__*/React.createElement("b", null)
    }
  })), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Stack, {
    sx: {
      py: 1
    }
  }, totpChallenge ? /*#__PURE__*/React.createElement((qrcode_react__WEBPACK_IMPORTED_MODULE_2___default()), {
    renderAs: "svg",
    fgColor: theme.palette.common.black,
    bgColor: theme.palette.common.white,
    value: totpChallenge.totpUrl,
    level: "H",
    size: 188
  }) : /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Skeleton, {
    variant: "rectangular",
    sx: {
      width: 188,
      height: 188
    }
  })), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Stack, {
    sx: {
      width: 1,
      mt: 2
    }
  }, /*#__PURE__*/React.createElement(DividerWithLabel, null, t('Or'))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Button, {
    variant: "text",
    onClick: () => setScreen(Screen.Manual)
  }, t('Enter Code Manually'))), totpChallenge && screen === Screen.Manual && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Typography, {
    variant: "body1"
  }, /*#__PURE__*/React.createElement(react_i18next__WEBPACK_IMPORTED_MODULE_7__.Trans, {
    i18nKey: "Open any <b>authenticator app</b> and enter the code found below.",
    components: {
      b: /*#__PURE__*/React.createElement("b", null)
    }
  })), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Stack, {
    direction: "row",
    sx: {
      gap: 0.25,
      width: 1
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Typography, {
    variant: "body1",
    component: "span"
  }, t('Or click Scan QR Code.')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Button, {
    variant: "text",
    disableRipple: true,
    sx: {
      p: 0,
      fontSize: theme.typography.body1.fontSize
    },
    onClick: () => {
      setScreen(Screen.LearnMore);
    }
  }, t('Learn more.'))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Card, {
    sx: {
      backgroundColor: 'grey.900',
      mx: 1
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.CardActionArea, {
    sx: {
      px: 2,
      py: 2
    },
    onClick: () => {
      navigator.clipboard.writeText(totpSecret);
      _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_8__["default"].success(t('Copied!'), {
        duration: 1500
      });
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Stack, {
    direction: "row",
    sx: {
      alignItems: 'flex-start',
      gap: 2
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.CopyIcon, {
    size: 20,
    sx: {
      flexShrink: 0,
      pt: 0.25
    }
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Stack, {
    sx: {
      gap: 1
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Typography, {
    variant: "button",
    sx: {
      fontSize: theme.typography.body2.fontSize
    }
  }, t('Copy Code')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Typography, {
    variant: "h6",
    sx: {
      wordBreak: 'break-all'
    }
  }, totpSecret))))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Card, {
    sx: {
      backgroundColor: 'grey.900',
      mx: 1
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.CardActionArea, {
    sx: {
      px: 2,
      py: 2
    },
    onClick: () => {
      setScreen(Screen.Scan);
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Stack, {
    direction: "row",
    sx: {
      alignItems: 'flex-start',
      gap: 2
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.QRCodeIcon, {
    size: 20,
    sx: {
      flexShrink: 0,
      pt: 0.25
    }
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Stack, {
    sx: {
      gap: 1
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Typography, {
    variant: "button",
    sx: {
      fontSize: theme.typography.body2.fontSize
    }
  }, t('Scan QR Code Code')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Typography, {
    variant: "h6"
  }, t('View QR code to scan with your authenticator app.'))))))), screen === Screen.LearnMore && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Typography, {
    variant: "body1"
  }, /*#__PURE__*/React.createElement(react_i18next__WEBPACK_IMPORTED_MODULE_7__.Trans, {
    i18nKey: "Open any <b>authenticator app</b> and enter the code found below.",
    components: {
      b: /*#__PURE__*/React.createElement("b", null)
    }
  })), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Card, {
    sx: {
      backgroundColor: 'grey.900',
      mx: 1
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.CardActionArea, {
    sx: {
      px: 2,
      py: 2
    },
    onClick: () => {
      navigator.clipboard.writeText(totpSecret);
      _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_8__["default"].success(t('Copied!'), {
        duration: 1500
      });
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Stack, {
    direction: "row",
    sx: {
      alignItems: 'flex-start',
      gap: 2
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.CopyIcon, {
    size: 20,
    sx: {
      flexShrink: 0,
      pt: 0.25
    }
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Stack, {
    sx: {
      gap: 1
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Typography, {
    variant: "button",
    sx: {
      fontSize: theme.typography.body2.fontSize
    }
  }, t('Copy Code')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Typography, {
    variant: "h6",
    sx: {
      wordBreak: 'break-all'
    }
  }, totpSecret))))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Typography, {
    variant: "body1"
  }, /*#__PURE__*/React.createElement(react_i18next__WEBPACK_IMPORTED_MODULE_7__.Trans, {
    i18nKey: "If using Google Authenticator, make sure that <b>Time based</b> is selected.",
    components: {
      b: /*#__PURE__*/React.createElement("b", null)
    }
  })), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Typography, {
    variant: "body1"
  }, /*#__PURE__*/React.createElement(react_i18next__WEBPACK_IMPORTED_MODULE_7__.Trans, {
    i18nKey: "If using Microsoft Authenticator, click <b>Add Account</b>.",
    components: {
      b: /*#__PURE__*/React.createElement("b", null)
    }
  })), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Typography, {
    variant: "body1"
  }, /*#__PURE__*/React.createElement(react_i18next__WEBPACK_IMPORTED_MODULE_7__.Trans, {
    i18nKey: "If using Authenticator App, click the <b>+</b> to add account.",
    components: {
      b: /*#__PURE__*/React.createElement("b", null)
    }
  })))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Stack, {
    sx: {
      width: 1,
      px: 2,
      py: 3
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Button, {
    color: "primary",
    size: "large",
    onClick: onNextClick
  }, t('Next'))));
};
const DividerWithLabel = props => /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Typography, (0,_babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({
  variant: "h5",
  color: "text.tertiary",
  sx: {
    transform: 'translateY(-16px)',
    px: 3,
    alignSelf: 'center',
    position: 'relative',
    '&::after, &::before': {
      content: '""',
      position: 'absolute',
      width: '120px',
      borderBottom: '2px solid',
      borderBottomColor: 'grey.800'
    },
    '&::after': {
      right: 0,
      transform: 'translate(100%, 14px)'
    },
    '&::before': {
      left: 0,
      transform: 'translate(-100%, 14px)'
    }
  },
  component: "span"
}, props));

/***/ }),

/***/ "./src/components/settings/pages/RecoveryMethods/FIDODetails.tsx":
/*!***********************************************************************!*\
  !*** ./src/components/settings/pages/RecoveryMethods/FIDODetails.tsx ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FIDODetails": () => (/* binding */ FIDODetails)
/* harmony export */ });
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/react-hot-toast/dist/index.mjs");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@mui/material/styles/styled.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _src_components_common_Overlay__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/components/common/Overlay */ "./src/components/common/Overlay.tsx");
/* harmony import */ var _src_components_common_PageTitle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/components/common/PageTitle */ "./src/components/common/PageTitle.tsx");
/* harmony import */ var _src_hooks_useSeedlessMfa__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @src/hooks/useSeedlessMfa */ "./src/hooks/useSeedlessMfa.tsx");
/* harmony import */ var _src_contexts_SeedlessMfaManagementProvider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @src/contexts/SeedlessMfaManagementProvider */ "./src/contexts/SeedlessMfaManagementProvider.tsx");
/* harmony import */ var _src_background_services_seedless_models__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @src/background/services/seedless/models */ "./src/background/services/seedless/models.ts");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");








var State = /*#__PURE__*/function (State) {
  State["Initial"] = "initial";
  State["Initiated"] = "initiated";
  State["ConfirmRemoval"] = "confirm-removal";
  State["Failure"] = "failure";
  return State;
}(State || {});
function FIDODetails({
  onBackClick,
  details
}) {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_6__.useTranslation)();
  const {
    removeFidoDevice,
    hasTotpConfigured
  } = (0,_src_contexts_SeedlessMfaManagementProvider__WEBPACK_IMPORTED_MODULE_4__.useSeedlessMfaManager)();
  const {
    renderMfaPrompt
  } = (0,_src_hooks_useSeedlessMfa__WEBPACK_IMPORTED_MODULE_3__.useSeedlessMfa)();
  const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(State.Initial);
  const remove = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async () => {
    setState(State.Initiated);
    try {
      await removeFidoDevice(details.id);
      _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__["default"].success(t('{{name}} successfully removed!', {
        name: details.name || t('Method')
      }));
      onBackClick();
    } catch (err) {
      if (err === _src_background_services_seedless_models__WEBPACK_IMPORTED_MODULE_5__.SeedlessError.NoMfaMethodAvailable) {
        _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__["default"].error(t('You need an authenticator app configured to remove this MFA method'));
        return;
      }
      setState(State.Failure);
    }
  }, [t, details.id, details.name, removeFidoDevice, onBackClick]);
  return /*#__PURE__*/React.createElement(_src_components_common_Overlay__WEBPACK_IMPORTED_MODULE_1__.Overlay, {
    isBackgroundFilled: true
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_8__.Stack, {
    sx: {
      width: 1,
      height: 1,
      pt: 1.5,
      gap: 2
    }
  }, state === State.Failure && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_8__.Stack, {
    sx: {
      width: 1,
      height: 1,
      px: 3,
      justifyContent: 'center',
      alignItems: 'center',
      gap: 2
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_8__.AlertCircleIcon, {
    size: 72
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_8__.Stack, {
    sx: {
      textAlign: 'center',
      gap: 0.5
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_8__.Typography, {
    variant: "h5",
    sx: {
      mb: 2
    }
  }, t('Something Went Wrong')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_8__.Typography, {
    variant: "body2"
  }, t('We encountered an unexpected issue.')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_8__.Typography, {
    variant: "body2"
  }, t('Please try again.'))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_8__.Button, {
    fullWidth: true,
    onClick: remove,
    "data-testid": "btn-try-again",
    sx: {
      mt: 4
    }
  }, t('Try again')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_8__.Button, {
    fullWidth: true,
    variant: "text",
    onClick: onBackClick ?? window.close,
    "data-testid": "btn-go-back"
  }, t('Go Back'))), (state === State.Initial || state === State.Initiated || state === State.ConfirmRemoval) && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_src_components_common_PageTitle__WEBPACK_IMPORTED_MODULE_2__.PageTitle, {
    onBackClick: onBackClick,
    showBackButton: Boolean(onBackClick)
  }, t('FIDO Device Details')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_8__.Stack, {
    sx: {
      width: 1,
      gap: 2,
      flexGrow: 1
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_8__.Card, {
    sx: {
      backgroundColor: 'grey.900',
      mx: 1,
      px: 2,
      py: 2
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_8__.Stack, {
    direction: "row",
    sx: {
      gap: 2,
      alignItems: 'center'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_8__.KeyIcon, {
    size: 24,
    sx: {
      width: 28
    }
  }), /*#__PURE__*/React.createElement(MethodName, null, details.name)))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_8__.Stack, {
    sx: {
      width: 1,
      px: 2,
      py: 3
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_8__.Tooltip, {
    title: hasTotpConfigured ? '' : t('To remove this recovery method, you first need to configure a TOTP recovery method (i.e. Authenticator app).')
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_8__.Button, {
    variant: "text",
    color: "error",
    size: "large",
    fullWidth: true,
    startIcon: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_8__.TrashIcon, null),
    onClick: () => setState(State.ConfirmRemoval),
    disabled: !hasTotpConfigured || state === State.ConfirmRemoval || state === State.Initiated,
    isLoading: state === State.ConfirmRemoval || state === State.Initiated
  }, t('Remove')))), state === State.Initiated && renderMfaPrompt(), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_8__.Dialog, {
    open: state === State.ConfirmRemoval,
    PaperProps: {
      sx: {
        m: 2,
        textAlign: 'center'
      }
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_8__.DialogTitle, null, t('Remove This Method?')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_8__.DialogContent, null, t('You will no longer be able to use this method to verify any operations. You can always re-add it later.')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_8__.DialogActions, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_8__.Button, {
    key: "remove",
    size: "large",
    onClick: remove
  }, t('Remove')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_8__.Button, {
    key: "cancel",
    variant: "text",
    onClick: () => setState(State.Initial)
  }, t('Cancel')))))));
}
const MethodName = (0,_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__["default"])(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_8__.Typography)`
  ${({
  theme
}) => ({
  ...theme.typography.body2,
  fontWeight: theme.typography.fontWeightSemibold
})}
`;

/***/ }),

/***/ "./src/components/settings/pages/RecoveryMethods/RecoveryMethods.tsx":
/*!***************************************************************************!*\
  !*** ./src/components/settings/pages/RecoveryMethods/RecoveryMethods.tsx ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RecoveryMethods": () => (/* binding */ RecoveryMethods)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! webextension-polyfill */ "./node_modules/webextension-polyfill/dist/browser-polyfill.js");
/* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(webextension_polyfill__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _src_contexts_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/contexts/AnalyticsProvider */ "./src/contexts/AnalyticsProvider.tsx");
/* harmony import */ var _src_contexts_SeedlessMfaManagementProvider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @src/contexts/SeedlessMfaManagementProvider */ "./src/contexts/SeedlessMfaManagementProvider.tsx");
/* harmony import */ var _src_background_services_seedless_models__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @src/background/services/seedless/models */ "./src/background/services/seedless/models.ts");
/* harmony import */ var _src_utils_seedless_fido_types__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @src/utils/seedless/fido/types */ "./src/utils/seedless/fido/types.ts");
/* harmony import */ var _src_hooks_useIsSpecificContextContainer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @src/hooks/useIsSpecificContextContainer */ "./src/hooks/useIsSpecificContextContainer.ts");
/* harmony import */ var _SettingsHeader__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../SettingsHeader */ "./src/components/settings/SettingsHeader.tsx");
/* harmony import */ var _common_seedless_components_RecoveryMethod__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../common/seedless/components/RecoveryMethod */ "./src/components/common/seedless/components/RecoveryMethod.tsx");
/* harmony import */ var _RecoveryMethodsList__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./RecoveryMethodsList */ "./src/components/settings/pages/RecoveryMethods/RecoveryMethodsList.tsx");
/* harmony import */ var _AddNewRecoveryMethod__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./AddNewRecoveryMethod */ "./src/components/settings/pages/RecoveryMethods/AddNewRecoveryMethod.tsx");
/* harmony import */ var _AuthenticatorDetails__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./AuthenticatorDetails */ "./src/components/settings/pages/RecoveryMethods/AuthenticatorDetails.tsx");
/* harmony import */ var _FIDODetails__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./FIDODetails */ "./src/components/settings/pages/RecoveryMethods/FIDODetails.tsx");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");















var RecoveryMethodScreen = /*#__PURE__*/function (RecoveryMethodScreen) {
  RecoveryMethodScreen["List"] = "list";
  RecoveryMethodScreen["AddNew"] = "add-new";
  RecoveryMethodScreen["Authenticator"] = "authenticator";
  RecoveryMethodScreen["FidoDetails"] = "fido-details";
  return RecoveryMethodScreen;
}(RecoveryMethodScreen || {});
function RecoveryMethods({
  goBack,
  navigateTo,
  width
}) {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_13__.useTranslation)();
  const {
    capture
  } = (0,_src_contexts_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_2__.useAnalyticsContext)();
  const {
    isLoadingRecoveryMethods,
    recoveryMethods,
    hasFidoConfigured,
    hasMfaConfigured,
    hasTotpConfigured
  } = (0,_src_contexts_SeedlessMfaManagementProvider__WEBPACK_IMPORTED_MODULE_3__.useSeedlessMfaManager)();
  const [fidoDetails, setFidoDetails] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const [screen, setScreen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(RecoveryMethodScreen.List);
  const startRecoveryMethodSetup = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async type => {
    const url = type ? `update-recovery-methods?keyType=${type}` : 'update-recovery-methods';

    // Open in a full screen tab to avoid popup hell
    webextension_polyfill__WEBPACK_IMPORTED_MODULE_1___default().tabs.create({
      url: `${_src_hooks_useIsSpecificContextContainer__WEBPACK_IMPORTED_MODULE_6__.ContextContainer.FULLSCREEN}#/${url}`
    });
  }, []);
  const onMethodClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async method => {
    if (method === _src_background_services_seedless_models__WEBPACK_IMPORTED_MODULE_4__.RecoveryMethodType.Authenticator && !hasFidoConfigured) {
      // If user is trying to configure TOTP and does not have FIDO configured,
      // we can show everything inside the regular extension window.
      setScreen(RecoveryMethodScreen.Authenticator);
    } else {
      // Otherwise, we need to open a fullscreen flow (FIDO verification happens within a popup,
      // which would make the regular extension window close).

      if (method === _src_background_services_seedless_models__WEBPACK_IMPORTED_MODULE_4__.RecoveryMethodType.Authenticator) {
        await startRecoveryMethodSetup();
      } else if (method === _src_background_services_seedless_models__WEBPACK_IMPORTED_MODULE_4__.RecoveryMethodType.Passkey) {
        await startRecoveryMethodSetup(_src_utils_seedless_fido_types__WEBPACK_IMPORTED_MODULE_5__.KeyType.Passkey);
      } else {
        await startRecoveryMethodSetup(_src_utils_seedless_fido_types__WEBPACK_IMPORTED_MODULE_5__.KeyType.Yubikey);
      }
    }
  }, [startRecoveryMethodSetup, hasFidoConfigured]);
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_14__.Stack, {
    sx: {
      width: 1,
      height: 1
    }
  }, /*#__PURE__*/React.createElement(_SettingsHeader__WEBPACK_IMPORTED_MODULE_7__.SettingsHeader, {
    width: width,
    goBack: goBack,
    navigateTo: navigateTo,
    title: t('Recovery Methods')
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_14__.Stack, {
    sx: {
      width: 1,
      mt: 2,
      gap: 2,
      flexGrow: 1
    }
  }, screen === RecoveryMethodScreen.Authenticator && /*#__PURE__*/React.createElement(_AuthenticatorDetails__WEBPACK_IMPORTED_MODULE_11__.AuthenticatorDetails, {
    onBackClick: () => setScreen(RecoveryMethodScreen.List),
    autoInitialize: !hasTotpConfigured
  }), screen === RecoveryMethodScreen.FidoDetails && fidoDetails && /*#__PURE__*/React.createElement(_FIDODetails__WEBPACK_IMPORTED_MODULE_12__.FIDODetails, {
    details: fidoDetails,
    onBackClick: () => {
      setScreen(RecoveryMethodScreen.List);
      setFidoDetails(undefined);
    }
  }), screen === RecoveryMethodScreen.AddNew && /*#__PURE__*/React.createElement(_AddNewRecoveryMethod__WEBPACK_IMPORTED_MODULE_10__.AddNewRecoveryMethod, {
    onBackClick: () => setScreen(RecoveryMethodScreen.List),
    onMethodClick: onMethodClick,
    excludeTotp: hasTotpConfigured
  }), screen === RecoveryMethodScreen.List && /*#__PURE__*/React.createElement(React.Fragment, null, isLoadingRecoveryMethods && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_14__.Skeleton, {
    variant: "rectangular",
    sx: {
      width: 1,
      height: 40
    }
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_14__.Skeleton, {
    variant: "rectangular",
    sx: {
      width: 1,
      height: 40
    }
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_14__.Skeleton, {
    variant: "rectangular",
    sx: {
      width: 1,
      height: 40
    }
  })), !isLoadingRecoveryMethods && /*#__PURE__*/React.createElement(React.Fragment, null, hasMfaConfigured ? recoveryMethods.map(method => {
    if (method.type === 'totp') {
      return /*#__PURE__*/React.createElement(_common_seedless_components_RecoveryMethod__WEBPACK_IMPORTED_MODULE_8__.RecoveryMethod, {
        key: "totp",
        methodName: t('Authenticator'),
        onClick: () => {
          capture('ConfigureTotpClicked');
          setScreen(RecoveryMethodScreen.Authenticator);
        }
      });
    }
    return /*#__PURE__*/React.createElement(_common_seedless_components_RecoveryMethod__WEBPACK_IMPORTED_MODULE_8__.RecoveryMethod, {
      key: method.id,
      methodName: method.name,
      onClick: () => {
        capture('ConfigureFidoClicked');
        setFidoDetails(method);
        setScreen(RecoveryMethodScreen.FidoDetails);
      }
    });
  }) : /*#__PURE__*/React.createElement(_RecoveryMethodsList__WEBPACK_IMPORTED_MODULE_9__.RecoveryMethodsList, {
    onMethodClick: onMethodClick
  })))), hasMfaConfigured && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_14__.Stack, {
    sx: {
      width: 1,
      px: 2,
      py: 3,
      borderTop: '1px solid',
      borderTopColor: 'divider'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_14__.Button, {
    color: "secondary",
    startIcon: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_14__.PlusIcon, null),
    size: "large",
    onClick: () => setScreen(RecoveryMethodScreen.AddNew)
  }, t('Add Recovery Method'))));
}

/***/ }),

/***/ "./src/components/settings/pages/RecoveryMethods/RecoveryMethodsList.tsx":
/*!*******************************************************************************!*\
  !*** ./src/components/settings/pages/RecoveryMethods/RecoveryMethodsList.tsx ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RecoveryMethodsList": () => (/* binding */ RecoveryMethodsList)
/* harmony export */ });
/* harmony import */ var i18next__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! i18next */ "./node_modules/i18next/dist/esm/i18next.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _src_background_services_seedless_models__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/background/services/seedless/models */ "./src/background/services/seedless/models.ts");
/* harmony import */ var _src_contexts_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/contexts/AnalyticsProvider */ "./src/contexts/AnalyticsProvider.tsx");
/* harmony import */ var _common_seedless_components_RecoveryMethod__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../common/seedless/components/RecoveryMethod */ "./src/components/common/seedless/components/RecoveryMethod.tsx");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");





const RecoveryMethodsList = ({
  onMethodClick,
  asCards = false,
  excludeTotp = false
}) => {
  const {
    capture
  } = (0,_src_contexts_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_2__.useAnalyticsContext)();
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_common_seedless_components_RecoveryMethod__WEBPACK_IMPORTED_MODULE_3__.RecoveryMethod, {
    asCard: asCards,
    onClick: () => {
      capture('AddPasskeyClicked');
      onMethodClick(_src_background_services_seedless_models__WEBPACK_IMPORTED_MODULE_1__.RecoveryMethodType.Passkey);
    },
    methodIcon: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.KeyIcon, {
      size: 24,
      sx: {
        width: 28
      }
    }),
    methodName: (0,i18next__WEBPACK_IMPORTED_MODULE_0__.t)('Passkey'),
    methodDescription: (0,i18next__WEBPACK_IMPORTED_MODULE_0__.t)('Add a Passkey as a recovery method.')
  }), !excludeTotp && /*#__PURE__*/React.createElement(_common_seedless_components_RecoveryMethod__WEBPACK_IMPORTED_MODULE_3__.RecoveryMethod, {
    asCard: asCards,
    onClick: () => {
      capture('AddAuthenticatorClicked');
      onMethodClick(_src_background_services_seedless_models__WEBPACK_IMPORTED_MODULE_1__.RecoveryMethodType.Authenticator);
    },
    methodIcon: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.QRCodeIcon, {
      size: 24,
      sx: {
        width: 28
      }
    }),
    methodName: (0,i18next__WEBPACK_IMPORTED_MODULE_0__.t)('Authenticator'),
    methodDescription: (0,i18next__WEBPACK_IMPORTED_MODULE_0__.t)('Use an authenticator app as a recovery method.')
  }), /*#__PURE__*/React.createElement(_common_seedless_components_RecoveryMethod__WEBPACK_IMPORTED_MODULE_3__.RecoveryMethod, {
    asCard: asCards,
    onClick: () => {
      capture('AddYubikeyClicked');
      onMethodClick(_src_background_services_seedless_models__WEBPACK_IMPORTED_MODULE_1__.RecoveryMethodType.Yubikey);
    },
    methodIcon: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.UsbIcon, {
      size: 24,
      sx: {
        width: 28
      }
    }),
    methodName: (0,i18next__WEBPACK_IMPORTED_MODULE_0__.t)('Yubikey'),
    methodDescription: (0,i18next__WEBPACK_IMPORTED_MODULE_0__.t)('Add a Yubikey as a recovery method.')
  }));
};

/***/ }),

/***/ "./src/components/settings/pages/RecoveryPhrase.tsx":
/*!**********************************************************!*\
  !*** ./src/components/settings/pages/RecoveryPhrase.tsx ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RecoveryPhrase": () => (/* binding */ RecoveryPhrase)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _SettingsHeader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../SettingsHeader */ "./src/components/settings/SettingsHeader.tsx");
/* harmony import */ var _src_contexts_WalletProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/contexts/WalletProvider */ "./src/contexts/WalletProvider.tsx");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");





function RecoveryPhrase({
  goBack,
  navigateTo,
  width
}) {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_3__.useTranslation)();
  const [passwordValue, setPasswordValue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('');
  const [recoveryValue, setRecoveryValue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('');
  const [errorMessage, setErrorMessage] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('');
  const [fetchingRecoveryValue, setFetchingRecoveryValue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const {
    getUnencryptedMnemonic
  } = (0,_src_contexts_WalletProvider__WEBPACK_IMPORTED_MODULE_2__.useWalletContext)();
  const handleShowRecoveryPhrase = () => {
    setFetchingRecoveryValue(true);
    getUnencryptedMnemonic(passwordValue).then(res => {
      setRecoveryValue(res);
      setFetchingRecoveryValue(false);
    }).catch(err => {
      setErrorMessage(err);
      setFetchingRecoveryValue(false);
    });
  };
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.Stack, {
    sx: {
      width: `${width}`,
      height: '100%'
    }
  }, /*#__PURE__*/React.createElement(_SettingsHeader__WEBPACK_IMPORTED_MODULE_1__.SettingsHeader, {
    width: width,
    goBack: goBack,
    navigateTo: navigateTo,
    title: t('Recovery Phrase')
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.Stack, {
    sx: {
      mx: 2,
      flexDirection: 'row',
      alignItems: 'center'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.AlertTriangleIcon, {
    sx: {
      color: 'warning.main',
      fontSize: 24
    }
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.Typography, {
    variant: "body2",
    sx: {
      ml: 2
    }
  }, t('Do not share this phrase with anyone! These words can be used to steal all your accounts.'))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.Stack, {
    sx: {
      pt: 3,
      px: 2
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.TextField, {
    "data-testid": "recovery-phrase-password-input",
    type: "password",
    label: t('Password'),
    error: !!errorMessage,
    helperText: errorMessage,
    onChange: e => {
      setPasswordValue(e.target.value);
      setErrorMessage('');
    },
    placeholder: t('Enter password'),
    size: "small",
    fullWidth: true,
    sx: {
      mb: 2
    }
  }), fetchingRecoveryValue && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.LoadingDots, {
    size: 24
  }), recoveryValue && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.TextField, {
    "data-testid": "recovery-phrase",
    value: recoveryValue,
    label: t('Recovery Phrase'),
    multiline: true,
    InputProps: {
      readOnly: true
    }
  })), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.Stack, {
    sx: {
      flexGrow: '1',
      width: '100%',
      padding: '0 16px 24px',
      justifyContent: 'flex-end',
      alignContent: 'center'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.Typography, {
    variant: "caption",
    sx: {
      color: 'text.secondary',
      textAlign: 'center',
      mb: 2,
      px: 0.25
    }
  }, t('If you ever change browsers or move computers, you will need this Secret Recovery Phrase to access your accounts. Save them somewhere safe and secret.')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.Button, {
    "data-testid": "show-recovery-phrase-button",
    onClick: handleShowRecoveryPhrase,
    fullWidth: true,
    disabled: !!recoveryValue
  }, t('Show Recovery Phrase'))));
}

/***/ }),

/***/ "./src/components/settings/pages/SecurityAndPrivacy.tsx":
/*!**************************************************************!*\
  !*** ./src/components/settings/pages/SecurityAndPrivacy.tsx ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SecurityAndPrivacy": () => (/* binding */ SecurityAndPrivacy)
/* harmony export */ });
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models */ "./src/components/settings/models.ts");
/* harmony import */ var _SettingsHeader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../SettingsHeader */ "./src/components/settings/SettingsHeader.tsx");
/* harmony import */ var _src_contexts_WalletProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/contexts/WalletProvider */ "./src/contexts/WalletProvider.tsx");
/* harmony import */ var _src_contexts_SettingsProvider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @src/contexts/SettingsProvider */ "./src/contexts/SettingsProvider.tsx");
/* harmony import */ var _src_contexts_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @src/contexts/AnalyticsProvider */ "./src/contexts/AnalyticsProvider.tsx");
/* harmony import */ var _src_contexts_ConnectionProvider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @src/contexts/ConnectionProvider */ "./src/contexts/ConnectionProvider.tsx");
/* harmony import */ var _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @src/background/connections/extensionConnection/models */ "./src/background/connections/extensionConnection/models.ts");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/Trans.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _src_components_common_Dialog__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @src/components/common/Dialog */ "./src/components/common/Dialog.tsx");
/* harmony import */ var _src_background_services_seedless_seedlessAnalytics__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @src/background/services/seedless/seedlessAnalytics */ "./src/background/services/seedless/seedlessAnalytics.ts");
/* harmony import */ var _src_background_services_settings_models__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @src/background/services/settings/models */ "./src/background/services/settings/models.ts");
/* harmony import */ var _src_hooks_useAnalyticsConsentCallbacks__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @src/hooks/useAnalyticsConsentCallbacks */ "./src/hooks/useAnalyticsConsentCallbacks.ts");
/* harmony import */ var _src_background_services_secrets_models__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @src/background/services/secrets/models */ "./src/background/services/secrets/models.ts");
/* harmony import */ var _src_contexts_FeatureFlagsProvider__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @src/contexts/FeatureFlagsProvider */ "./src/contexts/FeatureFlagsProvider.tsx");
/* harmony import */ var _src_background_services_featureFlags_models__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @src/background/services/featureFlags/models */ "./src/background/services/featureFlags/models.ts");
/* harmony import */ var _src_contexts_SeedlessMfaManagementProvider__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @src/contexts/SeedlessMfaManagementProvider */ "./src/contexts/SeedlessMfaManagementProvider.tsx");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");


















function SecurityAndPrivacy({
  goBack,
  navigateTo,
  width,
  showNotificationDotOn = []
}) {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_16__.useTranslation)();
  const {
    walletDetails
  } = (0,_src_contexts_WalletProvider__WEBPACK_IMPORTED_MODULE_2__.useWalletContext)();
  const {
    isMfaSetupPromptVisible
  } = (0,_src_contexts_SeedlessMfaManagementProvider__WEBPACK_IMPORTED_MODULE_15__.useSeedlessMfaManager)();
  const {
    analyticsConsent
  } = (0,_src_contexts_SettingsProvider__WEBPACK_IMPORTED_MODULE_3__.useSettingsContext)();
  const {
    onApproval,
    onRejection
  } = (0,_src_hooks_useAnalyticsConsentCallbacks__WEBPACK_IMPORTED_MODULE_11__.useAnalyticsConsentCallbacks)('settings');
  const {
    capture,
    stopDataCollection
  } = (0,_src_contexts_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_4__.useAnalyticsContext)();
  const {
    request
  } = (0,_src_contexts_ConnectionProvider__WEBPACK_IMPORTED_MODULE_5__.useConnectionContext)();
  const [showLogoutDialog, setShowLogoutDialog] = (0,react__WEBPACK_IMPORTED_MODULE_7__.useState)(false);
  const {
    featureFlags
  } = (0,_src_contexts_FeatureFlagsProvider__WEBPACK_IMPORTED_MODULE_13__.useFeatureFlagContext)();
  const areMfaSettingsAvailable = featureFlags[_src_background_services_featureFlags_models__WEBPACK_IMPORTED_MODULE_14__.FeatureGates.SEEEDLESS_MFA_SETTINGS];
  const logoutDialogContent = /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Stack, {
    sx: {
      justifyContent: 'center'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Typography, {
    variant: "h5",
    sx: {
      textAlign: 'center'
    }
  }, /*#__PURE__*/React.createElement(react_i18next__WEBPACK_IMPORTED_MODULE_18__.Trans, {
    i18nKey: "Have you recorded your<br /> recovery phrase?"
  })), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Typography, {
    variant: "body2",
    sx: {
      textAlign: 'center',
      mt: 1
    }
  }, t('Without it you will not be able to sign back in to your account.')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Stack, {
    sx: {
      mt: 3
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Button, {
    sx: {
      mb: 1
    },
    onClick: async () => {
      await capture('RecoveryPhraseResetApproved');
      await stopDataCollection();
      request({
        method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_6__.ExtensionRequest.RESET_EXTENSION_STATE,
        params: [true]
      });
      setShowLogoutDialog(false);
    }
  }, t('Yes')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Button, {
    variant: "text",
    onClick: () => {
      capture('RecoveryPhraseResetDeclined');
      setShowLogoutDialog(false);
    }
  }, t('No'))));
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Stack, {
    sx: {
      width: `${width}`,
      height: '100%'
    }
  }, /*#__PURE__*/React.createElement(_SettingsHeader__WEBPACK_IMPORTED_MODULE_1__.SettingsHeader, {
    width: width,
    goBack: goBack,
    navigateTo: navigateTo,
    title: t('Security & Privacy')
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.List, {
    sx: {
      mb: 2
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.ListItem, {
    sx: {
      p: 0
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.ListItemButton, {
    sx: {
      justifyContent: 'space-between',
      py: 1,
      px: 2,
      m: 0,
      '&:hover': {
        borderRadius: 0
      }
    },
    "data-testid": "connected-sites-menu-item",
    onClick: () => {
      capture('ConnectedSitesClicked');
      navigateTo(_models__WEBPACK_IMPORTED_MODULE_0__.SettingsPages.CONNECTED_SITES);
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.ListItemText, {
    primaryTypographyProps: {
      variant: 'body2'
    }
  }, t('Connected Sites')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.ListItemIcon, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.ChevronRightIcon, {
    size: 24
  })))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.ListItem, {
    sx: {
      p: 0
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.ListItemButton, {
    sx: {
      justifyContent: 'space-between',
      py: 1,
      px: 2,
      m: 0,
      '&:hover': {
        borderRadius: 0
      }
    },
    "data-testid": "change-password-menu-item",
    onClick: () => {
      capture('ChangePasswordClicked');
      navigateTo(_models__WEBPACK_IMPORTED_MODULE_0__.SettingsPages.CHANGE_PASSWORD);
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.ListItemText, {
    primaryTypographyProps: {
      variant: 'body2'
    }
  }, t('Change Password')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.ListItemIcon, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.ChevronRightIcon, {
    size: 24
  })))), walletDetails?.type === _src_background_services_secrets_models__WEBPACK_IMPORTED_MODULE_12__.SecretType.Seedless && areMfaSettingsAvailable && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.ListItem, {
    sx: {
      p: 0
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.ListItemButton, {
    sx: {
      justifyContent: 'space-between',
      py: 1,
      px: 2,
      m: 0,
      '&:hover': {
        borderRadius: 0
      }
    },
    "data-testid": "recovery-methods",
    onClick: () => {
      capture('RecoveryMethodsClicked');
      navigateTo(_models__WEBPACK_IMPORTED_MODULE_0__.SettingsPages.RECOVERY_METHODS);
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.ListItemText, {
    primaryTypographyProps: {
      variant: 'body2'
    }
  }, t('Recovery Methods')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.ListItemIcon, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.ChevronRightIcon, {
    size: 24
  })))), walletDetails?.type === _src_background_services_secrets_models__WEBPACK_IMPORTED_MODULE_12__.SecretType.Mnemonic && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.ListItem, {
    sx: {
      p: 0
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.ListItemButton, {
    sx: {
      justifyContent: 'space-between',
      py: 1,
      px: 2,
      m: 0,
      '&:hover': {
        borderRadius: 0
      }
    },
    "data-testid": "show-recovery-phrase-menu-item",
    onClick: () => navigateTo(_models__WEBPACK_IMPORTED_MODULE_0__.SettingsPages.RECOVERY_PHRASE)
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.ListItemText, {
    primaryTypographyProps: {
      variant: 'body2'
    }
  }, t('Show Recovery Phrase')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.ListItemIcon, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.ChevronRightIcon, {
    size: 24
  })))), walletDetails?.type === _src_background_services_secrets_models__WEBPACK_IMPORTED_MODULE_12__.SecretType.Seedless && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.ListItem, {
    sx: {
      p: 0
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Tooltip, {
    sx: {
      justifyContent: 'space-between',
      width: 1,
      cursor: 'not-allowed'
    },
    title: isMfaSetupPromptVisible ? t('Please configure multi-factor authentication first.') : ''
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.ListItemButton, {
    sx: {
      justifyContent: 'space-between',
      py: 1,
      px: 2,
      m: 0,
      '&:hover': {
        borderRadius: 0
      }
    },
    "data-testid": "seedless-export-recovery-phrase-menu-item",
    onClick: () => {
      capture(_src_background_services_seedless_seedlessAnalytics__WEBPACK_IMPORTED_MODULE_9__.SeedlessExportAnalytics.MenuItemClicked);
      navigateTo(_models__WEBPACK_IMPORTED_MODULE_0__.SettingsPages.EXPORT_RECOVERY_PHRASE);
    },
    disabled: isMfaSetupPromptVisible
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Badge, {
    color: "secondary",
    variant: "dot",
    invisible: !showNotificationDotOn.includes(_models__WEBPACK_IMPORTED_MODULE_0__.SettingsPages.EXPORT_RECOVERY_PHRASE)
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.ListItemText, {
    primaryTypographyProps: {
      variant: 'body2'
    }
  }, t('Export Recovery Phrase'))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.ListItemIcon, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.ChevronRightIcon, {
    size: 24
  }))))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.ListItem, {
    "data-testid": "participate-core-analytics-menu-item"
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.ListItemText, {
    primaryTypographyProps: {
      variant: 'body2'
    }
  }, t('Participate in Core Analytics')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Switch, {
    size: "small",
    checked: analyticsConsent === _src_background_services_settings_models__WEBPACK_IMPORTED_MODULE_10__.AnalyticsConsent.Approved,
    onChange: async ev => {
      const newConsent = ev.target.checked;
      if (newConsent) {
        onApproval();
      } else {
        onRejection();
      }
    }
  }))), walletDetails?.type !== _src_background_services_secrets_models__WEBPACK_IMPORTED_MODULE_12__.SecretType.Seedless && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Divider, null), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Stack, {
    sx: {
      mt: 3,
      px: 2
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__.Button, {
    variant: "text",
    color: "error",
    size: "medium",
    "data-testid": "reset-recovery-phrase-menu-item",
    onClick: () => {
      capture('RecoveryPhraseResetClicked');
      setShowLogoutDialog(true);
    }
  }, t('Reset Secret Recovery Phrase'))), /*#__PURE__*/React.createElement(_src_components_common_Dialog__WEBPACK_IMPORTED_MODULE_8__["default"], {
    open: showLogoutDialog,
    onClose: () => setShowLogoutDialog(false),
    content: logoutDialogContent,
    bgColorDefault: true
  })));
}

/***/ }),

/***/ "./src/contexts/AccountsProvider.tsx":
/*!*******************************************!*\
  !*** ./src/contexts/AccountsProvider.tsx ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AccountsContextProvider": () => (/* binding */ AccountsContextProvider),
/* harmony export */   "useAccountsContext": () => (/* binding */ useAccountsContext)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _src_contexts_ConnectionProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/contexts/ConnectionProvider */ "./src/contexts/ConnectionProvider.tsx");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/dist/esm5/internal/observable/concat.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/dist/esm5/internal/observable/from.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/dist/esm5/internal/operators/filter.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/dist/esm5/internal/operators/map.js");
/* harmony import */ var _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/background/connections/extensionConnection/models */ "./src/background/connections/extensionConnection/models.ts");
/* harmony import */ var _src_background_services_accounts_events_accountsUpdatedEventListener__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @src/background/services/accounts/events/accountsUpdatedEventListener */ "./src/background/services/accounts/events/accountsUpdatedEventListener.ts");
/* harmony import */ var _src_utils_getAllAddressesForAccount__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @src/utils/getAllAddressesForAccount */ "./src/utils/getAllAddressesForAccount.ts");
/* harmony import */ var _src_background_connections_dAppConnection_models__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @src/background/connections/dAppConnection/models */ "./src/background/connections/dAppConnection/models.ts");
/* harmony import */ var _src_utils_address__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @src/utils/address */ "./src/utils/address.ts");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");








const AccountsContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({});
function AccountsContextProvider({
  children
}) {
  const {
    request,
    events
  } = (0,_src_contexts_ConnectionProvider__WEBPACK_IMPORTED_MODULE_1__.useConnectionContext)();
  const [accounts, setAccounts] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({
    active: undefined,
    primary: {},
    imported: {}
  });
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!request || !events) {
      return;
    }
    const subscription = (0,rxjs__WEBPACK_IMPORTED_MODULE_7__.concat)((0,rxjs__WEBPACK_IMPORTED_MODULE_8__.from)(request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.ACCOUNT_GET_ACCOUNTS
    })), events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_9__.filter)(_src_background_services_accounts_events_accountsUpdatedEventListener__WEBPACK_IMPORTED_MODULE_3__.accountsUpdatedEventListener), (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.map)(evt => {
      return evt.value;
    }))).subscribe(result => {
      setAccounts(result);
    });
    return () => {
      subscription.unsubscribe();
    };
  }, [events, request]);
  const allAccounts = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => [...Object.values(accounts.primary).flat(), ...Object.values(accounts.imported)], [accounts.imported, accounts.primary]);
  const getAllAccountsForVM = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(vm => allAccounts.filter(acc => (0,_src_utils_address__WEBPACK_IMPORTED_MODULE_6__.getAddressByVMType)(acc, vm)), [allAccounts]);
  const getAccount = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(address => allAccounts.find(acc => (0,_src_utils_getAllAddressesForAccount__WEBPACK_IMPORTED_MODULE_4__["default"])(acc).map(addy => addy?.toLowerCase()).includes(address.toLowerCase())), [allAccounts]);
  const getAccountById = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(accountId => allAccounts.find(acc => acc.id.toLowerCase() === accountId.toLowerCase()), [allAccounts]);
  const selectAccount = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(id => {
    return request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.ACCOUNT_SELECT,
      params: [id]
    });
  }, [request]);
  const renameAccount = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((id, name) => {
    return request({
      method: _src_background_connections_dAppConnection_models__WEBPACK_IMPORTED_MODULE_5__.DAppProviderRequest.ACCOUNT_RENAME,
      params: [id, name]
    });
  }, [request]);
  const addAccount = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((name, importData, walletId) => request({
    method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.ACCOUNT_ADD,
    params: {
      name,
      importData,
      walletId
    }
  }), [request]);
  const deleteAccounts = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(ids => request({
    method: _src_background_connections_dAppConnection_models__WEBPACK_IMPORTED_MODULE_5__.DAppProviderRequest.ACCOUNTS_DELETE,
    params: [ids]
  }), [request]);
  const isActiveAccount = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(id => {
    return accounts.active?.id === id;
  }, [accounts]);
  return /*#__PURE__*/React.createElement(AccountsContext.Provider, {
    value: {
      accounts,
      getAccount,
      getAccountById,
      allAccounts,
      getAllAccountsForVM,
      isActiveAccount,
      selectAccount,
      renameAccount,
      addAccount,
      deleteAccounts
    }
  }, children);
}
function useAccountsContext() {
  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(AccountsContext);
}

/***/ }),

/***/ "./src/contexts/ApprovalsProvider.tsx":
/*!********************************************!*\
  !*** ./src/contexts/ApprovalsProvider.tsx ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ApprovalsContext": () => (/* binding */ ApprovalsContext),
/* harmony export */   "ApprovalsContextProvider": () => (/* binding */ ApprovalsContextProvider),
/* harmony export */   "useApprovalsContext": () => (/* binding */ useApprovalsContext)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/dist/esm5/internal/operators/filter.js");
/* harmony import */ var _src_background_services_approvals_events_approvalEventFilters__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/background/services/approvals/events/approvalEventFilters */ "./src/background/services/approvals/events/approvalEventFilters.ts");
/* harmony import */ var _src_background_services_actions_events_actionEventFilters__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/background/services/actions/events/actionEventFilters */ "./src/background/services/actions/events/actionEventFilters.ts");
/* harmony import */ var _ConnectionProvider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ConnectionProvider */ "./src/contexts/ConnectionProvider.tsx");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");





const ApprovalsContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({
  approval: undefined
});
function ApprovalsContextProvider({
  children
}) {
  const {
    events,
    tabId
  } = (0,_ConnectionProvider__WEBPACK_IMPORTED_MODULE_3__.useConnectionContext)();
  const [approval, setApproval] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const approvalRequests = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_4__.filter)(_src_background_services_approvals_events_approvalEventFilters__WEBPACK_IMPORTED_MODULE_1__.isApprovalRequest)).subscribe(async event => {
      if (tabId !== event.value.action.tabId) {
        return;
      }
      setApproval(event.value);
    });
    return () => {
      approvalRequests.unsubscribe();
    };
  }, [events, tabId]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const actionsUpdates = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_4__.filter)(_src_background_services_actions_events_actionEventFilters__WEBPACK_IMPORTED_MODULE_2__.isActionsUpdate)).subscribe(async event => {
      setApproval(prev => {
        if (!prev) {
          return undefined;
        }
        const updatedAction = event.value[prev.action.actionId];

        // If the action was completed (removed), clean up the state.
        if (!updatedAction) {
          return undefined;
        }

        // Otherwise it may have been updated -> update state.
        return {
          ...prev,
          action: updatedAction
        };
      });
    });
    return () => {
      actionsUpdates.unsubscribe();
    };
  }, [events]);
  return /*#__PURE__*/React.createElement(ApprovalsContext.Provider, {
    value: {
      approval
    }
  }, children);
}
function useApprovalsContext() {
  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ApprovalsContext);
}

/***/ }),

/***/ "./src/contexts/BalancesProvider.tsx":
/*!*******************************************!*\
  !*** ./src/contexts/BalancesProvider.tsx ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BalancesProvider": () => (/* binding */ BalancesProvider),
/* harmony export */   "IPFS_URL": () => (/* binding */ IPFS_URL),
/* harmony export */   "useBalancesContext": () => (/* binding */ useBalancesContext)
/* harmony export */ });
/* harmony import */ var _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @src/background/connections/extensionConnection/models */ "./src/background/connections/extensionConnection/models.ts");
/* harmony import */ var _src_contexts_ConnectionProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/contexts/ConnectionProvider */ "./src/contexts/ConnectionProvider.tsx");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/dist/esm5/internal/operators/filter.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/dist/esm5/internal/operators/map.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _avalabs_glacier_sdk__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @avalabs/glacier-sdk */ "./node_modules/@avalabs/glacier-sdk/esm/generated/models/Erc721Token.js");
/* harmony import */ var _AccountsProvider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./AccountsProvider */ "./src/contexts/AccountsProvider.tsx");
/* harmony import */ var _NetworkProvider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./NetworkProvider */ "./src/contexts/NetworkProvider.tsx");
/* harmony import */ var _src_background_services_balances_events_balancesUpdatedEventListener__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @src/background/services/balances/events/balancesUpdatedEventListener */ "./src/background/services/balances/events/balancesUpdatedEventListener.ts");
/* harmony import */ var _src_utils_ipsfResolverWithFallback__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @src/utils/ipsfResolverWithFallback */ "./src/utils/ipsfResolverWithFallback.ts");
/* harmony import */ var _src_background_services_balances_nft_utils_getSmallImageForNFT__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @src/background/services/balances/nft/utils/getSmallImageForNFT */ "./src/background/services/balances/nft/utils/getSmallImageForNFT.ts");
/* harmony import */ var _src_utils_calculateTotalBalance__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @src/utils/calculateTotalBalance */ "./src/utils/calculateTotalBalance.ts");
/* harmony import */ var _src_utils_getAddressForChain__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @src/utils/getAddressForChain */ "./src/utils/getAddressForChain.ts");
/* harmony import */ var _src_utils_getDefaultChainIds__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @src/utils/getDefaultChainIds */ "./src/utils/getDefaultChainIds.ts");
/* harmony import */ var _src_utils_typeUtils__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @src/utils/typeUtils */ "./src/utils/typeUtils.ts");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");















const IPFS_URL = 'https://ipfs.io';
var BalanceActionType = /*#__PURE__*/function (BalanceActionType) {
  BalanceActionType["UPDATE_BALANCES"] = "UPDATE_BALANCES";
  BalanceActionType["SET_LOADING"] = "SET_LOADING";
  BalanceActionType["UPDATE_NFT_METADATA"] = "UPDATE_NFT_METADATA";
  return BalanceActionType;
}(BalanceActionType || {});
const BalancesContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_2__.createContext)({
  balances: {
    loading: true
  },
  getTokenPrice() {
    return undefined;
  },
  async refreshNftMetadata() {},
  async updateBalanceOnNetworks() {},
  registerSubscriber() {},
  unregisterSubscriber() {},
  isTokensCached: true,
  totalBalance: undefined,
  getTotalBalance() {
    return undefined;
  }
});
function balancesReducer(state, action) {
  switch (action.type) {
    case BalanceActionType.SET_LOADING:
      return {
        ...state,
        loading: action.payload
      };
    case BalanceActionType.UPDATE_BALANCES:
      {
        if (!Object.keys(action.payload).length) {
          return {
            ...state
          };
        }
        return {
          ...state,
          loading: false,
          cached: action.payload.isBalancesCached,
          // use deep merge to make sure we keep all accounts in there, even after a partial update
          tokens: (0,lodash__WEBPACK_IMPORTED_MODULE_3__.merge)({}, state.tokens, action.payload.balances?.tokens),
          nfts: {
            ...state.nfts,
            ...action.payload.balances?.nfts
          }
        };
      }
    case BalanceActionType.UPDATE_NFT_METADATA:
      return {
        ...state,
        nfts: updateMatchingNftMetadata({
          chainId: action.payload.chainId,
          address: action.payload.address,
          tokenId: action.payload.tokenId,
          newTokenData: action.payload.updates,
          nfts: state.nfts
        })
      };
    default:
      throw new Error();
  }
}
function BalancesProvider({
  children
}) {
  const {
    request,
    events
  } = (0,_src_contexts_ConnectionProvider__WEBPACK_IMPORTED_MODULE_1__.useConnectionContext)();
  const {
    network,
    favoriteNetworks,
    getNetwork
  } = (0,_NetworkProvider__WEBPACK_IMPORTED_MODULE_5__.useNetworkContext)();
  const {
    accounts: {
      active: activeAccount
    },
    getAccount
  } = (0,_AccountsProvider__WEBPACK_IMPORTED_MODULE_4__.useAccountsContext)();
  const [balances, dispatch] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useReducer)(balancesReducer, {
    loading: true,
    cached: true
  });
  const [subscribers, setSubscribers] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)({});
  const polledChainIds = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(() => favoriteNetworks.map(({
    chainId
  }) => chainId), [favoriteNetworks]);
  const registerSubscriber = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(tokenTypes => {
    setSubscribers(oldSubscribers => tokenTypes.reduce((newSubscribers, tokenType) => ({
      ...newSubscribers,
      [tokenType]: (newSubscribers[tokenType] ?? 0) + 1
    }), oldSubscribers));
  }, []);
  const unregisterSubscriber = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(tokenTypes => {
    setSubscribers(oldSubscribers => tokenTypes.reduce((newSubscribers, tokenType) => ({
      ...newSubscribers,
      [tokenType]: Math.max((newSubscribers[tokenType] ?? 0) - 1, 0)
    }), oldSubscribers));
  }, []);
  (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(() => {
    const subscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_13__.filter)(_src_background_services_balances_events_balancesUpdatedEventListener__WEBPACK_IMPORTED_MODULE_6__.balancesUpdatedEventListener), (0,rxjs__WEBPACK_IMPORTED_MODULE_14__.map)(evt => evt.value)).subscribe(balancesData => {
      dispatch({
        type: BalanceActionType.UPDATE_BALANCES,
        payload: balancesData
      });
    });
    return () => {
      subscription.unsubscribe();
    };
  }, [events]);
  (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(() => {
    dispatch({
      type: BalanceActionType.SET_LOADING,
      payload: true
    });
    request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_0__.ExtensionRequest.BALANCES_GET
    }).then(balancesData => {
      dispatch({
        type: BalanceActionType.UPDATE_BALANCES,
        payload: balancesData
      });
    });
  }, [request]);
  (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(() => {
    if (!activeAccount) {
      return;
    }
    const tokenTypes = Object.entries(subscribers).filter(([, subscriberCount]) => subscriberCount > 0).map(([tokenType]) => tokenType);
    if (tokenTypes.length > 0) {
      request({
        method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_0__.ExtensionRequest.BALANCES_START_POLLING,
        params: [activeAccount, polledChainIds, tokenTypes]
      }).then(balancesData => {
        dispatch({
          type: BalanceActionType.UPDATE_BALANCES,
          payload: balancesData
        });
      });
    } else {
      request({
        method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_0__.ExtensionRequest.BALANCES_STOP_POLLING
      });
    }
    return () => {
      request({
        method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_0__.ExtensionRequest.BALANCES_STOP_POLLING
      });
    };
  }, [request, activeAccount, network?.chainId, polledChainIds, subscribers]);
  const updateBalanceOnNetworks = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(async (accounts, chainIds) => {
    if (!network && !chainIds?.length) {
      return;
    }
    const updatedBalances = await request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_0__.ExtensionRequest.NETWORK_BALANCES_UPDATE,
      params: [accounts, chainIds]
    });
    dispatch({
      type: BalanceActionType.UPDATE_BALANCES,
      payload: {
        balances: updatedBalances,
        isBalancesCached: false
      }
    });
  }, [network, request]);
  const refreshNftMetadata = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(async (address, chainId, tokenId) => {
    const result = await request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_0__.ExtensionRequest.NFT_REFRESH_METADATA,
      params: [address, chainId, tokenId]
    });
    if (result.metadata) {
      dispatch({
        type: BalanceActionType.UPDATE_NFT_METADATA,
        payload: {
          address,
          chainId,
          tokenId,
          updates: result
        }
      });
    }
  }, [request]);
  const getTotalBalance = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(addressC => {
    const chainIds = [network?.chainId, ...(0,_src_utils_getDefaultChainIds__WEBPACK_IMPORTED_MODULE_11__.getDefaultChainIds)(!network?.isTestnet), ...favoriteNetworks.map(({
      chainId
    }) => chainId)].filter(_src_utils_typeUtils__WEBPACK_IMPORTED_MODULE_12__.isNotNullish);
    const networks = chainIds.map(getNetwork).filter(_src_utils_typeUtils__WEBPACK_IMPORTED_MODULE_12__.isNotNullish);
    if (balances.tokens && network?.chainId) {
      return (0,_src_utils_calculateTotalBalance__WEBPACK_IMPORTED_MODULE_9__.calculateTotalBalance)(getAccount(addressC), networks, balances.tokens);
    }
    return undefined;
  }, [getAccount, favoriteNetworks, getNetwork, network?.chainId, network?.isTestnet, balances.tokens]);
  const getTokenPrice = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((addressOrSymbol, lookupNetwork) => {
    if (!activeAccount) {
      return;
    }
    const tokenNetwork = lookupNetwork ?? network;
    if (!tokenNetwork) {
      return;
    }
    const addressForChain = (0,_src_utils_getAddressForChain__WEBPACK_IMPORTED_MODULE_10__.getAddressForChain)(tokenNetwork, activeAccount);
    if (!addressForChain) {
      return;
    }
    const token = balances.tokens?.[tokenNetwork.chainId]?.[addressForChain]?.[addressOrSymbol];
    return token?.priceInCurrency;
  }, [balances.tokens, activeAccount, network]);
  return /*#__PURE__*/React.createElement(BalancesContext.Provider, {
    value: {
      balances,
      getTokenPrice,
      refreshNftMetadata,
      updateBalanceOnNetworks,
      registerSubscriber,
      unregisterSubscriber,
      isTokensCached: balances.cached ?? true,
      totalBalance: activeAccount ? getTotalBalance(activeAccount.addressC) : undefined,
      getTotalBalance
    }
  }, children);
}
function useBalancesContext() {
  return (0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(BalancesContext);
}
const updateMatchingNftMetadata = ({
  address,
  chainId,
  tokenId,
  nfts,
  newTokenData
}) => {
  const existingTokenData = nfts?.[chainId]?.[address]?.[tokenId];
  if (!existingTokenData) {
    return nfts;
  }
  const isErc721 = newTokenData.ercType === _avalabs_glacier_sdk__WEBPACK_IMPORTED_MODULE_15__.Erc721Token.ercType.ERC_721;
  const imageProps = newTokenData.metadata.imageUri ? {
    logoUri: (0,_src_utils_ipsfResolverWithFallback__WEBPACK_IMPORTED_MODULE_7__.ipfsResolverWithFallback)(newTokenData.metadata.imageUri),
    logoSmall: (0,_src_background_services_balances_nft_utils_getSmallImageForNFT__WEBPACK_IMPORTED_MODULE_8__.getSmallImageForNFT)(newTokenData.metadata.imageUri)
  } : {};
  return {
    ...nfts,
    [chainId]: {
      ...nfts[chainId],
      [address]: {
        ...nfts[chainId]?.[address],
        [tokenId]: {
          ...existingTokenData,
          metadata: {
            description: newTokenData.metadata.description,
            lastUpdatedTimestamp: newTokenData.metadata.metadataLastUpdatedTimestamp,
            properties: isErc721 ? newTokenData.metadata.attributes : newTokenData.metadata.properties
          },
          ...imageProps
        }
      }
    }
  };
};

/***/ }),

/***/ "./src/contexts/BridgeProvider.tsx":
/*!*****************************************!*\
  !*** ./src/contexts/BridgeProvider.tsx ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BridgeProvider": () => (/* binding */ BridgeProvider),
/* harmony export */   "useBridgeContext": () => (/* binding */ useBridgeContext)
/* harmony export */ });
/* harmony import */ var _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @avalabs/core-bridge-sdk */ "./node_modules/@avalabs/core-bridge-sdk/esm/runtime/config.js");
/* harmony import */ var _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @avalabs/core-bridge-sdk */ "./node_modules/@avalabs/core-bridge-sdk/esm/types/config.js");
/* harmony import */ var _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @avalabs/core-bridge-sdk */ "./node_modules/@avalabs/core-bridge-sdk/esm/contexts/BridgeSDKProvider.js");
/* harmony import */ var _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @avalabs/core-bridge-sdk */ "./node_modules/@avalabs/core-bridge-sdk/esm/utils/estimateGas.js");
/* harmony import */ var _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @avalabs/core-bridge-sdk */ "./node_modules/@avalabs/core-bridge-sdk/esm/lib/transferAssetEVM.js");
/* harmony import */ var _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @avalabs/core-bridge-sdk */ "./node_modules/@avalabs/core-bridge-sdk/esm/lib/models.js");
/* harmony import */ var _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @avalabs/core-chains-sdk */ "./node_modules/@avalabs/core-chains-sdk/esm/models.js");
/* harmony import */ var _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @src/background/connections/extensionConnection/models */ "./src/background/connections/extensionConnection/models.ts");
/* harmony import */ var _src_background_services_bridge_events_listeners__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/background/services/bridge/events/listeners */ "./src/background/services/bridge/events/listeners.ts");
/* harmony import */ var _src_background_services_bridge_models__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/background/services/bridge/models */ "./src/background/services/bridge/models.ts");
/* harmony import */ var _src_background_services_bridge_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @src/background/services/bridge/utils */ "./src/background/services/bridge/utils.ts");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/dist/esm5/internal/operators/filter.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/dist/esm5/internal/operators/map.js");
/* harmony import */ var _ConnectionProvider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ConnectionProvider */ "./src/contexts/ConnectionProvider.tsx");
/* harmony import */ var _NetworkProvider__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./NetworkProvider */ "./src/contexts/NetworkProvider.tsx");
/* harmony import */ var _AccountsProvider__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./AccountsProvider */ "./src/contexts/AccountsProvider.tsx");
/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ethers */ "./node_modules/ethers/lib.esm/utils/maths.js");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @avalabs/vm-module-types */ "./node_modules/@avalabs/vm-module-types/dist/index.js");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");














const bridgeContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_4__.createContext)({});
function BridgeProvider({
  children
}) {
  const {
    network
  } = (0,_NetworkProvider__WEBPACK_IMPORTED_MODULE_6__.useNetworkContext)();
  (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(() => {
    (0,_avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_9__.setBridgeEnvironment)(network?.chainId === _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_10__.ChainId.AVALANCHE_MAINNET_ID ? _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_11__.Environment.PROD : _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_11__.Environment.TEST);
  }, [network]);
  return /*#__PURE__*/React.createElement(_avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_12__.BridgeSDKProvider, null, /*#__PURE__*/React.createElement(InnerBridgeProvider, null, children));
}
function useBridgeContext() {
  return (0,react__WEBPACK_IMPORTED_MODULE_4__.useContext)(bridgeContext);
}

// This component is separate so it has access to useBridgeSDK
function InnerBridgeProvider({
  children
}) {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_13__.useTranslation)();
  const {
    request,
    events
  } = (0,_ConnectionProvider__WEBPACK_IMPORTED_MODULE_5__.useConnectionContext)();
  const {
    currentBlockchain,
    bridgeConfig
  } = (0,_avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_12__.useBridgeSDK)();
  const {
    network,
    avaxProviderC,
    ethereumProvider
  } = (0,_NetworkProvider__WEBPACK_IMPORTED_MODULE_6__.useNetworkContext)();
  const {
    accounts: {
      active
    }
  } = (0,_AccountsProvider__WEBPACK_IMPORTED_MODULE_7__.useAccountsContext)();
  const [bridgeState, setBridgeState] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(_src_background_services_bridge_models__WEBPACK_IMPORTED_MODULE_2__.DefaultBridgeState);
  // Separate from bridgeState so they can be filtered to the current network
  const [bridgeTransactions, setBridgeTransactions] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)({});
  const [isBridgeDevEnv, setIsDevEnvInternal] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(false);
  (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(() => {
    if (!events) {
      return;
    }
    request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_0__.ExtensionRequest.BRIDGE_GET_STATE
    }).then(txs => {
      setBridgeState(txs);
    });
    const subscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_14__.filter)(_src_background_services_bridge_events_listeners__WEBPACK_IMPORTED_MODULE_1__.isBridgeStateUpdateEventListener), (0,rxjs__WEBPACK_IMPORTED_MODULE_15__.map)(evt => evt.value)).subscribe(txs => {
      setBridgeState(txs);
    });
    return () => subscription.unsubscribe();
  }, [events, request]);
  (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(() => {
    if (!network) return;
    const filteredState = (0,_src_background_services_bridge_utils__WEBPACK_IMPORTED_MODULE_3__.filterBridgeStateToNetwork)(bridgeState, network);
    setBridgeTransactions(filteredState.bridgeTransactions);
    setIsDevEnvInternal(filteredState.isDevEnv);
  }, [bridgeState, network]);
  const createBridgeTransaction = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(async bridgeTransaction => {
    await request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_0__.ExtensionRequest.BRIDGE_TRANSACTION_CREATE,
      params: bridgeTransaction
    });
  }, [request]);
  const removeBridgeTransaction = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(async txHash => {
    await request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_0__.ExtensionRequest.BRIDGE_TRANSACTION_REMOVE,
      params: [txHash]
    });
  }, [request]);
  const setIsBridgeDevEnv = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(enabled => {
    request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_0__.ExtensionRequest.BRIDGE_SET_IS_DEV_ENV,
      params: [enabled]
    });
  }, [request]);
  const estimateGas = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(async (amount, asset) => {
    const isEvmSourceChain = currentBlockchain === _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_11__.Blockchain.ETHEREUM || _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_11__.Blockchain.AVALANCHE;
    if (!isEvmSourceChain || !active?.addressC || !ethereumProvider || !avaxProviderC || !bridgeConfig.config) {
      return;
    }
    return (0,_avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_16__.estimateGas)(amount, active.addressC, asset, {
      ethereum: ethereumProvider,
      avalanche: avaxProviderC
    }, bridgeConfig.config, currentBlockchain);
  }, [currentBlockchain, active?.addressC, avaxProviderC, ethereumProvider, bridgeConfig.config]);
  const transferEVMAsset = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(async (amount, asset) => {
    let currentSignature = 1;
    let requiredSignatures = 1;
    if (currentBlockchain !== _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_11__.Blockchain.ETHEREUM && currentBlockchain !== _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_11__.Blockchain.AVALANCHE) {
      throw new Error('Wrong source chain');
    }
    const result = await (0,_avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_17__.transferAssetEVM)({
      currentBlockchain,
      amount,
      account: active?.addressC,
      asset,
      avalancheProvider: avaxProviderC,
      ethereumProvider: ethereumProvider,
      config: bridgeConfig.config,
      onStatusChange: status => {
        if (status === _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_18__.WrapStatus.WAITING_FOR_DEPOSIT_CONFIRMATION) {
          requiredSignatures = 2;
        }
        if (requiredSignatures > 1 && status === _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_18__.WrapStatus.WAITING_FOR_CONFIRMATION) {
          currentSignature = 2;
        }
      },
      onTxHashChange: () => {},
      signAndSendEVM: txData => {
        const tx = txData;
        return request({
          method: _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_8__.RpcMethod.ETH_SEND_TRANSACTION,
          params: [{
            ...mapNumberishToHex(tx),
            // erase gasPrice if maxFeePerGas can be used
            gasPrice: tx.maxFeePerGas ? undefined : tx.gasPrice ? (0,ethers__WEBPACK_IMPORTED_MODULE_19__.toBeHex)(tx.gasPrice) : undefined
          }]
        }, {
          customApprovalScreenTitle: t('Confirm Bridge'),
          alert: requiredSignatures > currentSignature ? {
            type: 'info',
            title: t('This operation requires {{total}} approvals.', {
              total: requiredSignatures
            }),
            notice: t('You will be prompted {{remaining}} more time(s).', {
              remaining: requiredSignatures - currentSignature
            })
          } : undefined
        });
      }
    });
    return {
      hash: result
    };
  }, [active?.addressC, avaxProviderC, bridgeConfig.config, currentBlockchain, ethereumProvider, request, t]);
  return /*#__PURE__*/React.createElement(bridgeContext.Provider, {
    value: {
      bridgeTransactions,
      estimateGas,
      transferEVMAsset,
      removeBridgeTransaction,
      createBridgeTransaction,
      isBridgeDevEnv,
      setIsBridgeDevEnv,
      bridgeState
    }
  }, children);
}
const mapNumberishToHex = tx => Object.fromEntries(Object.entries(tx).map(([key, value]) => [key, typeof value === 'number' || typeof value === 'bigint' ? (0,ethers__WEBPACK_IMPORTED_MODULE_19__.toBeHex)(value) : value]));

/***/ }),

/***/ "./src/contexts/ContactsProvider.tsx":
/*!*******************************************!*\
  !*** ./src/contexts/ContactsProvider.tsx ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ContactsContextProvider": () => (/* binding */ ContactsContextProvider),
/* harmony export */   "useContactsContext": () => (/* binding */ useContactsContext)
/* harmony export */ });
/* harmony import */ var _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @src/background/connections/extensionConnection/models */ "./src/background/connections/extensionConnection/models.ts");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/dist/esm5/internal/operators/filter.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/dist/esm5/internal/operators/map.js");
/* harmony import */ var _ConnectionProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ConnectionProvider */ "./src/contexts/ConnectionProvider.tsx");
/* harmony import */ var _src_background_services_contacts_events_listeners__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @src/background/services/contacts/events/listeners */ "./src/background/services/contacts/events/listeners.ts");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");





const ContactsContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({});
function ContactsContextProvider({
  children
}) {
  const {
    request,
    events
  } = (0,_ConnectionProvider__WEBPACK_IMPORTED_MODULE_2__.useConnectionContext)();
  const [contacts, setContacts] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({
    contacts: []
  });
  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {
    let isMounted = true;
    request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_0__.ExtensionRequest.CONTACTS_GET
    }).then(res => {
      if (!isMounted) {
        return;
      }
      setContacts(res);
    });
    const subscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_4__.filter)(_src_background_services_contacts_events_listeners__WEBPACK_IMPORTED_MODULE_3__.contactsUpdatedEventListener), (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.map)(evt => evt.value)).subscribe(val => setContacts(val));
    return () => {
      subscription.unsubscribe();
      isMounted = false;
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  const getContactById = contactId => {
    return contacts.contacts.filter(c => c.id === contactId)[0];
  };
  async function createContact(contact) {
    const contactCopy = {
      ...contact,
      id: crypto.randomUUID()
    };
    await request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_0__.ExtensionRequest.CONTACTS_CREATE,
      params: [contactCopy]
    });
  }
  async function updateContact(contact) {
    await request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_0__.ExtensionRequest.CONTACTS_UPDATE,
      params: [contact]
    });
  }
  async function removeContact(contact) {
    await request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_0__.ExtensionRequest.CONTACTS_REMOVE,
      params: [contact]
    });
  }
  const getContactByAddress = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(lookupAddress => contacts.contacts.find(({
    address,
    addressBTC,
    addressXP
  }) => [address, addressBTC, addressXP].map(a => (a ?? '').toLowerCase()).includes(lookupAddress)), [contacts.contacts]);
  return /*#__PURE__*/React.createElement(ContactsContext.Provider, {
    value: {
      ...contacts,
      createContact,
      removeContact,
      updateContact,
      getContactById,
      getContactByAddress
    }
  }, children);
}
function useContactsContext() {
  return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ContactsContext);
}

/***/ }),

/***/ "./src/contexts/CurrenciesProvider.tsx":
/*!*********************************************!*\
  !*** ./src/contexts/CurrenciesProvider.tsx ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CurrenciesContextProvider": () => (/* binding */ CurrenciesContextProvider),
/* harmony export */   "useCurrenciesContext": () => (/* binding */ useCurrenciesContext)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/dist/esm5/internal/operators/filter.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/dist/esm5/internal/operators/map.js");
/* harmony import */ var _src_background_services_currency_events_listeners__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/background/services/currency/events/listeners */ "./src/background/services/currency/events/listeners.ts");
/* harmony import */ var _ConnectionProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ConnectionProvider */ "./src/contexts/ConnectionProvider.tsx");
/* harmony import */ var _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @src/background/connections/extensionConnection/models */ "./src/background/connections/extensionConnection/models.ts");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");





const CurrenciesContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({});
function CurrenciesContextProvider({
  children
}) {
  const {
    request,
    events
  } = (0,_ConnectionProvider__WEBPACK_IMPORTED_MODULE_2__.useConnectionContext)();
  const [rates, setRates] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({});
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_3__.ExtensionRequest.CURRENCIES_GET_EXCHANGE_RATES
    }).then(exchangeRates => {
      setRates(exchangeRates);
    }).catch(() => {
      // do nothing, just handle the rejected promise
    });
  }, [request]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const subscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_4__.filter)(_src_background_services_currency_events_listeners__WEBPACK_IMPORTED_MODULE_1__.currencyRatesUpdatedEventListener), (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.map)(evt => evt.value)).subscribe(newRates => {
      setRates(newRates);
    });
    return () => subscription.unsubscribe();
  }, [events, request]);
  const getExchangeRate = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((from, to) => {
    return rates?.[from.toLowerCase()]?.[to.toLowerCase()] ?? null;
  }, [rates]);
  const hasExchangeRate = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((from, to) => {
    const rate = getExchangeRate(from.toLowerCase(), to.toLowerCase());
    return typeof rate === 'number';
  }, [getExchangeRate]);
  const convert = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(({
    amount,
    from,
    to
  }) => {
    if (!Number.isFinite(amount) || !hasExchangeRate(from, to)) {
      return null;
    }
    const rate = getExchangeRate(from, to);
    return rate * amount;
  }, [hasExchangeRate, getExchangeRate]);
  return /*#__PURE__*/React.createElement(CurrenciesContext.Provider, {
    value: {
      convert,
      getExchangeRate,
      hasExchangeRate
    }
  }, children);
}
function useCurrenciesContext() {
  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(CurrenciesContext);
}

/***/ }),

/***/ "./src/contexts/DefiProvider.tsx":
/*!***************************************!*\
  !*** ./src/contexts/DefiProvider.tsx ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DefiContextProvider": () => (/* binding */ DefiContextProvider),
/* harmony export */   "useDefiContext": () => (/* binding */ useDefiContext)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/dist/esm5/internal/operators/filter.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/dist/esm5/internal/operators/map.js");
/* harmony import */ var _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/background/connections/extensionConnection/models */ "./src/background/connections/extensionConnection/models.ts");
/* harmony import */ var _src_background_services_defi_events_listeners__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/background/services/defi/events/listeners */ "./src/background/services/defi/events/listeners.ts");
/* harmony import */ var _AccountsProvider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./AccountsProvider */ "./src/contexts/AccountsProvider.tsx");
/* harmony import */ var _ConnectionProvider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ConnectionProvider */ "./src/contexts/ConnectionProvider.tsx");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");






var DefiProviderActionType = /*#__PURE__*/function (DefiProviderActionType) {
  DefiProviderActionType["SetLoadingState"] = "SetLoadingState";
  DefiProviderActionType["UpdatePortfolio"] = "UpdatePortfolio";
  return DefiProviderActionType;
}(DefiProviderActionType || {});
const EMPTY_PORTFOLIO = {
  protocols: [],
  totalUsdValue: 0
};
const INITIAL_PORTFOLIO_STATE = {
  hasError: false,
  isLoading: true,
  portfolio: EMPTY_PORTFOLIO
};
const reducer = (state, {
  type,
  address,
  payload
}) => {
  switch (type) {
    case DefiProviderActionType.SetLoadingState:
      return {
        ...state,
        [address]: {
          ...(state[address] ?? INITIAL_PORTFOLIO_STATE),
          isLoading: payload
        }
      };
    case DefiProviderActionType.UpdatePortfolio:
      return {
        ...state,
        [address]: payload
      };
    default:
      throw new Error(`DefiProvider: Unknown action type: "${type}"`);
  }
};
const DefiContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({
  ...INITIAL_PORTFOLIO_STATE,
  refresh() {
    // no-op
  }
});
function DefiContextProvider({
  children
}) {
  const {
    accounts: {
      active
    }
  } = (0,_AccountsProvider__WEBPACK_IMPORTED_MODULE_3__.useAccountsContext)();
  const {
    events,
    request
  } = (0,_ConnectionProvider__WEBPACK_IMPORTED_MODULE_4__.useConnectionContext)();
  const [state, dispatch] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)(reducer, {});
  const address = active?.addressC;
  const portfolio = address ? state[address] ?? INITIAL_PORTFOLIO_STATE : INITIAL_PORTFOLIO_STATE;
  const refresh = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async () => {
    if (!address) {
      return;
    }
    dispatch({
      type: DefiProviderActionType.SetLoadingState,
      address,
      payload: true
    });
    try {
      const newPortfolioState = await request({
        method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.DEFI_GET_PORTFOLIO,
        params: [address]
      });
      dispatch({
        type: DefiProviderActionType.UpdatePortfolio,
        address,
        payload: {
          isLoading: false,
          hasError: false,
          portfolio: newPortfolioState
        }
      });
    } catch {
      dispatch({
        type: DefiProviderActionType.UpdatePortfolio,
        address,
        payload: {
          isLoading: false,
          hasError: true,
          portfolio: EMPTY_PORTFOLIO
        }
      });
    }
  }, [request, address]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const subscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_5__.filter)(_src_background_services_defi_events_listeners__WEBPACK_IMPORTED_MODULE_2__.defiPortfolioUpdatedEventListener), (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.map)(evt => evt.value)).subscribe(({
      address: accountAddress,
      portfolio: updatedPortfolio
    }) => {
      dispatch({
        type: DefiProviderActionType.UpdatePortfolio,
        address: accountAddress,
        payload: {
          isLoading: false,
          hasError: false,
          portfolio: updatedPortfolio
        }
      });
    });
    return () => subscription.unsubscribe();
  }, [events, request]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    refresh();
  }, [request, refresh]);
  return /*#__PURE__*/React.createElement(DefiContext.Provider, {
    value: {
      ...portfolio,
      refresh
    }
  }, children);
}
function useDefiContext() {
  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(DefiContext);
}

/***/ }),

/***/ "./src/contexts/DialogContextProvider.tsx":
/*!************************************************!*\
  !*** ./src/contexts/DialogContextProvider.tsx ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DialogContext": () => (/* binding */ DialogContext),
/* harmony export */   "DialogContextProvider": () => (/* binding */ DialogContextProvider),
/* harmony export */   "useDialog": () => (/* binding */ useDialog)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var _src_components_common_Dialog__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/components/common/Dialog */ "./src/components/common/Dialog.tsx");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");



const DialogContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_2__.createContext)({});
const DialogContextProvider = ({
  children
}) => {
  const [dialogProps, setDialogProps] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)();
  const showDialog = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(props => {
    setDialogProps(props);
  }, []);
  const clearDialog = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(() => {
    setDialogProps(null);
  }, []);
  return /*#__PURE__*/React.createElement(DialogContext.Provider, {
    value: {
      showDialog,
      clearDialog
    }
  }, children, dialogProps && /*#__PURE__*/React.createElement(_src_components_common_Dialog__WEBPACK_IMPORTED_MODULE_1__["default"], (0,_babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({}, dialogProps, {
    open: !!dialogProps
  })));
};
function useDialog() {
  return (0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(DialogContext);
}

/***/ }),

/***/ "./src/contexts/KeystoneProvider.tsx":
/*!*******************************************!*\
  !*** ./src/contexts/KeystoneProvider.tsx ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "KeystoneContextProvider": () => (/* binding */ KeystoneContextProvider),
/* harmony export */   "useKeystoneContext": () => (/* binding */ useKeystoneContext)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/background/connections/extensionConnection/models */ "./src/background/connections/extensionConnection/models.ts");
/* harmony import */ var _ConnectionProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ConnectionProvider */ "./src/contexts/ConnectionProvider.tsx");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/dist/esm5/internal/operators/filter.js");
/* harmony import */ var _src_background_services_keystone_models__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @src/background/services/keystone/models */ "./src/background/services/keystone/models.ts");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");





const KeystoneContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({});
function KeystoneContextProvider({
  children
}) {
  const {
    request,
    events,
    tabId
  } = (0,_ConnectionProvider__WEBPACK_IMPORTED_MODULE_2__.useConnectionContext)();
  const [txRequest, setTxRequest] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
  /**
   * Listen for send events to a ledger instance
   */
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const subscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_4__.filter)(evt => evt.name === _src_background_services_keystone_models__WEBPACK_IMPORTED_MODULE_3__.KeystoneEvent.DEVICE_REQUEST)).subscribe(async res => {
      if (res.value.tabId !== tabId) {
        return;
      }
      setTxRequest(res.value);
    });
    return () => {
      subscription.unsubscribe();
    };
  }, [request, events, tabId]);
  const submitSignature = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async response => request({
    method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.KEYSTONE_SUBMIT_SIGNATURE,
    params: [response]
  }), [request]);
  const resetKeystoneRequest = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    setTxRequest(undefined);
  }, []);
  return /*#__PURE__*/React.createElement(KeystoneContext.Provider, {
    value: {
      txRequest,
      resetKeystoneRequest,
      submitSignature
    }
  }, children);
}
function useKeystoneContext() {
  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(KeystoneContext);
}

/***/ }),

/***/ "./src/contexts/LedgerProvider.tsx":
/*!*****************************************!*\
  !*** ./src/contexts/LedgerProvider.tsx ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LEDGER_VERSION_WITH_EIP_712": () => (/* binding */ LEDGER_VERSION_WITH_EIP_712),
/* harmony export */   "LedgerAppType": () => (/* binding */ LedgerAppType),
/* harmony export */   "LedgerContextProvider": () => (/* binding */ LedgerContextProvider),
/* harmony export */   "REQUIRED_LEDGER_VERSION": () => (/* binding */ REQUIRED_LEDGER_VERSION),
/* harmony export */   "useLedgerContext": () => (/* binding */ useLedgerContext)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _ConnectionProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ConnectionProvider */ "./src/contexts/ConnectionProvider.tsx");
/* harmony import */ var _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/background/connections/extensionConnection/models */ "./src/background/connections/extensionConnection/models.ts");
/* harmony import */ var _ledgerhq_hw_transport_webusb__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ledgerhq/hw-transport-webusb */ "./node_modules/@ledgerhq/hw-transport-webusb/lib-es/TransportWebUSB.js");
/* harmony import */ var _src_utils_promiseResolver__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @src/utils/promiseResolver */ "./src/utils/promiseResolver.ts");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/dist/esm5/internal/operators/filter.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/dist/esm5/internal/observable/of.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/dist/esm5/internal/operators/switchMap.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/dist/esm5/internal/operators/tap.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/dist/esm5/internal/observable/fromEventPattern.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/dist/esm5/internal/operators/retryWhen.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/dist/esm5/internal/operators/delay.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/dist/esm5/internal/operators/map.js");
/* harmony import */ var _src_contexts_utils_getLedgerTransport__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @src/contexts/utils/getLedgerTransport */ "./src/contexts/utils/getLedgerTransport.ts");
/* harmony import */ var _avalabs_hw_app_avalanche__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @avalabs/hw-app-avalanche */ "./node_modules/@avalabs/hw-app-avalanche/esm/index.js");
/* harmony import */ var ledger_bitcoin__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ledger-bitcoin */ "./node_modules/ledger-bitcoin/build/main/index.js");
/* harmony import */ var ledger_bitcoin__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(ledger_bitcoin__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _src_background_services_ledger_events_ledgerDiscoverTransportsEventListener__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @src/background/services/ledger/events/ledgerDiscoverTransportsEventListener */ "./src/background/services/ledger/events/ledgerDiscoverTransportsEventListener.ts");
/* harmony import */ var _src_background_services_ledger_models__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @src/background/services/ledger/models */ "./src/background/services/ledger/models.ts");
/* harmony import */ var _avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @avalabs/core-wallets-sdk */ "./node_modules/@avalabs/core-wallets-sdk/esm/utils/getLedgerAppInfo.js");
/* harmony import */ var _avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @avalabs/core-wallets-sdk */ "./node_modules/@avalabs/core-wallets-sdk/esm/utils/getLedgerExtendedPublicKey.js");
/* harmony import */ var _avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @avalabs/core-wallets-sdk */ "./node_modules/@avalabs/core-wallets-sdk/esm/utils/getPubKeyFromTransport.js");
/* harmony import */ var _avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @avalabs/core-wallets-sdk */ "./node_modules/@avalabs/core-wallets-sdk/esm/utils/quitLedgerApp.js");
/* harmony import */ var _src_background_services_lock_events_lockStateChangedEventListener__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @src/background/services/lock/events/lockStateChangedEventListener */ "./src/background/services/lock/events/lockStateChangedEventListener.ts");
/* harmony import */ var _ledgerhq_hw_app_eth__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @ledgerhq/hw-app-eth */ "./node_modules/@ledgerhq/hw-app-eth/lib-es/Eth.js");
/* provided dependency */ var Buffer = __webpack_require__(/*! ./node_modules/node-polyfill-webpack-plugin/node_modules/buffer/index.js */ "./node_modules/node-polyfill-webpack-plugin/node_modules/buffer/index.js")["Buffer"];
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");














let LedgerAppType = /*#__PURE__*/function (LedgerAppType) {
  LedgerAppType["AVALANCHE"] = "Avalanche";
  LedgerAppType["BITCOIN"] = "Bitcoin";
  LedgerAppType["ETHEREUM"] = "Ethereum";
  LedgerAppType["UNKNOWN"] = "UNKNOWN";
  return LedgerAppType;
}({});
const REQUIRED_LEDGER_VERSION = '0.7.3';
const LEDGER_VERSION_WITH_EIP_712 = '0.8.0';

/**
 * Run this here since each new window will have a different id
 * this is used to track the transport and close on window close
 */
const LEDGER_INSTANCE_UUID = crypto.randomUUID();
const LedgerContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({});
function LedgerContextProvider({
  children
}) {
  const [initialized, setInialized] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const [wasTransportAttempted, setWasTransportAttempted] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const [app, setApp] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const [appType, setAppType] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(LedgerAppType.UNKNOWN);
  const {
    request,
    events
  } = (0,_ConnectionProvider__WEBPACK_IMPORTED_MODULE_1__.useConnectionContext)();
  const transportRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const [avaxAppVersion, setAvaxAppVersion] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);
  const [masterFingerprint, setMasterFingerprint] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const [ledgerVersionWarningClosed, setLedgerVersionWarningClosed] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();

  /**
   * Listen for send events to a ledger instance
   */
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const subscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_12__.filter)(evt => evt.name === _src_background_services_ledger_models__WEBPACK_IMPORTED_MODULE_9__.LedgerEvent.TRANSPORT_REQUEST), (0,rxjs__WEBPACK_IMPORTED_MODULE_12__.filter)(evt => evt.value.connectionUUID === LEDGER_INSTANCE_UUID)).subscribe(async res => {
      if (res.value.method === 'SEND') {
        try {
          const {
            cla,
            ins,
            p1,
            p2,
            data,
            statusList
          } = res.value.params;
          const result = await transportRef.current?.send(cla, ins, p1, p2, Buffer.from(data), statusList);
          request({
            method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.LEDGER_RESPONSE,
            params: [{
              requestId: res.value.requestId,
              method: res.value.method,
              result
            }]
          });
        } catch (e) {
          request({
            method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.LEDGER_RESPONSE,
            params: [{
              requestId: res.value.requestId,
              method: res.value.method,
              error: e?.['statusCode'] ? e['statusCode'] : e.message
            }]
          });
        }
      }
    });
    return () => {
      subscription.unsubscribe();
    };
  }, [request, events, transportRef]);

  /**
   * Create instance for a given UUID
   */
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const subscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_12__.filter)(_src_background_services_ledger_events_ledgerDiscoverTransportsEventListener__WEBPACK_IMPORTED_MODULE_8__.ledgerDiscoverTransportsEventListener)).subscribe(() => {
      if (initialized) {
        request({
          method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.LEDGER_INIT_TRANSPORT,
          params: [LEDGER_INSTANCE_UUID]
        });
      }
    });
    return () => {
      subscription.unsubscribe();
    };
  }, [events, initialized, request]);

  /**
   * Remove an instance by UUID when a window is about to unload
   */
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const handler = () => {
      request({
        method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.LEDGER_REMOVE_TRANSPORT,
        params: [LEDGER_INSTANCE_UUID]
      });
    };
    window.addEventListener('beforeunload', handler);
    return () => {
      window.removeEventListener('beforeunload', handler);
    };
  }, [request]);
  const initLedgerApp = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async transport => {
    if (!transport) {
      throw new Error('Ledger not connected');
    }

    // first try to get the avalanche App instance
    const avaxAppInstance = new _avalabs_hw_app_avalanche__WEBPACK_IMPORTED_MODULE_6__["default"](transport);
    if (avaxAppInstance) {
      // double check it's really the avalanche app
      // other apps also initialize with AppAvax
      const [config, appVersionError] = await (0,_src_utils_promiseResolver__WEBPACK_IMPORTED_MODULE_4__.resolve)(avaxAppInstance.getAppInfo());
      if (!appVersionError) {
        if (config.appName === LedgerAppType.AVALANCHE) {
          setAvaxAppVersion(config.appVersion);
          setApp(avaxAppInstance);
          setAppType(LedgerAppType.AVALANCHE);
          return avaxAppInstance;
        } else if (config.appName === LedgerAppType.ETHEREUM) {
          const ethAppInstance = new _ledgerhq_hw_app_eth__WEBPACK_IMPORTED_MODULE_11__["default"](transport);
          setApp(ethAppInstance);
          setAppType(LedgerAppType.ETHEREUM);
          return ethAppInstance;
        }
      }
    }

    // check if btc app is selected
    const btcAppInstance = new ledger_bitcoin__WEBPACK_IMPORTED_MODULE_7__.AppClient(transport);
    if (btcAppInstance) {
      const appInfo = await (0,_avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_13__.getLedgerAppInfo)(transport);
      if (LedgerAppType.BITCOIN === appInfo.applicationName) {
        setApp(btcAppInstance);
        setAppType(LedgerAppType.BITCOIN);
        return btcAppInstance;
      }
    }
    throw new Error('No compatible ledger app found');
  }, []);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const subscription = (0,rxjs__WEBPACK_IMPORTED_MODULE_14__.of)([initialized]).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_12__.filter)(([isInitialized]) => !!isInitialized), (0,rxjs__WEBPACK_IMPORTED_MODULE_15__.switchMap)(() => request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.LEDGER_CLOSE_TRANSPORT,
      params: []
    })), (0,rxjs__WEBPACK_IMPORTED_MODULE_15__.switchMap)(() => (0,_src_contexts_utils_getLedgerTransport__WEBPACK_IMPORTED_MODULE_5__.getLedgerTransport)()), (0,rxjs__WEBPACK_IMPORTED_MODULE_15__.switchMap)(transport => {
      transportRef.current = transport;
      return initLedgerApp(transport);
    }), (0,rxjs__WEBPACK_IMPORTED_MODULE_16__.tap)(() => {
      setWasTransportAttempted(true);
    }), (0,rxjs__WEBPACK_IMPORTED_MODULE_15__.switchMap)(() => (0,rxjs__WEBPACK_IMPORTED_MODULE_17__.fromEventPattern)(handler => {
      transportRef.current?.on('disconnect', handler);
    }, handler => {
      transportRef.current?.off('disconnect', handler);
    }).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_16__.tap)(() => {
      setApp(undefined);
      setAppType(LedgerAppType.UNKNOWN);
      throw new Error('Ledger device disconnected');
    }))), (0,rxjs__WEBPACK_IMPORTED_MODULE_18__.retryWhen)(errors => {
      setWasTransportAttempted(true);
      return errors.pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_19__.delay)(2000));
    })).subscribe();
    return () => {
      subscription.unsubscribe();
    };
  }, [initialized, initLedgerApp, request]);

  /**
   * Get the extended public key for the given path (m/44'/60'/0' by default)
   * @returns Promise<extended public key>
   */
  const getExtendedPublicKey = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async path => {
    if (!transportRef.current) {
      throw new Error('no device detected');
    }
    const [pubKey, pubKeyError] = await (0,_src_utils_promiseResolver__WEBPACK_IMPORTED_MODULE_4__.resolve)((0,_avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_20__.getLedgerExtendedPublicKey)(transportRef.current, false, path));
    if (pubKeyError) {
      throw new Error(pubKeyError);
    }
    return pubKey;
  }, []);
  const getPublicKey = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (accountIndex, pathType, vm = 'EVM') => {
    if (!transportRef.current) {
      throw new Error('no device detected');
    }
    return (0,_avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_21__.getPubKeyFromTransport)(transportRef.current, accountIndex, pathType, vm);
  }, []);

  /**
   * When the user plugs-in/connects their ledger for the first time a
   * device selection needs to be performed before we can do anything with
   * the device. So for those cases this function forces that popup to open.
   *
   * This cannot be opened on the popup (confirm) or popout (extension click)
   * view. This can only be performed on a tab view so the user will need to be
   * put into that state first.
   *
   * @returns The transport object
   */
  const popDeviceSelection = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async () => {
    if (app) {
      return true;
    }
    const [usbTransport] = await (0,_src_utils_promiseResolver__WEBPACK_IMPORTED_MODULE_4__.resolve)(_ledgerhq_hw_transport_webusb__WEBPACK_IMPORTED_MODULE_3__["default"].request());
    if (usbTransport) {
      return true;
    }
    throw Error('Ledger device selection failed');
  }, [app]);
  const initLedgerTransport = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async () => {
    if (initialized) {
      return;
    }
    await request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.LEDGER_INIT_TRANSPORT,
      params: [LEDGER_INSTANCE_UUID]
    });
    setInialized(true);
  }, [initialized, request]);
  const closeCurrentApp = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async () => {
    if (transportRef.current) {
      // send get app version first as a workaround for BTC bug: https://github.com/LedgerHQ/app-bitcoin-new/issues/63
      await (0,_avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_13__.getLedgerAppInfo)(transportRef.current);
      // quit the app: https://developers.ledger.com/docs/transport/open-close-info-on-apps/#quit-application
      await (0,_avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_22__.quitLedgerApp)(transportRef.current);
    }
  }, [transportRef]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const subscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_12__.filter)(evt => evt.name === _src_background_services_ledger_models__WEBPACK_IMPORTED_MODULE_9__.LedgerEvent.TRANSPORT_CLOSE_REQUEST), (0,rxjs__WEBPACK_IMPORTED_MODULE_12__.filter)(() =>
    // check if there if the window is claiming interface index 2. We should close the window
    // which would clean up the claimed interfaces, thereby releasing it to the new window

    // In windows where this interface wasnt claimed the values here will be false
    Boolean(app) && Boolean(transportRef.current?.deviceModel?.id))).subscribe(() => {
      window.close();
    });
    return () => {
      subscription.unsubscribe();
    };
  });
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.SHOW_LEDGER_VERSION_WARNING
    }).then(result => {
      setLedgerVersionWarningClosed(result);
    });
    const subscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_12__.filter)(_src_background_services_lock_events_lockStateChangedEventListener__WEBPACK_IMPORTED_MODULE_10__.lockStateChangedEventListener), (0,rxjs__WEBPACK_IMPORTED_MODULE_23__.map)(evt => evt.value)).subscribe(locked => {
      if (locked) {
        // No need to requery ExtensionRequest.SHOW_LEDGER_VERSION_WARNING
        // because it will always be false when locked because the session
        // storage is emptied on lock.
        setLedgerVersionWarningClosed(false);
      }
    });
    return () => {
      subscription.unsubscribe();
    };
  }, [events, request]);
  const getMasterFingerprint = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async () => {
    if (!(app instanceof ledger_bitcoin__WEBPACK_IMPORTED_MODULE_7__.AppClient)) {
      throw new Error('wrong app');
    }
    return app.getMasterFingerprint();
  }, [app]);
  const getBtcExtendedPublicKey = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async path => {
    if (!(app instanceof ledger_bitcoin__WEBPACK_IMPORTED_MODULE_7__.AppClient)) {
      throw new Error('wrong app');
    }
    return app.getExtendedPubkey(path, true);
  }, [app]);
  const registerBtcWalletPolicy = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (xpub, fingerprint, derivationpath, name) => {
    if (!(app instanceof ledger_bitcoin__WEBPACK_IMPORTED_MODULE_7__.AppClient)) {
      throw new Error('wrong app');
    }
    const template = new ledger_bitcoin__WEBPACK_IMPORTED_MODULE_7__.DefaultWalletPolicy(`wpkh(@0/**)`, `[${fingerprint}/${derivationpath}]${xpub}`);
    const walletPolicy = new ledger_bitcoin__WEBPACK_IMPORTED_MODULE_7__.WalletPolicy(name, `wpkh(@0/**)`, template.keys);
    return app.registerWallet(walletPolicy);
  }, [app]);
  const updateLedgerVersionWarningClosed = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async () => {
    const result = await request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.LEDGER_VERSION_WARNING_CLOSED
    });
    setLedgerVersionWarningClosed(result);
  }, [request]);
  return /*#__PURE__*/React.createElement(LedgerContext.Provider, {
    value: {
      popDeviceSelection,
      getExtendedPublicKey,
      initLedgerTransport,
      hasLedgerTransport: !!app,
      wasTransportAttempted,
      appType,
      getPublicKey,
      avaxAppVersion,
      masterFingerprint,
      setMasterFingerprint,
      getMasterFingerprint,
      getBtcExtendedPublicKey,
      registerBtcWalletPolicy,
      updateLedgerVersionWarningClosed,
      ledgerVersionWarningClosed,
      closeCurrentApp
    }
  }, children);
}
function useLedgerContext() {
  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(LedgerContext);
}

/***/ }),

/***/ "./src/contexts/NetworkFeeProvider.tsx":
/*!*********************************************!*\
  !*** ./src/contexts/NetworkFeeProvider.tsx ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NetworkFeeContextProvider": () => (/* binding */ NetworkFeeContextProvider),
/* harmony export */   "useNetworkFeeContext": () => (/* binding */ useNetworkFeeContext)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/background/connections/extensionConnection/models */ "./src/background/connections/extensionConnection/models.ts");
/* harmony import */ var _src_contexts_ConnectionProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/contexts/ConnectionProvider */ "./src/contexts/ConnectionProvider.tsx");
/* harmony import */ var _src_utils_caipConversion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @src/utils/caipConversion */ "./src/utils/caipConversion.ts");
/* harmony import */ var _NetworkProvider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./NetworkProvider */ "./src/contexts/NetworkProvider.tsx");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/dist/esm5/internal/operators/filter.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/dist/esm5/internal/operators/map.js");
/* harmony import */ var _src_background_services_gasless_events_gaslessChallangeUpdateListener__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @src/background/services/gasless/events/gaslessChallangeUpdateListener */ "./src/background/services/gasless/events/gaslessChallangeUpdateListener.ts");
/* harmony import */ var _FeatureFlagsProvider__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./FeatureFlagsProvider */ "./src/contexts/FeatureFlagsProvider.tsx");
/* harmony import */ var _src_background_services_featureFlags_models__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @src/background/services/featureFlags/models */ "./src/background/services/featureFlags/models.ts");
/* harmony import */ var _src_background_services_gasless_model__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @src/background/services/gasless/model */ "./src/background/services/gasless/model.ts");
/* harmony import */ var _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @avalabs/vm-module-types */ "./node_modules/@avalabs/vm-module-types/dist/index.js");
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");











const NetworkFeeContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({
  networkFee: null,
  async getNetworkFee() {
    return null;
  },
  async fetchAndSolveGaslessChallange() {
    return null;
  },
  async gaslessFundTx() {
    return undefined;
  },
  isGaslessOn: false,
  setIsGaslessOn() {
    return null;
  },
  fundTxHex: '',
  async setGaslessDefaultValues() {
    return null;
  },
  gaslessPhase: _src_background_services_gasless_model__WEBPACK_IMPORTED_MODULE_8__.GaslessPhase.NOT_READY,
  async setGaslessEligibility() {
    return;
  },
  isGaslessEligible: false
});
function NetworkFeeContextProvider({
  children
}) {
  const {
    request,
    events
  } = (0,_src_contexts_ConnectionProvider__WEBPACK_IMPORTED_MODULE_2__.useConnectionContext)();
  const {
    network
  } = (0,_NetworkProvider__WEBPACK_IMPORTED_MODULE_4__.useNetworkContext)();
  const [fee, setFee] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);
  const [iteration, setIteration] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);
  const [challengeHex, setChallengeHex] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('');
  const [solutionHex, setSolutionHex] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('');
  const [isGaslessOn, setIsGaslessOn] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const [fundTxHex, setFundTxHex] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('');
  const {
    featureFlags
  } = (0,_FeatureFlagsProvider__WEBPACK_IMPORTED_MODULE_6__.useFeatureFlagContext)();
  const [gaslessPhase, setGaslessPhase] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(_src_background_services_gasless_model__WEBPACK_IMPORTED_MODULE_8__.GaslessPhase.NOT_READY);
  const [isGaslessEligible, setIsGaslessEligible] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const getNetworkFee = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async caipId => request({
    method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.NETWORK_FEE_GET,
    params: [caipId]
  }), [request]);
  const setGaslessEligibility = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (chainId, fromAddress, nonce) => {
    if (gaslessPhase === _src_background_services_gasless_model__WEBPACK_IMPORTED_MODULE_8__.GaslessPhase.READY) {
      return;
    }
    if (!featureFlags[_src_background_services_featureFlags_models__WEBPACK_IMPORTED_MODULE_7__.FeatureGates.GASLESS]) {
      setIsGaslessEligible(false);
      return;
    }
    try {
      const result = await request({
        method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.GASLESS_GET_ELIGIBILITY,
        params: [chainId, fromAddress?.toString(), nonce ?? undefined]
      });
      if (result) {
        setIsGaslessEligible(true);
        return;
      }
      setIsGaslessEligible(false);
    } catch (e) {
      console.error(e);
      setIsGaslessEligible(false);
    }
  }, [featureFlags, gaslessPhase, request]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!network?.chainId) {
      return;
    }
    setGaslessEligibility(network.chainId);
    let timer;
    let isMounted = true;
    getNetworkFee((0,_src_utils_caipConversion__WEBPACK_IMPORTED_MODULE_3__.chainIdToCaip)(network.chainId)).then(networkFee => {
      if (isMounted && networkFee) {
        setFee(networkFee);
      }
    }).catch(err => {
      console.warn('Failed to determine the network fee:', err);
    }).finally(() => {
      timer = setTimeout(() => setIteration(i => i + 1), 30_000);
    });
    return () => {
      isMounted = false;
      clearTimeout(timer);
    };
  }, [getNetworkFee, iteration, network?.chainId, setGaslessEligibility]);
  const fetchAndSolveGaslessChallange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async () => request({
    method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.GASLESS_FETCH_AND_SOLVE_CHALLENGE
  }), [request]);
  const gaslessFundTx = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async signingData => {
    if (!signingData || signingData.type !== _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_9__.RpcMethod.ETH_SEND_TRANSACTION) {
      setIsGaslessOn(false);
      setGaslessPhase(_src_background_services_gasless_model__WEBPACK_IMPORTED_MODULE_8__.GaslessPhase.ERROR);
      return undefined;
    }
    setGaslessPhase(_src_background_services_gasless_model__WEBPACK_IMPORTED_MODULE_8__.GaslessPhase.FUNDING_IN_PROGRESS);
    return request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.GASLESS_FUND_TX,
      params: [signingData.data, challengeHex, solutionHex, signingData.account]
    });
  }, [challengeHex, request, solutionHex]);
  const setGaslessDefaultValues = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async () => {
    setGaslessPhase(_src_background_services_gasless_model__WEBPACK_IMPORTED_MODULE_8__.GaslessPhase.NOT_READY);
    setIsGaslessEligible(false);
    setIsGaslessOn(false);
    return request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.GASLESS_SET_DEFAUlT_STATE_VALUES
    });
  }, [request]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const gaslessEventSubscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_10__.filter)(_src_background_services_gasless_events_gaslessChallangeUpdateListener__WEBPACK_IMPORTED_MODULE_5__.gaslessChallangeUpdateEventListener), (0,rxjs__WEBPACK_IMPORTED_MODULE_11__.map)(evt => evt.value)).subscribe(async values => {
      setSolutionHex(values.solutionHex);
      setChallengeHex(values.challengeHex);
      setFundTxHex(values.fundTxHex);
      if (values.challengeHex && values.solutionHex && !values.isFundInProgress && !values.fundTxDoNotRetryError) {
        setGaslessPhase(_src_background_services_gasless_model__WEBPACK_IMPORTED_MODULE_8__.GaslessPhase.READY);
      }
      if (values.isFundInProgress === true) {
        setGaslessPhase(_src_background_services_gasless_model__WEBPACK_IMPORTED_MODULE_8__.GaslessPhase.FUNDING_IN_PROGRESS);
      }
      if (values.fundTxHex) {
        setIsGaslessOn(false);
        setGaslessPhase(_src_background_services_gasless_model__WEBPACK_IMPORTED_MODULE_8__.GaslessPhase.FUNDED);
      }
      if (values.fundTxDoNotRetryError) {
        setIsGaslessOn(false);
        setGaslessPhase(_src_background_services_gasless_model__WEBPACK_IMPORTED_MODULE_8__.GaslessPhase.ERROR);
      }
    });
    return () => {
      gaslessEventSubscription.unsubscribe();
    };
  }, [events, getNetworkFee]);
  return /*#__PURE__*/React.createElement(NetworkFeeContext.Provider, {
    value: {
      networkFee: fee,
      getNetworkFee,
      fetchAndSolveGaslessChallange,
      gaslessFundTx,
      setGaslessEligibility,
      isGaslessOn,
      setIsGaslessOn,
      fundTxHex,
      setGaslessDefaultValues,
      gaslessPhase,
      isGaslessEligible
    }
  }, children);
}
function useNetworkFeeContext() {
  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(NetworkFeeContext);
}

/***/ }),

/***/ "./src/contexts/NetworkProvider.tsx":
/*!******************************************!*\
  !*** ./src/contexts/NetworkProvider.tsx ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NetworkContextProvider": () => (/* binding */ NetworkContextProvider),
/* harmony export */   "useNetworkContext": () => (/* binding */ useNetworkContext)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _ConnectionProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ConnectionProvider */ "./src/contexts/ConnectionProvider.tsx");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/dist/esm5/internal/operators/filter.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/dist/esm5/internal/operators/map.js");
/* harmony import */ var _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/background/connections/extensionConnection/models */ "./src/background/connections/extensionConnection/models.ts");
/* harmony import */ var _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @avalabs/core-chains-sdk */ "./node_modules/@avalabs/core-chains-sdk/esm/models.js");
/* harmony import */ var _src_background_services_network_events_networksUpdatedEventListener__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @src/background/services/network/events/networksUpdatedEventListener */ "./src/background/services/network/events/networksUpdatedEventListener.ts");
/* harmony import */ var _AnalyticsProvider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./AnalyticsProvider */ "./src/contexts/AnalyticsProvider.tsx");
/* harmony import */ var _src_utils_network_getProviderForNetwork__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @src/utils/network/getProviderForNetwork */ "./src/utils/network/getProviderForNetwork.ts");
/* harmony import */ var _src_background_services_network_events_isNetworkUpdatedEvent__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @src/background/services/network/events/isNetworkUpdatedEvent */ "./src/background/services/network/events/isNetworkUpdatedEvent.ts");
/* harmony import */ var _src_utils_updateIfDifferent__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @src/utils/updateIfDifferent */ "./src/utils/updateIfDifferent.ts");
/* harmony import */ var _src_utils_caipConversion__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @src/utils/caipConversion */ "./src/utils/caipConversion.ts");
/* harmony import */ var _NetworkProvider_networkChanges__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./NetworkProvider/networkChanges */ "./src/contexts/NetworkProvider/networkChanges.ts");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");












const NetworkContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({
  network: undefined,
  setNetwork() {},
  networks: [],
  setDeveloperMode() {},
  async saveCustomNetwork() {},
  async updateDefaultNetwork() {},
  async removeCustomNetwork() {},
  isDeveloperMode: false,
  favoriteNetworks: [],
  addFavoriteNetwork() {},
  removeFavoriteNetwork() {},
  isFavoriteNetwork: () => false,
  customNetworks: [],
  isCustomNetwork: () => false,
  isChainIdExist: () => false,
  getNetwork: () => undefined,
  avaxProviderC: undefined,
  ethereumProvider: undefined,
  bitcoinProvider: undefined
});

/**
 * Network is being saved to chrome storage so we can share it across all contexts. With that when the
 * user changes the network we write that to storage, storage then fires an event and all contexts receive that
 * event. Thus updating all instances of the network provider and everything stays in sync.
 */
function NetworkContextProvider({
  children
}) {
  const [network, setNetwork] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const [networks, setNetworks] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);
  const [customNetworks, setCustomNetworks] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);
  const [favoriteNetworks, setFavoriteNetworks] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);
  const {
    request,
    events
  } = (0,_ConnectionProvider__WEBPACK_IMPORTED_MODULE_1__.useConnectionContext)();
  const {
    capture
  } = (0,_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_4__.useAnalyticsContext)();
  const getFavoriteNetworks = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => networks.filter(networkItem => favoriteNetworks.includes(networkItem.chainId)).filter(n => {
    return !network?.isTestnet && !n.isTestnet || network?.isTestnet && n.isTestnet;
  }), [favoriteNetworks, network, networks]);
  const getCustomNetworks = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => networks.filter(networkItem => customNetworks.includes(networkItem.chainId)), [customNetworks, networks]);
  const isChainIdExist = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(lookupChainId => (networks ?? []).some(({
    chainId
  }) => chainId === lookupChainId), [networks]);
  const isCustomNetwork = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(chainId => customNetworks.includes(chainId), [customNetworks]);
  const getNetwork = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(lookupChainId => {
    return networks.find(({
      chainId,
      caipId
    }) => chainId === lookupChainId || caipId === lookupChainId);
  }, [networks]);
  const [bitcoinProvider, setBitcoinProvider] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const [ethereumProvider, setEthereumProvider] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const [avaxProviderC, setAvaxProviderC] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!network) {
      setBitcoinProvider(undefined);
      setEthereumProvider(undefined);
      setAvaxProviderC(undefined);
      return;
    }
    let isMounted = true;
    const avaxNetworkC = getNetwork(network.isTestnet ? _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_10__.ChainId.AVALANCHE_TESTNET_ID : _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_10__.ChainId.AVALANCHE_MAINNET_ID);
    const ethNetwork = getNetwork(network.isTestnet ? _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_10__.ChainId.ETHEREUM_TEST_SEPOLIA : _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_10__.ChainId.ETHEREUM_HOMESTEAD);
    const btcNetwork = getNetwork(network.isTestnet ? _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_10__.ChainId.BITCOIN_TESTNET : _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_10__.ChainId.BITCOIN);
    function updateIfMounted(setter) {
      return p => {
        if (isMounted) {
          setter(p);
        }
      };
    }
    if (avaxNetworkC) {
      (0,_src_utils_network_getProviderForNetwork__WEBPACK_IMPORTED_MODULE_5__.getProviderForNetwork)(avaxNetworkC).then(updateIfMounted(setAvaxProviderC));
    }
    if (ethNetwork) {
      (0,_src_utils_network_getProviderForNetwork__WEBPACK_IMPORTED_MODULE_5__.getProviderForNetwork)(ethNetwork).then(updateIfMounted(setEthereumProvider));
    }
    if (btcNetwork) {
      (0,_src_utils_network_getProviderForNetwork__WEBPACK_IMPORTED_MODULE_5__.getProviderForNetwork)(btcNetwork).then(updateIfMounted(setBitcoinProvider));
    }
    return () => {
      isMounted = false;
    };
  }, [getNetwork, network]);
  const getNetworkState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    return request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.NETWORKS_GET_STATE
    }).then(result => {
      (0,_src_utils_updateIfDifferent__WEBPACK_IMPORTED_MODULE_7__.updateIfDifferent)(setNetworks, result.networks);
      (0,_src_utils_updateIfDifferent__WEBPACK_IMPORTED_MODULE_7__.updateIfDifferent)(setNetwork, result.activeNetwork);
      _NetworkProvider_networkChanges__WEBPACK_IMPORTED_MODULE_9__.networkChanged.dispatch(result.activeNetwork?.caipId);
      (0,_src_utils_updateIfDifferent__WEBPACK_IMPORTED_MODULE_7__.updateIfDifferent)(setFavoriteNetworks, result.favoriteNetworks);
      (0,_src_utils_updateIfDifferent__WEBPACK_IMPORTED_MODULE_7__.updateIfDifferent)(setCustomNetworks, result.customNetworks);
    });
  }, [request]);
  const removeCustomNetwork = async chainId => {
    return request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.NETWORK_REMOVE_CUSTOM,
      params: [chainId]
    }).then(getNetworkState);
  };
  const saveCustomNetwork = async customNetwork => {
    return request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.NETWORK_SAVE_CUSTOM,
      params: [customNetwork]
    }).then(getNetworkState);
  };
  const updateDefaultNetwork = async networkOverrides => {
    return request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.NETWORK_UPDATE_DEFAULT,
      params: {
        network: networkOverrides
      }
    }).then(getNetworkState);
  };
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    getNetworkState();
    const activeNetworkSubscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_11__.filter)(_src_background_services_network_events_isNetworkUpdatedEvent__WEBPACK_IMPORTED_MODULE_6__.isNetworkUpdatedEvent), (0,rxjs__WEBPACK_IMPORTED_MODULE_12__.map)(evt => evt.value)).subscribe(async newNetwork => {
      if (!newNetwork) {
        return;
      }
      getNetworkState();
      setNetwork(newNetwork);
      _NetworkProvider_networkChanges__WEBPACK_IMPORTED_MODULE_9__.networkChanged.dispatch(newNetwork.caipId);
    });
    const networksSubscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_11__.filter)(_src_background_services_network_events_networksUpdatedEventListener__WEBPACK_IMPORTED_MODULE_3__.networksUpdatedEventListener), (0,rxjs__WEBPACK_IMPORTED_MODULE_12__.map)(evt => evt.value)).subscribe(async result => {
      (0,_src_utils_updateIfDifferent__WEBPACK_IMPORTED_MODULE_7__.updateIfDifferent)(setNetworks, result.networks);
      (0,_src_utils_updateIfDifferent__WEBPACK_IMPORTED_MODULE_7__.updateIfDifferent)(setFavoriteNetworks, result.favoriteNetworks);
      setNetwork(currentNetwork => {
        const newNetwork = result.activeNetwork ?? currentNetwork; // do not delete currently set network
        _NetworkProvider_networkChanges__WEBPACK_IMPORTED_MODULE_9__.networkChanged.dispatch(newNetwork?.caipId);
        return newNetwork;
      });
      setCustomNetworks(Object.values(result.customNetworks).map(({
        chainId
      }) => chainId));
    });
    return () => {
      activeNetworkSubscription.unsubscribe();
      networksSubscription.unsubscribe();
    };
  }, [events, getNetworkState]);
  return /*#__PURE__*/React.createElement(NetworkContext.Provider, {
    value: {
      network,
      setNetwork: newNetwork => request({
        method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.NETWORK_SET_ACTIVE,
        params: [(0,_src_utils_caipConversion__WEBPACK_IMPORTED_MODULE_8__.getNetworkCaipId)(newNetwork)]
      }),
      networks,
      setDeveloperMode: status => request({
        method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.NETWORK_SET_DEVELOPER_MODE,
        params: [status]
      }),
      saveCustomNetwork,
      updateDefaultNetwork,
      removeCustomNetwork,
      isDeveloperMode: !!network?.isTestnet,
      favoriteNetworks: getFavoriteNetworks,
      addFavoriteNetwork: chainId => {
        request({
          method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.NETWORK_ADD_FAVORITE_NETWORK,
          params: [chainId]
        }).then(result => {
          setFavoriteNetworks(result);
          capture('NetworkFavoriteAdded', {
            networkChainId: chainId,
            isCustom: isCustomNetwork(chainId)
          });
        });
      },
      removeFavoriteNetwork: async chainId => {
        await request({
          method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.NETWORK_REMOVE_FAVORITE_NETWORK,
          params: [chainId]
        }).then(result => {
          setFavoriteNetworks(result);
          capture('NetworkFavoriteRemoved', {
            networkChainId: chainId,
            isCustom: isCustomNetwork(chainId)
          });
        });
      },
      isFavoriteNetwork: chainId => favoriteNetworks.includes(chainId),
      customNetworks: getCustomNetworks,
      isCustomNetwork,
      isChainIdExist,
      getNetwork,
      avaxProviderC,
      bitcoinProvider,
      ethereumProvider
    }
  }, children);
}
function useNetworkContext() {
  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(NetworkContext);
}

/***/ }),

/***/ "./src/contexts/OnboardingProvider.tsx":
/*!*********************************************!*\
  !*** ./src/contexts/OnboardingProvider.tsx ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "OnboardingContextProvider": () => (/* binding */ OnboardingContextProvider),
/* harmony export */   "useOnboardingContext": () => (/* binding */ useOnboardingContext)
/* harmony export */ });
/* harmony import */ var _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @src/background/connections/extensionConnection/models */ "./src/background/connections/extensionConnection/models.ts");
/* harmony import */ var _src_background_services_onboarding_events_listeners__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/background/services/onboarding/events/listeners */ "./src/background/services/onboarding/events/listeners.ts");
/* harmony import */ var _src_background_services_onboarding_models__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/background/services/onboarding/models */ "./src/background/services/onboarding/models.ts");
/* harmony import */ var _src_hooks_useIsSpecificContextContainer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @src/hooks/useIsSpecificContextContainer */ "./src/hooks/useIsSpecificContextContainer.ts");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/dist/esm5/internal/observable/concat.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/dist/esm5/internal/observable/from.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/dist/esm5/internal/operators/filter.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/dist/esm5/internal/operators/map.js");
/* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! webextension-polyfill */ "./node_modules/webextension-polyfill/dist/browser-polyfill.js");
/* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(webextension_polyfill__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _ConnectionProvider__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ConnectionProvider */ "./src/contexts/ConnectionProvider.tsx");
/* harmony import */ var _src_popup_LoadingContent__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @src/popup/LoadingContent */ "./src/popup/LoadingContent.tsx");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/react-hot-toast/dist/index.mjs");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var _AnalyticsProvider__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./AnalyticsProvider */ "./src/contexts/AnalyticsProvider.tsx");
/* harmony import */ var _avalabs_types__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @avalabs/types */ "./node_modules/@avalabs/types/esm/coreAccounts.js");
/* harmony import */ var _src_utils_newsletter__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @src/utils/newsletter */ "./src/utils/newsletter.ts");
/* harmony import */ var _src_monitoring_sentryCaptureException__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @src/monitoring/sentryCaptureException */ "./src/monitoring/sentryCaptureException.ts");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");















const Onboarding = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_4__.lazy)(() => Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_uuid_dist_esm-browser_index_js"), __webpack_require__.e("vendors-node_modules_ethereumjs-util_dist_browser_index_js"), __webpack_require__.e("vendors-node_modules_keystonehq_animated-qr_dist_index_js-node_modules_keystonehq_bc-ur-regis-de49eb"), __webpack_require__.e("vendors-node_modules_avalabs_core-wallets-sdk_esm_Avalanche_wallets_WalletAbstract_js"), __webpack_require__.e("vendors-node_modules_avalabs_core-wallets-sdk_esm_Avalanche_wallets_legacy_LedgerWallet_js-no-e9de5a"), __webpack_require__.e("vendors-node_modules_cubist-labs_cubesigner-sdk_dist_cjs_src_index_js"), __webpack_require__.e("vendors-node_modules_bip39_src_index_js"), __webpack_require__.e("vendors-node_modules_ethers_lib_esm_wallet_mnemonic_js"), __webpack_require__.e("src_hooks_useIsFunctionAvailable_ts"), __webpack_require__.e("src_components_common_AppBackground_tsx-src_components_ledger_LedgerConnector_tsx-src_compone-0b786c"), __webpack_require__.e("src_hooks_useSeedlessAuth_ts-src_utils_seedless_authenticateWithApple_ts-src_utils_seedless_a-344cb0"), __webpack_require__.e("src_pages_Onboarding_Onboarding_tsx")]).then(__webpack_require__.bind(__webpack_require__, /*! ../pages/Onboarding/Onboarding */ "./src/pages/Onboarding/Onboarding.tsx")).then(m => ({
  default: m.Onboarding
})));
const OnboardingContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_4__.createContext)({});
function OnboardingContextProvider({
  children
}) {
  const {
    request,
    events
  } = (0,_ConnectionProvider__WEBPACK_IMPORTED_MODULE_6__.useConnectionContext)();
  const isHome = (0,_src_hooks_useIsSpecificContextContainer__WEBPACK_IMPORTED_MODULE_3__.useIsSpecificContextContainer)(_src_hooks_useIsSpecificContextContainer__WEBPACK_IMPORTED_MODULE_3__.ContextContainer.HOME);
  const [onboardingState, setOnboardingState] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)();
  const [nextPhase, setNextPhase] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)();
  const [mnemonic, setMnemonic] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)('');
  const [xpub, setXpub] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)('');
  const [xpubXP, setXpubXP] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)('');
  const [password, setPassword] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)('');
  const [newsletterEmail, setNewsletterEmail] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)('');
  const [isNewsletterEnabled, setIsNewsletterEnabled] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(false);
  const [walletName, setWalletName] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)();
  const [analyticsConsent, setAnalyticsConsent] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(undefined);
  const [submitInProgress, setSubmitInProgress] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(false);
  const [publicKeys, setPublicKeys] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)();
  const [masterFingerprint, setMasterFingerprint] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)('');
  const [authProvider, setAuthProvider] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)();
  const [userId, setUserId] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)();
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_11__.useTranslation)();
  const [oidcToken, setOidcToken] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)('');
  const [seedlessSignerToken, setSeedlessSignerToken] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(undefined);
  const [onboardingPhase, setOnboardingPhase] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(null);
  const [walletType, setWalletType] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)();
  const [isSeedlessMfaRequired, setIsSeedlessMfaRequired] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(false);
  const [numberOfAccountsToCreate, setNumberOfAccountsToCreate] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(0);
  const [onboardingWalletType, setOnboardingWalletType] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(undefined);
  const {
    capture
  } = (0,_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_8__.useAnalyticsContext)();
  const resetStates = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(() => {
    setMnemonic('');
    setXpub('');
    setXpubXP('');
    setPublicKeys(undefined);
    setPassword('');
    setAnalyticsConsent(undefined);
    setMasterFingerprint('');
    setOidcToken('');
    setSeedlessSignerToken(undefined);
    setWalletType(undefined);
    setUserId(undefined);
    setWalletName(undefined);
    setIsSeedlessMfaRequired(false);
    setOnboardingWalletType(undefined);
    setIsNewsletterEnabled(false);
    setNewsletterEmail('');
    setNumberOfAccountsToCreate(0);
  }, []);
  (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(() => {
    if (nextPhase === _src_background_services_onboarding_models__WEBPACK_IMPORTED_MODULE_2__.OnboardingPhase.RESTART) {
      resetStates();
    }
  }, [nextPhase, resetStates]);
  (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(() => {
    const walletTypeSelectingPhases = [_src_background_services_onboarding_models__WEBPACK_IMPORTED_MODULE_2__.OnboardingPhase.CREATE_WALLET, _src_background_services_onboarding_models__WEBPACK_IMPORTED_MODULE_2__.OnboardingPhase.IMPORT_WALLET, _src_background_services_onboarding_models__WEBPACK_IMPORTED_MODULE_2__.OnboardingPhase.LEDGER, _src_background_services_onboarding_models__WEBPACK_IMPORTED_MODULE_2__.OnboardingPhase.KEYSTONE, _src_background_services_onboarding_models__WEBPACK_IMPORTED_MODULE_2__.OnboardingPhase.SEEDLESS_GOOGLE, _src_background_services_onboarding_models__WEBPACK_IMPORTED_MODULE_2__.OnboardingPhase.SEEDLESS_APPLE];
    if (onboardingPhase && walletTypeSelectingPhases.includes(onboardingPhase)) {
      setWalletType(onboardingPhase);
    }
  }, [onboardingPhase]);
  (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(() => {
    if (!request || !events) {
      return;
    }
    (0,rxjs__WEBPACK_IMPORTED_MODULE_12__.concat)((0,rxjs__WEBPACK_IMPORTED_MODULE_13__.from)(request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_0__.ExtensionRequest.ONBOARDING_GET_STATE
    })), events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_14__.filter)(_src_background_services_onboarding_events_listeners__WEBPACK_IMPORTED_MODULE_1__.onboardingUpdatedEventListener), (0,rxjs__WEBPACK_IMPORTED_MODULE_15__.map)(evt => evt.value))).subscribe(result => {
      setOnboardingState(result);
    });
  }, [request, events]);

  /**
   * If they are on the popup.html file then force onboarding to a tab. These files are created
   * in the webpack config and we decipher the environment by the .html file.
   */
  (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(() => {
    if (!isHome && onboardingState && !onboardingState.isOnBoarded) {
      webextension_polyfill__WEBPACK_IMPORTED_MODULE_5___default().tabs.create({
        url: '/home.html'
      });
      window.close();
    }
  }, [isHome, onboardingState]);
  const setPasswordAndNames = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((pass, newWalletName) => {
    setPassword(pass);
    setWalletName(newWalletName);
  }, []);
  const submitMnemonic = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(() => {
    return request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_0__.ExtensionRequest.MNEMONIC_ONBOARDING_SUBMIT,
      params: [{
        mnemonic,
        password,
        analyticsConsent: !!analyticsConsent,
        walletName: walletName
      }]
    });
  }, [analyticsConsent, mnemonic, password, request, walletName]);
  const submitSeedless = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(() => {
    if (!seedlessSignerToken || !userId || !authProvider) {
      throw new Error('Seedless wallet initialization failed');
    }
    return request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_0__.ExtensionRequest.SEEDLESS_ONBOARDING_SUBMIT,
      params: [{
        seedlessSignerToken,
        userId,
        authProvider,
        password,
        analyticsConsent: !!analyticsConsent,
        walletName: walletName
      }]
    });
  }, [analyticsConsent, authProvider, password, request, seedlessSignerToken, userId, walletName]);
  const submitLedger = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(() => {
    return request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_0__.ExtensionRequest.LEDGER_ONBOARDING_SUBMIT,
      params: [{
        xpub,
        xpubXP,
        pubKeys: publicKeys,
        password,
        analyticsConsent: !!analyticsConsent,
        walletName: walletName,
        numberOfAccountsToCreate
      }]
    });
  }, [analyticsConsent, numberOfAccountsToCreate, password, publicKeys, request, walletName, xpub, xpubXP]);
  const submitKeystone = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(() => {
    return request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_0__.ExtensionRequest.KEYSTONE_ONBOARDING_SUBMIT,
      params: [{
        masterFingerprint,
        xpub,
        password,
        analyticsConsent: !!analyticsConsent,
        walletName: walletName
      }]
    });
  }, [analyticsConsent, masterFingerprint, password, request, walletName, xpub]);
  const submit = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(postSubmitHandler => {
    if (submitInProgress) {
      return;
    }
    if (!mnemonic && !xpub && !password) {
      return;
    }
    let handler = undefined;
    if (!handler && onboardingWalletType === _avalabs_types__WEBPACK_IMPORTED_MODULE_16__.WalletType.Mnemonic) {
      handler = submitMnemonic;
    }
    if (!handler && onboardingWalletType === _avalabs_types__WEBPACK_IMPORTED_MODULE_16__.WalletType.Seedless) {
      handler = submitSeedless;
    }
    if (!handler && onboardingWalletType === _avalabs_types__WEBPACK_IMPORTED_MODULE_16__.WalletType.Keystone) {
      handler = submitKeystone;
    }
    if (!handler && onboardingWalletType === _avalabs_types__WEBPACK_IMPORTED_MODULE_16__.WalletType.Ledger) {
      handler = submitLedger;
    }
    if (!handler) {
      return;
    }
    setSubmitInProgress(true);
    handler().then(async () => {
      capture('OnboardingSubmitSucceeded', {
        walletType
      });
      if (isNewsletterEnabled) {
        try {
          await (0,_src_utils_newsletter__WEBPACK_IMPORTED_MODULE_9__.signUpForNewsletter)({
            email: newsletterEmail
          });
          capture('NewsletterSignupSuccess');
        } catch (ex) {
          const rawMessage = ex.message ? String(ex.message) : 'Failed to sign up for newsletter';
          const sanitizedMessage = rawMessage.replace(new RegExp(newsletterEmail, 'g'), '<user-email>');
          (0,_src_monitoring_sentryCaptureException__WEBPACK_IMPORTED_MODULE_10__["default"])(new Error(sanitizedMessage), _src_monitoring_sentryCaptureException__WEBPACK_IMPORTED_MODULE_10__.SentryExceptionTypes.ONBOARDING);
          capture('NewsletterSignupFailure');
        }
      }
      resetStates();
      postSubmitHandler();
    }).catch(() => {
      capture('OnboardingSubmitFailed', {
        walletType
      });
      setNextPhase(_src_background_services_onboarding_models__WEBPACK_IMPORTED_MODULE_2__.OnboardingPhase.PASSWORD);
      _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_17__["default"].error(t('Something went wrong. Please try again.'), {
        duration: 3000
      });
      setAnalyticsConsent(undefined);
    }).finally(() => {
      setSubmitInProgress(false);
    });
  }, [capture, isNewsletterEnabled, mnemonic, newsletterEmail, onboardingWalletType, password, resetStates, submitInProgress, submitKeystone, submitLedger, submitMnemonic, submitSeedless, t, walletType, xpub]);
  if (!onboardingState) {
    return /*#__PURE__*/React.createElement(_src_popup_LoadingContent__WEBPACK_IMPORTED_MODULE_7__.LoadingContent, null);
  }
  return /*#__PURE__*/React.createElement(OnboardingContext.Provider, {
    value: {
      onboardingState,
      nextPhase,
      newsletterEmail,
      isNewsletterEnabled,
      setIsNewsletterEnabled,
      submitInProgress,
      setNextPhase,
      setNewsletterEmail,
      setMnemonic,
      setXpub,
      setXpubXP,
      setPasswordAndNames,
      submit,
      setAnalyticsConsent,
      analyticsConsent,
      setPublicKeys,
      publicKeys,
      setMasterFingerprint,
      mnemonic,
      onboardingPhase,
      setOnboardingPhase,
      setOidcToken,
      oidcToken,
      setSeedlessSignerToken,
      setAuthProvider,
      setUserId,
      resetStates,
      isSeedlessMfaRequired,
      setIsSeedlessMfaRequired,
      setOnboardingWalletType,
      onboardingWalletType,
      setNumberOfAccountsToCreate
    }
  }, isHome ? /*#__PURE__*/React.createElement(react__WEBPACK_IMPORTED_MODULE_4__.Suspense, {
    fallback: /*#__PURE__*/React.createElement(_src_popup_LoadingContent__WEBPACK_IMPORTED_MODULE_7__.LoadingContent, null)
  }, /*#__PURE__*/React.createElement(Onboarding, null)) : children);
}
function useOnboardingContext() {
  return (0,react__WEBPACK_IMPORTED_MODULE_4__.useContext)(OnboardingContext);
}

/***/ }),

/***/ "./src/contexts/PermissionsProvider.tsx":
/*!**********************************************!*\
  !*** ./src/contexts/PermissionsProvider.tsx ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PermissionContextProvider": () => (/* binding */ PermissionContextProvider),
/* harmony export */   "usePermissionContext": () => (/* binding */ usePermissionContext)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _ConnectionProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ConnectionProvider */ "./src/contexts/ConnectionProvider.tsx");
/* harmony import */ var _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/background/connections/extensionConnection/models */ "./src/background/connections/extensionConnection/models.ts");
/* harmony import */ var _src_background_services_permissions_events_permissionsStateUpdatesListener__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @src/background/services/permissions/events/permissionsStateUpdatesListener */ "./src/background/services/permissions/events/permissionsStateUpdatesListener.ts");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/dist/esm5/internal/operators/filter.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/dist/esm5/internal/operators/map.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_4__);
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");






const PermissionContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({});
function PermissionContextProvider({
  children
}) {
  const {
    request,
    events
  } = (0,_ConnectionProvider__WEBPACK_IMPORTED_MODULE_1__.useConnectionContext)();
  const [permissionState, setPermissionState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({});
  const revokeAddressPermisson = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((domain, addresses) => request({
    method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.PERMISSIONS_REVOKE_ADDRESS_ACCESS_FOR_DOMAIN,
    params: [domain, addresses]
  }), [request]);
  const isDomainConnectedToAccount = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((domain, addresses) => {
    if (!domain || !addresses?.length) {
      return false;
    }
    const domainData = permissionState[domain];
    if (!domainData?.accounts) {
      return false;
    }
    return addresses.map(lodash__WEBPACK_IMPORTED_MODULE_4__.toLower).some(addr => Object.keys(domainData.accounts).map(lodash__WEBPACK_IMPORTED_MODULE_4__.toLower).includes(addr));
  }, [permissionState]);

  // listen for permissions changes
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    let isCancelled = false;
    request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.PERMISSIONS_GET_ALL_PERMISSIONS
    }).then(result => {
      return result;
    }).then(permissions => {
      if (isCancelled) {
        return;
      }
      setPermissionState(permissions);
    });
    const subscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_5__.filter)(_src_background_services_permissions_events_permissionsStateUpdatesListener__WEBPACK_IMPORTED_MODULE_3__.permissionsUpdatedEventListener), (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.map)(evt => evt.value)).subscribe(permissions => {
      setPermissionState(permissions);
    });
    return () => {
      subscription.unsubscribe();
      isCancelled = true;
    };
  }, [events, request]);
  return /*#__PURE__*/React.createElement(PermissionContext.Provider, {
    value: {
      permissions: permissionState,
      revokeAddressPermisson,
      isDomainConnectedToAccount
    }
  }, children);
}
function usePermissionContext() {
  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(PermissionContext);
}

/***/ }),

/***/ "./src/contexts/SeedlessMfaManagementProvider.tsx":
/*!********************************************************!*\
  !*** ./src/contexts/SeedlessMfaManagementProvider.tsx ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SeedlessMfaManagementContext": () => (/* binding */ SeedlessMfaManagementContext),
/* harmony export */   "SeedlessMfaManagementProvider": () => (/* binding */ SeedlessMfaManagementProvider),
/* harmony export */   "useSeedlessMfaManager": () => (/* binding */ useSeedlessMfaManager)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/dist/esm5/internal/operators/filter.js");
/* harmony import */ var _src_background_services_secrets_models__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/background/services/secrets/models */ "./src/background/services/secrets/models.ts");
/* harmony import */ var _src_background_services_featureFlags_models__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/background/services/featureFlags/models */ "./src/background/services/featureFlags/models.ts");
/* harmony import */ var _src_background_services_seedless_models__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @src/background/services/seedless/models */ "./src/background/services/seedless/models.ts");
/* harmony import */ var _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @src/background/connections/extensionConnection/models */ "./src/background/connections/extensionConnection/models.ts");
/* harmony import */ var _src_background_services_seedless_events_eventFilters__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @src/background/services/seedless/events/eventFilters */ "./src/background/services/seedless/events/eventFilters.ts");
/* harmony import */ var _src_utils_incrementalPromiseResolve__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @src/utils/incrementalPromiseResolve */ "./src/utils/incrementalPromiseResolve.ts");
/* harmony import */ var _ConnectionProvider__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ConnectionProvider */ "./src/contexts/ConnectionProvider.tsx");
/* harmony import */ var _WalletProvider__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./WalletProvider */ "./src/contexts/WalletProvider.tsx");
/* harmony import */ var _FeatureFlagsProvider__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./FeatureFlagsProvider */ "./src/contexts/FeatureFlagsProvider.tsx");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");











const SeedlessMfaManagementContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({
  initAuthenticatorChange() {
    throw 'Not ready';
  },
  completeAuthenticatorChange() {
    throw 'Not ready';
  },
  addFidoDevice() {
    throw 'Not ready';
  },
  removeFidoDevice() {
    throw 'Not ready';
  },
  removeTotp() {
    throw 'Not ready';
  },
  isLoadingRecoveryMethods: false,
  recoveryMethods: [],
  isMfaSetupPromptVisible: false,
  hasMfaConfigured: false,
  hasTotpConfigured: false,
  hasFidoConfigured: false
});
const SeedlessMfaManagementProvider = ({
  children
}) => {
  const {
    events,
    request
  } = (0,_ConnectionProvider__WEBPACK_IMPORTED_MODULE_7__.useConnectionContext)();
  const {
    walletDetails
  } = (0,_WalletProvider__WEBPACK_IMPORTED_MODULE_8__.useWalletContext)();
  const {
    featureFlags
  } = (0,_FeatureFlagsProvider__WEBPACK_IMPORTED_MODULE_9__.useFeatureFlagContext)();
  const areMfaSettingsAvailable = featureFlags[_src_background_services_featureFlags_models__WEBPACK_IMPORTED_MODULE_2__.FeatureGates.SEEEDLESS_MFA_SETTINGS];
  const [isLoadingRecoveryMethods, setIsLoadingRecoveryMethods] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const [hasLoadedRecoveryMethods, setHasLoadedRecoveryMethods] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const [recoveryMethods, setRecoveryMethods] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);
  const isMfaSetupPromptVisible = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return areMfaSettingsAvailable && hasLoadedRecoveryMethods && walletDetails?.type === _src_background_services_secrets_models__WEBPACK_IMPORTED_MODULE_1__.SecretType.Seedless && recoveryMethods.length === 0;
  }, [areMfaSettingsAvailable, hasLoadedRecoveryMethods, walletDetails?.type, recoveryMethods]);
  const loadRecoveryMethods = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async () => {
    setIsLoadingRecoveryMethods(true);
    try {
      const methods = await (0,_src_utils_incrementalPromiseResolve__WEBPACK_IMPORTED_MODULE_6__.incrementalPromiseResolve)(() => request({
        method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_4__.ExtensionRequest.SEEDLESS_GET_RECOVERY_METHODS
      }),
      // CubeSigner SDK attempts to refresh the session token whenever possible,
      // but sometimes a race condition happens and the request may temporarily fail
      // with a 403 Forbidden. In that case, we retry.
      err => err === 'Forbidden');
      setRecoveryMethods(methods);
      setHasLoadedRecoveryMethods(true);
    } catch {
      setRecoveryMethods([]);
      setHasLoadedRecoveryMethods(false);
    } finally {
      setIsLoadingRecoveryMethods(false);
    }
  }, [request]);
  const initAuthenticatorChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => request({
    method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_4__.ExtensionRequest.SEEDLESS_INIT_AUTHENTICATOR_CHANGE
  }), [request]);
  const completeAuthenticatorChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((totpId, code) => request({
    method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_4__.ExtensionRequest.SEEDLESS_COMPLETE_AUTHENTICATOR_CHANGE,
    params: [totpId, code]
  }), [request]);
  const addFidoDevice = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((name, keyType) => request({
    method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_4__.ExtensionRequest.SEEDLESS_ADD_FIDO_DEVICE,
    params: [name, keyType]
  }), [request]);
  const removeFidoDevice = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(id => request({
    method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_4__.ExtensionRequest.SEEDLESS_REMOVE_FIDO_DEVICE,
    params: [id]
  }), [request]);
  const removeTotp = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => request({
    method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_4__.ExtensionRequest.SEEDLESS_REMOVE_TOTP
  }), [request]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (walletDetails?.type !== _src_background_services_secrets_models__WEBPACK_IMPORTED_MODULE_1__.SecretType.Seedless) {
      return;
    }
    loadRecoveryMethods();
    const eventsSubscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_10__.filter)(_src_background_services_seedless_events_eventFilters__WEBPACK_IMPORTED_MODULE_5__.isSeedlessMfaMethodsUpdatedEvent)).subscribe(async event => {
      setRecoveryMethods(event.value);
    });
    return () => {
      eventsSubscription.unsubscribe();
    };
  }, [events, loadRecoveryMethods, walletDetails?.type]);
  return /*#__PURE__*/React.createElement(SeedlessMfaManagementContext.Provider, {
    value: {
      addFidoDevice,
      removeFidoDevice,
      removeTotp,
      completeAuthenticatorChange,
      initAuthenticatorChange,
      isLoadingRecoveryMethods,
      isMfaSetupPromptVisible,
      recoveryMethods,
      hasMfaConfigured: recoveryMethods.length > 0,
      hasTotpConfigured: recoveryMethods.some(({
        type
      }) => type === _src_background_services_seedless_models__WEBPACK_IMPORTED_MODULE_3__.MfaRequestType.Totp),
      hasFidoConfigured: recoveryMethods.some(({
        type
      }) => type === _src_background_services_seedless_models__WEBPACK_IMPORTED_MODULE_3__.MfaRequestType.Fido)
    }
  }, children);
};
function useSeedlessMfaManager() {
  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SeedlessMfaManagementContext);
}

/***/ }),

/***/ "./src/contexts/SwapProvider/SwapProvider.tsx":
/*!****************************************************!*\
  !*** ./src/contexts/SwapProvider/SwapProvider.tsx ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SwapContext": () => (/* binding */ SwapContext),
/* harmony export */   "SwapContextProvider": () => (/* binding */ SwapContextProvider),
/* harmony export */   "useSwapContext": () => (/* binding */ useSwapContext)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _avalabs_core_utils_sdk__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! @avalabs/core-utils-sdk */ "./node_modules/@avalabs/core-utils-sdk/esm/promiseResolver.js");
/* harmony import */ var _ConnectionProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ConnectionProvider */ "./src/contexts/ConnectionProvider.tsx");
/* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! webextension-polyfill */ "./node_modules/webextension-polyfill/dist/browser-polyfill.js");
/* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(webextension_polyfill__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _NetworkProvider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../NetworkProvider */ "./src/contexts/NetworkProvider.tsx");
/* harmony import */ var _AccountsProvider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../AccountsProvider */ "./src/contexts/AccountsProvider.tsx");
/* harmony import */ var _FeatureFlagsProvider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../FeatureFlagsProvider */ "./src/contexts/FeatureFlagsProvider.tsx");
/* harmony import */ var _src_background_services_featureFlags_models__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @src/background/services/featureFlags/models */ "./src/background/services/featureFlags/models.ts");
/* harmony import */ var _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! @avalabs/core-chains-sdk */ "./node_modules/@avalabs/core-chains-sdk/esm/models.js");
/* harmony import */ var _src_utils_incrementalPromiseResolve__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @src/utils/incrementalPromiseResolve */ "./src/utils/incrementalPromiseResolve.ts");
/* harmony import */ var big_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! big.js */ "./node_modules/big.js/big.js");
/* harmony import */ var big_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(big_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @avalabs/vm-module-types */ "./node_modules/@avalabs/vm-module-types/dist/index.js");
/* harmony import */ var _src_hooks_useTokensWithBalances__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @src/hooks/useTokensWithBalances */ "./src/hooks/useTokensWithBalances.ts");
/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");
/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(bn_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var _AnalyticsProvider__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../AnalyticsProvider */ "./src/contexts/AnalyticsProvider.tsx");
/* harmony import */ var _NetworkFeeProvider__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../NetworkFeeProvider */ "./src/contexts/NetworkFeeProvider.tsx");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./models */ "./src/contexts/SwapProvider/models.ts");
/* harmony import */ var joi__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! joi */ "./node_modules/joi/lib/index.js");
/* harmony import */ var joi__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(joi__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var _src_pages_Swap_utils__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @src/pages/Swap/utils */ "./src/pages/Swap/utils/index.tsx");
/* harmony import */ var _swap_utils__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./swap-utils */ "./src/contexts/SwapProvider/swap-utils.ts");
/* harmony import */ var _src_utils_assertions__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @src/utils/assertions */ "./src/utils/assertions.ts");
/* harmony import */ var _src_utils_errors__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @src/utils/errors */ "./src/utils/errors/index.ts");
/* harmony import */ var _WalletProvider__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../WalletProvider */ "./src/contexts/WalletProvider.tsx");
/* harmony import */ var _src_background_services_secrets_models__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @src/background/services/secrets/models */ "./src/background/services/secrets/models.ts");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/react-hot-toast/dist/index.mjs");
/* harmony import */ var _src_pages_Swap_components_SwapPendingToast__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @src/pages/Swap/components/SwapPendingToast */ "./src/pages/Swap/components/SwapPendingToast.tsx");
/* harmony import */ var _src_utils_network_getProviderForNetwork__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @src/utils/network/getProviderForNetwork */ "./src/utils/network/getProviderForNetwork.ts");
/* harmony import */ var _src_utils_toastCardWithLink__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @src/utils/toastCardWithLink */ "./src/utils/toastCardWithLink.tsx");
/* harmony import */ var _src_utils_getExplorerAddress__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @src/utils/getExplorerAddress */ "./src/utils/getExplorerAddress.ts");
/* harmony import */ var _paraswap_sdk__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @paraswap/sdk */ "./node_modules/@paraswap/sdk/dist/sdk.esm.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./constants */ "./src/contexts/SwapProvider/constants.ts");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
































const SwapContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({});
function SwapContextProvider({
  children
}) {
  const {
    request
  } = (0,_ConnectionProvider__WEBPACK_IMPORTED_MODULE_1__.useConnectionContext)();
  const {
    network: activeNetwork
  } = (0,_NetworkProvider__WEBPACK_IMPORTED_MODULE_3__.useNetworkContext)();
  const {
    accounts: {
      active: activeAccount
    }
  } = (0,_AccountsProvider__WEBPACK_IMPORTED_MODULE_4__.useAccountsContext)();
  const {
    walletDetails
  } = (0,_WalletProvider__WEBPACK_IMPORTED_MODULE_20__.useWalletContext)();
  const {
    isFlagEnabled
  } = (0,_FeatureFlagsProvider__WEBPACK_IMPORTED_MODULE_5__.useFeatureFlagContext)();
  const {
    networkFee
  } = (0,_NetworkFeeProvider__WEBPACK_IMPORTED_MODULE_13__.useNetworkFeeContext)();
  const {
    captureEncrypted
  } = (0,_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_12__.useAnalyticsContext)();
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_28__.useTranslation)();
  const tokens = (0,_src_hooks_useTokensWithBalances__WEBPACK_IMPORTED_MODULE_10__.useTokensWithBalances)({
    forceShowTokensWithoutBalances: true,
    disallowedAssets: _models__WEBPACK_IMPORTED_MODULE_14__.DISALLOWED_SWAP_ASSETS
  });
  const [rpcProvider, setRpcProvider] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    let isMounted = true;
    if (activeNetwork) {
      (0,_src_utils_network_getProviderForNetwork__WEBPACK_IMPORTED_MODULE_23__.getProviderForNetwork)(activeNetwork).then(prov => {
        if (isMounted) {
          setRpcProvider(prov);
        }
      }).catch(() => {
        if (isMounted) {
          setRpcProvider(undefined);
        }
      });
    }
    return () => {
      isMounted = false;
    };
  }, [activeNetwork]);
  const paraswap = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    const chainId = activeNetwork?.chainId;
    return isSwapCapableChain(chainId) ? (0,_paraswap_sdk__WEBPACK_IMPORTED_MODULE_26__.constructPartialSDK)({
      chainId: chainId,
      fetcher: (0,_paraswap_sdk__WEBPACK_IMPORTED_MODULE_26__.constructFetchFetcher)(fetch)
    }, _paraswap_sdk__WEBPACK_IMPORTED_MODULE_26__.constructGetRate, _paraswap_sdk__WEBPACK_IMPORTED_MODULE_26__.constructGetBalances, _paraswap_sdk__WEBPACK_IMPORTED_MODULE_26__.constructBuildTx, _paraswap_sdk__WEBPACK_IMPORTED_MODULE_26__.constructGetSpender) : null;
  }, [activeNetwork?.chainId]);
  const findSymbol = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(symbolOrAddress => {
    const tokenInfo = tokens.find(token => token.type === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_9__.TokenType.NATIVE ? token.symbol === symbolOrAddress : token.address === symbolOrAddress);
    return tokenInfo?.symbol ?? symbolOrAddress;
  }, [tokens]);
  const getRate = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ({
    srcToken,
    destToken,
    srcDecimals,
    destDecimals,
    srcAmount,
    swapSide
  }) => {
    if (!activeNetwork || activeNetwork.isTestnet) {
      throw (0,_swap_utils__WEBPACK_IMPORTED_MODULE_17__.swapError)(_src_utils_errors__WEBPACK_IMPORTED_MODULE_19__.CommonError.UnknownNetwork);
    }
    if (!activeAccount || !activeAccount.addressC) {
      throw (0,_swap_utils__WEBPACK_IMPORTED_MODULE_17__.swapError)(_src_utils_errors__WEBPACK_IMPORTED_MODULE_19__.CommonError.NoActiveAccount);
    }
    if (!isFlagEnabled(_src_background_services_featureFlags_models__WEBPACK_IMPORTED_MODULE_6__.FeatureGates.SWAP)) {
      throw new Error(`Feature (SWAP) is currently unavailable`);
    }
    (0,_src_utils_assertions__WEBPACK_IMPORTED_MODULE_18__.assertPresent)(paraswap, _models__WEBPACK_IMPORTED_MODULE_14__.SwapErrorCode.ClientNotInitialized);
    const isFromTokenNative = activeNetwork.networkToken.symbol === srcToken;
    const isDestTokenNative = activeNetwork.networkToken.symbol === destToken;
    const optimalRates = async () => {
      return await paraswap.getRate({
        srcToken: isFromTokenNative ? _constants__WEBPACK_IMPORTED_MODULE_27__.NATIVE_TOKEN_ADDRESS : srcToken,
        destToken: isDestTokenNative ? _constants__WEBPACK_IMPORTED_MODULE_27__.NATIVE_TOKEN_ADDRESS : destToken,
        amount: srcAmount,
        side: swapSide || _paraswap_sdk__WEBPACK_IMPORTED_MODULE_26__.SwapSide.SELL,
        srcDecimals: isFromTokenNative ? 18 : srcDecimals,
        destDecimals: isDestTokenNative ? 18 : destDecimals,
        userAddress: activeAccount.addressC
      });
    };
    const result = await (0,_src_utils_incrementalPromiseResolve__WEBPACK_IMPORTED_MODULE_7__.incrementalPromiseResolve)(() => optimalRates(), _swap_utils__WEBPACK_IMPORTED_MODULE_17__.checkForErrorsInGetRateResult);
    return {
      optimalRate: result ?? null,
      destAmount: result?.destAmount
    };
  }, [activeAccount, activeNetwork, isFlagEnabled, paraswap]);
  const buildTx = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ({
    srcToken,
    destToken,
    srcAmount,
    destAmount,
    srcDecimals,
    destDecimals,
    priceRoute,
    userAddress,
    ignoreChecks,
    isNativeTokenSwap
  }) => {
    (0,_src_utils_assertions__WEBPACK_IMPORTED_MODULE_18__.assertPresent)(activeNetwork, _src_utils_errors__WEBPACK_IMPORTED_MODULE_19__.CommonError.NoActiveNetwork);
    (0,_src_utils_assertions__WEBPACK_IMPORTED_MODULE_18__.assertPresent)(paraswap, _models__WEBPACK_IMPORTED_MODULE_14__.SwapErrorCode.ClientNotInitialized);
    if (!isFlagEnabled(_src_background_services_featureFlags_models__WEBPACK_IMPORTED_MODULE_6__.FeatureGates.SWAP)) {
      throw new Error(`Feature (SWAP) is currently unavailable`);
    }
    const responseSchema = joi__WEBPACK_IMPORTED_MODULE_15___default().object({
      to: joi__WEBPACK_IMPORTED_MODULE_15___default().string().required(),
      from: joi__WEBPACK_IMPORTED_MODULE_15___default().string().required(),
      value: joi__WEBPACK_IMPORTED_MODULE_15___default().string().required(),
      data: joi__WEBPACK_IMPORTED_MODULE_15___default().string().required(),
      chainId: joi__WEBPACK_IMPORTED_MODULE_15___default().number().required(),
      gas: joi__WEBPACK_IMPORTED_MODULE_15___default().string().optional(),
      gasPrice: joi__WEBPACK_IMPORTED_MODULE_15___default().string().optional()
    }).unknown();
    const transactionParamsOrError = await paraswap.buildTx({
      srcToken,
      srcDecimals,
      srcAmount,
      destToken,
      destDecimals,
      destAmount,
      priceRoute,
      userAddress,
      partner: 'Avalanche',
      ...(0,_swap_utils__WEBPACK_IMPORTED_MODULE_17__.getPartnerFeeParams)(isFlagEnabled(_src_background_services_featureFlags_models__WEBPACK_IMPORTED_MODULE_6__.FeatureGates.SWAP_FEES))
    }, {
      ignoreChecks
    }).catch((0,_src_utils_errors__WEBPACK_IMPORTED_MODULE_19__.wrapError)((0,_swap_utils__WEBPACK_IMPORTED_MODULE_17__.swapError)(_src_utils_errors__WEBPACK_IMPORTED_MODULE_19__.CommonError.NetworkError)));
    const validationResult = responseSchema.validate(transactionParamsOrError);
    if (validationResult.error) {
      if ((0,_src_pages_Swap_utils__WEBPACK_IMPORTED_MODULE_16__.isAPIError)(transactionParamsOrError)) {
        throw (0,_swap_utils__WEBPACK_IMPORTED_MODULE_17__.swapError)(_models__WEBPACK_IMPORTED_MODULE_14__.SwapErrorCode.ApiError, new Error(transactionParamsOrError.message));
      }
      throw (0,_swap_utils__WEBPACK_IMPORTED_MODULE_17__.swapError)(_models__WEBPACK_IMPORTED_MODULE_14__.SwapErrorCode.UnexpectedApiResponse, validationResult.error);
    }
    const txPayload = validationResult.value;
    return {
      chainId: `0x${activeNetwork.chainId.toString(16)}`,
      gas: txPayload.gas ? '0x' + Number(txPayload.gas).toString(16) : undefined,
      data: txPayload.data,
      to: txPayload.to,
      from: userAddress,
      value: isNativeTokenSwap ? `0x${new bn_js__WEBPACK_IMPORTED_MODULE_11__.BN(srcAmount).toString('hex')}` : undefined // AVAX value needs to be sent with the transaction
    };
  }, [isFlagEnabled, paraswap, activeNetwork]);
  const notifyOnSwapResult = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ({
    provider,
    txHash,
    chainId,
    userAddress,
    srcToken,
    destToken,
    srcAmount,
    destAmount,
    srcDecimals,
    destDecimals
  }) => {
    const toastId = _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_29__["default"].custom( /*#__PURE__*/React.createElement(_src_pages_Swap_components_SwapPendingToast__WEBPACK_IMPORTED_MODULE_22__.SwapPendingToast, {
      onDismiss: () => _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_29__["default"].remove(toastId)
    }, t('Swap pending...')), {
      duration: Infinity
    });
    provider.waitForTransaction(txHash).then(async tx => {
      const isSuccessful = tx && tx.status === 1;
      captureEncrypted(isSuccessful ? 'SwapSuccessful' : 'SwapFailed', {
        address: userAddress,
        txHash: txHash,
        chainId
      });
      const srcAsset = findSymbol(srcToken);
      const destAsset = findSymbol(destToken);
      const srcAssetAmount = new (big_js__WEBPACK_IMPORTED_MODULE_8___default())(srcAmount).div(10 ** srcDecimals).toString();
      const destAssetAmount = new (big_js__WEBPACK_IMPORTED_MODULE_8___default())(destAmount).div(10 ** destDecimals).toString();
      const notificationText = isSuccessful ? t('Swap transaction succeeded! 🎉') : t('Swap transaction failed! ❌');
      _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_29__["default"].remove(toastId);
      if (isSuccessful) {
        (0,_src_utils_toastCardWithLink__WEBPACK_IMPORTED_MODULE_24__.toastCardWithLink)({
          title: notificationText,
          url: (0,_src_utils_getExplorerAddress__WEBPACK_IMPORTED_MODULE_25__.getExplorerAddressByNetwork)(activeNetwork, txHash),
          label: t('View in Explorer')
        });
      } else {
        _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_29__["default"].error(notificationText, {
          duration: 5000
        });
      }
      webextension_polyfill__WEBPACK_IMPORTED_MODULE_2___default().notifications.create({
        type: 'basic',
        title: notificationText,
        iconUrl: '../../../../images/icon-192.png',
        priority: 2,
        message: isSuccessful ? t('Successfully swapped {{srcAmount}} {{srcToken}} to {{destAmount}} {{destToken}}', {
          srcAmount: srcAssetAmount,
          destAmount: destAssetAmount,
          srcToken: srcAsset,
          destToken: destAsset
        }) : t('Could not swap {{srcAmount}} {{srcToken}} to {{destAmount}} {{destToken}}', {
          srcToken: srcAsset,
          destToken: destAsset,
          srcAmount: srcAssetAmount,
          destAmount: destAssetAmount
        })
      });
    });
  }, [activeNetwork, captureEncrypted, findSymbol, t]);
  const getSwapTxProps = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ({
    srcToken,
    destToken,
    srcAmount,
    slippage,
    nativeToken,
    priceRoute
  }) => {
    (0,_src_utils_assertions__WEBPACK_IMPORTED_MODULE_18__.assertPresent)(paraswap, _models__WEBPACK_IMPORTED_MODULE_14__.SwapErrorCode.ClientNotInitialized);
    (0,_src_utils_assertions__WEBPACK_IMPORTED_MODULE_18__.assertPresent)(activeNetwork, _src_utils_errors__WEBPACK_IMPORTED_MODULE_19__.CommonError.NoActiveNetwork);
    const minAmount = new (big_js__WEBPACK_IMPORTED_MODULE_8___default())(priceRoute.destAmount).times(1 - slippage / 100).toFixed(0);
    const maxAmount = new (big_js__WEBPACK_IMPORTED_MODULE_8___default())(srcAmount).times(1 + slippage / 100).toFixed(0);
    const sourceAmount = priceRoute.side === _paraswap_sdk__WEBPACK_IMPORTED_MODULE_26__.SwapSide.SELL ? srcAmount : maxAmount;
    const destinationAmount = priceRoute.side === _paraswap_sdk__WEBPACK_IMPORTED_MODULE_26__.SwapSide.SELL ? minAmount : priceRoute.destAmount;
    return {
      srcTokenAddress: srcToken === nativeToken ? _constants__WEBPACK_IMPORTED_MODULE_27__.NATIVE_TOKEN_ADDRESS : srcToken,
      destTokenAddress: destToken === nativeToken ? _constants__WEBPACK_IMPORTED_MODULE_27__.NATIVE_TOKEN_ADDRESS : destToken,
      spender: await paraswap.getSpender(),
      sourceAmount,
      destinationAmount
    };
  }, [paraswap, activeNetwork]);

  /**
   * Used to perform a batch swap operation (approval + transfer) in a single click for the user.
   * Some notes:
   *
   *  - Requires a feature flag to be enabled.
   *  - When transferring AVAX, it performs the usual eth_sendTransaction request.
   *  - If the allowance covers the transfer amount, it performs the usual eth_sendTransaction request
   */
  const oneClickSwap = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async params => {
    if (!isFlagEnabled(_src_background_services_featureFlags_models__WEBPACK_IMPORTED_MODULE_6__.FeatureGates.ONE_CLICK_SWAP)) {
      throw new Error(`Feature (SWAP) is currently unavailable`);
    }
    (0,_src_utils_assertions__WEBPACK_IMPORTED_MODULE_18__.assertPresent)(activeNetwork, _src_utils_errors__WEBPACK_IMPORTED_MODULE_19__.CommonError.NoActiveNetwork);
    (0,_src_utils_assertions__WEBPACK_IMPORTED_MODULE_18__.assertPresent)(networkFee, _src_utils_errors__WEBPACK_IMPORTED_MODULE_19__.CommonError.UnknownNetworkFee);
    (0,_src_utils_assertions__WEBPACK_IMPORTED_MODULE_18__.assertPresent)(activeAccount, _src_utils_errors__WEBPACK_IMPORTED_MODULE_19__.CommonError.NoActiveAccount);
    (0,_src_utils_assertions__WEBPACK_IMPORTED_MODULE_18__.assertPresent)(rpcProvider, _src_utils_errors__WEBPACK_IMPORTED_MODULE_19__.CommonError.Unknown);
    (0,_src_utils_assertions__WEBPACK_IMPORTED_MODULE_18__.assert)(!activeNetwork.isTestnet, _src_utils_errors__WEBPACK_IMPORTED_MODULE_19__.CommonError.UnknownNetwork);
    const {
      srcToken,
      destToken,
      srcAmount,
      srcDecimals,
      destDecimals,
      destAmount,
      priceRoute,
      slippage
    } = (0,_swap_utils__WEBPACK_IMPORTED_MODULE_17__.validateParams)(params);
    const userAddress = activeAccount.addressC;
    const {
      srcTokenAddress,
      destTokenAddress,
      destinationAmount,
      sourceAmount,
      spender
    } = await getSwapTxProps({
      srcToken,
      destToken,
      srcAmount,
      slippage,
      nativeToken: activeNetwork.networkToken.symbol,
      priceRoute
    });
    const batch = [];
    const isNativeTokenSwap = srcToken === activeNetwork.networkToken.symbol;

    // no need to approve AVAX
    if (!isNativeTokenSwap) {
      const allowanceCoversAmount = await (0,_swap_utils__WEBPACK_IMPORTED_MODULE_17__.hasEnoughAllowance)({
        tokenAddress: srcTokenAddress,
        provider: rpcProvider,
        userAddress,
        spenderAddress: spender,
        requiredAmount: BigInt(sourceAmount)
      });
      if (!allowanceCoversAmount) {
        const approvalTx = await (0,_swap_utils__WEBPACK_IMPORTED_MODULE_17__.buildApprovalTx)({
          userAddress,
          spenderAddress: spender,
          tokenAddress: srcTokenAddress,
          amount: BigInt(sourceAmount),
          provider: rpcProvider
        });
        batch.push(approvalTx);
      }
    }
    const ignoreChecks = batch.length > 0; // Only ignore checks if we have an approval transaction in the batch
    const swapTx = await buildTx({
      network: activeNetwork.chainId.toString(),
      srcToken: srcTokenAddress,
      destToken: destTokenAddress,
      srcAmount: sourceAmount,
      destAmount: destinationAmount,
      priceRoute,
      userAddress,
      srcDecimals: activeNetwork.networkToken.symbol === srcToken ? 18 : srcDecimals,
      destDecimals: activeNetwork.networkToken.symbol === destToken ? 18 : destDecimals,
      ignoreChecks,
      isNativeTokenSwap
    });
    batch.push(swapTx);
    let swapTxHash;
    if (batch.length > 1) {
      const [txHashes, batchSignError] = await (0,_avalabs_core_utils_sdk__WEBPACK_IMPORTED_MODULE_30__.resolve)(request({
        method: _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_9__.RpcMethod.ETH_SEND_TRANSACTION_BATCH,
        params: batch
      }, {
        customApprovalScreenTitle: t('Confirm Swap'),
        customApprovalButtonText: t('Swap')
      }));
      if ((0,_src_utils_errors__WEBPACK_IMPORTED_MODULE_19__.isUserRejectionError)(batchSignError)) {
        throw batchSignError;
      } else if (batchSignError || !txHashes) {
        throw (0,_swap_utils__WEBPACK_IMPORTED_MODULE_17__.swapError)(_src_utils_errors__WEBPACK_IMPORTED_MODULE_19__.CommonError.UnableToSign, batchSignError);
      }
      swapTxHash = txHashes[txHashes.length - 1];
    } else {
      const [txHash, signError] = await (0,_avalabs_core_utils_sdk__WEBPACK_IMPORTED_MODULE_30__.resolve)(request({
        method: _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_9__.RpcMethod.ETH_SEND_TRANSACTION,
        params: [batch[0]]
      }));
      if ((0,_src_utils_errors__WEBPACK_IMPORTED_MODULE_19__.isUserRejectionError)(signError)) {
        throw signError;
      } else if (signError || !txHash) {
        throw (0,_swap_utils__WEBPACK_IMPORTED_MODULE_17__.swapError)(_src_utils_errors__WEBPACK_IMPORTED_MODULE_19__.CommonError.UnableToSign, signError);
      }
      swapTxHash = txHash;
    }
    notifyOnSwapResult({
      provider: rpcProvider,
      txHash: swapTxHash,
      chainId: activeNetwork.chainId,
      userAddress,
      srcToken,
      destToken,
      srcAmount,
      destAmount,
      srcDecimals,
      destDecimals
    });
  }, [isFlagEnabled, activeNetwork, networkFee, activeAccount, rpcProvider, getSwapTxProps, buildTx, notifyOnSwapResult, request, t]);
  const regularSwap = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async params => {
    (0,_src_utils_assertions__WEBPACK_IMPORTED_MODULE_18__.assertPresent)(activeNetwork, _src_utils_errors__WEBPACK_IMPORTED_MODULE_19__.CommonError.NoActiveNetwork);
    (0,_src_utils_assertions__WEBPACK_IMPORTED_MODULE_18__.assertPresent)(networkFee, _src_utils_errors__WEBPACK_IMPORTED_MODULE_19__.CommonError.UnknownNetworkFee);
    (0,_src_utils_assertions__WEBPACK_IMPORTED_MODULE_18__.assertPresent)(activeAccount, _src_utils_errors__WEBPACK_IMPORTED_MODULE_19__.CommonError.NoActiveAccount);
    (0,_src_utils_assertions__WEBPACK_IMPORTED_MODULE_18__.assertPresent)(rpcProvider, _src_utils_errors__WEBPACK_IMPORTED_MODULE_19__.CommonError.Unknown);
    (0,_src_utils_assertions__WEBPACK_IMPORTED_MODULE_18__.assert)(!activeNetwork.isTestnet, _src_utils_errors__WEBPACK_IMPORTED_MODULE_19__.CommonError.UnknownNetwork);
    const {
      srcToken,
      destToken,
      srcAmount,
      srcDecimals,
      destDecimals,
      destAmount,
      priceRoute,
      slippage
    } = (0,_swap_utils__WEBPACK_IMPORTED_MODULE_17__.validateParams)(params);
    const userAddress = activeAccount.addressC;
    const {
      srcTokenAddress,
      destTokenAddress,
      destinationAmount,
      sourceAmount,
      spender
    } = await getSwapTxProps({
      srcToken,
      destToken,
      srcAmount,
      slippage,
      nativeToken: activeNetwork.networkToken.symbol,
      priceRoute
    });

    // no need to approve AVAX
    const isNativeTokenSwap = srcToken === activeNetwork.networkToken.symbol;
    if (!isNativeTokenSwap) {
      await (0,_swap_utils__WEBPACK_IMPORTED_MODULE_17__.ensureAllowance)({
        amount: BigInt(sourceAmount),
        provider: rpcProvider,
        request,
        spenderAddress: spender,
        tokenAddress: srcTokenAddress,
        userAddress
      });
    }
    const [swapTx, txBuildDataError] = await (0,_avalabs_core_utils_sdk__WEBPACK_IMPORTED_MODULE_30__.resolve)((0,_src_utils_incrementalPromiseResolve__WEBPACK_IMPORTED_MODULE_7__.incrementalPromiseResolve)(() => buildTx({
      network: activeNetwork.chainId.toString(),
      srcToken: srcTokenAddress,
      destToken: destTokenAddress,
      srcAmount: sourceAmount,
      destAmount: destinationAmount,
      priceRoute,
      userAddress,
      isNativeTokenSwap,
      srcDecimals: activeNetwork.networkToken.symbol === srcToken ? 18 : srcDecimals,
      destDecimals: activeNetwork.networkToken.symbol === destToken ? 18 : destDecimals
    }), _swap_utils__WEBPACK_IMPORTED_MODULE_17__.checkForErrorsInBuildTxResult, 0, 10));
    if (txBuildDataError || !swapTx) {
      throw (0,_swap_utils__WEBPACK_IMPORTED_MODULE_17__.swapError)(_models__WEBPACK_IMPORTED_MODULE_14__.SwapErrorCode.CannotBuildTx, txBuildDataError);
    }
    const [swapTxHash, signError] = await (0,_avalabs_core_utils_sdk__WEBPACK_IMPORTED_MODULE_30__.resolve)(request({
      method: _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_9__.RpcMethod.ETH_SEND_TRANSACTION,
      params: [swapTx]
    }, {
      customApprovalScreenTitle: t('Confirm Swap'),
      customApprovalButtonText: t('Swap')
    }));
    if ((0,_src_utils_errors__WEBPACK_IMPORTED_MODULE_19__.isUserRejectionError)(signError)) {
      throw signError;
    } else if (signError || !swapTxHash) {
      throw (0,_swap_utils__WEBPACK_IMPORTED_MODULE_17__.swapError)(_src_utils_errors__WEBPACK_IMPORTED_MODULE_19__.CommonError.UnableToSign, signError);
    }
    notifyOnSwapResult({
      provider: rpcProvider,
      txHash: swapTxHash,
      chainId: activeNetwork.chainId,
      userAddress,
      srcToken,
      destToken,
      srcAmount,
      destAmount,
      srcDecimals,
      destDecimals
    });
  }, [activeNetwork, networkFee, activeAccount, rpcProvider, getSwapTxProps, request, notifyOnSwapResult, buildTx, t]);
  const swap = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async params => {
    if (!isFlagEnabled(_src_background_services_featureFlags_models__WEBPACK_IMPORTED_MODULE_6__.FeatureGates.SWAP)) {
      throw new Error(`Feature (SWAP) is currently unavailable`);
    }
    const isOneClickSwapEnabled = isFlagEnabled(_src_background_services_featureFlags_models__WEBPACK_IMPORTED_MODULE_6__.FeatureGates.ONE_CLICK_SWAP);
    const isOneClickSwapSupported = walletDetails?.type === _src_background_services_secrets_models__WEBPACK_IMPORTED_MODULE_21__.SecretType.Mnemonic || walletDetails?.type === _src_background_services_secrets_models__WEBPACK_IMPORTED_MODULE_21__.SecretType.Seedless || walletDetails?.type === _src_background_services_secrets_models__WEBPACK_IMPORTED_MODULE_21__.SecretType.PrivateKey;
    if (isOneClickSwapEnabled && isOneClickSwapSupported) {
      return oneClickSwap(params);
    }
    return regularSwap(params);
  }, [regularSwap, oneClickSwap, isFlagEnabled, walletDetails?.type]);
  return /*#__PURE__*/React.createElement(SwapContext.Provider, {
    value: {
      getRate,
      swap
    }
  }, children);
}
const isSwapCapableChain = chainId => chainId === _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_31__.ChainId.AVALANCHE_MAINNET_ID || chainId === _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_31__.ChainId.ETHEREUM_HOMESTEAD;
function useSwapContext() {
  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SwapContext);
}

/***/ }),

/***/ "./src/contexts/SwapProvider/constants.ts":
/*!************************************************!*\
  !*** ./src/contexts/SwapProvider/constants.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NATIVE_TOKEN_ADDRESS": () => (/* binding */ NATIVE_TOKEN_ADDRESS),
/* harmony export */   "PARASWAP_PARTNER_ADDRESS": () => (/* binding */ PARASWAP_PARTNER_ADDRESS),
/* harmony export */   "PARASWAP_PARTNER_FEE_BPS": () => (/* binding */ PARASWAP_PARTNER_FEE_BPS)
/* harmony export */ });
/**
 * The address where ParaSwap will send collected partner fees.
 */
const PARASWAP_PARTNER_ADDRESS = '0xcEA3b9415F269B5686403909d781959570f32CF0';

/**
 * The fee percentage that Core gathers on ParaSwap swaps.
 *
 * An integer representing the basis points (BPS) of the fee percentage.
 *
 * @example 85 -> 0.85%
 */
const PARASWAP_PARTNER_FEE_BPS = 85;

/**
 * The address ParaSwap uses for EVM native tokens.
 */
const NATIVE_TOKEN_ADDRESS = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee';

/***/ }),

/***/ "./src/contexts/SwapProvider/models.ts":
/*!*********************************************!*\
  !*** ./src/contexts/SwapProvider/models.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DISALLOWED_SWAP_ASSETS": () => (/* binding */ DISALLOWED_SWAP_ASSETS),
/* harmony export */   "PARASWAP_RETRYABLE_ERRORS": () => (/* binding */ PARASWAP_RETRYABLE_ERRORS),
/* harmony export */   "SwapErrorCode": () => (/* binding */ SwapErrorCode),
/* harmony export */   "hasParaswapError": () => (/* binding */ hasParaswapError)
/* harmony export */ });
/**
 * Paraswap may return both data and an error sometimes.
 * @see https://app.swaggerhub.com/apis/paraswapv5/api/1.0#/PriceRouteWithError
 */

/**
 * Paraswap API errors after which it may be useful to retry the request.
 *
 * @see https://app.swaggerhub.com/apis/paraswapv5/api/1.0#/PriceErrorMessage
 */
const PARASWAP_RETRYABLE_ERRORS = ['Price Timeout', 'An error has occurred, please try again later or contact our support'];
const hasParaswapError = response => {
  return typeof response.error === 'string';
};
const DISALLOWED_SWAP_ASSETS = [
// ETH is disabled in Swaps per issue CP-8409
'ETH'];
let SwapErrorCode = /*#__PURE__*/function (SwapErrorCode) {
  SwapErrorCode["ClientNotInitialized"] = "client-not-initialized";
  SwapErrorCode["MissingParams"] = "missing-params";
  SwapErrorCode["CannotFetchAllowance"] = "cannot-fetch-allowance";
  SwapErrorCode["MissingContractMethod"] = "missing-contract-method";
  SwapErrorCode["ApiError"] = "api-error";
  SwapErrorCode["UnknownSpender"] = "unknown-spender";
  SwapErrorCode["UnexpectedApiResponse"] = "unexpected-api-response";
  SwapErrorCode["CannotBuildTx"] = "cannot-build-tx";
  return SwapErrorCode;
}({});

/***/ }),

/***/ "./src/contexts/SwapProvider/swap-utils.ts":
/*!*************************************************!*\
  !*** ./src/contexts/SwapProvider/swap-utils.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "buildApprovalTx": () => (/* binding */ buildApprovalTx),
/* harmony export */   "checkForErrorsInBuildTxResult": () => (/* binding */ checkForErrorsInBuildTxResult),
/* harmony export */   "checkForErrorsInGetRateResult": () => (/* binding */ checkForErrorsInGetRateResult),
/* harmony export */   "ensureAllowance": () => (/* binding */ ensureAllowance),
/* harmony export */   "getPartnerFeeParams": () => (/* binding */ getPartnerFeeParams),
/* harmony export */   "hasEnoughAllowance": () => (/* binding */ hasEnoughAllowance),
/* harmony export */   "paraswapErrorToSwapError": () => (/* binding */ paraswapErrorToSwapError),
/* harmony export */   "swapError": () => (/* binding */ swapError),
/* harmony export */   "validateParams": () => (/* binding */ validateParams)
/* harmony export */ });
/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ethers */ "./node_modules/ethers/lib.esm/contract/contract.js");
/* harmony import */ var _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @avalabs/vm-module-types */ "./node_modules/@avalabs/vm-module-types/dist/index.js");
/* harmony import */ var eth_rpc_errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! eth-rpc-errors */ "./node_modules/eth-rpc-errors/dist/index.js");
/* harmony import */ var _openzeppelin_contracts_build_contracts_ERC20_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @openzeppelin/contracts/build/contracts/ERC20.json */ "./node_modules/@openzeppelin/contracts/build/contracts/ERC20.json");
/* harmony import */ var i18next__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! i18next */ "./node_modules/i18next/dist/esm/i18next.js");
/* harmony import */ var _src_utils_errors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @src/utils/errors */ "./src/utils/errors/index.ts");
/* harmony import */ var _src_utils_promiseResolver__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @src/utils/promiseResolver */ "./src/utils/promiseResolver.ts");
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./models */ "./src/contexts/SwapProvider/models.ts");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./constants */ "./src/contexts/SwapProvider/constants.ts");









function validateParams(params) {
  const {
    srcToken,
    destToken,
    srcAmount,
    srcDecimals,
    destDecimals,
    destAmount,
    priceRoute,
    slippage
  } = params;
  if (!srcToken) {
    throw swapError(_models__WEBPACK_IMPORTED_MODULE_6__.SwapErrorCode.MissingParams, new Error('Missing parameter: srcToken'));
  }
  if (!destToken) {
    throw swapError(_models__WEBPACK_IMPORTED_MODULE_6__.SwapErrorCode.MissingParams, new Error('Missing parameter: destToken'));
  }
  if (!srcAmount) {
    throw swapError(_models__WEBPACK_IMPORTED_MODULE_6__.SwapErrorCode.MissingParams, new Error('Missing parameter: srcAmount'));
  }
  if (!srcDecimals) {
    throw swapError(_models__WEBPACK_IMPORTED_MODULE_6__.SwapErrorCode.MissingParams, new Error('Missing parameter: srcDecimals'));
  }
  if (!destDecimals) {
    throw swapError(_models__WEBPACK_IMPORTED_MODULE_6__.SwapErrorCode.MissingParams, new Error('Missing parameter: destDecimals'));
  }
  if (!destAmount) {
    throw swapError(_models__WEBPACK_IMPORTED_MODULE_6__.SwapErrorCode.MissingParams, new Error('Missing parameter: destAmount'));
  }
  if (!priceRoute) {
    throw swapError(_models__WEBPACK_IMPORTED_MODULE_6__.SwapErrorCode.MissingParams, new Error('Missing parameter: priceRoute'));
  }
  if (!slippage) {
    throw swapError(_models__WEBPACK_IMPORTED_MODULE_6__.SwapErrorCode.MissingParams, new Error('Missing parameter: slippage'));
  }
  return {
    srcToken,
    destToken,
    srcAmount,
    srcDecimals,
    destDecimals,
    destAmount,
    priceRoute,
    slippage
  };
}
async function buildApprovalTx({
  userAddress,
  spenderAddress,
  tokenAddress,
  amount,
  provider
}) {
  const contract = new ethers__WEBPACK_IMPORTED_MODULE_8__.Contract(tokenAddress, _openzeppelin_contracts_build_contracts_ERC20_json__WEBPACK_IMPORTED_MODULE_2__.abi, provider);
  const {
    data
  } = await contract.approve.populateTransaction(spenderAddress, amount);
  const chainId = `0x${provider._network.chainId.toString(16)}`;
  const tx = {
    from: userAddress,
    to: tokenAddress,
    chainId,
    data
  };
  const [approvalGasLimit, approvalGasLimitError] = await (0,_src_utils_promiseResolver__WEBPACK_IMPORTED_MODULE_5__.resolve)(provider.estimateGas(tx));
  if (approvalGasLimitError) {
    throw swapError(_src_utils_errors__WEBPACK_IMPORTED_MODULE_4__.CommonError.UnableToEstimateGas, approvalGasLimitError);
  }
  return {
    ...tx,
    gas: `0x${approvalGasLimit.toString(16)}`
  };
}
async function hasEnoughAllowance({
  tokenAddress,
  provider,
  userAddress,
  spenderAddress,
  requiredAmount
}) {
  const contract = new ethers__WEBPACK_IMPORTED_MODULE_8__.Contract(tokenAddress, _openzeppelin_contracts_build_contracts_ERC20_json__WEBPACK_IMPORTED_MODULE_2__.abi, provider);
  if (!contract.allowance) {
    throw swapError(_models__WEBPACK_IMPORTED_MODULE_6__.SwapErrorCode.MissingContractMethod, new Error(`Contract Error: allowance method is not available`));
  }
  const [allowance, allowanceError] = await (0,_src_utils_promiseResolver__WEBPACK_IMPORTED_MODULE_5__.resolve)(contract.allowance(userAddress, spenderAddress));
  if (allowanceError) {
    throw swapError(_models__WEBPACK_IMPORTED_MODULE_6__.SwapErrorCode.CannotFetchAllowance, allowanceError);
  }
  return allowance >= requiredAmount;
}
async function ensureAllowance({
  provider,
  tokenAddress,
  userAddress,
  spenderAddress,
  amount,
  request
}) {
  const allowanceCoversAmount = await hasEnoughAllowance({
    tokenAddress,
    provider,
    userAddress,
    spenderAddress,
    requiredAmount: amount
  });
  if (allowanceCoversAmount) {
    return;
  }
  const tx = await buildApprovalTx({
    amount,
    provider,
    spenderAddress,
    tokenAddress,
    userAddress
  });
  const [, signError] = await (0,_src_utils_promiseResolver__WEBPACK_IMPORTED_MODULE_5__.resolve)(request({
    method: _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.RpcMethod.ETH_SEND_TRANSACTION,
    params: [tx]
  }));
  if ((0,_src_utils_errors__WEBPACK_IMPORTED_MODULE_4__.isUserRejectionError)(signError)) {
    throw signError;
  } else if (signError) {
    throw swapError(_src_utils_errors__WEBPACK_IMPORTED_MODULE_4__.CommonError.UnableToSign, signError);
  }
}
const normalizeError = err => {
  if ((0,_src_utils_errors__WEBPACK_IMPORTED_MODULE_4__.isWrappedError)(err)) {
    return err;
  }
  if (err instanceof Error) {
    return err;
  }
  if (typeof err === 'string') {
    return new Error(err);
  }
  return new Error(err?.message ?? 'Unknown error');
};
const swapError = (errorCode, originalError) => {
  if ((0,_src_utils_errors__WEBPACK_IMPORTED_MODULE_4__.isWrappedError)(originalError)) {
    return originalError;
  }
  return eth_rpc_errors__WEBPACK_IMPORTED_MODULE_1__.ethErrors.rpc.internal({
    data: {
      reason: errorCode,
      originalError: originalError ? normalizeError(originalError) : new Error('Unknown swap error')
    }
  });
};
const paraswapErrorToSwapError = error => {
  if (!error.message) {
    return {
      message: (0,i18next__WEBPACK_IMPORTED_MODULE_3__.t)('Unknown error occurred, '),
      hasTryAgain: true
    };
  }
  switch (error.message) {
    case 'ESTIMATED_LOSS_GREATER_THAN_MAX_IMPACT':
      return {
        message: (0,i18next__WEBPACK_IMPORTED_MODULE_3__.t)('Slippage tolerance exceeded, increase the slippage and try again.'),
        hasTryAgain: false
      };
    case 'No routes found with enough liquidity':
      return {
        message: (0,i18next__WEBPACK_IMPORTED_MODULE_3__.t)('No routes found with enough liquidity.'),
        hasTryAgain: false
      };
    case 'Internal Error while computing the price':
      return {
        message: (0,i18next__WEBPACK_IMPORTED_MODULE_3__.t)('An error occurred while computing the price.'),
        hasTryAgain: false
      };
  }
  if (/is too small to proceed/.test(error.message)) {
    return {
      message: (0,i18next__WEBPACK_IMPORTED_MODULE_3__.t)('Amount is too small to proceed.'),
      hasTryAgain: false
    };
  }
  return {
    message: (0,i18next__WEBPACK_IMPORTED_MODULE_3__.t)('Unknown error occurred, '),
    hasTryAgain: true
  };
};
function checkForErrorsInGetRateResult(response) {
  const isFetchError = response instanceof TypeError;
  const isParaswapError = !isFetchError && (0,_models__WEBPACK_IMPORTED_MODULE_6__.hasParaswapError)(response);
  if (isFetchError || isParaswapError) {
    // If there is an error, we may want to retry the request if a network issue
    // or some of the documented Paraswap API errors occurred.
    const isNetworkIssue = isFetchError && response.message === 'Failed to fetch';
    const shouldBeRetried = isNetworkIssue || isParaswapError && _models__WEBPACK_IMPORTED_MODULE_6__.PARASWAP_RETRYABLE_ERRORS.includes(response.error);
    if (shouldBeRetried) {
      return true;
      // If an error occurred, but there is no point in retrying a request,
      // we need to propagate the error so we're able to show an appropriate
      // message in the UI.
    } else if (isFetchError) {
      throw swapError(_src_utils_errors__WEBPACK_IMPORTED_MODULE_4__.CommonError.NetworkError, response);
    } else {
      throw swapError(_src_utils_errors__WEBPACK_IMPORTED_MODULE_4__.CommonError.Unknown, new Error(response.error));
    }
  }
  return false;
}
function checkForErrorsInBuildTxResult(result) {
  return (0,_src_utils_errors__WEBPACK_IMPORTED_MODULE_4__.isWrappedError)(result) && typeof result.data.originalError === 'object' && result.data.originalError && 'message' in result.data.originalError && result.data.originalError.message === 'Server too busy' ||
  // paraswap returns responses like this: {error: 'Not enough 0x4f60a160d8c2dddaafe16fcc57566db84d674…}
  // when they are too slow to detect the approval
  result.error || result instanceof Error;
}

/**
 * Responsible for adding the needed parameters to a swap transaction
 * in ParaSwap so that Core can gather fees from the swap.
 *
 * Should only be enabled if the feature flag is enabled. Otherwise no fees should be collected.
 *
 * @see https://ava-labs.atlassian.net/browse/CP-10050
 *
 * @param {boolean} featureFlagEnabled - Whether the feature flag is enabled or not.
 *
 * @returns The necessary parameters for Core to gather fees from the swap.
 */
const getPartnerFeeParams = featureFlagEnabled => {
  if (!featureFlagEnabled) {
    return {
      isDirectFeeTransfer: false,
      partnerAddress: undefined,
      partnerFeeBps: undefined
    };
  }
  return {
    partnerAddress: _constants__WEBPACK_IMPORTED_MODULE_7__.PARASWAP_PARTNER_ADDRESS,
    partnerFeeBps: _constants__WEBPACK_IMPORTED_MODULE_7__.PARASWAP_PARTNER_FEE_BPS,
    isDirectFeeTransfer: true
  };
};

/***/ }),

/***/ "./src/contexts/UnifiedBridgeProvider.tsx":
/*!************************************************!*\
  !*** ./src/contexts/UnifiedBridgeProvider.tsx ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UnifiedBridgeProvider": () => (/* binding */ UnifiedBridgeProvider),
/* harmony export */   "useUnifiedBridgeContext": () => (/* binding */ useUnifiedBridgeContext)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @avalabs/bridge-unified */ "./node_modules/@avalabs/bridge-unified/dist/index.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/dist/esm5/internal/operators/filter.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/dist/esm5/internal/operators/map.js");
/* harmony import */ var _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/background/connections/extensionConnection/models */ "./src/background/connections/extensionConnection/models.ts");
/* harmony import */ var _src_background_services_unifiedBridge_models__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @src/background/services/unifiedBridge/models */ "./src/background/services/unifiedBridge/models.ts");
/* harmony import */ var _src_background_services_unifiedBridge_events_eventFilters__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @src/background/services/unifiedBridge/events/eventFilters */ "./src/background/services/unifiedBridge/events/eventFilters.ts");
/* harmony import */ var _NetworkProvider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./NetworkProvider */ "./src/contexts/NetworkProvider.tsx");
/* harmony import */ var _ConnectionProvider__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ConnectionProvider */ "./src/contexts/ConnectionProvider.tsx");
/* harmony import */ var _src_utils_errors__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @src/utils/errors */ "./src/utils/errors/index.ts");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var _FeatureFlagsProvider__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./FeatureFlagsProvider */ "./src/contexts/FeatureFlagsProvider.tsx");
/* harmony import */ var _AccountsProvider__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./AccountsProvider */ "./src/contexts/AccountsProvider.tsx");
/* harmony import */ var _src_utils_lowerCaseKeys__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @src/utils/lowerCaseKeys */ "./src/utils/lowerCaseKeys.ts");
/* harmony import */ var _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @avalabs/vm-module-types */ "./node_modules/@avalabs/vm-module-types/dist/index.js");
/* harmony import */ var _src_utils_caipConversion__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @src/utils/caipConversion */ "./src/utils/caipConversion.ts");
/* harmony import */ var _src_utils_getEnabledBridgeTypes__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @src/utils/getEnabledBridgeTypes */ "./src/utils/getEnabledBridgeTypes.ts");
/* harmony import */ var _src_utils_network_getProviderForNetwork__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @src/utils/network/getProviderForNetwork */ "./src/utils/network/getProviderForNetwork.ts");
/* harmony import */ var _src_utils_assertions__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @src/utils/assertions */ "./src/utils/assertions.ts");
/* harmony import */ var _src_background_services_bridge_events_listeners__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @src/background/services/bridge/events/listeners */ "./src/background/services/bridge/events/listeners.ts");
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");



















const DEFAULT_STATE = {
  state: _src_background_services_unifiedBridge_models__WEBPACK_IMPORTED_MODULE_3__.UNIFIED_BRIDGE_DEFAULT_STATE,
  estimateTransferGas() {
    throw new Error('Bridge not ready');
  },
  getAssetIdentifierOnTargetChain() {
    return undefined;
  },
  getErrorMessage() {
    return '';
  },
  supportsAsset() {
    return false;
  },
  analyzeTx() {
    return {
      isBridgeTx: false
    };
  },
  transferAsset() {
    throw new Error('Bridge not ready');
  },
  getFee() {
    throw new Error('Bridge not ready');
  },
  getMinimumTransferAmount() {
    throw new Error('Bridge not ready');
  },
  transferableAssets: [],
  availableChainIds: [],
  isReady: false
};
const UnifiedBridgeContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(DEFAULT_STATE);
function UnifiedBridgeProvider({
  children
}) {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_17__.useTranslation)();
  const {
    accounts: {
      active: activeAccount
    }
  } = (0,_AccountsProvider__WEBPACK_IMPORTED_MODULE_9__.useAccountsContext)();
  const {
    network: activeNetwork,
    getNetwork,
    bitcoinProvider
  } = (0,_NetworkProvider__WEBPACK_IMPORTED_MODULE_5__.useNetworkContext)();
  const {
    events,
    request
  } = (0,_ConnectionProvider__WEBPACK_IMPORTED_MODULE_6__.useConnectionContext)();
  const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(_src_background_services_unifiedBridge_models__WEBPACK_IMPORTED_MODULE_3__.UNIFIED_BRIDGE_DEFAULT_STATE);
  const [isBridgeDevEnv, setIsBridgeDevEnv] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const {
    featureFlags
  } = (0,_FeatureFlagsProvider__WEBPACK_IMPORTED_MODULE_8__.useFeatureFlagContext)();
  const enabledBridgeTypes = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => (0,_src_utils_getEnabledBridgeTypes__WEBPACK_IMPORTED_MODULE_13__.getEnabledBridgeTypes)(featureFlags), [featureFlags]);
  const environment = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (typeof activeNetwork?.isTestnet !== 'boolean') {
      return null;
    }
    return isBridgeDevEnv ? _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_1__.Environment.DEV : activeNetwork.isTestnet ? _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_1__.Environment.TEST : _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_1__.Environment.PROD;
  }, [activeNetwork?.isTestnet, isBridgeDevEnv]);
  const [activeBridgeTypes, setActiveBridgeTypes] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const evmSigner = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => ({
    sign: async ({
      from,
      data,
      to,
      value
    }, _, {
      currentSignature,
      requiredSignatures
    }) => {
      (0,_src_utils_assertions__WEBPACK_IMPORTED_MODULE_15__.assert)(to, _src_background_services_unifiedBridge_models__WEBPACK_IMPORTED_MODULE_3__.UnifiedBridgeError.InvalidTxPayload);
      (0,_src_utils_assertions__WEBPACK_IMPORTED_MODULE_15__.assert)(from, _src_background_services_unifiedBridge_models__WEBPACK_IMPORTED_MODULE_3__.UnifiedBridgeError.InvalidTxPayload);
      (0,_src_utils_assertions__WEBPACK_IMPORTED_MODULE_15__.assert)(data, _src_background_services_unifiedBridge_models__WEBPACK_IMPORTED_MODULE_3__.UnifiedBridgeError.InvalidTxPayload);
      try {
        const result = await request({
          method: _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_11__.RpcMethod.ETH_SEND_TRANSACTION,
          params: [{
            from,
            to,
            data,
            value: typeof value === 'bigint' ? `0x${value.toString(16)}` : undefined
          }]
        }, {
          customApprovalScreenTitle: t('Confirm Bridge'),
          alert: requiredSignatures > currentSignature ? {
            type: 'info',
            title: t('This operation requires {{total}} approvals.', {
              total: requiredSignatures
            }),
            notice: t('You will be prompted {{remaining}} more time(s).', {
              remaining: requiredSignatures - currentSignature
            })
          } : undefined
        });
        return result;
      } catch (err) {
        console.error(err);
        throw err;
      }
    }
  }), [request, t]);
  const btcSigner = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => ({
    sign: async ({
      inputs,
      outputs
    }, _, {
      requiredSignatures,
      currentSignature
    }) => {
      try {
        const result = await request({
          method: _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_11__.RpcMethod.BITCOIN_SIGN_TRANSACTION,
          params: {
            inputs,
            outputs
          }
        }, {
          customApprovalScreenTitle: t('Confirm Bridge'),
          alert: requiredSignatures > currentSignature ? {
            type: 'info',
            title: t('This operation requires {{total}} approvals.', {
              total: requiredSignatures
            }),
            notice: t('You will be prompted {{remaining}} more time(s).', {
              remaining: requiredSignatures - currentSignature
            })
          } : undefined
        });
        return result;
      } catch (err) {
        console.error(err);
        throw err;
      }
    }
  }), [request, t]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!events || !request) {
      return;
    }
    if (!activeNetwork?.isTestnet) {
      setIsBridgeDevEnv(false);
      return;
    }
    request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.BRIDGE_GET_STATE
    }).then(bridgeState => {
      setIsBridgeDevEnv(bridgeState.isDevEnv);
    });
    const subscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_18__.filter)(_src_background_services_bridge_events_listeners__WEBPACK_IMPORTED_MODULE_16__.isBridgeStateUpdateEventListener), (0,rxjs__WEBPACK_IMPORTED_MODULE_19__.map)(evt => evt.value)).subscribe(bridgeState => {
      setIsBridgeDevEnv(bridgeState.isDevEnv);
    });
    return () => subscription.unsubscribe();
  }, [events, request, activeNetwork?.isTestnet]);
  const getInitializerForBridgeType = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((type, bitcoinFunctions) => {
    switch (type) {
      case _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_1__.BridgeType.CCTP:
      case _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_1__.BridgeType.ICTT_ERC20_ERC20:
      case _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_1__.BridgeType.AVALANCHE_EVM:
        return {
          type,
          signer: evmSigner
        };
      case _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_1__.BridgeType.AVALANCHE_AVA_BTC:
        return {
          type,
          signer: evmSigner,
          bitcoinFunctions
        };
      case _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_1__.BridgeType.AVALANCHE_BTC_AVA:
        return {
          type,
          signer: btcSigner,
          bitcoinFunctions
        };
    }
  }, [evmSigner, btcSigner]);
  const bridgeInitializers = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!bitcoinProvider) {
      return null;
    }
    return enabledBridgeTypes.map(type => getInitializerForBridgeType(type, bitcoinProvider));
  }, [enabledBridgeTypes, getInitializerForBridgeType, bitcoinProvider]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!environment || !bridgeInitializers) {
      return;
    }
    let isMounted = true;
    (0,_avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_1__.getEnabledBridgeServices)(environment, bridgeInitializers).then(bridges => {
      if (isMounted) setActiveBridgeTypes(bridges);
    }).catch(err => {
      console.log('Unable to initialize bridge services', err);
      if (isMounted) setActiveBridgeTypes(undefined);
    });
    return () => {
      isMounted = false;
    };
  }, [environment, bridgeInitializers]);

  // Memoize the core instance of Unified Bridge based on the current
  // network environment & feature flags configuration
  const core = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!environment || !activeBridgeTypes) {
      return null;
    }
    return (0,_avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_1__.createUnifiedBridgeService)({
      environment,
      enabledBridgeServices: activeBridgeTypes
    });
  }, [environment, activeBridgeTypes]);
  const availableChainIds = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => Object.keys(core?.getAssets() ?? {}), [core]);
  const buildChain = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(chainId => {
    const network = getNetwork(chainId);
    (0,_src_utils_assertions__WEBPACK_IMPORTED_MODULE_15__.assert)(network, _src_utils_errors__WEBPACK_IMPORTED_MODULE_7__.CommonError.UnknownNetwork);
    return {
      chainId: network.caipId,
      chainName: network.chainName,
      rpcUrl: network.rpcUrl,
      networkToken: {
        ...network.networkToken,
        type: _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_1__.TokenType.NATIVE
      },
      utilityAddresses: {
        multicall: network.utilityAddresses?.multicall
      }
    };
  }, [getNetwork]);
  const transferableAssets = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!activeNetwork || !core) {
      return [];
    }
    return core.getAssets()[activeNetwork.caipId] ?? [];
  }, [activeNetwork, core]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.UNIFIED_BRIDGE_GET_STATE
    }).then(currState => {
      setState(currState);
    });
    const stateUpdateSubscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_18__.filter)(_src_background_services_unifiedBridge_events_eventFilters__WEBPACK_IMPORTED_MODULE_4__.isUnifiedBridgeStateUpdate), (0,rxjs__WEBPACK_IMPORTED_MODULE_19__.map)(evt => evt.value)).subscribe(currState => {
      setState(currState);
    });
    return () => {
      stateUpdateSubscription.unsubscribe();
    };
  }, [events, request]);
  const supportsAsset = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((lookupAddressOrSymbol, targetChainId) => {
    if (!activeNetwork || !core) {
      return false;
    }
    const sourceAssets = core?.getAssets()[activeNetwork.caipId] ?? [];
    const asset = sourceAssets.find(token => {
      return token.type === _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_1__.TokenType.NATIVE ? token.symbol === lookupAddressOrSymbol : token.address === lookupAddressOrSymbol;
    });
    if (!asset) {
      return false;
    }
    return targetChainId in asset.destinations;
  }, [core, activeNetwork]);
  const getAsset = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((symbol, chainId) => {
    const chainAssets = core?.getAssets()[chainId] ?? [];
    const asset = chainAssets.find(({
      symbol: assetSymbol
    }) => assetSymbol === symbol);
    return asset;
  }, [core]);
  const getAddresses = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((account, sourceChain, targetChain) => {
    const isFromBitcoin = (0,_src_utils_caipConversion__WEBPACK_IMPORTED_MODULE_12__.isBitcoinCaipId)(sourceChain.chainId);
    const isToBitcoin = (0,_src_utils_caipConversion__WEBPACK_IMPORTED_MODULE_12__.isBitcoinCaipId)(targetChain.chainId);
    if (isFromBitcoin || isToBitcoin) {
      (0,_src_utils_assertions__WEBPACK_IMPORTED_MODULE_15__.assert)(account.addressBTC, _src_background_services_unifiedBridge_models__WEBPACK_IMPORTED_MODULE_3__.UnifiedBridgeError.NonBitcoinAccount);
      return {
        fromAddress: isFromBitcoin ? account.addressBTC : account.addressC,
        toAddress: isFromBitcoin ? account.addressC : account.addressBTC
      };
    }
    return {
      fromAddress: account.addressC,
      toAddress: account.addressC
    };
  }, []);
  const buildParams = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async targetChainId => {
    (0,_src_utils_assertions__WEBPACK_IMPORTED_MODULE_15__.assert)(activeAccount, _src_utils_errors__WEBPACK_IMPORTED_MODULE_7__.CommonError.NoActiveAccount);
    (0,_src_utils_assertions__WEBPACK_IMPORTED_MODULE_15__.assert)(activeNetwork, _src_utils_errors__WEBPACK_IMPORTED_MODULE_7__.CommonError.NoActiveNetwork);
    (0,_src_utils_assertions__WEBPACK_IMPORTED_MODULE_15__.assert)(activeAccount, _src_utils_errors__WEBPACK_IMPORTED_MODULE_7__.CommonError.NoActiveAccount);
    const sourceChain = buildChain(activeNetwork.caipId);
    const targetChain = buildChain(targetChainId);
    const provider = await (0,_src_utils_network_getProviderForNetwork__WEBPACK_IMPORTED_MODULE_14__.getProviderForNetwork)(activeNetwork);
    const {
      fromAddress,
      toAddress
    } = getAddresses(activeAccount, sourceChain, targetChain);
    return {
      sourceChain,
      sourceChainId: activeNetwork.caipId,
      targetChain,
      provider,
      fromAddress,
      toAddress
    };
  }, [activeAccount, activeNetwork, buildChain, getAddresses]);
  const getFee = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (symbol, amount, targetChainId) => {
    (0,_src_utils_assertions__WEBPACK_IMPORTED_MODULE_15__.assert)(core, _src_utils_errors__WEBPACK_IMPORTED_MODULE_7__.CommonError.Unknown);
    (0,_src_utils_assertions__WEBPACK_IMPORTED_MODULE_15__.assert)(activeNetwork, _src_utils_errors__WEBPACK_IMPORTED_MODULE_7__.CommonError.NoActiveNetwork);
    const asset = getAsset(symbol, activeNetwork.caipId);
    (0,_src_utils_assertions__WEBPACK_IMPORTED_MODULE_15__.assert)(asset, _src_background_services_unifiedBridge_models__WEBPACK_IMPORTED_MODULE_3__.UnifiedBridgeError.UnknownAsset);
    const feeMap = (0,_src_utils_lowerCaseKeys__WEBPACK_IMPORTED_MODULE_10__.lowerCaseKeys)(await core.getFees({
      asset,
      amount,
      targetChain: buildChain(targetChainId),
      sourceChain: buildChain(activeNetwork.caipId)
    }));

    // We currently operate on the assumption that the fee is paid in the
    // same token as is bridged.
    // Although sometimes it may be paid on the source chain (as is the case for CCTP),
    // and sometimes it may be paid on the target chain (i.e. Avalanche Bridge), the
    // result for the end users is that the received amount on the target chain is lowered
    // by the fee amount.
    const feeChainId = Object.keys(feeMap)[0]; // ID of the chain where the fee is paid
    (0,_src_utils_assertions__WEBPACK_IMPORTED_MODULE_15__.assert)(feeChainId, _src_background_services_unifiedBridge_models__WEBPACK_IMPORTED_MODULE_3__.UnifiedBridgeError.InvalidFee);
    const feeChain = feeMap[feeChainId];
    (0,_src_utils_assertions__WEBPACK_IMPORTED_MODULE_15__.assert)(feeChain, _src_background_services_unifiedBridge_models__WEBPACK_IMPORTED_MODULE_3__.UnifiedBridgeError.InvalidFee);
    const feeAssetId = Object.keys(feeChain)[0]; // address or "NATIVE"
    (0,_src_utils_assertions__WEBPACK_IMPORTED_MODULE_15__.assert)(feeAssetId, _src_background_services_unifiedBridge_models__WEBPACK_IMPORTED_MODULE_3__.UnifiedBridgeError.InvalidFee);
    return feeChain[feeAssetId] ?? 0n;
  }, [activeNetwork, core, buildChain, getAsset]);
  const estimateTransferGas = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (symbol, amount, targetChainId) => {
    (0,_src_utils_assertions__WEBPACK_IMPORTED_MODULE_15__.assert)(core, _src_utils_errors__WEBPACK_IMPORTED_MODULE_7__.CommonError.Unknown);
    (0,_src_utils_assertions__WEBPACK_IMPORTED_MODULE_15__.assert)(activeNetwork, _src_utils_errors__WEBPACK_IMPORTED_MODULE_7__.CommonError.NoActiveNetwork);
    const asset = getAsset(symbol, activeNetwork.caipId);
    (0,_src_utils_assertions__WEBPACK_IMPORTED_MODULE_15__.assert)(asset, _src_background_services_unifiedBridge_models__WEBPACK_IMPORTED_MODULE_3__.UnifiedBridgeError.UnknownAsset);
    const {
      fromAddress,
      sourceChain,
      targetChain
    } = await buildParams(targetChainId);
    const gasLimit = await core.estimateGas({
      asset,
      fromAddress,
      amount,
      sourceChain,
      targetChain
    });
    return gasLimit;
  }, [activeNetwork, core, buildParams, getAsset]);
  const getAssetIdentifierOnTargetChain = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((symbol, targetChainId) => {
    if (!symbol || !targetChainId) {
      return;
    }
    const asset = getAsset(symbol, targetChainId);
    if (!asset) {
      return;
    }
    return asset.type === _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_1__.TokenType.NATIVE ? asset.symbol : asset.address;
  }, [getAsset]);
  const trackBridgeTransfer = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async bridgeTransfer => {
    return request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.UNIFIED_BRIDGE_TRACK_TRANSFER,
      params: [bridgeTransfer]
    });
  }, [request]);
  const transferAsset = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (symbol, amount, targetChainId, gasSettings) => {
    (0,_src_utils_assertions__WEBPACK_IMPORTED_MODULE_15__.assert)(core, _src_utils_errors__WEBPACK_IMPORTED_MODULE_7__.CommonError.Unknown);
    (0,_src_utils_assertions__WEBPACK_IMPORTED_MODULE_15__.assert)(activeNetwork, _src_utils_errors__WEBPACK_IMPORTED_MODULE_7__.CommonError.NoActiveNetwork);
    const asset = getAsset(symbol, activeNetwork.caipId);
    (0,_src_utils_assertions__WEBPACK_IMPORTED_MODULE_15__.assert)(asset, _src_background_services_unifiedBridge_models__WEBPACK_IMPORTED_MODULE_3__.UnifiedBridgeError.UnknownAsset);
    const {
      fromAddress,
      toAddress,
      sourceChain,
      targetChain
    } = await buildParams(targetChainId);
    try {
      const bridgeTransfer = await core.transferAsset({
        asset,
        fromAddress,
        toAddress,
        amount,
        sourceChain,
        targetChain,
        gasSettings
      });
      await trackBridgeTransfer(bridgeTransfer);
      return bridgeTransfer.sourceTxHash;
    } catch (err) {
      console.error(err);
      throw err;
    }
  }, [getAsset, activeNetwork, buildParams, core, trackBridgeTransfer]);
  const getErrorMessage = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(errorCode => {
    switch (errorCode) {
      case _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.BRIDGE_NOT_AVAILABLE:
        return t('Bridge not available');
      case _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.INITIALIZATION_FAILED:
        return t('Bridge initialization failed');
      case _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.INVALID_PARAMS:
        return t('Invalid transfer parameters');
      case _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.TIMEOUT:
        return t('The transaction timed out');
      case _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.TRANSACTION_REVERTED:
        return t('The transaction has been reverted');
    }
  }, [t]);
  const analyzeTx = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(txInfo => {
    (0,_src_utils_assertions__WEBPACK_IMPORTED_MODULE_15__.assert)(core, _src_utils_errors__WEBPACK_IMPORTED_MODULE_7__.CommonError.Unknown);
    return core.analyzeTx(txInfo);
  }, [core]);
  const getMinimumTransferAmount = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (asset, amount, targetChainId) => {
    (0,_src_utils_assertions__WEBPACK_IMPORTED_MODULE_15__.assert)(core, _src_utils_errors__WEBPACK_IMPORTED_MODULE_7__.CommonError.Unknown);
    (0,_src_utils_assertions__WEBPACK_IMPORTED_MODULE_15__.assert)(activeNetwork, _src_utils_errors__WEBPACK_IMPORTED_MODULE_7__.CommonError.NoActiveNetwork);
    return core.getMinimumTransferAmount({
      asset,
      amount,
      sourceChain: buildChain(activeNetwork.caipId),
      targetChain: buildChain(targetChainId)
    });
  }, [core, buildChain, activeNetwork]);
  return /*#__PURE__*/React.createElement(UnifiedBridgeContext.Provider, {
    value: {
      availableChainIds,
      estimateTransferGas,
      getErrorMessage,
      isReady: !!core,
      state,
      analyzeTx,
      getAssetIdentifierOnTargetChain,
      getMinimumTransferAmount,
      getFee,
      supportsAsset,
      transferAsset,
      transferableAssets
    }
  }, children);
}
function useUnifiedBridgeContext() {
  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(UnifiedBridgeContext);
}

/***/ }),

/***/ "./src/contexts/WalletConnectContextProvider/WalletConnectContextProvider.tsx":
/*!************************************************************************************!*\
  !*** ./src/contexts/WalletConnectContextProvider/WalletConnectContextProvider.tsx ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "WalletConnectContextProvider": () => (/* binding */ WalletConnectContextProvider),
/* harmony export */   "useWalletConnectContext": () => (/* binding */ useWalletConnectContext)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/dist/esm5/internal/operators/filter.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/background/connections/extensionConnection/models */ "./src/background/connections/extensionConnection/models.ts");
/* harmony import */ var _src_background_services_walletConnect_events_eventFilters__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/background/services/walletConnect/events/eventFilters */ "./src/background/services/walletConnect/events/eventFilters.ts");
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./models */ "./src/contexts/WalletConnectContextProvider/models.ts");
/* harmony import */ var _importReducer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./importReducer */ "./src/contexts/WalletConnectContextProvider/importReducer.ts");
/* harmony import */ var _ConnectionProvider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ConnectionProvider */ "./src/contexts/ConnectionProvider.tsx");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");







const WalletConnectContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({
  importState: {
    status: _models__WEBPACK_IMPORTED_MODULE_3__.AccountImportStatus.NotInitiated
  },
  initiateImport() {
    return;
  },
  reset() {
    return;
  }
});
const WalletConnectContextProvider = ({
  children
}) => {
  const {
    events,
    request,
    tabId
  } = (0,_ConnectionProvider__WEBPACK_IMPORTED_MODULE_5__.useConnectionContext)();
  const [importState, dispatch] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)(_importReducer__WEBPACK_IMPORTED_MODULE_4__.importReducer, {
    status: _models__WEBPACK_IMPORTED_MODULE_3__.AccountImportStatus.NotInitiated
  });
  const reset = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    dispatch({
      status: _models__WEBPACK_IMPORTED_MODULE_3__.AccountImportStatus.NotInitiated
    });
  }, []);
  const initiateImport = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((reconnectionAddress, onConnected) => {
    const qrCodeSubscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_6__.filter)(_src_background_services_walletConnect_events_eventFilters__WEBPACK_IMPORTED_MODULE_2__.isUriGeneratedEvent)).subscribe(async ({
      value
    }) => {
      if (value.tabId !== tabId) {
        return;
      }
      dispatch({
        status: _models__WEBPACK_IMPORTED_MODULE_3__.AccountImportStatus.AwaitingApproval,
        payload: {
          uri: value.uri
        }
      });
    });
    dispatch({
      status: _models__WEBPACK_IMPORTED_MODULE_3__.AccountImportStatus.Initiated
    });
    request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.WALLET_CONNECT_IMPORT_ACCOUNT,
      params: [reconnectionAddress]
    }).then(result => {
      onConnected?.(result);
      dispatch({
        status: _models__WEBPACK_IMPORTED_MODULE_3__.AccountImportStatus.Successful
      });
    }).catch(err => {
      dispatch({
        status: _models__WEBPACK_IMPORTED_MODULE_3__.AccountImportStatus.Failed,
        payload: {
          error: err
        }
      });
    }).finally(() => {
      qrCodeSubscription.unsubscribe();
    });
  }, [request, events, tabId]);
  return /*#__PURE__*/React.createElement(WalletConnectContext.Provider, {
    value: {
      importState,
      reset,
      initiateImport
    }
  }, children);
};
function useWalletConnectContext() {
  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(WalletConnectContext);
}

/***/ }),

/***/ "./src/contexts/WalletConnectContextProvider/importReducer.ts":
/*!********************************************************************!*\
  !*** ./src/contexts/WalletConnectContextProvider/importReducer.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "importReducer": () => (/* binding */ importReducer)
/* harmony export */ });
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./models */ "./src/contexts/WalletConnectContextProvider/models.ts");

const importReducer = (state, action) => {
  const {
    status,
    payload
  } = action;
  switch (status) {
    case _models__WEBPACK_IMPORTED_MODULE_0__.AccountImportStatus.NotInitiated:
      return {
        status
      };
    case _models__WEBPACK_IMPORTED_MODULE_0__.AccountImportStatus.Initiated:
      return {
        status
      };
    case _models__WEBPACK_IMPORTED_MODULE_0__.AccountImportStatus.AwaitingApproval:
      return {
        status,
        ...payload
      };
    case _models__WEBPACK_IMPORTED_MODULE_0__.AccountImportStatus.Successful:
      return {
        ...state,
        status
      };
    case _models__WEBPACK_IMPORTED_MODULE_0__.AccountImportStatus.Failed:
      return {
        ...state,
        status,
        ...payload
      };
    default:
      throw new Error(`WalletConnectContextProvider: Unknown connection status: "${_models__WEBPACK_IMPORTED_MODULE_0__.AccountImportStatus[status]}"`);
  }
};

/***/ }),

/***/ "./src/contexts/WalletConnectContextProvider/models.ts":
/*!*************************************************************!*\
  !*** ./src/contexts/WalletConnectContextProvider/models.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AccountImportStatus": () => (/* binding */ AccountImportStatus)
/* harmony export */ });
let AccountImportStatus = /*#__PURE__*/function (AccountImportStatus) {
  AccountImportStatus[AccountImportStatus["NotInitiated"] = 0] = "NotInitiated";
  AccountImportStatus[AccountImportStatus["Initiated"] = 1] = "Initiated";
  AccountImportStatus[AccountImportStatus["AwaitingApproval"] = 2] = "AwaitingApproval";
  AccountImportStatus[AccountImportStatus["Successful"] = 3] = "Successful";
  AccountImportStatus[AccountImportStatus["Failed"] = 4] = "Failed";
  return AccountImportStatus;
}({});

/***/ }),

/***/ "./src/contexts/WalletProvider.tsx":
/*!*****************************************!*\
  !*** ./src/contexts/WalletProvider.tsx ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "WalletContextProvider": () => (/* binding */ WalletContextProvider),
/* harmony export */   "useWalletContext": () => (/* binding */ useWalletContext)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react_router_dom__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! react-router-dom */ "./node_modules/react-router/esm/react-router.js");
/* harmony import */ var _ConnectionProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ConnectionProvider */ "./src/contexts/ConnectionProvider.tsx");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/dist/esm5/internal/operators/filter.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/dist/esm5/internal/operators/map.js");
/* harmony import */ var _src_pages_Wallet_WalletLocked__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/pages/Wallet/WalletLocked */ "./src/pages/Wallet/WalletLocked.tsx");
/* harmony import */ var _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @src/background/connections/extensionConnection/models */ "./src/background/connections/extensionConnection/models.ts");
/* harmony import */ var _LedgerProvider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./LedgerProvider */ "./src/contexts/LedgerProvider.tsx");
/* harmony import */ var _src_background_services_secrets_events_WalletUpdatedEventListener__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @src/background/services/secrets/events/WalletUpdatedEventListener */ "./src/background/services/secrets/events/WalletUpdatedEventListener.ts");
/* harmony import */ var _src_background_services_lock_events_lockStateChangedEventListener__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @src/background/services/lock/events/lockStateChangedEventListener */ "./src/background/services/lock/events/lockStateChangedEventListener.ts");
/* harmony import */ var _AccountsProvider__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./AccountsProvider */ "./src/contexts/AccountsProvider.tsx");
/* harmony import */ var _src_background_services_accounts_models__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @src/background/services/accounts/models */ "./src/background/services/accounts/models.ts");
/* harmony import */ var _src_background_services_secrets_models__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @src/background/services/secrets/models */ "./src/background/services/secrets/models.ts");
/* harmony import */ var _src_background_connections_dAppConnection_models__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @src/background/connections/dAppConnection/models */ "./src/background/connections/dAppConnection/models.ts");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");













const WalletContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({
  wallets: []
});
function WalletContextProvider({
  children
}) {
  const {
    initLedgerTransport
  } = (0,_LedgerProvider__WEBPACK_IMPORTED_MODULE_4__.useLedgerContext)();
  const {
    request,
    events
  } = (0,_ConnectionProvider__WEBPACK_IMPORTED_MODULE_1__.useConnectionContext)();
  const [isWalletLocked, setIsWalletLocked] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);
  const [isWalletLoading, setIsWalletLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);
  const [walletDetails, setWalletDetails] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const {
    accounts: {
      active: activeAccount
    }
  } = (0,_AccountsProvider__WEBPACK_IMPORTED_MODULE_7__.useAccountsContext)();
  const [wallets, setWallets] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);
  const getWallet = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(walletId => wallets.find(({
    id
  }) => walletId === id), [wallets]);
  const isLedgerWallet = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return walletDetails?.type === _src_background_services_secrets_models__WEBPACK_IMPORTED_MODULE_9__.SecretType.Ledger || walletDetails?.type === _src_background_services_secrets_models__WEBPACK_IMPORTED_MODULE_9__.SecretType.LedgerLive;
  }, [walletDetails]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (activeAccount?.type === _src_background_services_accounts_models__WEBPACK_IMPORTED_MODULE_8__.AccountType.PRIMARY) {
      setWalletDetails(wallets.find(w => w.id === activeAccount.walletId));
    } else {
      setWalletDetails(undefined);
    }
  }, [activeAccount, wallets]);

  // listen for wallet creation
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!request || !events) {
      return;
    }
    setIsWalletLoading(true);
    request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_3__.ExtensionRequest.WALLET_GET_DETAILS
    }).then(_wallets => {
      setWallets(_wallets);
    });
    request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_3__.ExtensionRequest.LOCK_GET_STATE
    }).then(locked => {
      setIsWalletLocked(locked);
      setIsWalletLoading(false);
    });
    const lockSubscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_11__.filter)(_src_background_services_lock_events_lockStateChangedEventListener__WEBPACK_IMPORTED_MODULE_6__.lockStateChangedEventListener), (0,rxjs__WEBPACK_IMPORTED_MODULE_12__.map)(evt => evt.value)).subscribe(locked => {
      setIsWalletLocked(locked);
    });
    const walletSubscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_11__.filter)(_src_background_services_secrets_events_WalletUpdatedEventListener__WEBPACK_IMPORTED_MODULE_5__.walletStateChangedEventListener), (0,rxjs__WEBPACK_IMPORTED_MODULE_12__.map)(evt => evt.value)).subscribe(_wallets => {
      setWallets(_wallets);
    });
    return () => {
      walletSubscription.unsubscribe();
      lockSubscription.unsubscribe();
    };
  }, [events, request]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!isWalletLocked && isLedgerWallet) {
      initLedgerTransport();
    }
  }, [initLedgerTransport, isWalletLocked, isLedgerWallet]);
  const unlockWallet = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(password => {
    return request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_3__.ExtensionRequest.UNLOCK_WALLET,
      params: [password]
    });
  }, [request]);
  const changeWalletPassword = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((newPassword, oldPassword) => {
    return request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_3__.ExtensionRequest.LOCK_CHANGE_PASSWORD,
      params: [newPassword, oldPassword]
    });
  }, [request]);
  const getUnencryptedMnemonic = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(password => {
    return request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_3__.ExtensionRequest.WALLET_UNENCRYPTED_MNEMONIC,
      params: [password]
    });
  }, [request]);
  const getTransactionHistory = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    return request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_3__.ExtensionRequest.HISTORY_GET
    });
  }, [request]);
  const renameWallet = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((id, name) => {
    return request({
      method: _src_background_connections_dAppConnection_models__WEBPACK_IMPORTED_MODULE_10__.DAppProviderRequest.WALLET_RENAME,
      params: [id, name]
    });
  }, [request]);

  // We do not require extension to be unlocked for wallet selection
  const routeMatch = (0,react_router_dom__WEBPACK_IMPORTED_MODULE_13__.useRouteMatch)('/approve/select-wallet');
  const allowWalletSelection = routeMatch?.isExact;
  if (!isWalletLoading && isWalletLocked && !allowWalletSelection) {
    return /*#__PURE__*/React.createElement(_src_pages_Wallet_WalletLocked__WEBPACK_IMPORTED_MODULE_2__.WalletLocked, {
      unlockWallet: unlockWallet
    });
  }
  return /*#__PURE__*/React.createElement(WalletContext.Provider, {
    value: {
      getWallet,
      isWalletLoading,
      isWalletLocked,
      isLedgerWallet,
      walletDetails,
      wallets,
      changeWalletPassword,
      getUnencryptedMnemonic,
      getTransactionHistory,
      renameWallet
    }
  }, children);
}
function useWalletContext() {
  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(WalletContext);
}

/***/ }),

/***/ "./src/contexts/utils/getLedgerTransport.ts":
/*!**************************************************!*\
  !*** ./src/contexts/utils/getLedgerTransport.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getLedgerTransport": () => (/* binding */ getLedgerTransport)
/* harmony export */ });
/* harmony import */ var _ledgerhq_hw_transport_webusb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ledgerhq/hw-transport-webusb */ "./node_modules/@ledgerhq/hw-transport-webusb/lib-es/TransportWebUSB.js");
/* harmony import */ var _utils_promiseResolver__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/promiseResolver */ "./src/utils/promiseResolver.ts");
/* harmony import */ var _src_monitoring_sentryCaptureException__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/monitoring/sentryCaptureException */ "./src/monitoring/sentryCaptureException.ts");
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");



async function getLedgerTransport() {
  const [usbTransport, error] = await (0,_utils_promiseResolver__WEBPACK_IMPORTED_MODULE_1__.resolve)(_ledgerhq_hw_transport_webusb__WEBPACK_IMPORTED_MODULE_0__["default"].openConnected());
  if (usbTransport) {
    return usbTransport;
  }
  if (error) {
    (0,_src_monitoring_sentryCaptureException__WEBPACK_IMPORTED_MODULE_2__["default"])(error, _src_monitoring_sentryCaptureException__WEBPACK_IMPORTED_MODULE_2__.SentryExceptionTypes.LEDGER);
    console.error('Unable to open ledger transport', error);
  }
  return null;
}

/***/ }),

/***/ "./src/hooks/useAnalyticsConsentCallbacks.ts":
/*!***************************************************!*\
  !*** ./src/hooks/useAnalyticsConsentCallbacks.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "useAnalyticsConsentCallbacks": () => (/* binding */ useAnalyticsConsentCallbacks)
/* harmony export */ });
/* harmony import */ var _src_contexts_AccountsProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @src/contexts/AccountsProvider */ "./src/contexts/AccountsProvider.tsx");
/* harmony import */ var _src_contexts_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/contexts/AnalyticsProvider */ "./src/contexts/AnalyticsProvider.tsx");
/* harmony import */ var _src_contexts_SettingsProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/contexts/SettingsProvider */ "./src/contexts/SettingsProvider.tsx");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");




const useAnalyticsConsentCallbacks = origin => {
  const {
    setAnalyticsConsent
  } = (0,_src_contexts_SettingsProvider__WEBPACK_IMPORTED_MODULE_2__.useSettingsContext)();
  const {
    capture,
    captureEncrypted,
    isInitialized,
    initAnalyticsIds,
    stopDataCollection
  } = (0,_src_contexts_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_1__.useAnalyticsContext)();
  const {
    allAccounts
  } = (0,_src_contexts_AccountsProvider__WEBPACK_IMPORTED_MODULE_0__.useAccountsContext)();
  const [isApproving, setIsApproving] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);
  const [isRejecting, setIsRejecting] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);
  const onApproval = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async () => {
    try {
      setIsApproving(true);
      const addresses = allAccounts.flatMap(acc => [acc.addressC, acc.addressBTC, acc.addressAVM, acc.addressPVM, acc.addressCoreEth]);
      await setAnalyticsConsent(true);

      // Do not override existing analytics IDs
      if (!isInitialized) {
        await initAnalyticsIds(true);
      }
      captureEncrypted('AnalyticsEnabled', {
        origin,
        addresses
      }, true);
    } finally {
      setIsApproving(false);
    }
  }, [allAccounts, captureEncrypted, initAnalyticsIds, isInitialized, origin, setAnalyticsConsent]);
  const onRejection = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async () => {
    try {
      setIsRejecting(true);
      await capture('AnalyticsDisabled', {
        origin
      }); // Will only be reported if analytics was previously enabled.
      await setAnalyticsConsent(false);
      await stopDataCollection();
    } finally {
      setIsRejecting(false);
    }
  }, [capture, origin, setAnalyticsConsent, stopDataCollection]);
  return {
    isApproving,
    isRejecting,
    onApproval,
    onRejection
  };
};

/***/ }),

/***/ "./src/hooks/useContactIdFromParams.ts":
/*!*********************************************!*\
  !*** ./src/hooks/useContactIdFromParams.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "useContactIdFromParams": () => (/* binding */ useContactIdFromParams)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react_router_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-router-dom */ "./node_modules/react-router/esm/react-router.js");
/* harmony import */ var xss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! xss */ "./node_modules/xss/lib/index.js");
/* harmony import */ var xss__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(xss__WEBPACK_IMPORTED_MODULE_1__);



const useContactIdFromParams = () => {
  const {
    search
  } = (0,react_router_dom__WEBPACK_IMPORTED_MODULE_2__.useLocation)();
  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    const {
      contactId
    } = Object.fromEntries(new URLSearchParams(search).entries());
    return {
      contactId: xss__WEBPACK_IMPORTED_MODULE_1___default()(contactId)
    };
  }, [search]);
};

/***/ }),

/***/ "./src/hooks/useFidoErrorMessage.ts":
/*!******************************************!*\
  !*** ./src/hooks/useFidoErrorMessage.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "useFidoErrorMessage": () => (/* binding */ useFidoErrorMessage)
/* harmony export */ });
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var _src_background_services_seedless_models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @src/background/services/seedless/models */ "./src/background/services/seedless/models.ts");


const useFidoErrorMessage = code => {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_1__.useTranslation)();
  if (code === _src_background_services_seedless_models__WEBPACK_IMPORTED_MODULE_0__.AuthErrorCode.FidoChallengeNotApproved) {
    return t('Action was not approved. Please try again.');
  }
  if (code === _src_background_services_seedless_models__WEBPACK_IMPORTED_MODULE_0__.AuthErrorCode.FidoChallengeFailed) {
    return t('The operation either timed out or was not allowed. Please try again.');
  }
  if (code === _src_background_services_seedless_models__WEBPACK_IMPORTED_MODULE_0__.AuthErrorCode.UnknownError) {
    return t('An unexpected error occurred. Please try again.');
  }
  return '';
};

/***/ }),

/***/ "./src/hooks/useGoBack.ts":
/*!********************************!*\
  !*** ./src/hooks/useGoBack.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "useGoBack": () => (/* binding */ useGoBack)
/* harmony export */ });
/* harmony import */ var react_router_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-router-dom */ "./node_modules/react-router/esm/react-router.js");

function useGoBack(routeToGoBack = '/home') {
  const history = (0,react_router_dom__WEBPACK_IMPORTED_MODULE_0__.useHistory)();
  return () => {
    if (history.length <= 2) {
      history.replace(routeToGoBack);
      return;
    }
    history.goBack();
  };
}

/***/ }),

/***/ "./src/hooks/useIsUsingLedgerWallet.ts":
/*!*********************************************!*\
  !*** ./src/hooks/useIsUsingLedgerWallet.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _src_background_services_accounts_models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @src/background/services/accounts/models */ "./src/background/services/accounts/models.ts");
/* harmony import */ var _src_contexts_AccountsProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/contexts/AccountsProvider */ "./src/contexts/AccountsProvider.tsx");
/* harmony import */ var _src_contexts_WalletProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/contexts/WalletProvider */ "./src/contexts/WalletProvider.tsx");



const useIsUsingLedgerWallet = () => {
  const {
    isLedgerWallet
  } = (0,_src_contexts_WalletProvider__WEBPACK_IMPORTED_MODULE_2__.useWalletContext)();
  const {
    accounts: {
      active: activeAccount
    }
  } = (0,_src_contexts_AccountsProvider__WEBPACK_IMPORTED_MODULE_1__.useAccountsContext)();
  return isLedgerWallet && activeAccount?.type === _src_background_services_accounts_models__WEBPACK_IMPORTED_MODULE_0__.AccountType.PRIMARY;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useIsUsingLedgerWallet);

/***/ }),

/***/ "./src/hooks/useLanguages.ts":
/*!***********************************!*\
  !*** ./src/hooks/useLanguages.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "useLanguage": () => (/* binding */ useLanguage)
/* harmony export */ });
/* harmony import */ var _src_background_services_settings_models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @src/background/services/settings/models */ "./src/background/services/settings/models.ts");
/* harmony import */ var _src_contexts_SettingsProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/contexts/SettingsProvider */ "./src/contexts/SettingsProvider.tsx");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");



function useLanguage() {
  const {
    setLanguage,
    language
  } = (0,_src_contexts_SettingsProvider__WEBPACK_IMPORTED_MODULE_1__.useSettingsContext)();
  const changeLanguage = lang => setLanguage(lang);
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_2__.useTranslation)();
  const availableLanguages = [{
    code: _src_background_services_settings_models__WEBPACK_IMPORTED_MODULE_0__.Languages.EN,
    name: t('English'),
    originalName: 'English',
    linkCode: _src_background_services_settings_models__WEBPACK_IMPORTED_MODULE_0__.LanguageLinks.EN
  }, {
    code: _src_background_services_settings_models__WEBPACK_IMPORTED_MODULE_0__.Languages.ZHCN,
    name: t('Chinese - Simplified'),
    originalName: '简体中文',
    linkCode: _src_background_services_settings_models__WEBPACK_IMPORTED_MODULE_0__.LanguageLinks.ZHCN
  }, {
    code: _src_background_services_settings_models__WEBPACK_IMPORTED_MODULE_0__.Languages.ZHTW,
    name: t('Chinese - Traditional'),
    originalName: '繁體中文',
    linkCode: _src_background_services_settings_models__WEBPACK_IMPORTED_MODULE_0__.LanguageLinks.ZHTW
  }, {
    code: _src_background_services_settings_models__WEBPACK_IMPORTED_MODULE_0__.Languages.DE,
    name: t('German'),
    originalName: 'Deutsch',
    linkCode: _src_background_services_settings_models__WEBPACK_IMPORTED_MODULE_0__.LanguageLinks.DE
  }, {
    code: _src_background_services_settings_models__WEBPACK_IMPORTED_MODULE_0__.Languages.FR,
    name: t('French'),
    originalName: 'Français',
    linkCode: _src_background_services_settings_models__WEBPACK_IMPORTED_MODULE_0__.LanguageLinks.FR
  }, {
    code: _src_background_services_settings_models__WEBPACK_IMPORTED_MODULE_0__.Languages.HI,
    name: t('Hindi'),
    originalName: 'हिन्दी',
    linkCode: _src_background_services_settings_models__WEBPACK_IMPORTED_MODULE_0__.LanguageLinks.HI
  }, {
    code: _src_background_services_settings_models__WEBPACK_IMPORTED_MODULE_0__.Languages.JA,
    name: t('Japanese'),
    originalName: '日本',
    linkCode: _src_background_services_settings_models__WEBPACK_IMPORTED_MODULE_0__.LanguageLinks.JA
  }, {
    code: _src_background_services_settings_models__WEBPACK_IMPORTED_MODULE_0__.Languages.KO,
    name: t('Korean'),
    originalName: '한국인',
    linkCode: _src_background_services_settings_models__WEBPACK_IMPORTED_MODULE_0__.LanguageLinks.KO
  }, {
    code: _src_background_services_settings_models__WEBPACK_IMPORTED_MODULE_0__.Languages.RU,
    name: t('Russian'),
    originalName: 'Русский',
    linkCode: _src_background_services_settings_models__WEBPACK_IMPORTED_MODULE_0__.LanguageLinks.RU
  }, {
    code: _src_background_services_settings_models__WEBPACK_IMPORTED_MODULE_0__.Languages.ES,
    name: t('Spanish'),
    originalName: 'Español',
    linkCode: _src_background_services_settings_models__WEBPACK_IMPORTED_MODULE_0__.LanguageLinks.ES
  }, {
    code: _src_background_services_settings_models__WEBPACK_IMPORTED_MODULE_0__.Languages.TR,
    name: t('Turkish'),
    originalName: 'Türkçe',
    linkCode: _src_background_services_settings_models__WEBPACK_IMPORTED_MODULE_0__.LanguageLinks.TR
  }];
  const currentLanguage = availableLanguages.find(lang => lang.code === language);
  return {
    changeLanguage,
    availableLanguages,
    currentLanguage
  };
}

/***/ }),

/***/ "./src/hooks/useOnline.ts":
/*!********************************!*\
  !*** ./src/hooks/useOnline.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "useOnline": () => (/* binding */ useOnline)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");

function useOnline() {
  const [isOnline, setIsOnline] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(window.navigator.onLine);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const onConnectionChange = event => {
      if (event.type === 'online') {
        setIsOnline(true);
        return;
      }
      setIsOnline(false);
    };
    window.addEventListener('online', onConnectionChange);
    window.addEventListener('offline', onConnectionChange);
    return () => {
      window.removeEventListener('online', () => onConnectionChange);
      window.removeEventListener('offline', () => onConnectionChange);
    };
  }, []);
  return {
    isOnline
  };
}

/***/ }),

/***/ "./src/hooks/usePageHistory.ts":
/*!*************************************!*\
  !*** ./src/hooks/usePageHistory.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "usePageHistory": () => (/* binding */ usePageHistory)
/* harmony export */ });
/* harmony import */ var _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @src/background/connections/extensionConnection/models */ "./src/background/connections/extensionConnection/models.ts");
/* harmony import */ var _src_contexts_ConnectionProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/contexts/ConnectionProvider */ "./src/contexts/ConnectionProvider.tsx");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");



function usePageHistory() {
  const {
    request
  } = (0,_src_contexts_ConnectionProvider__WEBPACK_IMPORTED_MODULE_1__.useConnectionContext)();
  const [historyDataState, setHistoryDataState] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)({
    isLoading: true
  });
  const [historyState, setHistoryState] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)({});
  const setNavigationHistoryData = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(data => {
    request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_0__.ExtensionRequest.NAVIGATION_HISTORY_DATA_SET,
      params: [data]
    });
  }, [request]);
  const getNavigationHistoryData = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(async () => {
    const result = await request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_0__.ExtensionRequest.NAVIGATION_HISTORY_DATA_GET
    });
    setHistoryDataState({
      ...result,
      isLoading: false
    });
  }, [request]);
  const setNavigationHistory = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(history => {
    request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_0__.ExtensionRequest.NAVIGATION_HISTORY_SET,
      params: [history]
    });
  }, [request]);
  const getNavigationHistory = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(async () => {
    const result = await request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_0__.ExtensionRequest.NAVIGATION_HISTORY_GET
    });
    setHistoryState(result);
  }, [request]);
  (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(() => {
    const getHistory = async () => {
      await getNavigationHistory();
      await getNavigationHistoryData();
    };
    getHistory();
  }, [getNavigationHistory, getNavigationHistoryData]);
  const getPageHistoryData = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(() => {
    return historyDataState;
  }, [historyDataState]);
  const getNavigationHistoryState = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(() => {
    return historyState;
  }, [historyState]);
  return {
    getNavigationHistoryData,
    setNavigationHistoryData,
    historyDataState,
    getPageHistoryData,
    setNavigationHistory,
    getNavigationHistoryState
  };
}

/***/ }),

/***/ "./src/hooks/useSeedlessAuthPromptState.ts":
/*!*************************************************!*\
  !*** ./src/hooks/useSeedlessAuthPromptState.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "useSeedlessAuthPromptState": () => (/* binding */ useSeedlessAuthPromptState)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/dist/esm5/internal/operators/filter.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _src_contexts_ConnectionProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/contexts/ConnectionProvider */ "./src/contexts/ConnectionProvider.tsx");
/* harmony import */ var _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/background/connections/extensionConnection/models */ "./src/background/connections/extensionConnection/models.ts");
/* harmony import */ var _src_background_services_seedless_events_eventFilters__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @src/background/services/seedless/events/eventFilters */ "./src/background/services/seedless/events/eventFilters.ts");
/* harmony import */ var _src_background_services_seedless_models__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @src/background/services/seedless/models */ "./src/background/services/seedless/models.ts");
/* harmony import */ var react_router_dom__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react-router-dom */ "./node_modules/react-router/esm/react-router.js");







const useSeedlessAuthPromptState = () => {
  const {
    events,
    request
  } = (0,_src_contexts_ConnectionProvider__WEBPACK_IMPORTED_MODULE_1__.useConnectionContext)();
  const location = (0,react_router_dom__WEBPACK_IMPORTED_MODULE_5__.useLocation)();
  const [isAuthPromptVisible, setIsAuthPromptVisible] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const isAuthPopupPage = location.pathname.includes('seedless');
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    // Deactivate state querying on in the auth popup itself
    if (isAuthPopupPage) {
      return;
    }
    let eventsSubscription;
    request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.SEEDLESS_HAS_TOKEN_EXPIRED
    }).then(hasExpired => {
      // This state is not known right after extension is unlocked,
      // so we only want to toggle the prompt on/off when we actually
      // know if we should.
      if (typeof hasExpired === 'boolean') {
        setIsAuthPromptVisible(hasExpired);
      }
    }).finally(() => {
      eventsSubscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_6__.filter)(_src_background_services_seedless_events_eventFilters__WEBPACK_IMPORTED_MODULE_3__.isSeedlessTokenEvent)).subscribe(async event => {
        if (event.name === _src_background_services_seedless_models__WEBPACK_IMPORTED_MODULE_4__.SeedlessEvents.TokenExpired) {
          setIsAuthPromptVisible(true);
        } else if (event.name === _src_background_services_seedless_models__WEBPACK_IMPORTED_MODULE_4__.SeedlessEvents.TokenRefreshed) {
          setIsAuthPromptVisible(false);
        }
      });
    });
    return () => {
      eventsSubscription?.unsubscribe();
    };
  }, [events, request, isAuthPopupPage]);
  return {
    isAuthPromptVisible
  };
};

/***/ }),

/***/ "./src/hooks/useSeedlessMfa.tsx":
/*!**************************************!*\
  !*** ./src/hooks/useSeedlessMfa.tsx ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "useSeedlessMfa": () => (/* binding */ useSeedlessMfa)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/dist/esm5/internal/operators/filter.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/background/connections/extensionConnection/models */ "./src/background/connections/extensionConnection/models.ts");
/* harmony import */ var _src_background_services_seedless_events_eventFilters__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/background/services/seedless/events/eventFilters */ "./src/background/services/seedless/events/eventFilters.ts");
/* harmony import */ var _src_background_services_seedless_models__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @src/background/services/seedless/models */ "./src/background/services/seedless/models.ts");
/* harmony import */ var _src_contexts_ConnectionProvider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @src/contexts/ConnectionProvider */ "./src/contexts/ConnectionProvider.tsx");
/* harmony import */ var _src_utils_seedless_fido_launchFidoFlow__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @src/utils/seedless/fido/launchFidoFlow */ "./src/utils/seedless/fido/launchFidoFlow.ts");
/* harmony import */ var _src_utils_seedless_fido_types__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @src/utils/seedless/fido/types */ "./src/utils/seedless/fido/types.ts");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _src_components_common_seedless_components_TOTPChallenge__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @src/components/common/seedless/components/TOTPChallenge */ "./src/components/common/seedless/components/TOTPChallenge.tsx");
/* harmony import */ var _src_components_common_seedless_components_FIDOChallenge__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @src/components/common/seedless/components/FIDOChallenge */ "./src/components/common/seedless/components/FIDOChallenge.tsx");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var _src_components_common_seedless_components_MfaChoicePrompt__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @src/components/common/seedless/components/MfaChoicePrompt */ "./src/components/common/seedless/components/MfaChoicePrompt.tsx");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");













const useSeedlessMfa = () => {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_10__.useTranslation)();
  const {
    events,
    request,
    tabId
  } = (0,_src_contexts_ConnectionProvider__WEBPACK_IMPORTED_MODULE_4__.useConnectionContext)();
  const [mfaChallenge, setMfaChallenge] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const [mfaChoice, setMfaChoice] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const [isVerifying, setIsVerifying] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const submitTotp = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async code => {
    if (!mfaChallenge) {
      return;
    }
    if (mfaChallenge.type !== _src_background_services_seedless_models__WEBPACK_IMPORTED_MODULE_3__.MfaRequestType.Totp) {
      setError(_src_background_services_seedless_models__WEBPACK_IMPORTED_MODULE_3__.AuthErrorCode.WrongMfaResponseAttempt);
      return;
    }
    setIsVerifying(true);
    setError(undefined);
    try {
      await request({
        method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.SEEDLESS_SUBMIT_MFA_RESPONSE,
        params: [{
          mfaId: mfaChallenge?.mfaId,
          code
        }]
      });
    } catch {
      setError(_src_background_services_seedless_models__WEBPACK_IMPORTED_MODULE_3__.AuthErrorCode.TotpVerificationError);
    }
  }, [request, mfaChallenge]);
  const submitFido = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async force => {
    if (!mfaChallenge || isVerifying && !force) {
      return;
    }
    if (mfaChallenge.type !== _src_background_services_seedless_models__WEBPACK_IMPORTED_MODULE_3__.MfaRequestType.Fido && mfaChallenge.type !== _src_background_services_seedless_models__WEBPACK_IMPORTED_MODULE_3__.MfaRequestType.FidoRegister) {
      setError(_src_background_services_seedless_models__WEBPACK_IMPORTED_MODULE_3__.AuthErrorCode.WrongMfaResponseAttempt);
      return;
    }
    setIsVerifying(true);
    setError(undefined);
    try {
      const answer = await (0,_src_utils_seedless_fido_launchFidoFlow__WEBPACK_IMPORTED_MODULE_5__.launchFidoFlow)(mfaChallenge.type === _src_background_services_seedless_models__WEBPACK_IMPORTED_MODULE_3__.MfaRequestType.Fido ? _src_utils_seedless_fido_types__WEBPACK_IMPORTED_MODULE_6__.FIDOApiEndpoint.Authenticate : _src_utils_seedless_fido_types__WEBPACK_IMPORTED_MODULE_6__.FIDOApiEndpoint.Register, mfaChallenge.options, mfaChallenge.type === _src_background_services_seedless_models__WEBPACK_IMPORTED_MODULE_3__.MfaRequestType.FidoRegister ? mfaChallenge.keyType : undefined);
      await request({
        method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.SEEDLESS_SUBMIT_MFA_RESPONSE,
        params: [{
          mfaId: mfaChallenge?.mfaId,
          answer
        }]
      });
    } catch (_err) {
      setError(_src_background_services_seedless_models__WEBPACK_IMPORTED_MODULE_3__.AuthErrorCode.FidoChallengeFailed);
    }
  }, [request, mfaChallenge, isVerifying]);
  const chooseMfaMethod = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(method => {
    if (!mfaChoice) {
      return;
    }
    request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.SEEDLESS_CHOOSE_MFA_METHOD,
      params: [{
        mfaId: mfaChoice.mfaId,
        chosenMethod: method
      }]
    });
  }, [mfaChoice, request]);
  const renderMfaPrompt = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.Dialog, {
    open: Boolean(mfaChallenge),
    PaperProps: {
      sx: {
        m: 2,
        textAlign: 'center'
      }
    }
  }, mfaChallenge?.type === _src_background_services_seedless_models__WEBPACK_IMPORTED_MODULE_3__.MfaRequestType.Totp && /*#__PURE__*/React.createElement(_src_components_common_seedless_components_TOTPChallenge__WEBPACK_IMPORTED_MODULE_7__.TOTPChallenge, {
    onSubmit: submitTotp,
    isLoading: isVerifying,
    error: error
  }), (mfaChallenge?.type === _src_background_services_seedless_models__WEBPACK_IMPORTED_MODULE_3__.MfaRequestType.Fido || mfaChallenge?.type === _src_background_services_seedless_models__WEBPACK_IMPORTED_MODULE_3__.MfaRequestType.FidoRegister) && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.DialogTitle, null, t('Waiting for Confirmation')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_11__.DialogContent, null, /*#__PURE__*/React.createElement(_src_components_common_seedless_components_FIDOChallenge__WEBPACK_IMPORTED_MODULE_8__.FIDOChallenge, {
    completeFidoChallenge: submitFido,
    isLoading: isVerifying,
    error: error
  })))), /*#__PURE__*/React.createElement(_src_components_common_seedless_components_MfaChoicePrompt__WEBPACK_IMPORTED_MODULE_9__.MfaChoicePrompt, {
    mfaChoice: mfaChoice,
    onChosen: chooseMfaMethod
  })), [error, isVerifying, mfaChallenge, submitFido, submitTotp, t, mfaChoice, chooseMfaMethod]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const eventsSubscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_12__.filter)(_src_background_services_seedless_events_eventFilters__WEBPACK_IMPORTED_MODULE_2__.isSeedlessMfaChoiceRequest)).subscribe(async event => {
      if (event.value.tabId !== tabId) {
        return;
      }
      setMfaChoice(event.value);
    });
    return () => {
      eventsSubscription.unsubscribe();
    };
  }, [events, tabId, mfaChallenge]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const eventsSubscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_12__.filter)(_src_background_services_seedless_events_eventFilters__WEBPACK_IMPORTED_MODULE_2__.isSeedlessMfaEvent)).subscribe(async event => {
      if (event.value.tabId !== tabId) {
        return;
      }
      setIsVerifying(false);
      if (event.name === _src_background_services_seedless_models__WEBPACK_IMPORTED_MODULE_3__.SeedlessEvents.MfaRequest) {
        setMfaChallenge(event.value);
        return;
      }
      if (event.name === _src_background_services_seedless_models__WEBPACK_IMPORTED_MODULE_3__.SeedlessEvents.MfaClear) {
        setMfaChallenge(undefined);
        setError(undefined);
        setMfaChoice(undefined);
        return;
      }
      if (mfaChallenge && event.name === _src_background_services_seedless_models__WEBPACK_IMPORTED_MODULE_3__.SeedlessEvents.MfaFailure && event.value.mfaId === mfaChallenge.mfaId) {
        setError(mfaChallenge.type === _src_background_services_seedless_models__WEBPACK_IMPORTED_MODULE_3__.MfaRequestType.Fido ? _src_background_services_seedless_models__WEBPACK_IMPORTED_MODULE_3__.AuthErrorCode.FidoChallengeFailed : _src_background_services_seedless_models__WEBPACK_IMPORTED_MODULE_3__.AuthErrorCode.InvalidTotpCode);
      }
    });
    return () => {
      eventsSubscription.unsubscribe();
    };
  }, [events, tabId, mfaChallenge]);
  return {
    mfaChallenge,
    renderMfaPrompt,
    submitTotp,
    submitFido,
    isVerifying,
    error
  };
};

/***/ }),

/***/ "./src/hooks/useSeedlessMnemonicExport.ts":
/*!************************************************!*\
  !*** ./src/hooks/useSeedlessMnemonicExport.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ExportErrorCode": () => (/* binding */ ExportErrorCode),
/* harmony export */   "ExportState": () => (/* binding */ ExportState),
/* harmony export */   "useSeedlessMnemonicExport": () => (/* binding */ useSeedlessMnemonicExport)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/esm/formatDistanceToNow/index.js");
/* harmony import */ var _src_utils_environment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/utils/environment */ "./src/utils/environment.ts");
/* harmony import */ var _src_contexts_ConnectionProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/contexts/ConnectionProvider */ "./src/contexts/ConnectionProvider.tsx");
/* harmony import */ var _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @src/background/connections/extensionConnection/models */ "./src/background/connections/extensionConnection/models.ts");
/* harmony import */ var _src_contexts_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @src/contexts/AnalyticsProvider */ "./src/contexts/AnalyticsProvider.tsx");
/* harmony import */ var _src_background_services_seedless_seedlessAnalytics__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @src/background/services/seedless/seedlessAnalytics */ "./src/background/services/seedless/seedlessAnalytics.ts");







let ExportState = /*#__PURE__*/function (ExportState) {
  ExportState[ExportState["Loading"] = 0] = "Loading";
  ExportState[ExportState["NotInitiated"] = 1] = "NotInitiated";
  ExportState[ExportState["Initiating"] = 2] = "Initiating";
  ExportState[ExportState["Pending"] = 3] = "Pending";
  ExportState[ExportState["ReadyToExport"] = 4] = "ReadyToExport";
  ExportState[ExportState["Exporting"] = 5] = "Exporting";
  ExportState[ExportState["Exported"] = 6] = "Exported";
  ExportState[ExportState["Error"] = 7] = "Error";
  ExportState[ExportState["Cancelling"] = 8] = "Cancelling";
  return ExportState;
}({});
let ExportErrorCode = /*#__PURE__*/function (ExportErrorCode) {
  ExportErrorCode[ExportErrorCode["FailedToInitialize"] = 0] = "FailedToInitialize";
  ExportErrorCode[ExportErrorCode["FailedToComplete"] = 1] = "FailedToComplete";
  ExportErrorCode[ExportErrorCode["FailedToCancel"] = 2] = "FailedToCancel";
  ExportErrorCode[ExportErrorCode["RequestOutdated"] = 3] = "RequestOutdated";
  return ExportErrorCode;
}({});

// TODO: can we somehow fetch the delay from Cubist?
const HOURS_48 = 60 * 60 * 48;
const ONE_MINUTE = 60;
const EXPORT_DELAY = (0,_src_utils_environment__WEBPACK_IMPORTED_MODULE_1__.isProductionBuild)() ? HOURS_48 : ONE_MINUTE;
const useSeedlessMnemonicExport = () => {
  const {
    request
  } = (0,_src_contexts_ConnectionProvider__WEBPACK_IMPORTED_MODULE_2__.useConnectionContext)();
  const {
    capture
  } = (0,_src_contexts_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_4__.useAnalyticsContext)();
  const [pendingRequest, setPendingRequest] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const [mnemonic, setMnemonic] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('');
  const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(ExportState.Loading);
  const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const [progress, setProgress] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);
  const [timeLeft, setTimeLeft] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('');
  const completeExport = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async () => {
    setState(ExportState.Exporting);
    setMnemonic('');
    capture(_src_background_services_seedless_seedlessAnalytics__WEBPACK_IMPORTED_MODULE_5__.SeedlessExportAnalytics.DecryptionStarted);
    return request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_3__.ExtensionRequest.SEEDLESS_COMPLETE_RECOVERY_PHRASE_EXPORT
    }).then(phrase => {
      setMnemonic(phrase);
      setState(ExportState.Exported);
      capture(_src_background_services_seedless_seedlessAnalytics__WEBPACK_IMPORTED_MODULE_5__.SeedlessExportAnalytics.DecryptionSucceeded);
    }).catch(() => {
      setState(ExportState.Error);
      setError(ExportErrorCode.FailedToComplete);
      capture(_src_background_services_seedless_seedlessAnalytics__WEBPACK_IMPORTED_MODULE_5__.SeedlessExportAnalytics.DecryptionFailed);
    });
  }, [request, capture]);
  const cancelExport = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async () => {
    setState(ExportState.Cancelling);
    capture(_src_background_services_seedless_seedlessAnalytics__WEBPACK_IMPORTED_MODULE_5__.SeedlessExportAnalytics.CancellationStarted);
    return request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_3__.ExtensionRequest.SEEDLESS_CANCEL_RECOVERY_PHRASE_EXPORT
    }).then(() => {
      setPendingRequest(undefined);
      setMnemonic('');
      setState(ExportState.NotInitiated);
      capture(_src_background_services_seedless_seedlessAnalytics__WEBPACK_IMPORTED_MODULE_5__.SeedlessExportAnalytics.CancellationSucceeded);
    }).catch(() => {
      setState(ExportState.Error);
      setError(ExportErrorCode.FailedToCancel);
      capture(_src_background_services_seedless_seedlessAnalytics__WEBPACK_IMPORTED_MODULE_5__.SeedlessExportAnalytics.CancellationFailed);
    });
  }, [request, capture]);
  const initExport = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async () => {
    setState(ExportState.Initiating);
    capture(_src_background_services_seedless_seedlessAnalytics__WEBPACK_IMPORTED_MODULE_5__.SeedlessExportAnalytics.InitiationStarted);
    request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_3__.ExtensionRequest.SEEDLESS_INIT_RECOVERY_PHRASE_EXPORT
    }).then(exportRequest => {
      setPendingRequest(exportRequest);
      setState(ExportState.Pending);
      capture(_src_background_services_seedless_seedlessAnalytics__WEBPACK_IMPORTED_MODULE_5__.SeedlessExportAnalytics.InitiationSucceeded);
    }).catch(() => {
      setState(ExportState.Error);
      setError(ExportErrorCode.FailedToInitialize);
      capture(_src_background_services_seedless_seedlessAnalytics__WEBPACK_IMPORTED_MODULE_5__.SeedlessExportAnalytics.InitiationFailed);
    });
  }, [request, capture]);
  const updateProgress = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    if (!pendingRequest) {
      setState(ExportState.NotInitiated);
      return;
    }
    if (state === ExportState.ReadyToExport || state === ExportState.Exporting || state === ExportState.Exported) {
      setProgress(100);
      return;
    }
    const {
      valid_epoch: availableAt,
      exp_epoch: availableUntil
    } = pendingRequest;
    const isInProgress = Date.now() / 1000 < availableAt;
    const isReadyToDecrypt = Date.now() / 1000 >= availableAt && Date.now() / 1000 <= availableUntil;
    const secondsPassed = EXPORT_DELAY - (availableAt - Date.now() / 1000);
    if (isInProgress) {
      setState(ExportState.Pending);
      setTimeLeft((0,date_fns__WEBPACK_IMPORTED_MODULE_6__["default"])(new Date(availableAt * 1000)));
    } else if (isReadyToDecrypt) {
      setState(ExportState.ReadyToExport);
      setTimeLeft((0,date_fns__WEBPACK_IMPORTED_MODULE_6__["default"])(new Date(availableUntil * 1000)));
    } else {
      setState(ExportState.Error);
      setError(ExportErrorCode.RequestOutdated);
    }

    // capped between 0 and 100
    setProgress(Math.min(Math.max(0, secondsPassed / EXPORT_DELAY * 100), 100));
  }, [pendingRequest, state]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    request({
      method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_3__.ExtensionRequest.SEEDLESS_GET_RECOVERY_PHRASE_EXPORT_STATE
    }).then(existingExport => {
      setState(existingExport ? ExportState.Pending : ExportState.NotInitiated);
      setPendingRequest(existingExport);
    });
  }, [request]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!pendingRequest) {
      return;
    }

    // Update progress immediately
    updateProgress();

    // Schedule updates every 2s
    if (state === ExportState.Pending) {
      const timer = setInterval(updateProgress, 2000);
      return () => {
        clearInterval(timer);
      };
    }
  }, [pendingRequest, updateProgress, state]);
  return {
    state,
    initExport,
    completeExport,
    cancelExport,
    mnemonic,
    error,
    progress,
    timeLeft
  };
};

/***/ }),

/***/ "./src/hooks/useTokensWithBalances.ts":
/*!********************************************!*\
  !*** ./src/hooks/useTokensWithBalances.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "useTokensWithBalances": () => (/* binding */ useTokensWithBalances)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _src_contexts_SettingsProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/contexts/SettingsProvider */ "./src/contexts/SettingsProvider.tsx");
/* harmony import */ var _src_contexts_BalancesProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/contexts/BalancesProvider */ "./src/contexts/BalancesProvider.tsx");
/* harmony import */ var _src_contexts_AccountsProvider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @src/contexts/AccountsProvider */ "./src/contexts/AccountsProvider.tsx");
/* harmony import */ var _src_contexts_NetworkProvider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @src/contexts/NetworkProvider */ "./src/contexts/NetworkProvider.tsx");
/* harmony import */ var _src_contexts_ConnectionProvider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @src/contexts/ConnectionProvider */ "./src/contexts/ConnectionProvider.tsx");
/* harmony import */ var _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @src/background/connections/extensionConnection/models */ "./src/background/connections/extensionConnection/models.ts");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _src_utils_getAddressForChain__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @src/utils/getAddressForChain */ "./src/utils/getAddressForChain.ts");
/* harmony import */ var _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @avalabs/vm-module-types */ "./node_modules/@avalabs/vm-module-types/dist/index.js");
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");










const nativeTokensFirst = tokens => [...tokens].sort(t => t.type === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_9__.TokenType.NATIVE ? -1 : 1);
const DISALLOWED_ASSETS = [];

/**
 *
 * @param {UseTokensWithBalanceOptions} options
 * @returns Tokens list with OR without balances based on `forceShowTokensWithoutBalances`
 */
const useTokensWithBalances = (options = {}) => {
  const [allTokensWithPlaceholderBalances, setAllTokensWithPlaceholderBalances] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({});
  const {
    request
  } = (0,_src_contexts_ConnectionProvider__WEBPACK_IMPORTED_MODULE_5__.useConnectionContext)();
  const {
    balances
  } = (0,_src_contexts_BalancesProvider__WEBPACK_IMPORTED_MODULE_2__.useBalancesContext)();
  const {
    showTokensWithoutBalances,
    customTokens,
    getTokenVisibility
  } = (0,_src_contexts_SettingsProvider__WEBPACK_IMPORTED_MODULE_1__.useSettingsContext)();
  const {
    accounts: {
      active: activeAccount
    }
  } = (0,_src_contexts_AccountsProvider__WEBPACK_IMPORTED_MODULE_3__.useAccountsContext)();
  const {
    network: activeNetwork
  } = (0,_src_contexts_NetworkProvider__WEBPACK_IMPORTED_MODULE_4__.useNetworkContext)();
  const {
    forceShowTokensWithoutBalances = false,
    disallowedAssets = DISALLOWED_ASSETS,
    network
  } = options;
  const customTokensWithZeroBalance = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!network?.chainId) {
      return {};
    }
    const customTokensForActiveNetwork = customTokens[network?.chainId];
    if (!customTokensForActiveNetwork) {
      return {};
    }
    return Object.entries(customTokensForActiveNetwork).reduce((acc, [address, tokenData]) => {
      acc[address] = {
        ...tokenData,
        type: _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_9__.TokenType.ERC20,
        balance: 0n,
        balanceDisplayValue: '0',
        reputation: null
      };
      return acc;
    }, {});
  }, [customTokens, network?.chainId]);
  const visibleTokens = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(tokens => {
    if (options.forceHiddenTokens) {
      return tokens;
    }
    return tokens.filter(getTokenVisibility);
  }, [getTokenVisibility, options.forceHiddenTokens]);
  const selectedNetwork = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => network ?? activeNetwork, [network, activeNetwork]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const getNetworkTokens = async () => {
      if (!selectedNetwork?.chainId) {
        setAllTokensWithPlaceholderBalances({});
        return;
      }
      try {
        const networkTokens = await request({
          method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_6__.ExtensionRequest.GET_NETWORK_TOKENS,
          params: [selectedNetwork.chainId, disallowedAssets]
        });
        const tokensWithPlaceholderBalances = Object.entries(networkTokens.tokens).reduce((tokensWithBalances, [address, tokenData]) => {
          tokensWithBalances[address.toLowerCase()] = {
            ...tokenData,
            type: _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_9__.TokenType.ERC20,
            balance: 0n,
            balanceDisplayValue: '0',
            reputation: null
          };
          return tokensWithBalances;
        }, {});
        setAllTokensWithPlaceholderBalances({
          ...customTokensWithZeroBalance,
          ...tokensWithPlaceholderBalances
        });
      } catch (err) {
        console.error(err);
        setAllTokensWithPlaceholderBalances({});
      }
    };
    if (forceShowTokensWithoutBalances || showTokensWithoutBalances) {
      getNetworkTokens();
      return;
    }
    setAllTokensWithPlaceholderBalances({});
  }, [request, selectedNetwork?.chainId, forceShowTokensWithoutBalances, showTokensWithoutBalances, customTokensWithZeroBalance, disallowedAssets]);
  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!selectedNetwork?.chainId || !activeAccount) {
      return [];
    }
    const address = (0,_src_utils_getAddressForChain__WEBPACK_IMPORTED_MODULE_8__.getAddressForChain)(selectedNetwork, activeAccount);
    if (!address) {
      return [];
    }
    const networkBalances = balances.tokens?.[selectedNetwork?.chainId]?.[address] ?? {};
    if (forceShowTokensWithoutBalances || showTokensWithoutBalances) {
      const merged = (0,lodash__WEBPACK_IMPORTED_MODULE_7__.merge)({}, allTokensWithPlaceholderBalances, networkBalances);
      return visibleTokens(nativeTokensFirst(Object.values(merged)));
    }
    const unfilteredTokens = Object.values(networkBalances);
    if (!unfilteredTokens) {
      return [];
    }
    const nativeToken = unfilteredTokens.find(token => token.type === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_9__.TokenType.NATIVE);
    const defaultResult = nativeToken ? [nativeToken] : [];
    const filteredTokens = unfilteredTokens.filter(token => {
      return token.type === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_9__.TokenType.NATIVE || token.balance > 0n;
    });
    return visibleTokens(filteredTokens.length ? nativeTokensFirst(filteredTokens) : defaultResult);
  }, [selectedNetwork, activeAccount, balances.tokens, forceShowTokensWithoutBalances, showTokensWithoutBalances, allTokensWithPlaceholderBalances, visibleTokens]);
};

/***/ }),

/***/ "./src/hooks/useTotpErrorMessage.ts":
/*!******************************************!*\
  !*** ./src/hooks/useTotpErrorMessage.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "useTotpErrorMessage": () => (/* binding */ useTotpErrorMessage)
/* harmony export */ });
/* harmony import */ var _src_background_services_seedless_models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @src/background/services/seedless/models */ "./src/background/services/seedless/models.ts");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");


const useTotpErrorMessage = code => {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_1__.useTranslation)();
  if (code === _src_background_services_seedless_models__WEBPACK_IMPORTED_MODULE_0__.AuthErrorCode.InvalidTotpCode) {
    return t('Invalid code. Please try again.');
  }
  if (code === _src_background_services_seedless_models__WEBPACK_IMPORTED_MODULE_0__.AuthErrorCode.TotpVerificationError) {
    return t('We were not able to verify this code. Please try again.');
  }
  return '';
};

/***/ }),

/***/ "./src/monitoring/sentryCaptureException.ts":
/*!**************************************************!*\
  !*** ./src/monitoring/sentryCaptureException.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SentryExceptionTypes": () => (/* binding */ SentryExceptionTypes),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _sentry_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/browser */ "./node_modules/@sentry/core/esm/exports.js");

let SentryExceptionTypes = /*#__PURE__*/function (SentryExceptionTypes) {
  SentryExceptionTypes["DAPP_CONNECTION_EVENT"] = "dAppConnectionEvent";
  SentryExceptionTypes["EXTENSION_CONNECTION_MESSAGE"] = "extensionConnectionMessage";
  SentryExceptionTypes["EXTENSION_CONNECTION_EVENT"] = "extensionConnectionEvent";
  SentryExceptionTypes["SWAP"] = "swap";
  SentryExceptionTypes["LEDGER"] = "ledger";
  SentryExceptionTypes["WALLETCONNECT"] = "walletConnect";
  SentryExceptionTypes["SEEDLESS"] = "seedless";
  SentryExceptionTypes["FIREBLOCKS"] = "fireblocks";
  SentryExceptionTypes["UNIFIED_BRIDGE"] = "unifiedBridge";
  SentryExceptionTypes["ANALYTICS"] = "analytics";
  SentryExceptionTypes["WALLET_IMPORT"] = "walletImport";
  SentryExceptionTypes["INTERNAL_ERROR"] = "internalError";
  SentryExceptionTypes["BALANCES"] = "balances";
  SentryExceptionTypes["VM_MODULES"] = "vmModules";
  SentryExceptionTypes["ONBOARDING"] = "onboarding";
  SentryExceptionTypes["FIREBASE"] = "firebase";
  return SentryExceptionTypes;
}({});

// wrapper to make error reporting contexts unfirom accross the codebase
const sentryCaptureException = (error, type) => _sentry_browser__WEBPACK_IMPORTED_MODULE_0__.captureException(error, {
  tags: {
    type
  }
});
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (sentryCaptureException);

/***/ }),

/***/ "./src/pages/Accounts/components/WalletTypeIcon.tsx":
/*!**********************************************************!*\
  !*** ./src/pages/Accounts/components/WalletTypeIcon.tsx ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "WalletTypeIcon": () => (/* binding */ WalletTypeIcon)
/* harmony export */ });
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _src_background_services_secrets_models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @src/background/services/secrets/models */ "./src/background/services/secrets/models.ts");
/* harmony import */ var _src_background_services_wallet_models__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/background/services/wallet/models */ "./src/background/services/wallet/models.ts");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");



const WalletTypeIcon = ({
  walletDetails,
  ...props
}) => {
  switch (walletDetails.type) {
    case _src_background_services_secrets_models__WEBPACK_IMPORTED_MODULE_0__.SecretType.Mnemonic:
      return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.ListIcon, props);
    case _src_background_services_secrets_models__WEBPACK_IMPORTED_MODULE_0__.SecretType.Keystone:
      return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.KeystoneIcon, props);
    case _src_background_services_secrets_models__WEBPACK_IMPORTED_MODULE_0__.SecretType.Ledger:
    case _src_background_services_secrets_models__WEBPACK_IMPORTED_MODULE_0__.SecretType.LedgerLive:
      return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.LedgerIcon, props);
    case _src_background_services_secrets_models__WEBPACK_IMPORTED_MODULE_0__.SecretType.Seedless:
      {
        if (walletDetails.authProvider === _src_background_services_wallet_models__WEBPACK_IMPORTED_MODULE_1__.SeedlessAuthProvider.Apple) {
          return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.AppleIcon, props);
        } else if (walletDetails.authProvider === _src_background_services_wallet_models__WEBPACK_IMPORTED_MODULE_1__.SeedlessAuthProvider.Google) {
          return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.GoogleIcon, props);
        }
        return null;
      }
      break;
    default:
      return null;
  }
};

/***/ }),

/***/ "./src/pages/Bridge/utils/blockchainConversion.ts":
/*!********************************************************!*\
  !*** ./src/pages/Bridge/utils/blockchainConversion.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "blockchainToNetwork": () => (/* binding */ blockchainToNetwork),
/* harmony export */   "networkToBlockchain": () => (/* binding */ networkToBlockchain)
/* harmony export */ });
/* harmony import */ var _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @avalabs/core-bridge-sdk */ "./node_modules/@avalabs/core-bridge-sdk/esm/types/config.js");
/* harmony import */ var _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @avalabs/core-chains-sdk */ "./node_modules/@avalabs/core-chains-sdk/esm/models.js");
/* harmony import */ var _src_utils_caipConversion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @src/utils/caipConversion */ "./src/utils/caipConversion.ts");
/* harmony import */ var i18next__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! i18next */ "./node_modules/i18next/dist/esm/i18next.js");




const blockchainToNetwork = (blockChain, networks, bridgeConfig, isTestnet) => {
  if (typeof blockChain === 'object') {
    // We got a Chain from @avalabs/bridge-unified
    const chain = networks.find(network => network.chainId === (0,_src_utils_caipConversion__WEBPACK_IMPORTED_MODULE_0__.caipToChainId)(blockChain.chainId));
    if (!chain) {
      throw new Error((0,i18next__WEBPACK_IMPORTED_MODULE_1__.t)('Blockchain not supported'));
    }
    return chain;
  }
  switch (blockChain) {
    case _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_2__.Blockchain.AVALANCHE:
      return networks.find(network => network.chainId === bridgeConfig.config?.critical.networks[_avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_2__.Blockchain.AVALANCHE]);
    case _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_2__.Blockchain.ETHEREUM:
      {
        return networks.find(network => network.chainId === bridgeConfig.config?.critical.networks[_avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_2__.Blockchain.ETHEREUM]);
      }
    case _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_2__.Blockchain.BITCOIN:
      return networks.find(network => {
        if (isTestnet === undefined) {
          return network.chainId === _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_3__.ChainId.BITCOIN_TESTNET || network.chainId === _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_3__.ChainId.BITCOIN;
        }
        return isTestnet ? network.chainId === _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_3__.ChainId.BITCOIN_TESTNET : network.chainId === _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_3__.ChainId.BITCOIN;
      });
    default:
      throw new Error((0,i18next__WEBPACK_IMPORTED_MODULE_1__.t)('Blockchain not supported'));
  }
};
const networkToBlockchain = network => {
  const chainId = typeof network?.chainId === 'string' ? (0,_src_utils_caipConversion__WEBPACK_IMPORTED_MODULE_0__.caipToChainId)(network.chainId) : network?.chainId;
  switch (chainId) {
    case _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_3__.ChainId.AVALANCHE_MAINNET_ID:
    case _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_3__.ChainId.AVALANCHE_LOCAL_ID:
    case _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_3__.ChainId.AVALANCHE_TESTNET_ID:
      return _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_2__.Blockchain.AVALANCHE;
    case _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_3__.ChainId.ETHEREUM_HOMESTEAD:
    case _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_3__.ChainId.ETHEREUM_TEST_RINKEBY:
    case _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_3__.ChainId.ETHEREUM_TEST_GOERLY:
    case _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_3__.ChainId.ETHEREUM_TEST_SEPOLIA:
      return _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_2__.Blockchain.ETHEREUM;
    case _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_3__.ChainId.BITCOIN:
    case _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_3__.ChainId.BITCOIN_TESTNET:
      return _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_2__.Blockchain.BITCOIN;
    default:
      return _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_2__.Blockchain.UNKNOWN;
  }
};

/***/ }),

/***/ "./src/pages/Ledger/LedgerIncorrectDevice.tsx":
/*!****************************************************!*\
  !*** ./src/pages/Ledger/LedgerIncorrectDevice.tsx ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _src_components_common_Dialog__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @src/components/common/Dialog */ "./src/components/common/Dialog.tsx");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var i18next__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! i18next */ "./node_modules/i18next/dist/esm/i18next.js");
/* harmony import */ var _src_components_icons_DangerIcon__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @src/components/icons/DangerIcon */ "./src/components/icons/DangerIcon.tsx");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@mui/material/styles/useTheme.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _hooks_useIsIncorrectDevice__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./hooks/useIsIncorrectDevice */ "./src/pages/Ledger/hooks/useIsIncorrectDevice.ts");
/* harmony import */ var _src_contexts_LedgerProvider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @src/contexts/LedgerProvider */ "./src/contexts/LedgerProvider.tsx");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");







const LedgerIncorrectDevice = () => {
  const [isDialogOpen, setIsDialogOpen] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
  const {
    closeCurrentApp
  } = (0,_src_contexts_LedgerProvider__WEBPACK_IMPORTED_MODULE_5__.useLedgerContext)();
  const isIncorrectDevice = (0,_hooks_useIsIncorrectDevice__WEBPACK_IMPORTED_MODULE_4__["default"])();
  const theme = (0,_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__["default"])();
  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {
    if (isIncorrectDevice) {
      setIsDialogOpen(true);
      closeCurrentApp();
    }
  }, [isIncorrectDevice, closeCurrentApp]);
  return /*#__PURE__*/React.createElement(_src_components_common_Dialog__WEBPACK_IMPORTED_MODULE_0__["default"], {
    open: isDialogOpen,
    onClose: () => setIsDialogOpen(false),
    title: (0,i18next__WEBPACK_IMPORTED_MODULE_2__.t)('Incorrect Ledger'),
    content: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Typography, {
      variant: "body2",
      align: "left",
      color: theme.palette.grey[500],
      sx: {
        lineHeight: '20px'
      }
    }, (0,i18next__WEBPACK_IMPORTED_MODULE_2__.t)('This Ledger was not used to create this wallet. Please connect the original Ledger device to continue.')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Stack, {
      sx: {
        mt: '48px',
        mb: '16px'
      }
    }, /*#__PURE__*/React.createElement(_src_components_icons_DangerIcon__WEBPACK_IMPORTED_MODULE_3__["default"], null)))
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LedgerIncorrectDevice);

/***/ }),

/***/ "./src/pages/Ledger/LedgerRegisterBtcWalletPolicy.tsx":
/*!************************************************************!*\
  !*** ./src/pages/Ledger/LedgerRegisterBtcWalletPolicy.tsx ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _src_components_common_Dialog__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @src/components/common/Dialog */ "./src/components/common/Dialog.tsx");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _hooks_useRegisterBtcWalletPolicy__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./hooks/useRegisterBtcWalletPolicy */ "./src/pages/Ledger/hooks/useRegisterBtcWalletPolicy.ts");
/* harmony import */ var _src_contexts_LedgerProvider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @src/contexts/LedgerProvider */ "./src/contexts/LedgerProvider.tsx");
/* harmony import */ var _src_contexts_ConnectionProvider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @src/contexts/ConnectionProvider */ "./src/contexts/ConnectionProvider.tsx");
/* harmony import */ var _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @src/background/connections/extensionConnection/models */ "./src/background/connections/extensionConnection/models.ts");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/Trans.js");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");
/* provided dependency */ var Buffer = __webpack_require__(/*! ./node_modules/node-polyfill-webpack-plugin/node_modules/buffer/index.js */ "./node_modules/node-polyfill-webpack-plugin/node_modules/buffer/index.js")["Buffer"];








var TextType = /*#__PURE__*/function (TextType) {
  TextType["PRIMARY"] = "primary";
  TextType["SECONDARY"] = "secondary";
  return TextType;
}(TextType || {});
const LedgerRegisterBtcWalletPolicy = () => {
  const POLICY_DESCRIPTOR = 'wpkh(@0/**)';
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_6__.useTranslation)();
  const [isXpubDialogOpen, setIsXpubDialogOpen] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
  const [isPolicyDialogOpen, setIsPolicyDialogOpen] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
  const [hasError, setHasError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
  const [xpub, setXpub] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();
  const {
    shouldRegisterBtcWalletPolicy,
    walletPolicyName,
    walletPolicyDerivationpath
  } = (0,_hooks_useRegisterBtcWalletPolicy__WEBPACK_IMPORTED_MODULE_2__["default"])();
  const {
    getBtcExtendedPublicKey,
    getMasterFingerprint,
    registerBtcWalletPolicy,
    closeCurrentApp
  } = (0,_src_contexts_LedgerProvider__WEBPACK_IMPORTED_MODULE_3__.useLedgerContext)();
  const {
    request
  } = (0,_src_contexts_ConnectionProvider__WEBPACK_IMPORTED_MODULE_4__.useConnectionContext)();
  const renderText = (type, text, mt = '16px') => /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Typography, {
    component: "span",
    sx: {
      mt,
      fontSize: 'body2.fontSize',
      color: type === TextType.PRIMARY ? 'text.primary' : 'text.secondary'
    }
  }, text);
  const renderStatus = () => {
    if (hasError) {
      return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Typography, null, t('An error occurred, please try again later'));
    }
    return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.CircularProgress, {
      size: 24,
      sx: {
        mt: 0.75
      }
    });
  };
  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {
    const fetchExtendedPublickey = async () => {
      setIsXpubDialogOpen(true);
      setHasError(false);
      try {
        if (!walletPolicyDerivationpath) {
          throw new Error('missing data');
        }
        setXpub(await getBtcExtendedPublicKey(walletPolicyDerivationpath));
        setIsXpubDialogOpen(false);
      } catch (err) {
        console.error(err.message);
        setHasError(true);
      }
    };
    if (shouldRegisterBtcWalletPolicy) {
      fetchExtendedPublickey();
    } else {
      setXpub(undefined);
      setHasError(false);
      setIsXpubDialogOpen(false);
    }
  }, [getBtcExtendedPublicKey, shouldRegisterBtcWalletPolicy, walletPolicyDerivationpath]);
  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {
    const registerWalletPolicy = async () => {
      setIsPolicyDialogOpen(true);
      try {
        if (!xpub || !walletPolicyDerivationpath || !walletPolicyName) {
          throw new Error('missing data');
        }
        const masterFingerprint = await getMasterFingerprint();
        const [, hmac] = await registerBtcWalletPolicy(xpub, masterFingerprint, walletPolicyDerivationpath, walletPolicyName);
        const {
          isCorrectDevice
        } = await request({
          method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_5__.ExtensionRequest.WALLET_STORE_BTC_WALLET_POLICY_DETAILS,
          params: [xpub, masterFingerprint, Buffer.from(hmac).toString('hex'), walletPolicyName]
        });
        if (!isCorrectDevice) {
          throw new Error('incorrect device');
        }
        setIsPolicyDialogOpen(false);
      } catch (err) {
        console.error(err.message);
        setHasError(true);
      }
    };
    if (shouldRegisterBtcWalletPolicy && xpub && !isXpubDialogOpen) {
      registerWalletPolicy();
    } else {
      setHasError(false);
      setIsPolicyDialogOpen(false);
    }
  }, [shouldRegisterBtcWalletPolicy, xpub, isXpubDialogOpen, getMasterFingerprint, registerBtcWalletPolicy, walletPolicyDerivationpath, walletPolicyName, request]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_src_components_common_Dialog__WEBPACK_IMPORTED_MODULE_0__["default"], {
    open: isXpubDialogOpen,
    isCloseable: hasError,
    onClose: () => {
      if (hasError) {
        closeCurrentApp();
      }
      setIsXpubDialogOpen(false);
      setHasError(false);
    },
    title: t('Confirm Public Key'),
    content: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Stack, null, renderText(TextType.PRIMARY, t('Please confirm the public key displayed on your Ledger device.')), renderText(TextType.SECONDARY, t('Path')), renderText(TextType.PRIMARY, walletPolicyDerivationpath ?? '-', '0px'), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Divider, {
      sx: {
        mt: '16px'
      }
    }), renderText(TextType.SECONDARY, t('Status')), renderStatus())
  }), /*#__PURE__*/React.createElement(_src_components_common_Dialog__WEBPACK_IMPORTED_MODULE_0__["default"], {
    open: isPolicyDialogOpen,
    isCloseable: hasError,
    onClose: () => {
      if (hasError) {
        closeCurrentApp();
      }
      setIsPolicyDialogOpen(false);
      setHasError(false);
    },
    title: t('Register Wallet'),
    content: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Stack, null, renderText(TextType.PRIMARY, t('Ledger requires you to set up a wallet policy in the Bitcoin app.')), renderText(TextType.PRIMARY, /*#__PURE__*/React.createElement(react_i18next__WEBPACK_IMPORTED_MODULE_8__.Trans, {
      i18nKey: "Please approve or reject this action on your Ledger device. <walletPolicyLink>Learn more</walletPolicyLink>.",
      components: {
        walletPolicyLink: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Typography, {
          sx: {
            cursor: 'pointer',
            fontWeight: 'semibold',
            color: 'secondary.main'
          },
          as: "a",
          target: "_blank",
          href: "https://support.avax.network/en/articles/7178568-what-are-ledger-wallet-policies",
          rel: "noreferrer"
        })
      }
    })), renderText(TextType.SECONDARY, t('Name')), renderText(TextType.PRIMARY, walletPolicyName ?? '-', '0px'), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Divider, {
      sx: {
        mt: '16px'
      }
    }), renderText(TextType.SECONDARY, t('Policy')), renderText(TextType.PRIMARY, POLICY_DESCRIPTOR, '0px'), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Divider, {
      sx: {
        mt: '16px'
      }
    }), renderText(TextType.PRIMARY, t('Status')), renderStatus())
  }));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LedgerRegisterBtcWalletPolicy);

/***/ }),

/***/ "./src/pages/Ledger/hooks/useIsIncorrectDevice.ts":
/*!********************************************************!*\
  !*** ./src/pages/Ledger/hooks/useIsIncorrectDevice.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @avalabs/core-wallets-sdk */ "./node_modules/@avalabs/core-wallets-sdk/esm/EVM/utils/getEvmAddressFromPubKey.js");
/* harmony import */ var _src_contexts_AccountsProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @src/contexts/AccountsProvider */ "./src/contexts/AccountsProvider.tsx");
/* harmony import */ var _src_contexts_LedgerProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/contexts/LedgerProvider */ "./src/contexts/LedgerProvider.tsx");
/* harmony import */ var _src_contexts_WalletProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/contexts/WalletProvider */ "./src/contexts/WalletProvider.tsx");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @src/background/connections/extensionConnection/models */ "./src/background/connections/extensionConnection/models.ts");
/* harmony import */ var _src_contexts_ConnectionProvider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @src/contexts/ConnectionProvider */ "./src/contexts/ConnectionProvider.tsx");







const useIsIncorrectDevice = () => {
  const [isIncorrectDevice, setIsIncorrectDevice] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);
  const {
    isWalletLocked,
    walletDetails,
    isLedgerWallet
  } = (0,_src_contexts_WalletProvider__WEBPACK_IMPORTED_MODULE_2__.useWalletContext)();
  const {
    request
  } = (0,_src_contexts_ConnectionProvider__WEBPACK_IMPORTED_MODULE_5__.useConnectionContext)();
  const {
    hasLedgerTransport,
    getPublicKey,
    getMasterFingerprint,
    appType,
    masterFingerprint
  } = (0,_src_contexts_LedgerProvider__WEBPACK_IMPORTED_MODULE_1__.useLedgerContext)();
  const {
    accounts
  } = (0,_src_contexts_AccountsProvider__WEBPACK_IMPORTED_MODULE_0__.useAccountsContext)();
  const activeWalletAccount = accounts.active?.id;
  const firstAccount = activeWalletAccount && accounts.primary[activeWalletAccount];
  const firstAddress = firstAccount && firstAccount[0] && firstAccount[0].addressC;
  (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {
    const compareAddresses = async () => {
      setIsIncorrectDevice(false);
      if (!isWalletLocked && walletDetails && isLedgerWallet && hasLedgerTransport) {
        try {
          if (firstAddress && appType === _src_contexts_LedgerProvider__WEBPACK_IMPORTED_MODULE_1__.LedgerAppType.AVALANCHE) {
            const pubKey = await getPublicKey(0, walletDetails.derivationPath);
            const address = (0,_avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_6__.getEvmAddressFromPubKey)(pubKey);
            const isMatching = firstAddress === address;
            setIsIncorrectDevice(!isMatching);
            if (isMatching) {
              // Attempt to migrate missing X/P public keys (if there's any) once the device is verified
              await request({
                method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_4__.ExtensionRequest.LEDGER_MIGRATE_MISSING_PUBKEYS
              });
            }
          } else if (masterFingerprint && appType === _src_contexts_LedgerProvider__WEBPACK_IMPORTED_MODULE_1__.LedgerAppType.BITCOIN) {
            const masterFingerPrintFromDevice = await getMasterFingerprint();
            const isMatching = masterFingerPrintFromDevice === masterFingerprint;
            setIsIncorrectDevice(!isMatching);
          }
        } catch (_err) {
          // some problem occured with the app
          // just wait until LedgerProvider recreates the app instance
        }
      }
    };
    compareAddresses();
  }, [isWalletLocked, isLedgerWallet, walletDetails, firstAddress, getPublicKey, hasLedgerTransport, appType, request, getMasterFingerprint, masterFingerprint]);
  return isIncorrectDevice;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useIsIncorrectDevice);

/***/ }),

/***/ "./src/pages/Ledger/hooks/useRegisterBtcWalletPolicy.ts":
/*!**************************************************************!*\
  !*** ./src/pages/Ledger/hooks/useRegisterBtcWalletPolicy.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @avalabs/core-wallets-sdk */ "./node_modules/@avalabs/core-wallets-sdk/esm/EVM/constants.js");
/* harmony import */ var _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @src/background/connections/extensionConnection/models */ "./src/background/connections/extensionConnection/models.ts");
/* harmony import */ var _src_background_services_accounts_models__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/background/services/accounts/models */ "./src/background/services/accounts/models.ts");
/* harmony import */ var _src_contexts_AccountsProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/contexts/AccountsProvider */ "./src/contexts/AccountsProvider.tsx");
/* harmony import */ var _src_contexts_ConnectionProvider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @src/contexts/ConnectionProvider */ "./src/contexts/ConnectionProvider.tsx");
/* harmony import */ var _src_contexts_LedgerProvider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @src/contexts/LedgerProvider */ "./src/contexts/LedgerProvider.tsx");
/* harmony import */ var _src_contexts_WalletProvider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @src/contexts/WalletProvider */ "./src/contexts/WalletProvider.tsx");
/* harmony import */ var _src_hooks_useIsUsingLedgerWallet__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @src/hooks/useIsUsingLedgerWallet */ "./src/hooks/useIsUsingLedgerWallet.ts");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");









const useRegisterBtcWalletPolicy = () => {
  const isUsingLedgerWallet = (0,_src_hooks_useIsUsingLedgerWallet__WEBPACK_IMPORTED_MODULE_6__["default"])();
  const [shouldRegisterBtcWalletPolicy, setShouldRegisterBtcWalletPolicy] = (0,react__WEBPACK_IMPORTED_MODULE_7__.useState)(false);
  const [walletPolicyName, setWalletPolicyName] = (0,react__WEBPACK_IMPORTED_MODULE_7__.useState)();
  const [walletPolicyDerivationpath, setWalletPolicyDerivationpath] = (0,react__WEBPACK_IMPORTED_MODULE_7__.useState)();
  const {
    walletDetails
  } = (0,_src_contexts_WalletProvider__WEBPACK_IMPORTED_MODULE_5__.useWalletContext)();
  const {
    appType,
    setMasterFingerprint
  } = (0,_src_contexts_LedgerProvider__WEBPACK_IMPORTED_MODULE_4__.useLedgerContext)();
  const {
    accounts
  } = (0,_src_contexts_AccountsProvider__WEBPACK_IMPORTED_MODULE_2__.useAccountsContext)();
  const {
    request
  } = (0,_src_contexts_ConnectionProvider__WEBPACK_IMPORTED_MODULE_3__.useConnectionContext)();
  const activeAccount = accounts.active;
  (0,react__WEBPACK_IMPORTED_MODULE_7__.useEffect)(() => {
    const fetchWalletPolicyDetails = async (account, details) => {
      const {
        masterFingerprint
      } = (await request({
        method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_0__.ExtensionRequest.WALLET_GET_BTC_WALLET_POLICY_DETAILS
      })) ?? {};
      setMasterFingerprint(masterFingerprint);
      if (!masterFingerprint) {
        if (details.derivationPath === _avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_8__.DerivationPath.LedgerLive) {
          setWalletPolicyName(`Core - ${account.name}`);
          setWalletPolicyDerivationpath(`44'/60'/${account.index}'`);
        } else if (details.derivationPath === _avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_8__.DerivationPath.BIP44) {
          setWalletPolicyName('Core');
          setWalletPolicyDerivationpath(`44'/60'/0'`);
        }
        setShouldRegisterBtcWalletPolicy(true);
      }
    };
    if (activeAccount?.type !== _src_background_services_accounts_models__WEBPACK_IMPORTED_MODULE_1__.AccountType.PRIMARY || !walletDetails) {
      return;
    }

    // This effect may be called in-between updates coming from AccountsProvider and WalletProvider
    // We need to wait for those to be in-sync, otherwise we may prompt for policy registration
    // when user is switching from a Ledger wallet/account to a non-Ledger wallet/account.
    if (activeAccount.walletId !== walletDetails.id) {
      return;
    }
    setMasterFingerprint(undefined);
    setWalletPolicyName(undefined);
    setWalletPolicyDerivationpath(undefined);
    setShouldRegisterBtcWalletPolicy(false);
    if (isUsingLedgerWallet && appType === _src_contexts_LedgerProvider__WEBPACK_IMPORTED_MODULE_4__.LedgerAppType.BITCOIN) {
      fetchWalletPolicyDetails(activeAccount, walletDetails);
    }
  }, [activeAccount, appType, walletDetails, isUsingLedgerWallet, request, setMasterFingerprint]);
  return {
    shouldRegisterBtcWalletPolicy,
    walletPolicyName,
    walletPolicyDerivationpath
  };
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useRegisterBtcWalletPolicy);

/***/ }),

/***/ "./src/pages/Onboarding/components/TypographyLink.tsx":
/*!************************************************************!*\
  !*** ./src/pages/Onboarding/components/TypographyLink.tsx ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TypographyLink": () => (/* binding */ TypographyLink)
/* harmony export */ });
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@mui/material/styles/styled.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");

const TypographyLink = (0,_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__["default"])(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__.Typography)`
  cursor: pointer;
  color: ${({
  theme
}) => theme.palette.secondary.main};
  font-weight: 600;
  text-decoration: none;
`;

/***/ }),

/***/ "./src/pages/Permissions/useCurrentDomain.ts":
/*!***************************************************!*\
  !*** ./src/pages/Permissions/useCurrentDomain.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "useCurrentDomain": () => (/* binding */ useCurrentDomain)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! webextension-polyfill */ "./node_modules/webextension-polyfill/dist/browser-polyfill.js");
/* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(webextension_polyfill__WEBPACK_IMPORTED_MODULE_1__);


function useCurrentDomain() {
  const [domain, setDomain] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const updateDomain = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async () => {
    const [currentTab] = await webextension_polyfill__WEBPACK_IMPORTED_MODULE_1___default().tabs.query({
      active: true,
      currentWindow: true
    });
    if (currentTab?.url) {
      const {
        hostname
      } = new URL(currentTab.url);
      setDomain(hostname);
    } else {
      setDomain('');
    }
  }, [setDomain]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    updateDomain();
    const listener = async () => {
      await updateDomain();
    };
    webextension_polyfill__WEBPACK_IMPORTED_MODULE_1___default().tabs.onActivated.addListener(listener);
    return () => {
      webextension_polyfill__WEBPACK_IMPORTED_MODULE_1___default().tabs.onActivated.removeListener(listener);
    };
  }, [updateDomain]);
  return domain;
}

/***/ }),

/***/ "./src/pages/Send/components/LoadingSendForm.tsx":
/*!*******************************************************!*\
  !*** ./src/pages/Send/components/LoadingSendForm.tsx ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LoadingSendForm": () => (/* binding */ LoadingSendForm)
/* harmony export */ });
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");

const LoadingSendForm = ({
  withTitle
}) => {
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__.Stack, {
    sx: {
      flexGrow: 1,
      width: 1,
      pt: 1,
      px: 2
    }
  }, withTitle && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__.Skeleton, {
    variant: "rounded",
    sx: {
      width: 100,
      height: 48,
      my: 1
    }
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__.Skeleton, {
    variant: "text",
    width: 100
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__.Skeleton, {
    variant: "rounded",
    height: 62
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__.Stack, {
    direction: "row",
    sx: {
      justifyContent: 'space-between',
      alignItems: 'flex-end'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__.Skeleton, {
    variant: "text",
    sx: {
      width: 80,
      mt: 4
    }
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__.Skeleton, {
    variant: "text",
    sx: {
      width: 60,
      height: 20,
      mt: 4
    }
  })), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__.Skeleton, {
    variant: "rounded",
    height: 55
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__.Skeleton, {
    variant: "text",
    sx: {
      width: 60,
      height: 20,
      alignSelf: 'flex-end'
    }
  }));
};

/***/ }),

/***/ "./src/pages/SignTransaction/components/SignTxErrorBoundary.tsx":
/*!**********************************************************************!*\
  !*** ./src/pages/SignTransaction/components/SignTxErrorBoundary.tsx ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SignTxErrorBoundary": () => (/* binding */ SignTxErrorBoundary)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/react-hot-toast/dist/index.mjs");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/withTranslation.js");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");



/**
 * This catches all errors in the UI at the sign tx level. Essentially this is a catch all if the sign tx render boundary fails to catch the issue then this should do it
 */
class RawSignTxErrorBoundary extends react__WEBPACK_IMPORTED_MODULE_0__.Component {
  constructor(props) {
    super(props);
    this.state = {
      hasError: false,
      error: '',
      errorStack: ''
    };
  }
  static getDerivedStateFromError(error) {
    // Update state so the next render will show the fallback UI.
    return {
      hasError: true,
      error: error.message,
      errorStack: error.stack
    };
  }
  render() {
    if (this.state.hasError) {
      return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__.Stack, {
        sx: {
          width: 1,
          alignItems: 'center',
          px: 2,
          pb: 1,
          gap: 1,
          flexGrow: 1
        }
      }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__.Typography, {
        variant: "h5",
        color: "error.main"
      }, this.getHeader()), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__.Typography, {
        variant: "body2",
        align: "center"
      }, this.getDescription()), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__.Typography, {
        variant: "body2",
        align: "center"
      }, this.props.t('Please copy the below error and post it in our discord, telegram or one of our social channels so our developers can address it as soon as possible. We apologize for the inconvenience.')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__.Card, {
        sx: {
          mt: 2,
          width: 1,
          height: 340
        }
      }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__.CardContent, {
        sx: {
          p: 2,
          height: 1
        }
      }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__.Scrollbars, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__.Typography, {
        variant: "body2",
        color: "text.secondary",
        sx: {
          wordBreak: 'break-word'
        }
      }, this.state.errorStack)))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__.Stack, {
        direction: "row",
        sx: {
          width: 1,
          flexGrow: 1,
          alignItems: 'flex-end',
          justifyContent: 'space-between',
          gap: 1
        }
      }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__.Button, {
        color: "secondary",
        size: "large",
        fullWidth: true,
        onClick: window.close
      }, this.props.t('Close')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__.Button, {
        color: "primary",
        size: "large",
        fullWidth: true,
        onClick: () => {
          navigator.clipboard.writeText(this.state.errorStack ?? '');
          _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__["default"].success(this.props.t('Copied!'), {
            duration: 2000
          });
        }
      }, this.props.t('Copy'))));
    }
    return this.props.children;
  }
  getHeader() {
    switch (this.props.variant) {
      case 'RenderError':
        return this.props.t('Render Error');
      default:
        return this.props.t('Error');
    }
  }
  getDescription() {
    switch (this.props.variant) {
      case 'RenderError':
        return this.props.t('Something went wrong while attempting to show the info for this transaction.');
      default:
        return this.props.t('Something went wrong while opening the approval window for this transaction.');
    }
  }
}

// Export the component class with translation props pre-set.
const SignTxErrorBoundary = (0,react_i18next__WEBPACK_IMPORTED_MODULE_3__.withTranslation)()(RawSignTxErrorBoundary);

/***/ }),

/***/ "./src/pages/Swap/components/SwapPendingToast.tsx":
/*!********************************************************!*\
  !*** ./src/pages/Swap/components/SwapPendingToast.tsx ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SwapPendingToast": () => (/* binding */ SwapPendingToast)
/* harmony export */ });
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");

const SwapPendingToast = ({
  onDismiss,
  children
}) => /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__.Grow, {
  in: true
}, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__.Card, {
  sx: {
    width: 250,
    position: 'relative',
    p: 2
  }
}, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__.IconButton, {
  sx: {
    position: 'absolute',
    top: 4,
    right: 4
  },
  onClick: onDismiss
}, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__.XIcon, {
  size: 16
})), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__.Stack, {
  sx: {
    flexDirection: 'row',
    alignItems: 'center'
  }
}, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__.Typography, {
  variant: "h6"
}, children), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__.CircularProgress, {
  size: 12,
  sx: {
    ml: 1
  },
  color: "primary"
}))));

/***/ }),

/***/ "./src/pages/Swap/utils/index.tsx":
/*!****************************************!*\
  !*** ./src/pages/Swap/utils/index.tsx ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MIN_SLIPPAGE": () => (/* binding */ MIN_SLIPPAGE),
/* harmony export */   "TokenIcon": () => (/* binding */ TokenIcon),
/* harmony export */   "calculateRate": () => (/* binding */ calculateRate),
/* harmony export */   "formatBasisPointsToPercentage": () => (/* binding */ formatBasisPointsToPercentage),
/* harmony export */   "getMaxValue": () => (/* binding */ getMaxValue),
/* harmony export */   "getMaxValueWithGas": () => (/* binding */ getMaxValueWithGas),
/* harmony export */   "getTokenAddress": () => (/* binding */ getTokenAddress),
/* harmony export */   "getTokenIcon": () => (/* binding */ getTokenIcon),
/* harmony export */   "isAPIError": () => (/* binding */ isAPIError),
/* harmony export */   "isSlippageValid": () => (/* binding */ isSlippageValid)
/* harmony export */ });
/* harmony import */ var _src_components_common_TokenIcon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @src/components/common/TokenIcon */ "./src/components/common/TokenIcon.tsx");
/* harmony import */ var _src_utils_calculateGasAndFees__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/utils/calculateGasAndFees */ "./src/utils/calculateGasAndFees.ts");
/* harmony import */ var _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @avalabs/vm-module-types */ "./node_modules/@avalabs/vm-module-types/dist/index.js");
/* harmony import */ var _src_utils_stringToBigint__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @src/utils/stringToBigint */ "./src/utils/stringToBigint.ts");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");




const MIN_SLIPPAGE = 0.1;
const TokenIcon = ({
  token
}) => {
  if (!token) {
    return null;
  }
  return /*#__PURE__*/React.createElement(_src_components_common_TokenIcon__WEBPACK_IMPORTED_MODULE_0__.TokenIcon, {
    width: "32px",
    height: "32px",
    src: token.logoUri,
    name: token.name
  });
};
const getTokenIcon = token => {
  if (!token) {
    return null;
  }
  return /*#__PURE__*/React.createElement(_src_components_common_TokenIcon__WEBPACK_IMPORTED_MODULE_0__.TokenIcon, {
    width: "32px",
    height: "32px",
    src: token.logoUri,
    name: token.name
  });
};
const getMaxValue = (token, fee) => {
  if (!token || !fee) {
    return;
  }
  if (token.type === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.NATIVE) {
    return token.balance - (0,_src_utils_stringToBigint__WEBPACK_IMPORTED_MODULE_3__.stringToBigint)(fee, token.decimals);
  }
  return token.balance;
};
function isAPIError(rate) {
  return typeof rate.message === 'string';
}
const getTokenAddress = token => {
  if (!token) {
    return undefined;
  }
  return token.type === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.NATIVE ? token.symbol : token.address;
};
const getMaxValueWithGas = ({
  customGasPrice,
  gasLimit,
  avaxPrice,
  tokenDecimals,
  selectedFromToken
}) => {
  const newFees = (0,_src_utils_calculateGasAndFees__WEBPACK_IMPORTED_MODULE_1__.calculateGasAndFees)({
    gasPrice: customGasPrice,
    tokenPrice: avaxPrice,
    tokenDecimals,
    gasLimit
  });
  const max = getMaxValue(selectedFromToken, newFees.fee);
  return max;
};
const calculateRate = optimalRate => {
  const {
    destAmount,
    destDecimals,
    srcAmount,
    srcDecimals
  } = optimalRate;
  const destAmountNumber = parseInt(destAmount, 10) / Math.pow(10, destDecimals);
  const sourceAmountNumber = parseInt(srcAmount, 10) / Math.pow(10, srcDecimals);
  return destAmountNumber / sourceAmountNumber;
};
const formatBasisPointsToPercentage = basisPoints => {
  // E.g. 85 -> 0.85%

  // Use Intl.NumberFormat to format the number as a percentage
  return new Intl.NumberFormat('en-US', {
    style: 'percent',
    minimumFractionDigits: 2,
    maximumFractionDigits: 2
  }).format(basisPoints / 10_000);
};
const isSlippageValid = value => {
  if (MIN_SLIPPAGE <= parseFloat(value) && parseFloat(value) <= 100) {
    return true;
  }
  return false;
};

/***/ }),

/***/ "./src/pages/Wallet/WalletLocked.tsx":
/*!*******************************************!*\
  !*** ./src/pages/Wallet/WalletLocked.tsx ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "WalletLocked": () => (/* binding */ WalletLocked)
/* harmony export */ });
/* harmony import */ var _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @src/background/connections/extensionConnection/models */ "./src/background/connections/extensionConnection/models.ts");
/* harmony import */ var _src_contexts_ConnectionProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/contexts/ConnectionProvider */ "./src/contexts/ConnectionProvider.tsx");
/* harmony import */ var _src_hooks_useAppDimensions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/hooks/useAppDimensions */ "./src/hooks/useAppDimensions.ts");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/Trans.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _src_components_icons_BrandName__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @src/components/icons/BrandName */ "./src/components/icons/BrandName.tsx");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");







function WalletLocked({
  unlockWallet
}) {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_5__.useTranslation)();
  const {
    request
  } = (0,_src_contexts_ConnectionProvider__WEBPACK_IMPORTED_MODULE_1__.useConnectionContext)();
  const dimensions = (0,_src_hooks_useAppDimensions__WEBPACK_IMPORTED_MODULE_2__.useAppDimensions)();
  const [password, setPassword] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)('');
  const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)('');
  const [loginSuccess, setLoginSuccess] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);
  const [loggingIn, setLoggingIn] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);
  const [showDialog, setShowDialog] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);
  const isMounted = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(false);
  (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {
    isMounted.current = true;
    return () => {
      isMounted.current = false;
    };
  }, []);
  const onImportClick = () => {
    setShowDialog(true);
  };
  const handleSubmit = e => {
    e.preventDefault();
    setLoggingIn(true);
    setError('');
    if (!password) {
      return;
    }
    unlockWallet(password).then(() => {
      if (!isMounted.current) {
        return;
      }
      // success!
      setLoginSuccess(true);
    }).catch(() => {
      if (!isMounted.current) {
        return;
      }
      // error!
      setLoggingIn(false);
      setError('Invalid password');
    });
  };
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Stack, {
    sx: {
      ...dimensions,
      justifyContent: 'space-around',
      alignItems: 'center',
      px: 2,
      pb: 2
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Stack, {
    sx: {
      flexGrow: 1,
      justifyContent: 'center',
      alignItems: 'center'
    }
  }, /*#__PURE__*/React.createElement(_src_components_icons_BrandName__WEBPACK_IMPORTED_MODULE_4__.BrandName, {
    width: 120
  })), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Stack, {
    sx: {
      height: '88px',
      width: '100%',
      mb: 4
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.TextField, {
    "data-testid": "wallet-locked-password-input",
    type: "password",
    label: t('Password'),
    onChange: e => setPassword(e.currentTarget.value.trim()),
    placeholder: t('Input Password'),
    error: !!error,
    helperText: error,
    fullWidth: true,
    size: "large",
    onKeyPress: e => {
      // When we click the enter key within the password input
      if (e.key === 'Enter' && password) {
        handleSubmit(e);
      }
    },
    autoFocus: true
  })), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Button, {
    "data-testid": "wallet-locked-login-button",
    disabled: !password || loggingIn || loginSuccess,
    onClick: handleSubmit,
    fullWidth: true,
    size: "large"
  }, (loggingIn || loginSuccess) && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.CircularProgress, {
    size: 16,
    sx: {
      mr: 1
    }
  }), t('Login')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Divider, {
    flexItem: true,
    sx: {
      my: 2
    }
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Button, {
    variant: "text",
    "data-testid": "wallet-locked-reset-phrase-button",
    onClick: () => onImportClick(),
    sx: {
      mb: 1
    }
  }, t('Forgot Password?')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Dialog, {
    open: showDialog,
    showCloseIcon: false,
    onClose: () => setShowDialog(false),
    PaperProps: {
      sx: {
        m: 2
      }
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Stack, {
    sx: {
      justifyContent: 'center',
      p: 3,
      rowGap: 2
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Typography, {
    variant: "h5",
    sx: {
      textAlign: 'center'
    }
  }, t('Forgot Password?')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Typography, {
    variant: "body2",
    sx: {
      textAlign: 'center'
    }
  }, /*#__PURE__*/React.createElement(react_i18next__WEBPACK_IMPORTED_MODULE_7__.Trans, {
    i18nKey: "Pressing yes will terminate this session. Without your recovery phrase or methods you will not be able to recover this wallet."
  })), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Stack, {
    sx: {
      rowGap: 2
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Button, {
    size: "large",
    onClick: () => {
      request({
        method: _src_background_connections_extensionConnection_models__WEBPACK_IMPORTED_MODULE_0__.ExtensionRequest.RESET_EXTENSION_STATE,
        params: [true]
      });
      setShowDialog(false);
    }
  }, t('Yes')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__.Button, {
    variant: "text",
    onClick: () => setShowDialog(false)
  }, t('No'))))));
}

/***/ }),

/***/ "./src/popup/AppRoutes.tsx":
/*!*********************************!*\
  !*** ./src/popup/AppRoutes.tsx ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AppRoutes": () => (/* binding */ AppRoutes)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react_router_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-router-dom */ "./node_modules/react-router/esm/react-router.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _src_pages_Send_components_LoadingSendForm__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/pages/Send/components/LoadingSendForm */ "./src/pages/Send/components/LoadingSendForm.tsx");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");




const AddToken = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return __webpack_require__.e(/*! import() */ "src_pages_ManageTokens_AddToken_tsx").then(__webpack_require__.bind(__webpack_require__, /*! ../pages/ManageTokens/AddToken */ "./src/pages/ManageTokens/AddToken.tsx")).then(m => ({
    default: m.AddToken
  }));
});
const TokenFlowPage = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_react-custom-scrollbars-2_lib_index_js"), __webpack_require__.e("vendors-node_modules_avalabs_core-bridge-sdk_esm_lib_btc_utils_js-node_modules_avalabs_core-u-bdea4e"), __webpack_require__.e("src_hooks_useIsFunctionAvailable_ts"), __webpack_require__.e("src_components_common_ProfitAndLoss_tsx-src_hooks_useLiveBalance_ts-src_hooks_useSetSendDataI-978d15"), __webpack_require__.e("src_components_common_MaliciousTokenWarning_tsx-src_pages_Wallet_WalletRecentTxs_tsx"), __webpack_require__.e("node_modules_avalabs_core-utils-sdk_esm_bnToBig_js-node_modules_avalabs_core-utils-sdk_esm_tr-205ef2")]).then(__webpack_require__.bind(__webpack_require__, /*! ../pages/Wallet/TokenFlow */ "./src/pages/Wallet/TokenFlow.tsx")).then(m => ({
    default: m.TokenFlow
  }));
});
const ManageCollectiblesPage = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_react-custom-scrollbars-2_lib_index_js"), __webpack_require__.e("src_pages_ManageCollectibles_ManageCollectibles_tsx")]).then(__webpack_require__.bind(__webpack_require__, /*! ../pages/ManageCollectibles/ManageCollectibles */ "./src/pages/ManageCollectibles/ManageCollectibles.tsx")).then(m => ({
    default: m.ManageCollectibles
  }));
});
const ManageTokensPage = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_react-custom-scrollbars-2_lib_index_js"), __webpack_require__.e("src_pages_ManageTokens_ManageTokens_tsx-src_pages_ManageTokens_ManageTokensList_tsx")]).then(__webpack_require__.bind(__webpack_require__, /*! ../pages/ManageTokens/ManageTokens */ "./src/pages/ManageTokens/ManageTokens.tsx")).then(m => ({
    default: m.ManageTokens
  }));
});
const ImportPrivateKeyPage = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return __webpack_require__.e(/*! import() */ "src_pages_ImportPrivateKey_ImportPrivateKey_tsx").then(__webpack_require__.bind(__webpack_require__, /*! ../pages/ImportPrivateKey/ImportPrivateKey */ "./src/pages/ImportPrivateKey/ImportPrivateKey.tsx")).then(m => ({
    default: m.ImportPrivateKey
  }));
});
const Swap = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_uuid_dist_esm-browser_index_js"), __webpack_require__.e("vendors-node_modules_fireblocks-sdk_dist_src_fireblocks-sdk_js"), __webpack_require__.e("vendors-node_modules_avalabs_core-utils-sdk_esm_bnToBig_js-node_modules_avalabs_core-utils-sd-17840c"), __webpack_require__.e("src_hooks_useIsFunctionAvailable_ts"), __webpack_require__.e("src_hooks_useErrorMessage_ts"), __webpack_require__.e("src_components_common_FunctionIsOffline_tsx-src_components_common_TokenSelect_tsx-src_hooks_u-ee2cd2"), __webpack_require__.e("node_modules_avalabs_core-utils-sdk_esm_bigToLocaleString_js-src_pages_Swap_Swap_tsx")]).then(__webpack_require__.bind(__webpack_require__, /*! ../pages/Swap/Swap */ "./src/pages/Swap/Swap.tsx")).then(m => ({
    default: m.Swap
  }));
});
const Bridge = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_uuid_dist_esm-browser_index_js"), __webpack_require__.e("vendors-node_modules_fireblocks-sdk_dist_src_fireblocks-sdk_js"), __webpack_require__.e("vendors-node_modules_ethers_lib_esm_utils_units_js"), __webpack_require__.e("vendors-node_modules_avalabs_core-utils-sdk_esm_bnToBig_js-node_modules_avalabs_core-utils-sd-17840c"), __webpack_require__.e("src_hooks_useIsFunctionAvailable_ts"), __webpack_require__.e("src_hooks_useErrorMessage_ts"), __webpack_require__.e("src_components_common_CustomFees_tsx"), __webpack_require__.e("src_components_common_FunctionIsOffline_tsx-src_components_common_TokenSelect_tsx-src_hooks_u-ee2cd2"), __webpack_require__.e("node_modules_avalabs_core-utils-sdk_esm_bigToLocaleString_js-src_components_common_approval_A-9f4dc9")]).then(__webpack_require__.bind(__webpack_require__, /*! ../pages/Bridge/Bridge */ "./src/pages/Bridge/Bridge.tsx"));
});
const BridgeTransactionStatus = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_avalabs_core-bridge-sdk_esm_hooks_useBridgeConfigUpdater_js-node_modules-8671d8"), __webpack_require__.e("src_pages_Bridge_BridgeTransactionStatus_tsx")]).then(__webpack_require__.bind(__webpack_require__, /*! ../pages/Bridge/BridgeTransactionStatus */ "./src/pages/Bridge/BridgeTransactionStatus.tsx"));
});
const SendPage = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_ethers_lib_esm_utils_units_js"), __webpack_require__.e("vendors-node_modules_avalabs_core-utils-sdk_esm_bnToBig_js-node_modules_avalabs_core-utils-sd-17840c"), __webpack_require__.e("vendors-node_modules_avalabs_core-wallets-sdk_esm_Avalanche_wallets_WalletAbstract_js"), __webpack_require__.e("vendors-node_modules_solana_addresses_dist_index_browser_mjs-node_modules_openzeppelin_contra-4a4380"), __webpack_require__.e("vendors-node_modules_avalabs_core-utils-sdk_esm_bigIntToString_js-node_modules_avalabs_core-u-b38414"), __webpack_require__.e("src_hooks_useIsFunctionAvailable_ts"), __webpack_require__.e("src_components_common_CustomFees_tsx"), __webpack_require__.e("src_components_common_FunctionIsOffline_tsx-src_components_common_TokenSelect_tsx-src_hooks_u-ee2cd2"), __webpack_require__.e("src_components_common_FunctionIsUnavailable_tsx-src_pages_Send_components_ContactInput_tsx-sr-45b814"), __webpack_require__.e("src_components_common_approval_ApprovalSection_tsx-src_pages_Send_Send_tsx")]).then(__webpack_require__.bind(__webpack_require__, /*! ../pages/Send/Send */ "./src/pages/Send/Send.tsx")).then(m => ({
    default: m.SendPage
  }));
});
const CollectibleDetails = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_uuid_dist_esm-browser_index_js"), __webpack_require__.e("vendors-node_modules_react-custom-scrollbars-2_lib_index_js"), __webpack_require__.e("vendors-node_modules_fireblocks-sdk_dist_src_fireblocks-sdk_js"), __webpack_require__.e("src_hooks_useIsFunctionAvailable_ts"), __webpack_require__.e("src_hooks_useErrorMessage_ts"), __webpack_require__.e("src_pages_Networks_Networks_tsx"), __webpack_require__.e("src_components_common_ProfitAndLoss_tsx-src_hooks_useLiveBalance_ts-src_hooks_useSetSendDataI-978d15"), __webpack_require__.e("src_hooks_useTokenPriceIsMissing_ts-src_pages_Home_components_Portfolio_NetworkWidget_Network-c1743a"), __webpack_require__.e("node_modules_avalabs_core-utils-sdk_esm_bnToBig_js-node_modules_avalabs_core-utils-sdk_esm_tr-aa4325"), __webpack_require__.e("src_pages_Collectibles_CollectibleDetails_tsx")]).then(__webpack_require__.bind(__webpack_require__, /*! ../pages/Collectibles/CollectibleDetails */ "./src/pages/Collectibles/CollectibleDetails.tsx")).then(m => ({
    default: m.CollectibleDetails
  }));
});
const CollectibleSend = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_solana_addresses_dist_index_browser_mjs-node_modules_openzeppelin_contra-4a4380"), __webpack_require__.e("src_hooks_useIsFunctionAvailable_ts"), __webpack_require__.e("src_components_common_FunctionIsUnavailable_tsx-src_pages_Send_components_ContactInput_tsx-sr-45b814"), __webpack_require__.e("src_components_common_ContainedDropdown_tsx-src_pages_Collectibles_CollectibleSend_tsx")]).then(__webpack_require__.bind(__webpack_require__, /*! ../pages/Collectibles/CollectibleSend */ "./src/pages/Collectibles/CollectibleSend.tsx")).then(m => ({
    default: m.CollectibleSend
  }));
});
const LedgerConnect = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return __webpack_require__.e(/*! import() */ "src_pages_Ledger_Connect_tsx").then(__webpack_require__.bind(__webpack_require__, /*! ../pages/Ledger/Connect */ "./src/pages/Ledger/Connect.tsx")).then(m => ({
    default: m.LedgerConnect
  }));
});
const Assets = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_react-custom-scrollbars-2_lib_index_js"), __webpack_require__.e("vendors-node_modules_avalabs_core-utils-sdk_esm_bnToBig_js-node_modules_avalabs_core-utils-sd-17840c"), __webpack_require__.e("vendors-node_modules_avalabs_core-bridge-sdk_esm_lib_btc_utils_js-node_modules_avalabs_core-u-bdea4e"), __webpack_require__.e("src_hooks_useIsFunctionAvailable_ts"), __webpack_require__.e("src_pages_Networks_Networks_tsx"), __webpack_require__.e("src_components_common_ProfitAndLoss_tsx-src_hooks_useLiveBalance_ts-src_hooks_useSetSendDataI-978d15"), __webpack_require__.e("src_hooks_useTokenPriceIsMissing_ts-src_pages_Home_components_Portfolio_NetworkWidget_Network-c1743a"), __webpack_require__.e("src_components_common_MaliciousTokenWarning_tsx-src_pages_Wallet_WalletRecentTxs_tsx"), __webpack_require__.e("src_pages_Home_components_Portfolio_Assets_tsx")]).then(__webpack_require__.bind(__webpack_require__, /*! ../pages/Home/components/Portfolio/Assets */ "./src/pages/Home/components/Portfolio/Assets.tsx"));
});
const ImportWithWalletConnect = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return __webpack_require__.e(/*! import() */ "src_pages_ImportWithWalletConnect_ImportWithWalletConnect_tsx").then(__webpack_require__.bind(__webpack_require__, /*! ../pages/ImportWithWalletConnect/ImportWithWalletConnect */ "./src/pages/ImportWithWalletConnect/ImportWithWalletConnect.tsx"));
});
const ImportFireblocksWithWalletConnect = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return Promise.all(/*! import() */[__webpack_require__.e("src_pages_ImportWithWalletConnect_ImportWithWalletConnect_tsx"), __webpack_require__.e("src_pages_Fireblocks_ImportFireblocksWithWalletConnect_tsx")]).then(__webpack_require__.bind(__webpack_require__, /*! ../pages/Fireblocks/ImportFireblocksWithWalletConnect */ "./src/pages/Fireblocks/ImportFireblocksWithWalletConnect.tsx"));
});
const ConnectBitcoinWallet = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_uuid_dist_esm-browser_index_js"), __webpack_require__.e("vendors-node_modules_fireblocks-sdk_dist_src_fireblocks-sdk_js"), __webpack_require__.e("src_pages_Fireblocks_ConnectBitcoinWallet_tsx")]).then(__webpack_require__.bind(__webpack_require__, /*! ../pages/Fireblocks/ConnectBitcoinWallet */ "./src/pages/Fireblocks/ConnectBitcoinWallet.tsx"));
});
const SeedlessAuthPopup = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_cubist-labs_cubesigner-sdk_dist_cjs_src_index_js"), __webpack_require__.e("src_hooks_useSeedlessAuth_ts-src_utils_seedless_authenticateWithApple_ts-src_utils_seedless_a-344cb0"), __webpack_require__.e("src_pages_SeedlessPopups_SeedlessAuthPopup_tsx")]).then(__webpack_require__.bind(__webpack_require__, /*! ../pages/SeedlessPopups/SeedlessAuthPopup */ "./src/pages/SeedlessPopups/SeedlessAuthPopup.tsx")).then(m => ({
    default: m.SeedlessAuthPopup
  }));
});
const SeedlessExportPopup = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return __webpack_require__.e(/*! import() */ "src_pages_SeedlessPopups_SeedlessExportPopup_tsx").then(__webpack_require__.bind(__webpack_require__, /*! ../pages/SeedlessPopups/SeedlessExportPopup */ "./src/pages/SeedlessPopups/SeedlessExportPopup.tsx")).then(m => ({
    default: m.SeedlessExportPopup
  }));
});
const ExportPrivateKey = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return __webpack_require__.e(/*! import() */ "src_pages_ExportPrivateKey_ExportPrivateKey_tsx").then(__webpack_require__.bind(__webpack_require__, /*! ../pages/ExportPrivateKey/ExportPrivateKey */ "./src/pages/ExportPrivateKey/ExportPrivateKey.tsx")).then(m => ({
    default: m.ExportPrivateKey
  }));
});
const AddWalletWithSeedPhrase = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_uuid_dist_esm-browser_index_js"), __webpack_require__.e("vendors-node_modules_fireblocks-sdk_dist_src_fireblocks-sdk_js"), __webpack_require__.e("vendors-node_modules_ethers_lib_esm_wallet_mnemonic_js"), __webpack_require__.e("src_hooks_useErrorMessage_ts"), __webpack_require__.e("src_pages_Accounts_AddWalletWithSeedPhrase_tsx")]).then(__webpack_require__.bind(__webpack_require__, /*! ../pages/Accounts/AddWalletWithSeedPhrase */ "./src/pages/Accounts/AddWalletWithSeedPhrase.tsx")).then(m => ({
    default: m.AddWalletWithSeedPhrase
  }));
});
const AddWalletWithLedger = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_uuid_dist_esm-browser_index_js"), __webpack_require__.e("vendors-node_modules_fireblocks-sdk_dist_src_fireblocks-sdk_js"), __webpack_require__.e("vendors-node_modules_avalabs_core-wallets-sdk_esm_Avalanche_wallets_WalletAbstract_js"), __webpack_require__.e("vendors-node_modules_avalabs_core-wallets-sdk_esm_Avalanche_wallets_legacy_LedgerWallet_js-no-e9de5a"), __webpack_require__.e("src_hooks_useErrorMessage_ts"), __webpack_require__.e("src_components_common_AppBackground_tsx-src_components_ledger_LedgerConnector_tsx-src_compone-0b786c"), __webpack_require__.e("node_modules_ethereumjs_rlp_dist_index_js-src_pages_Accounts_AddWalletWithLedger_tsx")]).then(__webpack_require__.bind(__webpack_require__, /*! ../pages/Accounts/AddWalletWithLedger */ "./src/pages/Accounts/AddWalletWithLedger.tsx")).then(m => ({
    default: m.AddWalletWithLedger
  }));
});
const AddWalletWithKeystoreFile = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_uuid_dist_esm-browser_index_js"), __webpack_require__.e("vendors-node_modules_fireblocks-sdk_dist_src_fireblocks-sdk_js"), __webpack_require__.e("vendors-node_modules_bip39_src_index_js"), __webpack_require__.e("src_hooks_useErrorMessage_ts"), __webpack_require__.e("src_pages_Accounts_AddWalletWithKeystoreFile_tsx")]).then(__webpack_require__.bind(__webpack_require__, /*! ../pages/Accounts/AddWalletWithKeystoreFile */ "./src/pages/Accounts/AddWalletWithKeystoreFile.tsx")).then(m => ({
    default: m.AddWalletWithKeystoreFile
  }));
});
const SeedlessUpdateRecoveryMethod = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return __webpack_require__.e(/*! import() */ "src_pages_SeedlessPopups_SeedlessUpdateRecoveryMethod_tsx").then(__webpack_require__.bind(__webpack_require__, /*! ../pages/SeedlessPopups/SeedlessUpdateRecoveryMethod */ "./src/pages/SeedlessPopups/SeedlessUpdateRecoveryMethod.tsx")).then(m => ({
    default: m.SeedlessUpdateRecoveryMethod
  }));
});
const SeedlessRemoveTotp = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return __webpack_require__.e(/*! import() */ "src_pages_SeedlessPopups_SeedlessRemoveTotp_tsx").then(__webpack_require__.bind(__webpack_require__, /*! ../pages/SeedlessPopups/SeedlessRemoveTotp */ "./src/pages/SeedlessPopups/SeedlessRemoveTotp.tsx")).then(m => ({
    default: m.SeedlessRemoveTotp
  }));
});
const Home = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return Promise.all(/*! import() */[__webpack_require__.e("src_hooks_useIsFunctionAvailable_ts"), __webpack_require__.e("src_pages_Networks_Networks_tsx"), __webpack_require__.e("src_components_common_ProfitAndLoss_tsx-src_hooks_useLiveBalance_ts-src_hooks_useSetSendDataI-978d15"), __webpack_require__.e("src_hooks_useTokenPriceIsMissing_ts-src_pages_Home_components_Portfolio_NetworkWidget_Network-c1743a"), __webpack_require__.e("node_modules_avalabs_core-utils-sdk_esm_bnToBig_js-node_modules_avalabs_core-utils-sdk_esm_tr-aa4325"), __webpack_require__.e("src_pages_Home_Home_tsx")]).then(__webpack_require__.bind(__webpack_require__, /*! ../pages/Home/Home */ "./src/pages/Home/Home.tsx")).then(m => ({
    default: m.Home
  }));
});
const Networks = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return Promise.all(/*! import() */[__webpack_require__.e("src_pages_Networks_Networks_tsx"), __webpack_require__.e("src_pages_Networks_index_tsx")]).then(__webpack_require__.bind(__webpack_require__, /*! ../pages/Networks */ "./src/pages/Networks/index.tsx")).then(m => ({
    default: m.Networks
  }));
});
const AddNetwork = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return Promise.all(/*! import() */[__webpack_require__.e("src_pages_Networks_Networks_tsx"), __webpack_require__.e("src_pages_Networks_NetworkForm_tsx"), __webpack_require__.e("src_pages_Networks_AddNetwork_tsx")]).then(__webpack_require__.bind(__webpack_require__, /*! ../pages/Networks/AddNetwork */ "./src/pages/Networks/AddNetwork.tsx")).then(m => ({
    default: m.AddNetwork
  }));
});
const EditNetwork = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return Promise.all(/*! import() */[__webpack_require__.e("src_pages_Networks_NetworkForm_tsx"), __webpack_require__.e("src_pages_Networks_EditNetwork_tsx")]).then(__webpack_require__.bind(__webpack_require__, /*! ../pages/Networks/EditNetwork */ "./src/pages/Networks/EditNetwork.tsx")).then(m => ({
    default: m.EditNetwork
  }));
});
const NetworkDetails = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return Promise.all(/*! import() */[__webpack_require__.e("src_pages_Networks_NetworkForm_tsx"), __webpack_require__.e("src_pages_Networks_NetworkDetails_tsx")]).then(__webpack_require__.bind(__webpack_require__, /*! ../pages/Networks/NetworkDetails */ "./src/pages/Networks/NetworkDetails.tsx")).then(m => ({
    default: m.NetworkDetails
  }));
});
const Receive = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return Promise.all(/*! import() */[__webpack_require__.e("src_hooks_useIsFunctionAvailable_ts"), __webpack_require__.e("src_pages_Receive_Receive_tsx")]).then(__webpack_require__.bind(__webpack_require__, /*! ../pages/Receive/Receive */ "./src/pages/Receive/Receive.tsx")).then(m => ({
    default: m.Receive
  }));
});
const Accounts = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return Promise.all(/*! import() */[__webpack_require__.e("src_pages_Accounts_components_OverflowingTypography_tsx-src_pages_Accounts_hooks_useAccountRe-c6d206"), __webpack_require__.e("src_pages_Accounts_Accounts_tsx")]).then(__webpack_require__.bind(__webpack_require__, /*! ../pages/Accounts/Accounts */ "./src/pages/Accounts/Accounts.tsx")).then(m => ({
    default: m.Accounts
  }));
});
const AccountManagerProvider = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return __webpack_require__.e(/*! import() */ "src_pages_Accounts_providers_AccountManagerProvider_tsx").then(__webpack_require__.bind(__webpack_require__, /*! ../pages/Accounts/providers/AccountManagerProvider */ "./src/pages/Accounts/providers/AccountManagerProvider.tsx")).then(m => ({
    default: m.AccountManagerProvider
  }));
});
const WalletTotalBalanceProvider = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return __webpack_require__.e(/*! import() */ "src_pages_Accounts_providers_WalletTotalBalanceProvider_tsx").then(__webpack_require__.bind(__webpack_require__, /*! ../pages/Accounts/providers/WalletTotalBalanceProvider */ "./src/pages/Accounts/providers/WalletTotalBalanceProvider.tsx")).then(m => ({
    default: m.WalletTotalBalanceProvider
  }));
});
const AccountDetailsView = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return Promise.all(/*! import() */[__webpack_require__.e("src_pages_Accounts_components_OverflowingTypography_tsx-src_pages_Accounts_hooks_useAccountRe-c6d206"), __webpack_require__.e("src_pages_Accounts_AccountDetailsView_tsx")]).then(__webpack_require__.bind(__webpack_require__, /*! ../pages/Accounts/AccountDetailsView */ "./src/pages/Accounts/AccountDetailsView.tsx")).then(m => ({
    default: m.AccountDetailsView
  }));
});
const DefiProtocolDetails = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return Promise.all(/*! import() */[__webpack_require__.e("src_hooks_useIsFunctionAvailable_ts"), __webpack_require__.e("src_pages_DeFi_DefiProtocolDetails_tsx")]).then(__webpack_require__.bind(__webpack_require__, /*! ../pages/DeFi/DefiProtocolDetails */ "./src/pages/DeFi/DefiProtocolDetails.tsx")).then(m => ({
    default: m.DefiProtocolDetails
  }));
});
const LedgerTroubleshootingPopup = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return __webpack_require__.e(/*! import() */ "src_pages_Ledger_LedgerTroubleshooting_tsx").then(__webpack_require__.bind(__webpack_require__, /*! ../pages/Ledger/LedgerTroubleshooting */ "./src/pages/Ledger/LedgerTroubleshooting.tsx")).then(m => ({
    default: m.LedgerTroubleshooting
  }));
});
const AppRoutes = () => /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_2__.Switch, null, /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_2__.Route, {
  path: "/ledger/troubleshooting"
}, /*#__PURE__*/React.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {
  fallback: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.CircularProgress, null)
}, /*#__PURE__*/React.createElement(LedgerTroubleshootingPopup, null))), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_2__.Route, {
  path: "/token/add"
}, /*#__PURE__*/React.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {
  fallback: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.CircularProgress, null)
}, /*#__PURE__*/React.createElement(AddToken, null))), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_2__.Route, {
  path: "/home"
}, /*#__PURE__*/React.createElement(Home, null)), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_2__.Route, {
  path: "/ledger/connect"
}, /*#__PURE__*/React.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {
  fallback: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.CircularProgress, null)
}, /*#__PURE__*/React.createElement(LedgerConnect, null))), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_2__.Route, {
  path: "/token"
}, /*#__PURE__*/React.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {
  fallback: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.CircularProgress, null)
}, /*#__PURE__*/React.createElement(TokenFlowPage, null))), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_2__.Route, {
  path: "/collectible/send"
}, /*#__PURE__*/React.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {
  fallback: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.CircularProgress, null)
}, /*#__PURE__*/React.createElement(CollectibleSend, null))), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_2__.Route, {
  path: "/collectible"
}, /*#__PURE__*/React.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {
  fallback: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.CircularProgress, null)
}, /*#__PURE__*/React.createElement(CollectibleDetails, null))), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_2__.Route, {
  path: "/receive"
}, /*#__PURE__*/React.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {
  fallback: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.CircularProgress, null)
}, /*#__PURE__*/React.createElement(Receive, null))), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_2__.Route, {
  path: "/send"
}, /*#__PURE__*/React.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {
  fallback: /*#__PURE__*/React.createElement(_src_pages_Send_components_LoadingSendForm__WEBPACK_IMPORTED_MODULE_1__.LoadingSendForm, {
    withTitle: true
  })
}, /*#__PURE__*/React.createElement(SendPage, null))), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_2__.Route, {
  path: "/swap"
}, /*#__PURE__*/React.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {
  fallback: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.CircularProgress, null)
}, /*#__PURE__*/React.createElement(Swap, null))), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_2__.Route, {
  path: "/bridge/transaction-status/:sourceBlockchain/:txHash/:txTimestamp"
}, /*#__PURE__*/React.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {
  fallback: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.CircularProgress, null)
}, /*#__PURE__*/React.createElement(BridgeTransactionStatus, null))), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_2__.Route, {
  path: "/bridge"
}, /*#__PURE__*/React.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {
  fallback: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.CircularProgress, null)
}, /*#__PURE__*/React.createElement(Bridge, null))), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_2__.Route, {
  path: "/manage-tokens/add"
}, /*#__PURE__*/React.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {
  fallback: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.CircularProgress, null)
}, /*#__PURE__*/React.createElement(AddToken, null))), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_2__.Route, {
  path: "/manage-tokens"
}, /*#__PURE__*/React.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {
  fallback: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.CircularProgress, null)
}, /*#__PURE__*/React.createElement(ManageTokensPage, null))), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_2__.Route, {
  path: "/manage-collectibles"
}, /*#__PURE__*/React.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {
  fallback: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.CircularProgress, null)
}, /*#__PURE__*/React.createElement(ManageCollectiblesPage, null))), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_2__.Route, {
  exact: true,
  path: "/networks"
}, /*#__PURE__*/React.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {
  fallback: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.CircularProgress, null)
}, /*#__PURE__*/React.createElement(Networks, null))), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_2__.Route, {
  path: "/networks/add"
}, /*#__PURE__*/React.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {
  fallback: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.CircularProgress, null)
}, /*#__PURE__*/React.createElement(AddNetwork, null))), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_2__.Route, {
  path: "/networks/details/:networkId"
}, /*#__PURE__*/React.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {
  fallback: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.CircularProgress, null)
}, /*#__PURE__*/React.createElement(NetworkDetails, null))), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_2__.Route, {
  path: "/networks/edit/:networkId"
}, /*#__PURE__*/React.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {
  fallback: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.CircularProgress, {
    size: 100
  })
}, /*#__PURE__*/React.createElement(EditNetwork, null))), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_2__.Route, {
  path: "/accounts",
  exact: true
}, /*#__PURE__*/React.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {
  fallback: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.CircularProgress, null)
}, /*#__PURE__*/React.createElement(AccountManagerProvider, null, /*#__PURE__*/React.createElement(WalletTotalBalanceProvider, null, /*#__PURE__*/React.createElement(Accounts, null))))), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_2__.Route, {
  path: "/accounts/add-wallet/seedphrase"
}, /*#__PURE__*/React.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {
  fallback: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.CircularProgress, null)
}, /*#__PURE__*/React.createElement(AddWalletWithSeedPhrase, null))), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_2__.Route, {
  path: "/accounts/add-wallet/keystore"
}, /*#__PURE__*/React.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {
  fallback: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.CircularProgress, null)
}, /*#__PURE__*/React.createElement(AddWalletWithKeystoreFile, null))), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_2__.Route, {
  path: "/accounts/add-wallet/ledger"
}, /*#__PURE__*/React.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {
  fallback: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.CircularProgress, null)
}, /*#__PURE__*/React.createElement(AddWalletWithLedger, null))), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_2__.Route, {
  path: "/accounts/:accountId"
}, /*#__PURE__*/React.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {
  fallback: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.CircularProgress, null)
}, /*#__PURE__*/React.createElement(AccountManagerProvider, null, /*#__PURE__*/React.createElement(AccountDetailsView, null)))), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_2__.Route, {
  path: "/export-private-key"
}, /*#__PURE__*/React.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {
  fallback: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.CircularProgress, null)
}, /*#__PURE__*/React.createElement(ExportPrivateKey, null))), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_2__.Route, {
  path: "/import-private-key"
}, /*#__PURE__*/React.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {
  fallback: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.CircularProgress, null)
}, /*#__PURE__*/React.createElement(ImportPrivateKeyPage, null))), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_2__.Route, {
  path: "/assets"
}, /*#__PURE__*/React.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {
  fallback: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.CircularProgress, null)
}, /*#__PURE__*/React.createElement(Assets, null))), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_2__.Route, {
  path: "/defi/:protocolId"
}, /*#__PURE__*/React.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {
  fallback: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.CircularProgress, {
    size: 100
  })
}, /*#__PURE__*/React.createElement(DefiProtocolDetails, null))), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_2__.Route, {
  path: "/import-with-walletconnect"
}, /*#__PURE__*/React.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {
  fallback: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.CircularProgress, {
    size: 100
  })
}, /*#__PURE__*/React.createElement(ImportWithWalletConnect, null))), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_2__.Route, {
  path: "/fireblocks/import-with-walletconnect"
}, /*#__PURE__*/React.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {
  fallback: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.CircularProgress, {
    size: 100
  })
}, /*#__PURE__*/React.createElement(ImportFireblocksWithWalletConnect, null))), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_2__.Route, {
  path: "/fireblocks/connect-bitcoin/:accountId"
}, /*#__PURE__*/React.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {
  fallback: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.CircularProgress, {
    size: 100
  })
}, /*#__PURE__*/React.createElement(ConnectBitcoinWallet, null))), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_2__.Route, {
  path: "/seedless-auth"
}, /*#__PURE__*/React.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {
  fallback: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.CircularProgress, null)
}, /*#__PURE__*/React.createElement(SeedlessAuthPopup, null))), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_2__.Route, {
  path: "/seedless-export"
}, /*#__PURE__*/React.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {
  fallback: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.CircularProgress, null)
}, /*#__PURE__*/React.createElement(SeedlessExportPopup, null))), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_2__.Route, {
  path: "/update-recovery-methods"
}, /*#__PURE__*/React.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {
  fallback: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.CircularProgress, null)
}, /*#__PURE__*/React.createElement(SeedlessUpdateRecoveryMethod, null))), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_2__.Route, {
  path: "/remove-totp"
}, /*#__PURE__*/React.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {
  fallback: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.CircularProgress, null)
}, /*#__PURE__*/React.createElement(SeedlessRemoveTotp, null))), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_2__.Route, {
  path: "/"
}, /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_2__.Redirect, {
  to: "/home"
})));

/***/ }),

/***/ "./src/popup/ApprovalRoutes.tsx":
/*!**************************************!*\
  !*** ./src/popup/ApprovalRoutes.tsx ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ApprovalRoutes": () => (/* binding */ ApprovalRoutes)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react_router_dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-router-dom */ "./node_modules/react-router/esm/react-router.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _src_pages_SignTransaction_components_SignTxErrorBoundary__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/pages/SignTransaction/components/SignTxErrorBoundary */ "./src/pages/SignTransaction/components/SignTxErrorBoundary.tsx");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");




const SignMessage = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_ethereumjs-util_dist_browser_index_js"), __webpack_require__.e("src_hooks_useIsFunctionAvailable_ts"), __webpack_require__.e("src_hooks_useIsUsingKeystoneWallet_ts-src_pages_SignTransaction_components_LedgerApprovalOver-ccf032"), __webpack_require__.e("src_components_common_FunctionIsOffline_tsx-src_hooks_useApprovalHelpers_ts-src_hooks_useAppr-bc0e7e"), __webpack_require__.e("src_pages_SignMessage_SignMessage_tsx")]).then(__webpack_require__.bind(__webpack_require__, /*! ../pages/SignMessage/SignMessage */ "./src/pages/SignMessage/SignMessage.tsx")).then(m => ({
    default: m.SignMessage
  }));
});
const PermissionsPage = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_blockaid_client_index_mjs"), __webpack_require__.e("src_pages_Permissions_Permissions_tsx")]).then(__webpack_require__.bind(__webpack_require__, /*! ../pages/Permissions/Permissions */ "./src/pages/Permissions/Permissions.tsx")).then(m => ({
    default: m.PermissionsPage
  }));
});
const SeedlessAuthPopup = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_cubist-labs_cubesigner-sdk_dist_cjs_src_index_js"), __webpack_require__.e("src_hooks_useSeedlessAuth_ts-src_utils_seedless_authenticateWithApple_ts-src_utils_seedless_a-344cb0"), __webpack_require__.e("src_pages_SeedlessPopups_SeedlessAuthPopup_tsx")]).then(__webpack_require__.bind(__webpack_require__, /*! ../pages/SeedlessPopups/SeedlessAuthPopup */ "./src/pages/SeedlessPopups/SeedlessAuthPopup.tsx")).then(m => ({
    default: m.SeedlessAuthPopup
  }));
});
const SeedlessExportPopup = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return __webpack_require__.e(/*! import() */ "src_pages_SeedlessPopups_SeedlessExportPopup_tsx").then(__webpack_require__.bind(__webpack_require__, /*! ../pages/SeedlessPopups/SeedlessExportPopup */ "./src/pages/SeedlessPopups/SeedlessExportPopup.tsx")).then(m => ({
    default: m.SeedlessExportPopup
  }));
});
const WatchAssetApprovalPopup = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_react-custom-scrollbars-2_lib_index_js"), __webpack_require__.e("src_pages_ManageTokens_AddTokenApproval_tsx")]).then(__webpack_require__.bind(__webpack_require__, /*! ../pages/ManageTokens/AddTokenApproval */ "./src/pages/ManageTokens/AddTokenApproval.tsx")).then(m => ({
    default: m.AddTokenApproval
  }));
});
const SelectWallet = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return __webpack_require__.e(/*! import() */ "src_pages_ApproveAction_SelectWallet_tsx").then(__webpack_require__.bind(__webpack_require__, /*! ../pages/ApproveAction/SelectWallet */ "./src/pages/ApproveAction/SelectWallet.tsx")).then(m => ({
    default: m.SelectWallet
  }));
});
const AddCustomNetworkPopup = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_react-custom-scrollbars-2_lib_index_js"), __webpack_require__.e("src_pages_Network_AddCustomNetworkPopup_tsx")]).then(__webpack_require__.bind(__webpack_require__, /*! ../pages/Network/AddCustomNetworkPopup */ "./src/pages/Network/AddCustomNetworkPopup.tsx")).then(m => ({
    default: m.AddCustomNetworkPopup
  }));
});
const LedgerConnect = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return __webpack_require__.e(/*! import() */ "src_pages_Ledger_Connect_tsx").then(__webpack_require__.bind(__webpack_require__, /*! ../pages/Ledger/Connect */ "./src/pages/Ledger/Connect.tsx")).then(m => ({
    default: m.LedgerConnect
  }));
});
const SwitchActiveNetwork = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return __webpack_require__.e(/*! import() */ "src_pages_Network_SwitchActiveNetwork_tsx").then(__webpack_require__.bind(__webpack_require__, /*! ../pages/Network/SwitchActiveNetwork */ "./src/pages/Network/SwitchActiveNetwork.tsx")).then(m => ({
    default: m.SwitchActiveNetwork
  }));
});
const SwitchAccount = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return __webpack_require__.e(/*! import() */ "src_pages_Wallet_SwitchAccount_tsx").then(__webpack_require__.bind(__webpack_require__, /*! ../pages/Wallet/SwitchAccount */ "./src/pages/Wallet/SwitchAccount.tsx")).then(m => ({
    default: m.SwitchAccount
  }));
});
const SetDeveloperMode = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return __webpack_require__.e(/*! import() */ "src_pages_ApproveAction_SetDeveloperMode_tsx").then(__webpack_require__.bind(__webpack_require__, /*! ../pages/ApproveAction/SetDeveloperMode */ "./src/pages/ApproveAction/SetDeveloperMode.tsx")).then(m => ({
    default: m.SetDeveloperMode
  }));
});
const UpdateContacts = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return __webpack_require__.e(/*! import() */ "src_pages_ApproveAction_UpdateContacts_tsx").then(__webpack_require__.bind(__webpack_require__, /*! ../pages/ApproveAction/UpdateContacts */ "./src/pages/ApproveAction/UpdateContacts.tsx")).then(m => ({
    default: m.UpdateContacts
  }));
});
const AvalancheSignTx = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return Promise.all(/*! import() */[__webpack_require__.e("src_hooks_useIsFunctionAvailable_ts"), __webpack_require__.e("src_hooks_useIsUsingKeystoneWallet_ts-src_pages_SignTransaction_components_LedgerApprovalOver-ccf032"), __webpack_require__.e("src_components_common_FunctionIsOffline_tsx-src_hooks_useApprovalHelpers_ts-src_hooks_useAppr-bc0e7e"), __webpack_require__.e("src_pages_ApproveAction_AvalancheSignTx_tsx")]).then(__webpack_require__.bind(__webpack_require__, /*! ../pages/ApproveAction/AvalancheSignTx */ "./src/pages/ApproveAction/AvalancheSignTx.tsx")).then(m => ({
    default: m.AvalancheSignTx
  }));
});
const GenericApprovalScreen = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_uuid_dist_esm-browser_index_js"), __webpack_require__.e("vendors-node_modules_ethers_lib_esm_utils_units_js"), __webpack_require__.e("vendors-node_modules_ethereumjs-util_dist_browser_index_js"), __webpack_require__.e("vendors-node_modules_keystonehq_animated-qr_dist_index_js-node_modules_keystonehq_bc-ur-regis-de49eb"), __webpack_require__.e("src_components_common_approval_ApprovalSection_tsx-src_hooks_useApproveAction_ts-src_hooks_us-a556dc"), __webpack_require__.e("src_components_common_CustomFees_tsx"), __webpack_require__.e("src_hooks_useIsUsingKeystoneWallet_ts-src_pages_SignTransaction_components_LedgerApprovalOver-ccf032"), __webpack_require__.e("src_components_common_LoadingOverlay_tsx-src_components_common_MaliciousTxAlert_tsx-src_compo-deaf4f"), __webpack_require__.e("src_pages_SignTransaction_components_KeystoneApprovalOverlay_tsx"), __webpack_require__.e("src_pages_ApproveAction_GenericApprovalScreen_tsx")]).then(__webpack_require__.bind(__webpack_require__, /*! ../pages/ApproveAction/GenericApprovalScreen */ "./src/pages/ApproveAction/GenericApprovalScreen.tsx")).then(m => ({
    default: m.GenericApprovalScreen
  }));
});
const TxBatchApprovalScreen = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_ethers_lib_esm_utils_units_js"), __webpack_require__.e("src_components_common_approval_ApprovalSection_tsx-src_hooks_useApproveAction_ts-src_hooks_us-a556dc"), __webpack_require__.e("src_components_common_CustomFees_tsx"), __webpack_require__.e("src_components_common_LoadingOverlay_tsx-src_components_common_MaliciousTxAlert_tsx-src_compo-deaf4f"), __webpack_require__.e("src_pages_ApproveAction_TxBatchApprovalScreen_tsx")]).then(__webpack_require__.bind(__webpack_require__, /*! ../pages/ApproveAction/TxBatchApprovalScreen */ "./src/pages/ApproveAction/TxBatchApprovalScreen.tsx")).then(m => ({
    default: m.TxBatchApprovalScreen
  }));
});
const ApproveAction = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_uuid_dist_esm-browser_index_js"), __webpack_require__.e("vendors-node_modules_react-custom-scrollbars-2_lib_index_js"), __webpack_require__.e("vendors-node_modules_ethers_lib_esm_utils_units_js"), __webpack_require__.e("vendors-node_modules_ethereumjs-util_dist_browser_index_js"), __webpack_require__.e("vendors-node_modules_keystonehq_animated-qr_dist_index_js-node_modules_keystonehq_bc-ur-regis-de49eb"), __webpack_require__.e("src_hooks_useIsFunctionAvailable_ts"), __webpack_require__.e("src_components_common_CustomFees_tsx"), __webpack_require__.e("src_hooks_useIsUsingKeystoneWallet_ts-src_pages_SignTransaction_components_LedgerApprovalOver-ccf032"), __webpack_require__.e("src_components_common_FunctionIsOffline_tsx-src_hooks_useApprovalHelpers_ts-src_hooks_useAppr-bc0e7e"), __webpack_require__.e("src_pages_SignTransaction_components_KeystoneApprovalOverlay_tsx"), __webpack_require__.e("src_pages_ApproveAction_ApproveAction_tsx")]).then(__webpack_require__.bind(__webpack_require__, /*! ../pages/ApproveAction/ApproveAction */ "./src/pages/ApproveAction/ApproveAction.tsx")).then(m => ({
    default: m.ApproveAction
  }));
});
const RenameAccount = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return Promise.all(/*! import() */[__webpack_require__.e("src_components_common_approval_ApprovalSection_tsx-src_hooks_useApproveAction_ts-src_hooks_us-a556dc"), __webpack_require__.e("src_pages_Wallet_RenameAccount_tsx")]).then(__webpack_require__.bind(__webpack_require__, /*! ../pages/Wallet/RenameAccount */ "./src/pages/Wallet/RenameAccount.tsx")).then(m => ({
    default: m.RenameAccount
  }));
});
const DeleteAccounts = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return Promise.all(/*! import() */[__webpack_require__.e("src_components_common_approval_ApprovalSection_tsx-src_hooks_useApproveAction_ts-src_hooks_us-a556dc"), __webpack_require__.e("src_pages_Wallet_DeleteAccounts_tsx")]).then(__webpack_require__.bind(__webpack_require__, /*! ../pages/Wallet/DeleteAccounts */ "./src/pages/Wallet/DeleteAccounts.tsx")).then(m => ({
    default: m.DeleteAccount
  }));
});
const GetAddressesInRange = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return Promise.all(/*! import() */[__webpack_require__.e("src_components_common_approval_ApprovalSection_tsx-src_hooks_useApproveAction_ts-src_hooks_us-a556dc"), __webpack_require__.e("src_pages_Wallet_GetAddressesInRange_tsx")]).then(__webpack_require__.bind(__webpack_require__, /*! ../pages/Wallet/GetAddressesInRange */ "./src/pages/Wallet/GetAddressesInRange.tsx")).then(m => ({
    default: m.GetAddressesInRange
  }));
});
const RenameWallet = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(() => {
  return Promise.all(/*! import() */[__webpack_require__.e("src_components_common_approval_ApprovalSection_tsx-src_hooks_useApproveAction_ts-src_hooks_us-a556dc"), __webpack_require__.e("src_pages_Wallet_RenameWallet_tsx")]).then(__webpack_require__.bind(__webpack_require__, /*! ../pages/Wallet/RenameWallet */ "./src/pages/Wallet/RenameWallet.tsx")).then(m => ({
    default: m.RenameWallet
  }));
});
const ApprovalRoutes = props => /*#__PURE__*/React.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {
  fallback: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.Stack, {
    sx: {
      width: 1,
      height: 1,
      justifyContent: 'center',
      alignItems: 'center'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.CircularProgress, null))
}, /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_3__.Switch, props, /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_3__.Route, {
  path: "/approve/generic"
}, /*#__PURE__*/React.createElement(_src_pages_SignTransaction_components_SignTxErrorBoundary__WEBPACK_IMPORTED_MODULE_1__.SignTxErrorBoundary, {
  variant: "OpenError"
}, /*#__PURE__*/React.createElement(GenericApprovalScreen, null))), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_3__.Route, {
  path: "/approve/tx-batch"
}, /*#__PURE__*/React.createElement(_src_pages_SignTransaction_components_SignTxErrorBoundary__WEBPACK_IMPORTED_MODULE_1__.SignTxErrorBoundary, {
  variant: "OpenError"
}, /*#__PURE__*/React.createElement(TxBatchApprovalScreen, null))), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_3__.Route, {
  path: "/sign"
}, /*#__PURE__*/React.createElement(SignMessage, null)), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_3__.Route, {
  path: "/ledger/connect"
}, /*#__PURE__*/React.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {
  fallback: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.CircularProgress, null)
}, /*#__PURE__*/React.createElement(LedgerConnect, null))), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_3__.Route, {
  path: "/approve/select-wallet"
}, /*#__PURE__*/React.createElement(SelectWallet, null)), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_3__.Route, {
  path: "/approve/createContact"
}, /*#__PURE__*/React.createElement(UpdateContacts, {
  method: "create"
})), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_3__.Route, {
  path: "/seedless-auth"
}, /*#__PURE__*/React.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {
  fallback: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.CircularProgress, null)
}, /*#__PURE__*/React.createElement(SeedlessAuthPopup, null))), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_3__.Route, {
  path: "/seedless-export"
}, /*#__PURE__*/React.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {
  fallback: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.CircularProgress, null)
}, /*#__PURE__*/React.createElement(SeedlessExportPopup, null))), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_3__.Route, {
  path: "/approve/updateContact"
}, /*#__PURE__*/React.createElement(UpdateContacts, {
  method: "update"
})), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_3__.Route, {
  path: "/approve/removeContact"
}, /*#__PURE__*/React.createElement(UpdateContacts, {
  method: "remove"
})), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_3__.Route, {
  path: "/approve/watch-asset"
}, /*#__PURE__*/React.createElement(WatchAssetApprovalPopup, null)), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_3__.Route, {
  path: "/approve/set-developer-mode"
}, /*#__PURE__*/React.createElement(SetDeveloperMode, null)), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_3__.Route, {
  path: "/approve/avalancheSignTx"
}, /*#__PURE__*/React.createElement(AvalancheSignTx, null)), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_3__.Route, {
  path: "/approve"
}, /*#__PURE__*/React.createElement(ApproveAction, null)), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_3__.Route, {
  path: "/permissions"
}, /*#__PURE__*/React.createElement(PermissionsPage, null)), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_3__.Route, {
  path: "/switchAccount"
}, /*#__PURE__*/React.createElement(SwitchAccount, null)), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_3__.Route, {
  path: "/renameAccount"
}, /*#__PURE__*/React.createElement(RenameAccount, null)), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_3__.Route, {
  path: "/deleteAccounts"
}, /*#__PURE__*/React.createElement(DeleteAccounts, null)), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_3__.Route, {
  path: "/getAddressesInRange"
}, /*#__PURE__*/React.createElement(GetAddressesInRange, null)), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_3__.Route, {
  path: "/networks/add-popup"
}, /*#__PURE__*/React.createElement(AddCustomNetworkPopup, null)), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_3__.Route, {
  path: "/network/switch"
}, /*#__PURE__*/React.createElement(SwitchActiveNetwork, null)), /*#__PURE__*/React.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_3__.Route, {
  path: "/renameWallet"
}, /*#__PURE__*/React.createElement(RenameWallet, null))));

/***/ }),

/***/ "./src/popup/OfflineContent.tsx":
/*!**************************************!*\
  !*** ./src/popup/OfflineContent.tsx ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AnimatedLogo": () => (/* binding */ AnimatedLogo),
/* harmony export */   "OfflineContent": () => (/* binding */ OfflineContent)
/* harmony export */ });
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@mui/material/styles/styled.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _src_components_icons_BrandName__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @src/components/icons/BrandName */ "./src/components/icons/BrandName.tsx");
/* harmony import */ var _src_hooks_useAppDimensions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/hooks/useAppDimensions */ "./src/hooks/useAppDimensions.ts");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");



const AnimatedLogo = (0,_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__["default"])('div')`
  @keyframes fade {
    0% {
      opacity: 1;
    }
    16% {
      opacity: 0.5;
    }
    33% {
      opacity: 1;
    }
  }
  animation: 4s ease-in infinite fade;
`;
function OfflineContent({
  message
}) {
  const dimensions = (0,_src_hooks_useAppDimensions__WEBPACK_IMPORTED_MODULE_1__.useAppDimensions)();
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Stack, {
    sx: {
      width: dimensions.width,
      height: dimensions.height,
      p: 2,
      flexGrow: 1,
      alignItems: 'center',
      justifyContent: 'center'
    }
  }, /*#__PURE__*/React.createElement(AnimatedLogo, null, /*#__PURE__*/React.createElement(_src_components_icons_BrandName__WEBPACK_IMPORTED_MODULE_0__.BrandName, {
    height: 42
  })), message && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Typography, {
    variant: "body1",
    sx: {
      textAlign: 'center',
      my: 4
    }
  }, message));
}

/***/ }),

/***/ "./src/popup/popup.tsx":
/*!*****************************!*\
  !*** ./src/popup/popup.tsx ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Popup": () => (/* binding */ Popup)
/* harmony export */ });
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _src_components_common_header_Header__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @src/components/common/header/Header */ "./src/components/common/header/Header.tsx");
/* harmony import */ var _src_components_common_WalletLoading__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/components/common/WalletLoading */ "./src/components/common/WalletLoading.tsx");
/* harmony import */ var _src_contexts_AccountsProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/contexts/AccountsProvider */ "./src/contexts/AccountsProvider.tsx");
/* harmony import */ var _src_contexts_BalancesProvider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @src/contexts/BalancesProvider */ "./src/contexts/BalancesProvider.tsx");
/* harmony import */ var _src_contexts_BridgeProvider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @src/contexts/BridgeProvider */ "./src/contexts/BridgeProvider.tsx");
/* harmony import */ var _src_contexts_ContactsProvider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @src/contexts/ContactsProvider */ "./src/contexts/ContactsProvider.tsx");
/* harmony import */ var _src_contexts_FeatureFlagsProvider__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @src/contexts/FeatureFlagsProvider */ "./src/contexts/FeatureFlagsProvider.tsx");
/* harmony import */ var _src_contexts_LedgerProvider__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @src/contexts/LedgerProvider */ "./src/contexts/LedgerProvider.tsx");
/* harmony import */ var _src_contexts_NetworkProvider__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @src/contexts/NetworkProvider */ "./src/contexts/NetworkProvider.tsx");
/* harmony import */ var _src_contexts_OnboardingProvider__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @src/contexts/OnboardingProvider */ "./src/contexts/OnboardingProvider.tsx");
/* harmony import */ var _src_contexts_PermissionsProvider__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @src/contexts/PermissionsProvider */ "./src/contexts/PermissionsProvider.tsx");
/* harmony import */ var _src_contexts_SwapProvider_SwapProvider__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @src/contexts/SwapProvider/SwapProvider */ "./src/contexts/SwapProvider/SwapProvider.tsx");
/* harmony import */ var _src_contexts_WalletProvider__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @src/contexts/WalletProvider */ "./src/contexts/WalletProvider.tsx");
/* harmony import */ var _src_hooks_useAppDimensions__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @src/hooks/useAppDimensions */ "./src/hooks/useAppDimensions.ts");
/* harmony import */ var _src_hooks_useIsSpecificContextContainer__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @src/hooks/useIsSpecificContextContainer */ "./src/hooks/useIsSpecificContextContainer.ts");
/* harmony import */ var _src_hooks_useOnline__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @src/hooks/useOnline */ "./src/hooks/useOnline.ts");
/* harmony import */ var _src_hooks_usePageHistory__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @src/hooks/usePageHistory */ "./src/hooks/usePageHistory.ts");
/* harmony import */ var _src_contexts_DialogContextProvider__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @src/contexts/DialogContextProvider */ "./src/contexts/DialogContextProvider.tsx");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react_router_dom__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! react-router-dom */ "./node_modules/react-router/esm/react-router.js");
/* harmony import */ var _OfflineContent__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./OfflineContent */ "./src/popup/OfflineContent.tsx");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var _src_pages_Ledger_LedgerIncorrectDevice__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @src/pages/Ledger/LedgerIncorrectDevice */ "./src/pages/Ledger/LedgerIncorrectDevice.tsx");
/* harmony import */ var _src_pages_Ledger_LedgerRegisterBtcWalletPolicy__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @src/pages/Ledger/LedgerRegisterBtcWalletPolicy */ "./src/pages/Ledger/LedgerRegisterBtcWalletPolicy.tsx");
/* harmony import */ var _src_contexts_KeystoneProvider__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @src/contexts/KeystoneProvider */ "./src/contexts/KeystoneProvider.tsx");
/* harmony import */ var _src_contexts_CurrenciesProvider__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @src/contexts/CurrenciesProvider */ "./src/contexts/CurrenciesProvider.tsx");
/* harmony import */ var _src_contexts_DefiProvider__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @src/contexts/DefiProvider */ "./src/contexts/DefiProvider.tsx");
/* harmony import */ var _src_contexts_WalletConnectContextProvider_WalletConnectContextProvider__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @src/contexts/WalletConnectContextProvider/WalletConnectContextProvider */ "./src/contexts/WalletConnectContextProvider/WalletConnectContextProvider.tsx");
/* harmony import */ var _src_background_services_featureFlags_models__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @src/background/services/featureFlags/models */ "./src/background/services/featureFlags/models.ts");
/* harmony import */ var _src_components_common_TestnetBanner__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! @src/components/common/TestnetBanner */ "./src/components/common/TestnetBanner.tsx");
/* harmony import */ var _src_components_common_seedless_SeedlessAuthPrompt__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! @src/components/common/seedless/SeedlessAuthPrompt */ "./src/components/common/seedless/SeedlessAuthPrompt.tsx");
/* harmony import */ var _src_contexts_UnifiedBridgeProvider__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! @src/contexts/UnifiedBridgeProvider */ "./src/contexts/UnifiedBridgeProvider.tsx");
/* harmony import */ var _src_components_dialogs_AnalyticsOptInDialog__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! @src/components/dialogs/AnalyticsOptInDialog */ "./src/components/dialogs/AnalyticsOptInDialog.tsx");
/* harmony import */ var _src_contexts_SeedlessMfaManagementProvider__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! @src/contexts/SeedlessMfaManagementProvider */ "./src/contexts/SeedlessMfaManagementProvider.tsx");
/* harmony import */ var _src_contexts_ApprovalsProvider__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! @src/contexts/ApprovalsProvider */ "./src/contexts/ApprovalsProvider.tsx");
/* harmony import */ var _ApprovalRoutes__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./ApprovalRoutes */ "./src/popup/ApprovalRoutes.tsx");
/* harmony import */ var _AppRoutes__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./AppRoutes */ "./src/popup/AppRoutes.tsx");
/* harmony import */ var _src_components_common_InAppApprovalOverlay__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! @src/components/common/InAppApprovalOverlay */ "./src/components/common/InAppApprovalOverlay.tsx");
/* harmony import */ var _src_contexts_NetworkFeeProvider__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! @src/contexts/NetworkFeeProvider */ "./src/contexts/NetworkFeeProvider.tsx");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");








































const pagesWithoutHeader = ['/tokens/manage', '/bridge/confirm', '/bridge/transaction-status', '/bridge/transaction-details', '/send/confirm', '/collectible', '/collectible/send/confirm', '/accounts', '/import-private-key', '/import-with-walletconnect', '/defi', '/fireblocks', '/export-private-key'];
function Popup() {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_37__.useTranslation)();
  const dimensions = (0,_src_hooks_useAppDimensions__WEBPACK_IMPORTED_MODULE_13__.useAppDimensions)();
  const isConfirm = (0,_src_hooks_useIsSpecificContextContainer__WEBPACK_IMPORTED_MODULE_14__.useIsSpecificContextContainer)(_src_hooks_useIsSpecificContextContainer__WEBPACK_IMPORTED_MODULE_14__.ContextContainer.CONFIRM);
  const isMiniMode = (0,_src_hooks_useIsSpecificContextContainer__WEBPACK_IMPORTED_MODULE_14__.useIsSpecificContextContainer)(_src_hooks_useIsSpecificContextContainer__WEBPACK_IMPORTED_MODULE_14__.ContextContainer.POPUP);
  const isFullscreen = (0,_src_hooks_useIsSpecificContextContainer__WEBPACK_IMPORTED_MODULE_14__.useIsSpecificContextContainer)(_src_hooks_useIsSpecificContextContainer__WEBPACK_IMPORTED_MODULE_14__.ContextContainer.FULLSCREEN);
  const history = (0,react_router_dom__WEBPACK_IMPORTED_MODULE_38__.useHistory)();
  const location = (0,react_router_dom__WEBPACK_IMPORTED_MODULE_38__.useLocation)();
  const {
    setNavigationHistory,
    getNavigationHistoryState
  } = (0,_src_hooks_usePageHistory__WEBPACK_IMPORTED_MODULE_16__.usePageHistory)();
  const navigationHistoryState = getNavigationHistoryState();
  const {
    isOnline
  } = (0,_src_hooks_useOnline__WEBPACK_IMPORTED_MODULE_15__.useOnline)();
  const {
    featureFlags
  } = (0,_src_contexts_FeatureFlagsProvider__WEBPACK_IMPORTED_MODULE_6__.useFeatureFlagContext)();
  const appWidth = (0,react__WEBPACK_IMPORTED_MODULE_18__.useMemo)(() => isMiniMode || isConfirm || isFullscreen ? '100%' : '1280px', [isMiniMode, isConfirm, isFullscreen]);
  (0,react__WEBPACK_IMPORTED_MODULE_18__.useEffect)(() => {
    if (!isMiniMode) {
      return;
    }
    const navigationHistory = navigationHistoryState;
    if (Object.keys(navigationHistory).length !== 0) {
      history.push(navigationHistory.location); // go to last visited route
    }

    const unlisten = history.listen(() => {
      // Set history object in localStorage on each route change
      setNavigationHistory(history);
    });
    return unlisten;
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [isMiniMode, navigationHistoryState]);
  if (!isOnline) {
    return /*#__PURE__*/React.createElement(_OfflineContent__WEBPACK_IMPORTED_MODULE_19__.OfflineContent, {
      message: t("Ooops... It seems you don't have internet connection")
    });
  }
  if (!featureFlags[_src_background_services_featureFlags_models__WEBPACK_IMPORTED_MODULE_26__.FeatureGates.EVERYTHING]) {
    return /*#__PURE__*/React.createElement(_OfflineContent__WEBPACK_IMPORTED_MODULE_19__.OfflineContent, {
      message: t('Sorry, Core is currently unavailable. Please check back later. Thanks.')
    });
  }
  const displayHeader = isMiniMode && !pagesWithoutHeader.some(path => location.pathname.startsWith(path));
  return /*#__PURE__*/React.createElement(_src_contexts_DialogContextProvider__WEBPACK_IMPORTED_MODULE_17__.DialogContextProvider, null, /*#__PURE__*/React.createElement(_src_contexts_LedgerProvider__WEBPACK_IMPORTED_MODULE_7__.LedgerContextProvider, null, /*#__PURE__*/React.createElement(_src_contexts_KeystoneProvider__WEBPACK_IMPORTED_MODULE_22__.KeystoneContextProvider, null, /*#__PURE__*/React.createElement(_src_contexts_OnboardingProvider__WEBPACK_IMPORTED_MODULE_9__.OnboardingContextProvider, null, /*#__PURE__*/React.createElement(_src_contexts_AccountsProvider__WEBPACK_IMPORTED_MODULE_2__.AccountsContextProvider, null, /*#__PURE__*/React.createElement(_src_contexts_NetworkProvider__WEBPACK_IMPORTED_MODULE_8__.NetworkContextProvider, null, /*#__PURE__*/React.createElement(_src_contexts_NetworkFeeProvider__WEBPACK_IMPORTED_MODULE_36__.NetworkFeeContextProvider, null, /*#__PURE__*/React.createElement(_src_contexts_WalletProvider__WEBPACK_IMPORTED_MODULE_12__.WalletContextProvider, null, /*#__PURE__*/React.createElement(_src_contexts_CurrenciesProvider__WEBPACK_IMPORTED_MODULE_23__.CurrenciesContextProvider, null, /*#__PURE__*/React.createElement(_src_contexts_BalancesProvider__WEBPACK_IMPORTED_MODULE_3__.BalancesProvider, null, /*#__PURE__*/React.createElement(_src_contexts_DefiProvider__WEBPACK_IMPORTED_MODULE_24__.DefiContextProvider, null, /*#__PURE__*/React.createElement(_src_contexts_SwapProvider_SwapProvider__WEBPACK_IMPORTED_MODULE_11__.SwapContextProvider, null, /*#__PURE__*/React.createElement(_src_contexts_UnifiedBridgeProvider__WEBPACK_IMPORTED_MODULE_29__.UnifiedBridgeProvider, null, /*#__PURE__*/React.createElement(_src_contexts_BridgeProvider__WEBPACK_IMPORTED_MODULE_4__.BridgeProvider, null, /*#__PURE__*/React.createElement(_src_contexts_ContactsProvider__WEBPACK_IMPORTED_MODULE_5__.ContactsContextProvider, null, /*#__PURE__*/React.createElement(_src_contexts_PermissionsProvider__WEBPACK_IMPORTED_MODULE_10__.PermissionContextProvider, null, /*#__PURE__*/React.createElement(_src_contexts_WalletConnectContextProvider_WalletConnectContextProvider__WEBPACK_IMPORTED_MODULE_25__.WalletConnectContextProvider, null, /*#__PURE__*/React.createElement(_src_contexts_SeedlessMfaManagementProvider__WEBPACK_IMPORTED_MODULE_31__.SeedlessMfaManagementProvider, null, /*#__PURE__*/React.createElement(_src_components_common_WalletLoading__WEBPACK_IMPORTED_MODULE_1__.WalletLoading, null, /*#__PURE__*/React.createElement(_src_contexts_ApprovalsProvider__WEBPACK_IMPORTED_MODULE_32__.ApprovalsContextProvider, null, /*#__PURE__*/React.createElement(_src_components_common_TestnetBanner__WEBPACK_IMPORTED_MODULE_27__.TestnetBanner, null), /*#__PURE__*/React.createElement(_src_components_dialogs_AnalyticsOptInDialog__WEBPACK_IMPORTED_MODULE_30__.AnalyticsOptInDialog, null), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_39__.Stack, {
    sx: {
      flexGrow: 1,
      width: dimensions.width,
      maxHeight: 'auto',
      overflow: 'auto',
      alignItems: 'center',
      margin: 'auto'
    }
  }, displayHeader && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_39__.Stack, {
    sx: {
      width: 1
    }
  }, /*#__PURE__*/React.createElement(_src_components_common_header_Header__WEBPACK_IMPORTED_MODULE_0__.Header, null)), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_39__.Stack, {
    direction: "row",
    sx: {
      flexGrow: 1,
      justifyContent: 'center',
      py: isMiniMode ? 0 : 2,
      maxWidth: '100%',
      maxHeight: '100%',
      width: appWidth
    }
  }, isConfirm ? /*#__PURE__*/React.createElement(_ApprovalRoutes__WEBPACK_IMPORTED_MODULE_33__.ApprovalRoutes, null) : /*#__PURE__*/React.createElement(_AppRoutes__WEBPACK_IMPORTED_MODULE_34__.AppRoutes, null), /*#__PURE__*/React.createElement(_src_pages_Ledger_LedgerIncorrectDevice__WEBPACK_IMPORTED_MODULE_20__["default"], null), /*#__PURE__*/React.createElement(_src_pages_Ledger_LedgerRegisterBtcWalletPolicy__WEBPACK_IMPORTED_MODULE_21__["default"], null), /*#__PURE__*/React.createElement(_src_components_common_seedless_SeedlessAuthPrompt__WEBPACK_IMPORTED_MODULE_28__.SeedlessAuthPrompt, null), isMiniMode && /*#__PURE__*/React.createElement(_src_components_common_InAppApprovalOverlay__WEBPACK_IMPORTED_MODULE_35__.InAppApprovalOverlay, null)))))))))))))))))))))));
}

/***/ }),

/***/ "./src/utils/address.ts":
/*!******************************!*\
  !*** ./src/utils/address.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getAddressByVMType": () => (/* binding */ getAddressByVMType),
/* harmony export */   "mapAddressesToVMs": () => (/* binding */ mapAddressesToVMs),
/* harmony export */   "mapVMAddresses": () => (/* binding */ mapVMAddresses)
/* harmony export */ });
/* harmony import */ var _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @avalabs/vm-module-types */ "./node_modules/@avalabs/vm-module-types/dist/index.js");
/* harmony import */ var _src_utils_object__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/utils/object */ "./src/utils/object.ts");


const mapVMAddresses = addresses => (0,_src_utils_object__WEBPACK_IMPORTED_MODULE_1__.omitUndefined)({
  addressC: addresses[_avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.NetworkVMType.EVM],
  addressBTC: addresses[_avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.NetworkVMType.BITCOIN] || undefined,
  addressAVM: addresses[_avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.NetworkVMType.AVM] || undefined,
  addressPVM: addresses[_avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.NetworkVMType.PVM] || undefined,
  addressCoreEth: addresses[_avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.NetworkVMType.CoreEth] || undefined,
  addressHVM: addresses[_avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.NetworkVMType.HVM] || undefined,
  addressSVM: addresses[_avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.NetworkVMType.SVM] || undefined
});
const mapAddressesToVMs = account => (0,_src_utils_object__WEBPACK_IMPORTED_MODULE_1__.omitUndefined)({
  [_avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.NetworkVMType.EVM]: account.addressC,
  [_avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.NetworkVMType.BITCOIN]: account.addressBTC,
  [_avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.NetworkVMType.AVM]: account.addressAVM,
  [_avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.NetworkVMType.PVM]: account.addressPVM,
  [_avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.NetworkVMType.CoreEth]: account.addressCoreEth,
  [_avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.NetworkVMType.HVM]: account.addressHVM,
  [_avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.NetworkVMType.SVM]: account.addressSVM
});
const getAddressByVMType = (account, vmType) => mapAddressesToVMs(account)[vmType];

/***/ }),

/***/ "./src/utils/assertions.ts":
/*!*********************************!*\
  !*** ./src/utils/assertions.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "assert": () => (/* binding */ assert),
/* harmony export */   "assertNonEmptyString": () => (/* binding */ assertNonEmptyString),
/* harmony export */   "assertPresent": () => (/* binding */ assertPresent),
/* harmony export */   "assertPropDefined": () => (/* binding */ assertPropDefined),
/* harmony export */   "assertTrue": () => (/* binding */ assertTrue)
/* harmony export */ });
/* harmony import */ var eth_rpc_errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! eth-rpc-errors */ "./node_modules/eth-rpc-errors/dist/index.js");
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errors */ "./src/utils/errors/index.ts");
/* provided dependency */ var Buffer = __webpack_require__(/*! ./node_modules/node-polyfill-webpack-plugin/node_modules/buffer/index.js */ "./node_modules/node-polyfill-webpack-plugin/node_modules/buffer/index.js")["Buffer"];


function assertPresent(value, reason, context) {
  const isNullish = typeof value === 'undefined' || value === null;
  const isEmptyBuffer = Buffer.isBuffer(value) && value.length === 0;
  if (isNullish || isEmptyBuffer || value === '') {
    throw eth_rpc_errors__WEBPACK_IMPORTED_MODULE_0__.ethErrors.rpc.internal({
      data: {
        reason: reason ?? _errors__WEBPACK_IMPORTED_MODULE_1__.CommonError.Unknown,
        context
      }
    });
  }
}
function assertPropDefined(obj, prop, reason) {
  assertPresent(obj[prop], reason);
}
function assertNonEmptyString(value) {
  if (typeof value !== 'string' || value === '') {
    throw eth_rpc_errors__WEBPACK_IMPORTED_MODULE_0__.ethErrors.rpc.internal({
      data: {
        reason: 'Expected non-empty string',
        value
      }
    });
  }
}
function assertTrue(condition) {
  if (condition !== true) {
    throw eth_rpc_errors__WEBPACK_IMPORTED_MODULE_0__.ethErrors.rpc.internal({
      data: {
        reason: 'Expected condition to evaluate as true',
        evaluationResult: condition
      }
    });
  }
}
function assert(value, reason) {
  if (!value) {
    throw eth_rpc_errors__WEBPACK_IMPORTED_MODULE_0__.ethErrors.rpc.internal({
      data: {
        reason: reason ?? _errors__WEBPACK_IMPORTED_MODULE_1__.CommonError.Unknown
      }
    });
  }
}

/***/ }),

/***/ "./src/utils/caipConversion.ts":
/*!*************************************!*\
  !*** ./src/utils/caipConversion.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AvaxCaipId": () => (/* binding */ AvaxCaipId),
/* harmony export */   "BitcoinCaipId": () => (/* binding */ BitcoinCaipId),
/* harmony export */   "CaipNamespace": () => (/* binding */ CaipNamespace),
/* harmony export */   "SolanaCaipId": () => (/* binding */ SolanaCaipId),
/* harmony export */   "caipToChainId": () => (/* binding */ caipToChainId),
/* harmony export */   "chainIdToCaip": () => (/* binding */ chainIdToCaip),
/* harmony export */   "decorateWithCaipId": () => (/* binding */ decorateWithCaipId),
/* harmony export */   "getNameSpaceFromScope": () => (/* binding */ getNameSpaceFromScope),
/* harmony export */   "getNetworkCaipId": () => (/* binding */ getNetworkCaipId),
/* harmony export */   "isBitcoinCaipId": () => (/* binding */ isBitcoinCaipId)
/* harmony export */ });
/* harmony import */ var _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @avalabs/core-chains-sdk */ "./node_modules/@avalabs/core-chains-sdk/esm/models.js");
/* harmony import */ var _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @avalabs/core-chains-sdk */ "./node_modules/@avalabs/core-chains-sdk/esm/bitcoin.chain.js");
/* harmony import */ var _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @avalabs/core-chains-sdk */ "./node_modules/@avalabs/core-chains-sdk/esm/avalanche.chain.js");
/* harmony import */ var _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @avalabs/vm-module-types */ "./node_modules/@avalabs/vm-module-types/dist/index.js");


let CaipNamespace = /*#__PURE__*/function (CaipNamespace) {
  CaipNamespace["AVAX"] = "avax";
  CaipNamespace["BIP122"] = "bip122";
  CaipNamespace["EIP155"] = "eip155";
  CaipNamespace["HVM"] = "hvm";
  CaipNamespace["SOLANA"] = "solana";
  return CaipNamespace;
}({});
const BitcoinCaipId = {
  [_avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_1__.ChainId.BITCOIN]: _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_2__.BitcoinCaip2ChainId.MAINNET,
  [_avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_1__.ChainId.BITCOIN_TESTNET]: _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_2__.BitcoinCaip2ChainId.TESTNET
};
const SolanaCaipId = {
  [_avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_1__.ChainId.SOLANA_MAINNET_ID]: `${CaipNamespace.SOLANA}:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp`,
  [_avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_1__.ChainId.SOLANA_DEVNET_ID]: `${CaipNamespace.SOLANA}:EtWTRABZaYq6iMfeYKouRu166VU2xqa1`,
  [_avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_1__.ChainId.SOLANA_TESTNET_ID]: `${CaipNamespace.SOLANA}:4uhcVJyU9pJkvQyS88uRDiswHXSCkY3z`
};
const AvaxCaipId = {
  [_avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_1__.ChainId.AVALANCHE_P]: _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_3__.AvalancheCaip2ChainId.P,
  [_avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_1__.ChainId.AVALANCHE_X]: _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_3__.AvalancheCaip2ChainId.X,
  [_avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_1__.ChainId.AVALANCHE_TEST_P]: _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_3__.AvalancheCaip2ChainId.P_TESTNET,
  [_avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_1__.ChainId.AVALANCHE_TEST_X]: _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_3__.AvalancheCaip2ChainId.X_TESTNET
};
const getNetworkCaipId = network => {
  if (network.caipId) {
    return network.caipId;
  } else if (network.caip2Id) {
    return network.caip2Id;
  }
  if (network.vmName === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.NetworkVMType.EVM) {
    return `eip155:${network.chainId}`;
  }
  if (network.vmName === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.NetworkVMType.BITCOIN) {
    return BitcoinCaipId[network.chainId];
  }
  const isXChain = network.vmName === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.NetworkVMType.AVM;
  const isPChain = network.vmName === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.NetworkVMType.PVM;
  if (isXChain || isPChain) {
    return AvaxCaipId[network.chainId];
  }
  if (network.vmName === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.NetworkVMType.HVM) {
    return `hvm:${network.chainId}`;
  }
  throw new Error('Unsupported VM type: ' + network.vmName);
};
const caipToChainId = identifier => {
  const [namespace, reference] = identifier.split(':');
  if (!namespace) {
    throw new Error('No namespace found in identifier: ' + identifier);
  }
  if (!reference) {
    throw new Error('No reference found in identifier: ' + identifier);
  }
  if (namespace === CaipNamespace.EIP155) {
    return Number(reference);
  }
  if (reference.length === 32 && namespace === CaipNamespace.HVM) {
    return parseInt(reference.slice(0, 16), 16);
  }
  if (namespace === CaipNamespace.SOLANA) {
    const chainId = Object.keys(SolanaCaipId).find(chainIdLookup => SolanaCaipId[chainIdLookup] === identifier);
    if (!chainId) {
      throw new Error('No chainId match for CAIP identifier: ' + identifier);
    }
    return Number(chainId);
  }
  if (namespace === CaipNamespace.BIP122) {
    const chainId = Object.keys(BitcoinCaipId).find(chainIdLookup => BitcoinCaipId[chainIdLookup] === identifier);
    if (!chainId) {
      throw new Error('No chainId match for CAIP identifier: ' + identifier);
    }
    return Number(chainId);
  }
  if (namespace === CaipNamespace.AVAX) {
    const chainId = Object.keys(AvaxCaipId).find(chainIdLookup => AvaxCaipId[chainIdLookup] === identifier);
    if (!chainId) {
      throw new Error('No chainId match for CAIP identifier: ' + identifier);
    }
    return Number(chainId);
  }
  throw new Error('No chainId match for CAIP identifier: ' + identifier);
};
const chainIdToCaip = chainId => {
  return BitcoinCaipId[chainId] ?? AvaxCaipId[chainId] ?? `eip155:${chainId}`;
};
const decorateWithCaipId = network => ({
  ...network,
  caipId: getNetworkCaipId(network)
});
const getNameSpaceFromScope = scope => {
  if (!scope) {
    return null;
  }
  const [namespace] = scope.split(':');
  return namespace;
};
const isBitcoinCaipId = caipId => Object.values(BitcoinCaipId).includes(caipId);

/***/ }),

/***/ "./src/utils/calculateGasAndFees.ts":
/*!******************************************!*\
  !*** ./src/utils/calculateGasAndFees.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "calculateGasAndFees": () => (/* binding */ calculateGasAndFees)
/* harmony export */ });
/* harmony import */ var _avalabs_core_utils_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @avalabs/core-utils-sdk */ "./node_modules/@avalabs/core-utils-sdk/esm/tokenUnit.js");

function calculateGasAndFees({
  gasPrice,
  maxFeePerGas,
  maxPriorityFeePerGas,
  tokenPrice,
  tokenDecimals = 18,
  gasLimit
}) {
  const pricePerGas = maxFeePerGas ?? gasPrice;
  if (pricePerGas == null) {
    throw new Error('Please provide gasPrice or maxFeePerGas parameters');
  }
  const bnFee = gasLimit ? pricePerGas * BigInt(gasLimit) : pricePerGas;
  const bnTip = gasLimit && maxPriorityFeePerGas ? maxPriorityFeePerGas * BigInt(gasLimit) : maxPriorityFeePerGas;
  const fee = new _avalabs_core_utils_sdk__WEBPACK_IMPORTED_MODULE_0__.TokenUnit(bnFee, tokenDecimals, '');
  const tip = bnTip ? new _avalabs_core_utils_sdk__WEBPACK_IMPORTED_MODULE_0__.TokenUnit(bnTip, tokenDecimals, '') : null;
  const price = tokenPrice ? new _avalabs_core_utils_sdk__WEBPACK_IMPORTED_MODULE_0__.TokenUnit(tokenPrice, 0, '') : null;
  return {
    maxFeePerGas: maxFeePerGas,
    gasLimit: gasLimit || 0,
    feeUnit: fee,
    fee: fee.toDisplay(),
    bnFee,
    feeUSD: price ? price.mul(fee).toDisplay({
      fixedDp: 6,
      asNumber: true
    }) : null,
    tipUSD: price && tip ? price.mul(tip).toDisplay({
      fixedDp: 2,
      asNumber: true
    }) : null
  };
}

/***/ }),

/***/ "./src/utils/calculateTotalBalance.ts":
/*!********************************************!*\
  !*** ./src/utils/calculateTotalBalance.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "calculateTotalBalance": () => (/* binding */ calculateTotalBalance)
/* harmony export */ });
/* harmony import */ var _src_utils_getAddressForChain__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @src/utils/getAddressForChain */ "./src/utils/getAddressForChain.ts");
/* harmony import */ var _hasAccountBalances__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./hasAccountBalances */ "./src/utils/hasAccountBalances.ts");


function calculateTotalBalance(account, networks, balances) {
  if (!account || !balances || !networks?.length) {
    return {
      sum: null,
      priceChange: {
        value: 0,
        percentage: []
      }
    };
  }
  const networkDict = networks.reduce((dict, network) => ({
    ...dict,
    [network.chainId]: network
  }), {});
  const chainIdsToSum = new Set(Object.keys(networkDict).map(Number));
  const hasBalances = (0,_hasAccountBalances__WEBPACK_IMPORTED_MODULE_1__.hasAccountBalances)(balances, account, Array.from(chainIdsToSum));
  if (!hasBalances) {
    return {
      sum: null,
      priceChange: {
        value: 0,
        percentage: []
      }
    };
  }
  const sum = Array.from(chainIdsToSum).reduce((total, chainId) => {
    const address = (0,_src_utils_getAddressForChain__WEBPACK_IMPORTED_MODULE_0__.getAddressForChain)(networkDict[chainId], account);
    if (!address) {
      return total;
    }
    const sumValues = Object.values(balances?.[chainId]?.[address] ?? {})?.reduce((sumTotal, token) => {
      const percentage = token.priceChanges?.percentage ? [...sumTotal.priceChange.percentage, token.priceChanges?.percentage] : [...sumTotal.priceChange.percentage];
      return {
        sum: sumTotal.sum + (token.balanceInCurrency ?? 0),
        priceChange: {
          value: sumTotal.priceChange.value + (token.priceChanges?.value ?? 0),
          percentage
        }
      };
    }, {
      sum: 0,
      priceChange: {
        value: 0,
        percentage: []
      }
    }) || {
      sum: 0,
      priceChange: {
        value: 0,
        percentage: []
      }
    };
    return {
      ...total,
      sum: total.sum + sumValues.sum,
      priceChange: {
        value: sumValues.priceChange.value + total.priceChange.value,
        percentage: [...sumValues.priceChange.percentage, ...total.priceChange.percentage]
      }
    };
  }, {
    sum: 0,
    priceChange: {
      value: 0,
      percentage: []
    }
  });
  return sum;
}

/***/ }),

/***/ "./src/utils/encoding.ts":
/*!*******************************!*\
  !*** ./src/utils/encoding.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "base64ToBase64Url": () => (/* binding */ base64ToBase64Url),
/* harmony export */   "base64UrlToBuffer": () => (/* binding */ base64UrlToBuffer),
/* harmony export */   "bufferToBase64Url": () => (/* binding */ bufferToBase64Url)
/* harmony export */ });
/* provided dependency */ var Buffer = __webpack_require__(/*! ./node_modules/node-polyfill-webpack-plugin/node_modules/buffer/index.js */ "./node_modules/node-polyfill-webpack-plugin/node_modules/buffer/index.js")["Buffer"];
const base64ToBase64Url = b64 => {
  return b64.replace(/\+/g, '-').replace(/\//g, '_').replace(/[=]*$/g, '');
};
const base64UrlToBuffer = b64url => {
  const b64 = b64url.replace(/-/g, '+').replace(/_/g, '/').replace(/[=]*$/g, '');
  return Buffer.from(b64, 'base64');
};
function bufferToBase64Url(buffer) {
  // buffer to binary string
  const byteView = new Uint8Array(buffer);
  let str = '';
  for (const charCode of byteView) {
    str += String.fromCharCode(charCode);
  }

  // binary string to base64
  const base64String = btoa(str); //Buffer.from(str).toString('base64');

  // base64 to base64url
  return base64String.replace(/\+/g, '-').replace(/\//g, '_').replace(/[=]/g, '');
}

/***/ }),

/***/ "./src/utils/errors/errorCodes.ts":
/*!****************************************!*\
  !*** ./src/utils/errors/errorCodes.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AccountError": () => (/* binding */ AccountError),
/* harmony export */   "CommonError": () => (/* binding */ CommonError),
/* harmony export */   "LedgerError": () => (/* binding */ LedgerError),
/* harmony export */   "RpcErrorCode": () => (/* binding */ RpcErrorCode),
/* harmony export */   "SecretsError": () => (/* binding */ SecretsError)
/* harmony export */ });
let CommonError = /*#__PURE__*/function (CommonError) {
  CommonError["Unknown"] = "unknown";
  CommonError["UserRejected"] = "user-rejected";
  CommonError["NetworkError"] = "network-error";
  CommonError["NoActiveAccount"] = "no-active-account";
  CommonError["NoActiveNetwork"] = "no-active-network";
  CommonError["UnknownNetwork"] = "unknown-network";
  CommonError["UnknownNetworkFee"] = "unknown-network-fee";
  CommonError["RequestTimeout"] = "request-timeout";
  CommonError["MigrationFailed"] = "migration-failed";
  CommonError["ModuleManagerNotSet"] = "module-manager-not-set";
  CommonError["UnableToSign"] = "unable-to-sign";
  CommonError["UnableToEstimateGas"] = "unable-to-estimate-gas";
  CommonError["UnsupportedTokenType"] = "unsupported-token-type";
  return CommonError;
}({});
let LedgerError = /*#__PURE__*/function (LedgerError) {
  LedgerError["TransportNotFound"] = "ledger-transport-not-found";
  LedgerError["NoPublicKeyReturned"] = "ledger-no-public-key-returned";
  return LedgerError;
}({});
let SecretsError = /*#__PURE__*/function (SecretsError) {
  SecretsError["SecretsNotFound"] = "secrets-not-found";
  SecretsError["UnsupportedSecretType"] = "unsupported-secret-type";
  SecretsError["MissingExtendedPublicKey"] = "missing-ext-pubkey";
  SecretsError["WalletAlreadyExists"] = "wallet-already-exists";
  SecretsError["PublicKeyNotFound"] = "public-key-not-found";
  SecretsError["NoAccountIndex"] = "no-account-index";
  SecretsError["DerivationPathMissing"] = "derivation-path-missing";
  SecretsError["UnknownDerivationPathFormat"] = "unknown-derivation-path-format";
  SecretsError["DerivationPathTooShort"] = "derivation-path-too-short";
  SecretsError["UnsupportedCurve"] = "unsupported-curve";
  return SecretsError;
}({});
let AccountError = /*#__PURE__*/function (AccountError) {
  AccountError["EVMAddressNotFound"] = "evm-address-not-found";
  AccountError["BTCAddressNotFound"] = "btc-address-not-found";
  AccountError["NoAddressesFound"] = "no-addresses-found";
  return AccountError;
}({});
let RpcErrorCode = /*#__PURE__*/function (RpcErrorCode) {
  RpcErrorCode["InsufficientFunds"] = "INSUFFICIENT_FUNDS";
  return RpcErrorCode;
}({});

/***/ }),

/***/ "./src/utils/errors/errorHelpers.ts":
/*!******************************************!*\
  !*** ./src/utils/errors/errorHelpers.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isUserRejectionError": () => (/* binding */ isUserRejectionError),
/* harmony export */   "isWrappedError": () => (/* binding */ isWrappedError),
/* harmony export */   "wrapError": () => (/* binding */ wrapError)
/* harmony export */ });
/* harmony import */ var eth_rpc_errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! eth-rpc-errors */ "./node_modules/eth-rpc-errors/dist/index.js");
/* harmony import */ var _errorCodes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errorCodes */ "./src/utils/errors/errorCodes.ts");


const isWrappedError = maybeErr => {
  return typeof maybeErr === 'object' && maybeErr !== null && 'code' in maybeErr && 'data' in maybeErr && typeof maybeErr.code === 'number' && typeof maybeErr.data === 'object' && maybeErr.data !== null && 'reason' in maybeErr.data;
};
function wrapError(fallbackError) {
  return err => {
    if (isWrappedError(err)) {
      throw err;
    }
    if (isWrappedError(fallbackError)) {
      throw fallbackError;
    }
    throw eth_rpc_errors__WEBPACK_IMPORTED_MODULE_0__.ethErrors.rpc.internal({
      data: {
        reason: _errorCodes__WEBPACK_IMPORTED_MODULE_1__.CommonError.Unknown,
        originalError: fallbackError ?? err
      }
    });
  };
}
const isUserRejectionError = err => {
  if (!err) {
    return false;
  }
  if (typeof err === 'object') {
    return err.message?.startsWith('User rejected') || err.code === 4001;
  }
  return false;
};

/***/ }),

/***/ "./src/utils/errors/index.ts":
/*!***********************************!*\
  !*** ./src/utils/errors/index.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AccountError": () => (/* reexport safe */ _errorCodes__WEBPACK_IMPORTED_MODULE_0__.AccountError),
/* harmony export */   "CommonError": () => (/* reexport safe */ _errorCodes__WEBPACK_IMPORTED_MODULE_0__.CommonError),
/* harmony export */   "LedgerError": () => (/* reexport safe */ _errorCodes__WEBPACK_IMPORTED_MODULE_0__.LedgerError),
/* harmony export */   "RpcErrorCode": () => (/* reexport safe */ _errorCodes__WEBPACK_IMPORTED_MODULE_0__.RpcErrorCode),
/* harmony export */   "SecretsError": () => (/* reexport safe */ _errorCodes__WEBPACK_IMPORTED_MODULE_0__.SecretsError),
/* harmony export */   "isUserRejectionError": () => (/* reexport safe */ _errorHelpers__WEBPACK_IMPORTED_MODULE_1__.isUserRejectionError),
/* harmony export */   "isWrappedError": () => (/* reexport safe */ _errorHelpers__WEBPACK_IMPORTED_MODULE_1__.isWrappedError),
/* harmony export */   "wrapError": () => (/* reexport safe */ _errorHelpers__WEBPACK_IMPORTED_MODULE_1__.wrapError)
/* harmony export */ });
/* harmony import */ var _errorCodes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errorCodes */ "./src/utils/errors/errorCodes.ts");
/* harmony import */ var _errorHelpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errorHelpers */ "./src/utils/errors/errorHelpers.ts");



/***/ }),

/***/ "./src/utils/extensionUtils.ts":
/*!*************************************!*\
  !*** ./src/utils/extensionUtils.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "openExtensionNewWindow": () => (/* binding */ openExtensionNewWindow),
/* harmony export */   "openNewTab": () => (/* binding */ openNewTab),
/* harmony export */   "openPopup": () => (/* binding */ openPopup),
/* harmony export */   "openWindow": () => (/* binding */ openWindow),
/* harmony export */   "reload": () => (/* binding */ reload)
/* harmony export */ });
/* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! webextension-polyfill */ "./node_modules/webextension-polyfill/dist/browser-polyfill.js");
/* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/dist/esm5/internal/Subject.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/dist/esm5/internal/operators/filter.js");
/* harmony import */ var _src_hooks_useIsSpecificContextContainer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/hooks/useIsSpecificContextContainer */ "./src/hooks/useIsSpecificContextContainer.ts");
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");




const NOTIFICATION_WIDTH = 375;
const NOTIFICATION_HEIGHT = 668;
const WINDOWS_SCROLLBAR_WIDTH = 26;
const contextToOpenIn = _src_hooks_useIsSpecificContextContainer__WEBPACK_IMPORTED_MODULE_1__.ContextContainer.CONFIRM;
/**
 * Fired when a window is removed (closed).
 */
const windowRemovedSignal = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Subject();

/**
 * Fired when the currently focused window changes. Returns chrome.windows.WINDOW_ID_NONE if
 * all Chrome windows have lost focus. Note: On some Linux window managers, WINDOW_ID_NONE is
 * always sent immediately preceding a switch from one Chrome window to another.
 */
const windowFocusChangedSignal = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Subject();

/**
 * Pipe the two events blow into the matching signal. This way we dont create a bunch of listeners
 */
webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().windows.onRemoved.addListener(windowId => {
  windowRemovedSignal.next(windowId);
});
webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().windows.onFocusChanged.addListener(windowId => {
  windowFocusChangedSignal.next(windowId);
});

/**
 * Since we cant get direct events from the window we have to rely on a global events that a window has been
 * closed. Each window or tab created then returns a config with a listener on the global events. The listener
 * filters by the windowId tied to the event. Once that is reached then the consumer is notified and can act accordingly
 *
 * @param info the window configs used to create the window
 * @returns
 */
function createWindowInfoAndEvents(info) {
  return {
    ...info,
    removed: windowRemovedSignal.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.filter)(windowId => windowId === info.id)),
    focusChanged: windowRemovedSignal.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.filter)(windowId => windowId === info.id))
  };
}
const checkForError = () => {
  const {
    lastError
  } = (webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().runtime);
  if (!lastError) {
    return undefined;
  }
  // if it quacks like an Error, its an Error
  if (lastError.message) {
    return lastError;
  }
  // repair incomplete error object (eg chromium v77)
  return new Error('Something went wrong.');
};
const openNewTab = async options => {
  try {
    const tab = await webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().tabs.create(options);
    const error = checkForError();
    if (error) {
      throw new Error(error.message);
    }
    return tab;
  } catch (error) {
    return error;
  }
};
const openWindow = async options => {
  try {
    const newWindow = await webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().windows.create(options);
    return createWindowInfoAndEvents(newWindow);
  } catch (error) {
    console.error(error);
    throw new Error('failed to open new window');
  }
};
const openPopup = async ({
  url,
  setSelfAsOpener = false,
  top = 0,
  right = 0
}) => {
  const platform = await webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().runtime.getPlatformInfo();
  const isPlatformWindows = platform?.os === 'win';
  let left = 0;
  try {
    const lastFocused = await webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().windows.getLastFocused();
    // Position window in top right corner of lastFocused window.
    top = lastFocused.top ? lastFocused.top + top : 0;
    left = typeof lastFocused.left === 'number' && typeof lastFocused.width === 'number' ? lastFocused.left + (lastFocused.width - NOTIFICATION_WIDTH) - right : 0;
  } catch (_) {
    // do nothing, don't know where the last window is so let's just place it to 0,0
  }
  return openWindow({
    url,
    focused: true,
    setSelfAsOpener,
    type: 'popup',
    height: !isPlatformWindows ? NOTIFICATION_HEIGHT : NOTIFICATION_HEIGHT + WINDOWS_SCROLLBAR_WIDTH,
    width: !isPlatformWindows ? NOTIFICATION_WIDTH : NOTIFICATION_WIDTH + WINDOWS_SCROLLBAR_WIDTH,
    left,
    top
  });
};
const openExtensionNewWindow = async (route, queryString) => {
  let extensionURL = webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().runtime.getURL(contextToOpenIn);
  if (queryString) {
    extensionURL += `?${queryString}`;
  }
  if (route) {
    extensionURL += `#/${route}`;
  }
  return openPopup({
    url: extensionURL
  });
};
const reload = () => {
  webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().runtime.reload();
};

/***/ }),

/***/ "./src/utils/getAddressForChain.ts":
/*!*****************************************!*\
  !*** ./src/utils/getAddressForChain.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getAddressForChain": () => (/* binding */ getAddressForChain)
/* harmony export */ });
/* harmony import */ var _address__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./address */ "./src/utils/address.ts");

function getAddressForChain(network, account) {
  if (!network || !account) {
    return '';
  }
  return (0,_address__WEBPACK_IMPORTED_MODULE_0__.mapAddressesToVMs)(account)[network.vmName] ?? '';
}

/***/ }),

/***/ "./src/utils/getAllAddressesForAccount.ts":
/*!************************************************!*\
  !*** ./src/utils/getAllAddressesForAccount.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getAllAddressesForAccount)
/* harmony export */ });
function getAllAddressesForAccount(acc) {
  return [acc.addressC, acc.addressBTC, acc.addressAVM, acc.addressPVM, acc.addressCoreEth, acc.addressHVM, acc.addressSVM].filter(addr => typeof addr === 'string');
}

/***/ }),

/***/ "./src/utils/getCoreWebUrl.ts":
/*!************************************!*\
  !*** ./src/utils/getCoreWebUrl.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getCoreWebUrl": () => (/* binding */ getCoreWebUrl)
/* harmony export */ });
const getCoreWebUrl = (address, networkId) => {
  const baseCoreWebUrl = "https://core.app";
  if (!address) {
    return baseCoreWebUrl;
  }
  if (address && networkId) {
    return `${baseCoreWebUrl}/account/${address}?network=${networkId}`;
  }
  return `${baseCoreWebUrl}/account/${address}`;
};

/***/ }),

/***/ "./src/utils/getDefaultChainIds.ts":
/*!*****************************************!*\
  !*** ./src/utils/getDefaultChainIds.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getDefaultChainIds": () => (/* binding */ getDefaultChainIds),
/* harmony export */   "getXPChainIds": () => (/* binding */ getXPChainIds)
/* harmony export */ });
/* harmony import */ var _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @avalabs/core-chains-sdk */ "./node_modules/@avalabs/core-chains-sdk/esm/models.js");

function getXPChainIds(isMainnet) {
  const xChainId = isMainnet ? _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.AVALANCHE_X : _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.AVALANCHE_TEST_X;
  const pChainId = isMainnet ? _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.AVALANCHE_P : _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.AVALANCHE_TEST_P;
  return [pChainId, xChainId];
}
function getDefaultChainIds(isMainnet) {
  return [isMainnet ? _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.AVALANCHE_MAINNET_ID : _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.AVALANCHE_TESTNET_ID, ...getXPChainIds(isMainnet)];
}

/***/ }),

/***/ "./src/utils/getEnabledBridgeTypes.ts":
/*!********************************************!*\
  !*** ./src/utils/getEnabledBridgeTypes.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getEnabledBridgeTypes": () => (/* binding */ getEnabledBridgeTypes)
/* harmony export */ });
/* harmony import */ var _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @avalabs/bridge-unified */ "./node_modules/@avalabs/bridge-unified/dist/index.js");
/* harmony import */ var _src_background_services_featureFlags_models__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/background/services/featureFlags/models */ "./src/background/services/featureFlags/models.ts");


const getEnabledBridgeTypes = featureFlags => {
  const enabled = [];
  if (featureFlags[_src_background_services_featureFlags_models__WEBPACK_IMPORTED_MODULE_1__.FeatureGates.UNIFIED_BRIDGE_CCTP]) {
    enabled.push(_avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_0__.BridgeType.CCTP);
  }
  if (featureFlags[_src_background_services_featureFlags_models__WEBPACK_IMPORTED_MODULE_1__.FeatureGates.UNIFIED_BRIDGE_ICTT]) {
    enabled.push(_avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_0__.BridgeType.ICTT_ERC20_ERC20);
  }
  if (featureFlags[_src_background_services_featureFlags_models__WEBPACK_IMPORTED_MODULE_1__.FeatureGates.UNIFIED_BRIDGE_AB_EVM]) {
    enabled.push(_avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_0__.BridgeType.AVALANCHE_EVM);
  }
  if (featureFlags[_src_background_services_featureFlags_models__WEBPACK_IMPORTED_MODULE_1__.FeatureGates.UNIFIED_BRIDGE_AB_BTC_TO_AVA]) {
    enabled.push(_avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_0__.BridgeType.AVALANCHE_BTC_AVA);
  }
  if (featureFlags[_src_background_services_featureFlags_models__WEBPACK_IMPORTED_MODULE_1__.FeatureGates.UNIFIED_BRIDGE_AB_AVA_TO_BTC]) {
    enabled.push(_avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_0__.BridgeType.AVALANCHE_AVA_BTC);
  }
  return enabled;
};

/***/ }),

/***/ "./src/utils/getExplorerAddress.ts":
/*!*****************************************!*\
  !*** ./src/utils/getExplorerAddress.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getAvalancheAddressLink": () => (/* binding */ getAvalancheAddressLink),
/* harmony export */   "getExplorerAddress": () => (/* binding */ getExplorerAddress),
/* harmony export */   "getExplorerAddressByNetwork": () => (/* binding */ getExplorerAddressByNetwork)
/* harmony export */ });
/* harmony import */ var _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @avalabs/core-bridge-sdk */ "./node_modules/@avalabs/core-bridge-sdk/esm/types/config.js");
/* harmony import */ var _src_pages_Bridge_utils_blockchainConversion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @src/pages/Bridge/utils/blockchainConversion */ "./src/pages/Bridge/utils/blockchainConversion.ts");


function getAvalancheExplorerBaseUrl(isMainnet = true) {
  return isMainnet ? 'https://subnets.avax.network/c-chain' : 'https://subnets-test.avax.network/c-chain';
}
function getAvalancheTxLink(hash, isMainnet = true) {
  const root = getAvalancheExplorerBaseUrl(isMainnet);
  return `${root}/tx/${hash}`;
}
function getEtherscanLink(txHash, isMainnet) {
  const root = isMainnet ? 'https://etherscan.io' : 'https://sepolia.etherscan.io';
  return `${root}/tx/${txHash}`;
}
function getBTCBlockchainLink(txHash, isMainnet) {
  const env = isMainnet ? 'btc' : 'btc-testnet';
  return `https://www.blockchain.com/${env}/tx/${txHash}`;
}
function getExplorerAddress(chain, txHash, isMainnet, getNetwork) {
  const normalizedChain = typeof chain === 'object' ? (0,_src_pages_Bridge_utils_blockchainConversion__WEBPACK_IMPORTED_MODULE_0__.networkToBlockchain)(chain) : chain;
  switch (normalizedChain) {
    case _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_1__.Blockchain.AVALANCHE:
      return getAvalancheTxLink(txHash, isMainnet);
    case _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_1__.Blockchain.BITCOIN:
      return getBTCBlockchainLink(txHash, isMainnet);
    case _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_1__.Blockchain.ETHEREUM:
      return getEtherscanLink(txHash, isMainnet);
  }
  if (typeof chain === 'string') {
    return '#';
  }
  const network = getNetwork(chain.chainId);
  return network ? getExplorerAddressByNetwork(network, txHash, 'tx') : '#';
}
function getAvalancheAddressLink(hash, isMainnet = true) {
  const root = getAvalancheExplorerBaseUrl(isMainnet);
  return `${root}/address/${hash}`;
}
function getExplorerAddressByNetwork(network, hash, hashType = 'tx') {
  try {
    // Try to respect any query params set on {network.explorerUrl}
    const baseUrl = new URL(network.explorerUrl);
    baseUrl.pathname += `/${hashType}/${hash}`;
    return baseUrl.toString();
  } catch {
    return `${network.explorerUrl}/${hashType}/${hash}`;
  }
}

/***/ }),

/***/ "./src/utils/hasAccountBalances.ts":
/*!*****************************************!*\
  !*** ./src/utils/hasAccountBalances.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "hasAccountBalances": () => (/* binding */ hasAccountBalances)
/* harmony export */ });
/* harmony import */ var _getAllAddressesForAccount__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getAllAddressesForAccount */ "./src/utils/getAllAddressesForAccount.ts");

function hasAccountBalances(balances, account, networkIds) {
  const accountAddresses = (0,_getAllAddressesForAccount__WEBPACK_IMPORTED_MODULE_0__["default"])(account);
  return Object.entries(balances).filter(([networkId]) => networkIds.includes(Number(networkId))).some(([, item]) => {
    if (!item) {
      return false;
    }
    const balanceAddresses = Object.keys(item);
    return balanceAddresses.some(address => {
      return accountAddresses.includes(address);
    });
  });
}

/***/ }),

/***/ "./src/utils/incrementalPromiseResolve.ts":
/*!************************************************!*\
  !*** ./src/utils/incrementalPromiseResolve.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "incrementalPromiseResolve": () => (/* binding */ incrementalPromiseResolve)
/* harmony export */ });
function incrementAndCall(prom, interval = 0) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      prom().then(res => resolve(res)).catch(err => reject(err));
    }, 500 * interval);
  });
}
/**
 * If we have api requests or fetches that need to be tried a few times in order to get results
 * we expect than we can do an incremental step off before telling the user it failed
 *
 * @param prom
 * @param errorParser
 * @param increment
 * @param maxTries
 * @returns promise result
 */
async function incrementalPromiseResolve(prom, errorParser, increment = 0, maxTries = 10) {
  try {
    const res = await incrementAndCall(prom, increment);
    if (maxTries === increment + 1) return res;
    if (errorParser(res)) {
      return incrementalPromiseResolve(prom, errorParser, increment + 1, maxTries);
    }
    return res;
  } catch (err) {
    if (maxTries === increment + 1) throw typeof err === 'string' ? new Error(err) : err;
    if (errorParser(err)) {
      return incrementalPromiseResolve(prom, errorParser, increment + 1, maxTries);
    }
    throw typeof err === 'string' ? new Error(err) : err;
  }
}

/***/ }),

/***/ "./src/utils/ipsfResolverWithFallback.ts":
/*!***********************************************!*\
  !*** ./src/utils/ipsfResolverWithFallback.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IPFS_URL": () => (/* binding */ IPFS_URL),
/* harmony export */   "ipfsResolverWithFallback": () => (/* binding */ ipfsResolverWithFallback)
/* harmony export */ });
/* harmony import */ var _avalabs_core_utils_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @avalabs/core-utils-sdk */ "./node_modules/@avalabs/core-utils-sdk/esm/ipfsResolver.js");

const IPFS_URL = 'https://ipfs.io';
function ipfsResolverWithFallback(sourceUrl, desiredGatewayPrefix = IPFS_URL) {
  if (!sourceUrl) {
    return '';
  }
  try {
    return (0,_avalabs_core_utils_sdk__WEBPACK_IMPORTED_MODULE_0__.ipfsResolver)(sourceUrl, desiredGatewayPrefix);
  } catch {
    return sourceUrl;
  }
}

/***/ }),

/***/ "./src/utils/isAddressValid.ts":
/*!*************************************!*\
  !*** ./src/utils/isAddressValid.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isValidAddress": () => (/* binding */ isValidAddress),
/* harmony export */   "isValidAvmAddress": () => (/* binding */ isValidAvmAddress),
/* harmony export */   "isValidBtcAddress": () => (/* binding */ isValidBtcAddress),
/* harmony export */   "isValidPvmAddress": () => (/* binding */ isValidPvmAddress),
/* harmony export */   "isValidXPAddress": () => (/* binding */ isValidXPAddress)
/* harmony export */ });
/* harmony import */ var _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @avalabs/core-bridge-sdk */ "./node_modules/@avalabs/core-bridge-sdk/esm/lib/btc/address.js");
/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethers */ "./node_modules/ethers/lib.esm/address/checks.js");
/* harmony import */ var _stripAddressPrefix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stripAddressPrefix */ "./src/utils/stripAddressPrefix.ts");
/* harmony import */ var _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @avalabs/avalanchejs */ "./node_modules/@avalabs/avalanchejs/dist/es/index.js");




const isValidAddress = address => {
  return !!address.length && (0,ethers__WEBPACK_IMPORTED_MODULE_1__.isAddress)(address);
};
const isValidBtcAddress = address => {
  return !!address.length && (0,_avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_2__.isBech32Address)(address);
};
const isValidPvmAddress = address => {
  return isValidXPAddressWithPrefix(address, 'P-');
};
const isValidAvmAddress = address => {
  return isValidXPAddressWithPrefix(address, 'X-');
};
function isValidXPAddressWithPrefix(value, forcedPrefix) {
  const address = forcedPrefix && !value.startsWith(forcedPrefix) ? `${forcedPrefix}${value}` : value;
  const addressBody = (0,_stripAddressPrefix__WEBPACK_IMPORTED_MODULE_0__.stripAddressPrefix)(address);
  return isValidXPAddress(addressBody);
}
const isValidXPAddress = address => {
  try {
    _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_3__.utils.parseBech32(address);
    return true;
  } catch {
    return false;
  }
};

/***/ }),

/***/ "./src/utils/lowerCaseKeys.ts":
/*!************************************!*\
  !*** ./src/utils/lowerCaseKeys.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "lowerCaseKeys": () => (/* binding */ lowerCaseKeys)
/* harmony export */ });
const lowerCaseKeys = obj => {
  return Object.fromEntries(Object.entries(obj).map(([key, value]) => [key.toLowerCase(), value]));
};

/***/ }),

/***/ "./src/utils/network/addGlacierAPIKeyIfNeeded.ts":
/*!*******************************************************!*\
  !*** ./src/utils/network/addGlacierAPIKeyIfNeeded.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addGlacierAPIKeyIfNeeded": () => (/* binding */ addGlacierAPIKeyIfNeeded)
/* harmony export */ });
function addGlacierAPIKeyIfNeeded(url) {
  if (false) {}

  // RPC urls returned in the token list are always using the production URL
  const knownHosts = new Set(['glacier-api.avax.network', 'proxy-api.avax.network', new URL("https://glacier-api-dev.avax.network").host, new URL("https://proxy-api-dev.avax.network").host]);
  const urlObject = new URL(url);
  if ( true && knownHosts.has(urlObject.host)) {
    urlObject.searchParams.append('token', "bf117238dd19756d9d1845631b189036be0c1f28dca7b35bd7f822eaae3de596");
    return urlObject.toString();
  }
  return url;
}

/***/ }),

/***/ "./src/utils/network/getProviderForNetwork.ts":
/*!****************************************************!*\
  !*** ./src/utils/network/getProviderForNetwork.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getProviderForNetwork": () => (/* binding */ getProviderForNetwork)
/* harmony export */ });
/* harmony import */ var _avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @avalabs/core-wallets-sdk */ "./node_modules/@avalabs/core-wallets-sdk/esm/SolanaVM/utils/solanaProvider.js");
/* harmony import */ var _avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @avalabs/core-wallets-sdk */ "./node_modules/@avalabs/core-wallets-sdk/esm/BitcoinVM/providers/BitcoinProvider.js");
/* harmony import */ var _avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @avalabs/core-wallets-sdk */ "./node_modules/@avalabs/core-wallets-sdk/esm/EVM/utils/jsonRpcBatchProvider.js");
/* harmony import */ var _avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @avalabs/core-wallets-sdk */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/providers/JsonRpcProvider.js");
/* harmony import */ var _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @avalabs/core-chains-sdk */ "./node_modules/@avalabs/core-chains-sdk/esm/models.js");
/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ethers */ "./node_modules/ethers/lib.esm/utils/fetch.js");
/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ethers */ "./node_modules/ethers/lib.esm/providers/network.js");
/* harmony import */ var _addGlacierAPIKeyIfNeeded__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./addGlacierAPIKeyIfNeeded */ "./src/utils/network/addGlacierAPIKeyIfNeeded.ts");




const getProviderForNetwork = async (network, useMulticall = false) => {
  if (network.vmName === _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_1__.NetworkVMType.SVM) {
    return (0,_avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_2__.getSolanaProvider)({
      isTestnet: Boolean(network.isTestnet),
      rpcUrl: network.isTestnet ? 'https://api.devnet.solana.com' // NowNodes does not support Solana Devnet
      : `${"https://proxy-api-dev.avax.network"}/proxy/nownodes/sol`
    });
  }
  if (network.vmName === _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_1__.NetworkVMType.BITCOIN) {
    return new _avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_3__.BitcoinProvider(!network.isTestnet, undefined, `${"https://proxy-api-dev.avax.network"}/proxy/nownodes/${network.isTestnet ? 'btcbook-testnet' : 'btcbook'}`, `${"https://proxy-api-dev.avax.network"}/proxy/nownodes/${network.isTestnet ? 'btc-testnet' : 'btc'}`,  true ? {
      token: "bf117238dd19756d9d1845631b189036be0c1f28dca7b35bd7f822eaae3de596"
    } : 0);
  } else if (network.vmName === _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_1__.NetworkVMType.EVM) {
    const fetchConfig = new ethers__WEBPACK_IMPORTED_MODULE_4__.FetchRequest((0,_addGlacierAPIKeyIfNeeded__WEBPACK_IMPORTED_MODULE_0__.addGlacierAPIKeyIfNeeded)(network.rpcUrl));
    if (network.customRpcHeaders) {
      const headers = Object.entries(network.customRpcHeaders);
      for (const [name, value] of headers) {
        fetchConfig.setHeader(name, value);
      }
    }
    const provider = new _avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_5__.JsonRpcBatchInternal(useMulticall ? {
      maxCalls: 40,
      multiContractAddress: network.utilityAddresses?.multicall
    } : 40, fetchConfig, new ethers__WEBPACK_IMPORTED_MODULE_6__.Network(network.chainName, network.chainId));
    provider.pollingInterval = 2000;
    return provider;
  } else if (network.vmName === _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_1__.NetworkVMType.AVM || network.vmName === _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_1__.NetworkVMType.PVM || network.vmName === _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_1__.NetworkVMType.CoreEth) {
    return network.isTestnet ? _avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_7__.JsonRpcProvider.getDefaultFujiProvider() : _avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_7__.JsonRpcProvider.getDefaultMainnetProvider();
  } else {
    throw new Error('unsupported network');
  }
};

/***/ }),

/***/ "./src/utils/newsletter.ts":
/*!*********************************!*\
  !*** ./src/utils/newsletter.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isNewsletterConfigured": () => (/* binding */ isNewsletterConfigured),
/* harmony export */   "signUpForNewsletter": () => (/* binding */ signUpForNewsletter)
/* harmony export */ });
function isNewsletterConfigured() {
  return Boolean( true && "8c7d7ccd-5a7e-4fcb-b1aa-20c1b3b4ba7c");
}
async function signUpForNewsletter(data) {
  if (!isNewsletterConfigured()) {
    throw new Error('Newsletter is not configured');
  }
  const proxyURl = `${"https://ac-gateway-development-integration-k8s-us-east-1.avacloud-dev.io"}/v1/hs/forms/${"7522520"}/${"8c7d7ccd-5a7e-4fcb-b1aa-20c1b3b4ba7c"}`;
  const headers = {
    Accept: '*',
    'Content-Type': 'application/json'
  };
  const requestOptions = {
    method: 'POST',
    headers,
    body: JSON.stringify(data)
  };
  return fetch(proxyURl, requestOptions);
}

/***/ }),

/***/ "./src/utils/object.ts":
/*!*****************************!*\
  !*** ./src/utils/object.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "hasDefined": () => (/* binding */ hasDefined),
/* harmony export */   "omitUndefined": () => (/* binding */ omitUndefined)
/* harmony export */ });
const omitUndefined = obj => Object.fromEntries(Object.entries(obj).filter(([, value]) => value !== undefined));
const hasDefined = (obj, key) => {
  return obj[key] !== undefined;
};

/***/ }),

/***/ "./src/utils/promiseResolver.ts":
/*!**************************************!*\
  !*** ./src/utils/promiseResolver.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "resolve": () => (/* binding */ resolve)
/* harmony export */ });
function resolve(promise) {
  try {
    return promise.then(res => [res, null]).catch(err => [null, err]);
  } catch (err) {
    return Promise.resolve([null, err]);
  }
}

/***/ }),

/***/ "./src/utils/seedless/fido/convertRequest.ts":
/*!***************************************************!*\
  !*** ./src/utils/seedless/fido/convertRequest.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "convertRequest": () => (/* binding */ convertRequest)
/* harmony export */ });
/* harmony import */ var _src_utils_encoding__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @src/utils/encoding */ "./src/utils/encoding.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types */ "./src/utils/seedless/fido/types.ts");
/* provided dependency */ var Buffer = __webpack_require__(/*! ./node_modules/node-polyfill-webpack-plugin/node_modules/buffer/index.js */ "./node_modules/node-polyfill-webpack-plugin/node_modules/buffer/index.js")["Buffer"];


function convertRequest(endpoint, options) {
  if (endpoint === _types__WEBPACK_IMPORTED_MODULE_1__.FIDOApiEndpoint.Authenticate || endpoint === _types__WEBPACK_IMPORTED_MODULE_1__.FIDOApiEndpoint.Register) {
    return JSON.stringify(options, convertBuffersToBase64Url);
  }
  throw new Error('Unsupported FIDO identity endpoint');
}
function convertBuffersToBase64Url(key, value) {
  const el = this[key];
  if (el instanceof Buffer) {
    return (0,_src_utils_encoding__WEBPACK_IMPORTED_MODULE_0__.bufferToBase64Url)(el);
  }
  return value;
}

/***/ }),

/***/ "./src/utils/seedless/fido/convertResult.ts":
/*!**************************************************!*\
  !*** ./src/utils/seedless/fido/convertResult.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "convertResult": () => (/* binding */ convertResult)
/* harmony export */ });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _src_utils_encoding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/utils/encoding */ "./src/utils/encoding.ts");


// Result properties that are known to contain Base64Url-encoded
// values. We need these values to be converted back to Buffers
// to satisfy CubeSigner's SDK.
const KNOWN_BUFFER_PROPERTIES = ['rawId', 'response.clientDataJSON', 'response.attestationObject', 'response.authenticatorData', 'response.signature', 'response.userHandle'];
function convertResult(result) {
  const copy = (0,lodash__WEBPACK_IMPORTED_MODULE_0__.cloneDeep)(result);
  KNOWN_BUFFER_PROPERTIES.forEach(path => {
    // If object does not contain given property or it is nullish,
    // do nothing with it.
    const currentValue = (0,lodash__WEBPACK_IMPORTED_MODULE_0__.get)(copy, path);
    if (currentValue === undefined || currentValue === null) {
      return;
    }

    // Otherwise, convert it to Buffer
    (0,lodash__WEBPACK_IMPORTED_MODULE_0__.update)(copy, path, _src_utils_encoding__WEBPACK_IMPORTED_MODULE_1__.base64UrlToBuffer);
  });
  return copy;
}

/***/ }),

/***/ "./src/utils/seedless/fido/launchFidoFlow.ts":
/*!***************************************************!*\
  !*** ./src/utils/seedless/fido/launchFidoFlow.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "launchFidoFlow": () => (/* binding */ launchFidoFlow)
/* harmony export */ });
/* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! webextension-polyfill */ "./node_modules/webextension-polyfill/dist/browser-polyfill.js");
/* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _extensionUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../extensionUtils */ "./src/utils/extensionUtils.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types */ "./src/utils/seedless/fido/types.ts");
/* harmony import */ var _convertRequest__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./convertRequest */ "./src/utils/seedless/fido/convertRequest.ts");
/* harmony import */ var _convertResult__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./convertResult */ "./src/utils/seedless/fido/convertResult.ts");
/* harmony import */ var _validateResponse__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./validateResponse */ "./src/utils/seedless/fido/validateResponse.ts");






async function launchFidoFlow(endpoint, challenge, keyType) {
  const baseUrl = "https://identity.core.app";
  if (!baseUrl) {
    throw new Error('FIDO Identity Service URL is not configured');
  }
  const url = new URL(baseUrl);
  url.pathname = endpoint;
  url.searchParams.set('responseMode', 'post-message');
  url.searchParams.set('origin', location.origin);
  url.searchParams.set('options', (0,_convertRequest__WEBPACK_IMPORTED_MODULE_3__.convertRequest)(endpoint, challenge));
  if (endpoint === _types__WEBPACK_IMPORTED_MODULE_2__.FIDOApiEndpoint.Register) {
    if (!keyType) {
      throw new Error('FIDO key type not defined for registration request');
    }
    url.searchParams.set('keyType', keyType);
  }
  const popup = await (0,_extensionUtils__WEBPACK_IMPORTED_MODULE_1__.openPopup)({
    url: url.toString(),
    setSelfAsOpener: true,
    right: 70
  });

  // Make sure to close the popup if the calling window gets closed
  window.addEventListener('beforeunload', () => {
    if (popup?.id) {
      webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__.windows.remove(popup.id).catch(() => {
        // Do nothing, we can't really do anything about it and
        // the most likely reason of error is that it was already closed.
      });
    }
  });
  return new Promise((resolve, reject) => {
    // Throw error if popup is closed prematurely
    const closeSubscription = popup.removed.subscribe(() => {
      reject(new Error('Popup closed'));
    });
    const onResponse = event => {
      if (event.origin !== url.origin) {
        return;
      }
      const response = JSON.parse(event.data);
      if ((0,_validateResponse__WEBPACK_IMPORTED_MODULE_5__.isValidResponse)(endpoint, response)) {
        // Popup can now be closed safely
        closeSubscription.unsubscribe();
        if (popup?.id) {
          webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__.windows.remove(popup.id).then(() => {
            // Do nothing, we can't really do anything about it and
            // the most likely reason of error is that it was already closed.
          });
        }
        window.removeEventListener('message', onResponse);
        resolve((0,_convertResult__WEBPACK_IMPORTED_MODULE_4__.convertResult)(response));
      }
    };
    window.addEventListener('message', onResponse);
  });
}

/***/ }),

/***/ "./src/utils/seedless/fido/types.ts":
/*!******************************************!*\
  !*** ./src/utils/seedless/fido/types.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FIDOApiEndpoint": () => (/* binding */ FIDOApiEndpoint),
/* harmony export */   "KeyType": () => (/* binding */ KeyType)
/* harmony export */ });
let FIDOApiEndpoint = /*#__PURE__*/function (FIDOApiEndpoint) {
  FIDOApiEndpoint["Register"] = "register";
  FIDOApiEndpoint["Authenticate"] = "authenticate";
  return FIDOApiEndpoint;
}({});
let KeyType = /*#__PURE__*/function (KeyType) {
  KeyType["Passkey"] = "passkey";
  KeyType["Yubikey"] = "yubikey";
  return KeyType;
}({});

/***/ }),

/***/ "./src/utils/seedless/fido/validateResponse.ts":
/*!*****************************************************!*\
  !*** ./src/utils/seedless/fido/validateResponse.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isValidResponse": () => (/* binding */ isValidResponse)
/* harmony export */ });
/* harmony import */ var joi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! joi */ "./node_modules/joi/lib/index.js");
/* harmony import */ var joi__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(joi__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types */ "./src/utils/seedless/fido/types.ts");
/* harmony import */ var _src_monitoring_sentryCaptureException__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/monitoring/sentryCaptureException */ "./src/monitoring/sentryCaptureException.ts");



const REGISTRATION_RESPONSE_SCHEMA = joi__WEBPACK_IMPORTED_MODULE_0___default().object({
  id: joi__WEBPACK_IMPORTED_MODULE_0___default().string().required(),
  rawId: joi__WEBPACK_IMPORTED_MODULE_0___default().string().required(),
  type: joi__WEBPACK_IMPORTED_MODULE_0___default().string(),
  response: joi__WEBPACK_IMPORTED_MODULE_0___default().object({
    attestationObject: joi__WEBPACK_IMPORTED_MODULE_0___default().string().required(),
    clientDataJSON: joi__WEBPACK_IMPORTED_MODULE_0___default().string().required()
  }).unknown(true)
}).unknown(true);
const AUTHENTICATION_RESPONSE_SCHEMA = joi__WEBPACK_IMPORTED_MODULE_0___default().object({
  id: joi__WEBPACK_IMPORTED_MODULE_0___default().string().required(),
  rawId: joi__WEBPACK_IMPORTED_MODULE_0___default().string().required(),
  type: joi__WEBPACK_IMPORTED_MODULE_0___default().string(),
  response: joi__WEBPACK_IMPORTED_MODULE_0___default().object({
    authenticatorData: joi__WEBPACK_IMPORTED_MODULE_0___default().string().required(),
    clientDataJSON: joi__WEBPACK_IMPORTED_MODULE_0___default().string().required(),
    signature: joi__WEBPACK_IMPORTED_MODULE_0___default().string().required(),
    userHandle: joi__WEBPACK_IMPORTED_MODULE_0___default().string().allow(null)
  }).unknown(true)
}).unknown(true);
const isValidResponse = (endpoint, response) => {
  // The schemas allow additional properties to be defined,
  // but we care about the ones that are specified in the schema.
  const schema = endpoint === _types__WEBPACK_IMPORTED_MODULE_1__.FIDOApiEndpoint.Authenticate ? AUTHENTICATION_RESPONSE_SCHEMA : REGISTRATION_RESPONSE_SCHEMA;
  const {
    error
  } = schema.validate(response);
  if (error) {
    const messages = error.details.map(({
      message
    }) => message);
    (0,_src_monitoring_sentryCaptureException__WEBPACK_IMPORTED_MODULE_2__["default"])(new Error(`Invalid Identity API response: ${messages.join(' | ')}`), _src_monitoring_sentryCaptureException__WEBPACK_IMPORTED_MODULE_2__.SentryExceptionTypes.SEEDLESS);
    return false;
  }
  return true;
};

/***/ }),

/***/ "./src/utils/stringToBigint.ts":
/*!*************************************!*\
  !*** ./src/utils/stringToBigint.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "stringToBigint": () => (/* binding */ stringToBigint)
/* harmony export */ });
/* harmony import */ var big_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! big.js */ "./node_modules/big.js/big.js");
/* harmony import */ var big_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(big_js__WEBPACK_IMPORTED_MODULE_0__);

function stringToBigint(value, decimals) {
  const big = big_js__WEBPACK_IMPORTED_MODULE_0___default()(value.replace(/,/gi, ''));
  const tens = big_js__WEBPACK_IMPORTED_MODULE_0___default()(10).pow(decimals);
  const mult = big.times(tens);
  const rawStr = mult.toFixed(0, 0);
  return BigInt(rawStr);
}

/***/ }),

/***/ "./src/utils/stripAddressPrefix.ts":
/*!*****************************************!*\
  !*** ./src/utils/stripAddressPrefix.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "stripAddressPrefix": () => (/* binding */ stripAddressPrefix)
/* harmony export */ });
/**
 * Removes the C-, P- and X- prefix from the provided address.
 */
const stripAddressPrefix = address => address.replace(/^[XPC]-/, '');

/***/ }),

/***/ "./src/utils/toastCardWithLink.tsx":
/*!*****************************************!*\
  !*** ./src/utils/toastCardWithLink.tsx ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "toastCardWithLink": () => (/* binding */ toastCardWithLink)
/* harmony export */ });
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/react-hot-toast/dist/index.mjs");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");

const toastCardWithLink = ({
  url,
  title,
  label,
  id = ''
}) => {
  const toaster = _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__["default"].custom( /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__.ToastCard, {
    onDismiss: () => _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_0__["default"].remove(toaster),
    variant: "success",
    title: title
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__.Button, {
    component: _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__.Link,
    target: "_blank",
    rel: "noreferrer",
    href: url,
    size: "xlarge",
    variant: "text",
    color: "inherit",
    endIcon: /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__.ExternalLinkIcon, {
      size: 16
    }),
    sx: {
      p: 0
    }
  }, label)), {
    id: id,
    duration: Infinity
  });
  return {
    toaster
  };
};

/***/ }),

/***/ "./src/utils/truncateAddress.ts":
/*!**************************************!*\
  !*** ./src/utils/truncateAddress.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "truncateAddress": () => (/* binding */ truncateAddress)
/* harmony export */ });
const truncateAddress = (address, size = 6) => {
  const firstChunk = address.substring(0, size);
  const lastChunk = address.substr(-(size / 2));
  return `${firstChunk}...${lastChunk}`;
};

/***/ }),

/***/ "./src/utils/typeUtils.ts":
/*!********************************!*\
  !*** ./src/utils/typeUtils.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isFulfilled": () => (/* binding */ isFulfilled),
/* harmony export */   "isNotNullish": () => (/* binding */ isNotNullish)
/* harmony export */ });
const isFulfilled = x => x.status === 'fulfilled';
const isNotNullish = x => x != null;

/***/ }),

/***/ "?3fc0":
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?9157":
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?4f7e":
/*!********************************!*\
  !*** ./util.inspect (ignored) ***!
  \********************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?ed1b":
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?d17e":
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/***/ (() => {

/* (ignored) */

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,