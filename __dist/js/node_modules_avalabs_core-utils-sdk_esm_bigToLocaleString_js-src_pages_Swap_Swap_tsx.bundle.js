"use strict";
(self["webpackChunkavalanche_extension"] = self["webpackChunkavalanche_extension"] || []).push([["node_modules_avalabs_core-utils-sdk_esm_bigToLocaleString_js-src_pages_Swap_Swap_tsx"],{

/***/ "./node_modules/@avalabs/core-utils-sdk/esm/bigIntToString.js":
/*!********************************************************************!*\
  !*** ./node_modules/@avalabs/core-utils-sdk/esm/bigIntToString.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bigIntToString": () => (/* binding */ t)
/* harmony export */ });
function t(t,n){n=Math.floor(n);const e=t.toString(),o=Math.max(e.length-n,0),r=e.slice(o).padStart(n,"0"),a=e.slice(0,o)||"0";return r.length?`${a}.${r}`:a}


/***/ }),

/***/ "./node_modules/@avalabs/core-utils-sdk/esm/bigToLocaleString.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@avalabs/core-utils-sdk/esm/bigToLocaleString.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bigToLocaleString": () => (/* binding */ t)
/* harmony export */ });
function t(t,n=9){const e=t.toFixed(n).split("."),r=parseInt(e[0]).toLocaleString("en-US");if(1===e.length)return r;{let t=e[1],o=t.charAt(t.length-1);for(;"0"===o;)t=t.substring(0,t.length-1),o=t.charAt(t.length-1);const s=t.substring(0,n);return s?`${r}.${s}`:r}}


/***/ }),

/***/ "./src/components/common/FunctionIsUnavailable.tsx":
/*!*********************************************************!*\
  !*** ./src/components/common/FunctionIsUnavailable.tsx ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FunctionIsUnavailable": () => (/* binding */ FunctionIsUnavailable)
/* harmony export */ });
/* harmony import */ var _PageTitle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PageTitle */ "./src/components/common/PageTitle.tsx");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/Trans.js");
/* harmony import */ var _FunctionIsOffline__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./FunctionIsOffline */ "./src/components/common/FunctionIsOffline.tsx");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");




function FunctionIsUnavailable({
  functionName,
  network,
  children
}) {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_2__.useTranslation)();
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Stack, {
    sx: {
      width: '100%',
      height: '100%'
    }
  }, /*#__PURE__*/React.createElement(_PageTitle__WEBPACK_IMPORTED_MODULE_0__.PageTitle, {
    variant: _PageTitle__WEBPACK_IMPORTED_MODULE_0__.PageTitleVariant.PRIMARY
  }, functionName), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Stack, {
    sx: {
      flexGrow: 1,
      px: 4,
      alignContent: 'center',
      justifyContent: 'center'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_3__.Typography, {
    variant: "body1",
    minHeight: 24,
    align: "center"
  }, /*#__PURE__*/React.createElement(react_i18next__WEBPACK_IMPORTED_MODULE_4__.Trans, {
    i18nKey: "Sorry, {{functionName}} is unavailable on <br/>{{network}} network.",
    values: {
      functionName: (0,_FunctionIsOffline__WEBPACK_IMPORTED_MODULE_1__.getTranslatedFunctionName)(functionName) ?? t('This Feature'),
      network
    }
  })), children));
}

/***/ }),

/***/ "./src/components/icons/ParaswapIcon.tsx":
/*!***********************************************!*\
  !*** ./src/components/icons/ParaswapIcon.tsx ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ParaswapIcon": () => (/* binding */ ParaswapIcon)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");

function ParaswapIcon({
  height = '14px',
  color = '#fff',
  ...props
}) {
  return /*#__PURE__*/React.createElement("svg", (0,_babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({
    xmlns: "http://www.w3.org/2000/svg",
    height: height,
    viewBox: "0 0 70 14"
  }, props), /*#__PURE__*/React.createElement("path", {
    d: "M16.4365 13.1511L8.83477 0.00195312L1.23273 13.1511H16.4365ZM3.49271 6.16563L6.9855 0.00195312H0L3.49271 6.16563ZM13.3319 11.4106H4.33752L8.83477 3.63133L13.3319 11.4106Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M59.9865 9.1793C60.2631 9.1793 60.5326 9.16971 60.7956 9.15056C61.059 9.13169 61.298 9.10682 61.5142 9.07658C61.7296 9.04603 61.9191 9.01756 62.0835 8.99092C62.2467 8.96431 62.372 8.93948 62.459 8.91666V5.19564C62.459 4.88389 62.416 4.59492 62.329 4.32845C62.2428 4.06218 62.1043 3.83189 61.9156 3.63789C61.7249 3.44356 61.4767 3.29142 61.1711 3.18121C60.8648 3.07099 60.4912 3.01562 60.0519 3.01562C59.6203 3.01562 59.2514 3.04252 58.945 3.09557C58.6388 3.14889 58.4121 3.20578 58.2659 3.26658L58.3823 3.91727C58.4945 3.87925 58.6716 3.8301 58.9126 3.76903C59.1547 3.70823 59.5209 3.6777 60.0128 3.6777C60.3574 3.6777 60.6359 3.72506 60.8474 3.8203C61.059 3.91576 61.223 4.04126 61.3397 4.19723C61.4554 4.35301 61.5312 4.5279 61.5656 4.72219C61.595 4.88807 61.6093 5.05908 61.6139 5.23346H61.617V5.3134C61.617 5.31627 61.6178 5.31859 61.6178 5.32145V5.68672H61.617V6.33718H61.6178V8.41448C61.4449 8.44503 61.2357 8.46986 60.9897 8.48874C60.7442 8.50788 60.4568 8.51724 60.1289 8.51724C59.862 8.51724 59.6222 8.49624 59.4107 8.45432C59.1999 8.4127 59.0181 8.34622 58.8673 8.25487C58.7165 8.16353 58.5997 8.04193 58.5181 7.88925C58.4357 7.73711 58.3951 7.55112 58.3951 7.33018C58.3951 7.07895 58.4554 6.87765 58.5761 6.72528C58.6968 6.57313 58.8522 6.45309 59.0425 6.36561C59.2316 6.27817 59.4389 6.22128 59.6632 6.19432C59.8879 6.16798 60.1037 6.1548 60.3106 6.1548C60.4731 6.1548 60.6181 6.15944 60.7492 6.16798V5.53617C60.7384 5.53535 60.7283 5.53358 60.7179 5.53253C60.5841 5.52085 60.4568 5.51517 60.3362 5.51517C59.9312 5.51517 59.5557 5.54962 59.2104 5.61816C58.8654 5.68672 58.5676 5.79513 58.3174 5.94337C58.0675 6.09191 57.873 6.27998 57.7349 6.50847C57.5973 6.73665 57.528 7.01038 57.528 7.33018C57.528 7.66517 57.5907 7.94854 57.7156 8.18035C57.8401 8.4127 58.0134 8.60286 58.2335 8.75137C58.4535 8.89961 58.7118 9.00801 59.0096 9.07658C59.3074 9.14484 59.6334 9.1793 59.9865 9.1793ZM38.6198 9.1793C38.8953 9.1793 39.1652 9.16971 39.4282 9.15056C39.6916 9.13169 39.931 9.10682 40.1468 9.07658C40.3622 9.04603 40.5521 9.01756 40.716 8.99092C40.88 8.96431 41.0053 8.93948 41.0916 8.91666V5.19564C41.0916 4.88389 41.0486 4.59492 40.9624 4.32845C40.8762 4.06218 40.7377 3.83189 40.5482 3.63789C40.3583 3.44356 40.11 3.29142 39.8037 3.18121C39.4974 3.07099 39.1246 3.01562 38.6845 3.01562C38.2527 3.01562 37.8838 3.04252 37.5777 3.09557C37.2713 3.14889 37.0451 3.20578 36.8984 3.26658L37.0147 3.91727C37.1267 3.87925 37.3037 3.8301 37.5455 3.76903C37.7869 3.70823 38.1535 3.6777 38.6452 3.6777C38.9908 3.6777 39.2681 3.72506 39.4804 3.8203C39.6916 3.91576 39.8552 4.04126 39.9723 4.19723C40.0884 4.35301 40.1634 4.5279 40.199 4.72219C40.2284 4.88807 40.2419 5.05908 40.2465 5.23346H40.2504V8.41448C40.0775 8.44503 39.8691 8.46986 39.6227 8.48874C39.3768 8.50788 39.0898 8.51724 38.7622 8.51724C38.4944 8.51724 38.2547 8.49624 38.0438 8.45432C37.8322 8.4127 37.6509 8.34622 37.4999 8.25487C37.3489 8.16353 37.2326 8.04193 37.1506 7.88925C37.0688 7.73711 37.0279 7.55112 37.0279 7.33018C37.0279 7.07895 37.0882 6.87765 37.2091 6.72528C37.3295 6.57313 37.4848 6.45309 37.6749 6.36561C37.8648 6.27817 38.0719 6.22128 38.2959 6.19432C38.5205 6.16798 38.7359 6.1548 38.9428 6.1548C39.1057 6.1548 39.2499 6.15944 39.3818 6.16798V5.53617C39.371 5.53535 39.3617 5.53358 39.3505 5.53253C39.2167 5.52085 39.0898 5.51517 38.9691 5.51517C38.5636 5.51517 38.1881 5.54962 37.8433 5.61816C37.4981 5.68672 37.2004 5.79513 36.9502 5.94337C36.6997 6.09191 36.5055 6.27998 36.3675 6.50847C36.2295 6.73665 36.1606 7.01038 36.1606 7.33018C36.1606 7.66517 36.2234 7.94854 36.3481 8.18035C36.4734 8.4127 36.6458 8.60286 36.8657 8.75137C37.0859 8.89961 37.3451 9.00801 37.6422 9.07658C37.9399 9.14484 38.2658 9.1793 38.6198 9.1793ZM28.3471 9.1793C28.6228 9.1793 28.8925 9.16971 29.1558 9.15056C29.4188 9.13169 29.6583 9.10682 29.8742 9.07658C30.0894 9.04603 30.2798 9.01756 30.4435 8.99092C30.6073 8.96431 30.7326 8.93948 30.8188 8.91666V5.19564C30.8188 4.88389 30.7757 4.59492 30.6897 4.32845C30.6032 4.06218 30.465 3.83189 30.2754 3.63789C30.0856 3.44356 29.8374 3.29142 29.5311 3.18121C29.2246 3.07099 28.8516 3.01562 28.4116 3.01562C27.98 3.01562 27.6113 3.04252 27.305 3.09557C26.9985 3.14889 26.7722 3.20578 26.6255 3.26658L26.7422 3.91727C26.8541 3.87925 27.0309 3.8301 27.2728 3.76903C27.5141 3.70823 27.881 3.6777 28.3728 3.6777C28.7178 3.6777 28.996 3.72506 29.2076 3.8203C29.4188 3.91576 29.5831 4.04126 29.6994 4.19723C29.816 4.35301 29.8912 4.5279 29.926 4.72219C29.9553 4.88807 29.9693 5.05908 29.9741 5.23346H29.9775L29.9776 5.31743L29.9777 5.32145V5.68672H29.9775V6.33718H29.9777V8.41448C29.805 8.44503 29.5961 8.46986 29.3499 8.48874C29.1042 8.50788 28.8172 8.51724 28.4894 8.51724C28.2218 8.51724 27.9823 8.49624 27.771 8.45432C27.5595 8.4127 27.3782 8.34622 27.2274 8.25487C27.0764 8.16353 26.9598 8.04193 26.8782 7.88925C26.796 7.73711 26.7552 7.55112 26.7552 7.33018C26.7552 7.07895 26.8154 6.87765 26.9363 6.72528C27.0567 6.57313 27.2121 6.45309 27.4021 6.36561C27.5919 6.27817 27.7988 6.22128 28.0233 6.19432C28.2475 6.16798 28.4636 6.1548 28.6706 6.1548C28.8328 6.1548 28.9774 6.15944 29.1091 6.16798V5.53617C29.0984 5.53535 29.0889 5.53358 29.0782 5.53253C28.9442 5.52085 28.8172 5.51517 28.6963 5.51517C28.2907 5.51517 27.9154 5.54962 27.5705 5.61816C27.2253 5.68672 26.9276 5.79513 26.6773 5.94337C26.4268 6.09191 26.2327 6.27998 26.0947 6.50847C25.957 6.73665 25.8878 7.01038 25.8878 7.33018C25.8878 7.66517 25.9505 7.94854 26.0753 8.18035C26.2006 8.4127 26.373 8.60286 26.5929 8.75137C26.8133 8.89961 27.0723 9.00801 27.37 9.07658C27.6677 9.14484 27.993 9.1793 28.3471 9.1793ZM64.9484 11.2339V8.75242C65.0962 8.85262 65.3325 8.95839 65.6577 9.07012C65.9833 9.18131 66.3678 9.23727 66.8094 9.23727C67.2955 9.23727 67.7272 9.16031 68.1046 9.00646C68.4821 8.85262 68.8007 8.63914 69.0614 8.36571C69.3213 8.0926 69.5193 7.7658 69.6531 7.38459C69.7877 7.00361 69.8554 6.58632 69.8554 6.13233C69.8554 5.64751 69.7746 5.21293 69.6144 4.82804C69.4536 4.44339 69.2281 4.1164 68.938 3.84686C68.6472 3.57766 68.2995 3.37196 67.8965 3.22936C67.4932 3.08702 67.0442 3.01562 66.5495 3.01562C65.9505 3.01562 65.4562 3.05039 65.066 3.11978C64.6754 3.18883 64.354 3.26211 64.1026 3.33901V11.2339H64.9484ZM32.9224 9.1793V3.88119C32.994 3.85018 33.1437 3.81123 33.3714 3.76426C33.5991 3.71764 33.9005 3.69402 34.2761 3.69402C34.6332 3.69402 34.9211 3.7118 35.1403 3.74675C35.359 3.78204 35.5041 3.81489 35.5756 3.84591L35.7497 3.19113C35.6514 3.15217 35.4752 3.11342 35.2206 3.07419C34.966 3.03524 34.6958 3.01562 34.4097 3.01562C33.8471 3.01562 33.369 3.06069 32.9757 3.15027C32.5827 3.23992 32.2745 3.32795 32.0515 3.41353V9.1793H32.9224ZM19.7485 11.2339V8.75242C19.8957 8.85262 20.1323 8.95839 20.4575 9.07012C20.7831 9.18131 21.1669 9.23727 21.6094 9.23727C22.0953 9.23727 22.5271 9.16031 22.9044 9.00646C23.2821 8.85262 23.601 8.63914 23.8611 8.36571C24.1215 8.0926 24.3188 7.7658 24.4532 7.38459C24.5879 7.00361 24.6551 6.58632 24.6551 6.13233C24.6551 5.64751 24.5748 5.21293 24.4145 4.82804C24.2536 4.44339 24.0281 4.1164 23.7377 3.84686C23.4468 3.57766 23.0999 3.37196 22.6964 3.22936C22.2926 3.08702 21.8439 3.01562 21.3493 3.01562C20.7505 3.01562 20.2559 3.05039 19.8654 3.11978C19.475 3.18883 19.154 3.26211 18.9023 3.33901V11.2339H19.7485ZM44.2988 9.1793C45.0866 9.1793 45.7081 9.04019 46.1629 8.76185C46.6169 8.48344 46.8443 8.07388 46.8443 7.53237C46.8443 7.2466 46.7879 7.00899 46.6757 6.81914C46.5624 6.62964 46.4158 6.46771 46.2341 6.33231C46.0519 6.19691 45.8415 6.08104 45.6044 5.98482C45.3658 5.88883 45.1168 5.79451 44.8573 5.70223C44.6063 5.60969 44.3835 5.5253 44.1882 5.44799C43.9937 5.37126 43.8289 5.28815 43.6947 5.19932C43.5601 5.10994 43.4588 5.00738 43.39 4.89097C43.32 4.77475 43.2855 4.63545 43.2855 4.47244C43.2855 4.46339 43.2867 3.39141 43.2875 3.09228L43.2879 3.01562H42.4336C42.432 3.04573 42.4289 4.25335 42.4285 4.49816V4.54054C42.4285 4.79556 42.4804 5.01217 42.5844 5.18984C42.6888 5.36782 42.8265 5.52054 43.0001 5.64805C43.173 5.7756 43.3722 5.88756 43.5969 5.98428C43.8223 6.08104 44.0602 6.17564 44.312 6.26846C44.6233 6.38433 44.8855 6.4848 45.0978 6.56996C45.3094 6.65489 45.4807 6.74399 45.6102 6.83677C45.7406 6.92959 45.833 7.0337 45.8902 7.14984C45.9459 7.26578 45.9742 7.40509 45.9742 7.56737C45.9742 7.90746 45.816 8.14906 45.5 8.29208C45.1844 8.43533 44.7838 8.5066 44.2988 8.5066C44.03 8.5066 43.7941 8.49133 43.5911 8.46031C43.3873 8.42956 43.2125 8.39248 43.0647 8.35013C42.9174 8.30782 42.8006 8.26864 42.7143 8.23426C42.6277 8.19926 42.5712 8.17428 42.5453 8.15881L42.3245 8.84283C42.4285 8.88959 42.6362 8.95716 42.9483 9.04572C43.2596 9.1349 43.7098 9.1793 44.2988 9.1793ZM50.4244 9.1793C50.5586 8.92103 50.7005 8.63075 50.8498 8.3079C50.9983 7.98532 51.1522 7.64054 51.31 7.2736C51.4682 6.90635 51.6213 6.52046 51.7687 6.11539C51.9172 5.71086 52.0584 5.29666 52.1926 4.87298C52.3275 5.29569 52.4695 5.70881 52.618 6.11287C52.7665 6.51667 52.92 6.90206 53.079 7.26876C53.2375 7.63574 53.3918 7.98029 53.5415 8.3026C53.6912 8.62491 53.8347 8.91728 53.9712 9.1793H54.7853C55.2459 8.34174 55.6694 7.45618 56.053 6.52224C56.4374 5.58849 56.7921 4.55648 57.1173 3.42654H56.2514C56.1524 3.82046 56.0286 4.24569 55.8794 4.70247C55.7305 5.15925 55.5696 5.6122 55.3986 6.06043C55.2262 6.50886 55.0552 6.93489 54.8831 7.33861C54.7114 7.74267 54.5486 8.08521 54.3951 8.36691C54.2137 7.99591 54.0354 7.59896 53.8602 7.17571C53.6835 6.75274 53.5172 6.32427 53.3605 5.89069C53.2035 5.45661 53.0596 5.03031 52.9297 4.61139C52.7994 4.19224 52.6946 3.79754 52.6141 3.42654H51.8573C51.7501 3.79702 51.6295 4.19174 51.4953 4.61116C51.3603 5.03058 51.2172 5.4553 51.0652 5.88566C50.9132 6.31618 50.7504 6.74318 50.5771 7.16659C50.4039 7.59038 50.2306 7.98659 50.0581 8.35554C49.905 8.07384 49.7399 7.73235 49.5643 7.3313C49.3875 6.93056 49.2139 6.5058 49.0418 6.05714C48.8701 5.60864 48.7092 5.1565 48.5607 4.70019C48.4114 4.24449 48.2865 3.81994 48.1871 3.42654H47.2554C47.5784 4.55439 47.9307 5.58598 48.3139 6.52065C48.6964 7.45517 49.1184 8.34146 49.5805 9.1793H50.4244ZM66.7522 8.76839C66.5476 8.76839 66.3523 8.7506 66.1659 8.71579C65.9787 8.68079 65.8051 8.63566 65.6449 8.58093C65.4844 8.52648 65.3444 8.46812 65.2246 8.40547C65.1047 8.34305 65.0045 8.28442 64.9244 8.2297V4.0015C65.0579 3.96252 65.2563 3.92532 65.5181 3.88997C65.7807 3.85498 66.1253 3.83745 66.5522 3.83745C67.2994 3.83745 67.8993 4.05039 68.3529 4.47592C68.8073 4.90153 69.0336 5.51238 69.0336 6.30887C69.0336 6.64449 68.9937 6.96304 68.9137 7.26331C68.8336 7.56412 68.7044 7.82536 68.5265 8.04808C68.349 8.27054 68.1154 8.44631 67.8265 8.57509C67.5373 8.7038 67.1795 8.76839 66.7522 8.76839ZM21.5518 8.76839C21.347 8.76839 21.1515 8.7506 20.9649 8.71579C20.7779 8.68079 20.6046 8.63566 20.4444 8.58093C20.2843 8.52648 20.1441 8.46812 20.0242 8.40547C19.9043 8.34305 19.8041 8.28442 19.7242 8.2297V4.0015C19.8572 3.96252 20.0555 3.92532 20.3177 3.88997C20.5801 3.85498 20.9249 3.83745 21.3514 3.83745C22.0988 3.83745 22.6992 4.05039 23.1525 4.47592C23.6063 4.90153 23.8333 5.51238 23.8333 6.30887C23.8333 6.64449 23.7933 6.96304 23.7131 7.26331C23.6332 7.56412 23.5041 7.82536 23.3263 8.04808C23.1481 8.27054 22.9148 8.44631 22.6258 8.57509C22.3365 8.7038 21.9786 8.76839 21.5518 8.76839Z",
    fill: color
  }));
}

/***/ }),

/***/ "./src/hooks/useLiveBalance.ts":
/*!*************************************!*\
  !*** ./src/hooks/useLiveBalance.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "useLiveBalance": () => (/* binding */ useLiveBalance)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _src_contexts_BalancesProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/contexts/BalancesProvider */ "./src/contexts/BalancesProvider.tsx");


const useLiveBalance = tokenTypes => {
  const {
    registerSubscriber,
    unregisterSubscriber
  } = (0,_src_contexts_BalancesProvider__WEBPACK_IMPORTED_MODULE_1__.useBalancesContext)();
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    registerSubscriber(tokenTypes);
    return () => {
      unregisterSubscriber(tokenTypes);
    };
  }, [registerSubscriber, unregisterSubscriber, tokenTypes]);
};

/***/ }),

/***/ "./src/pages/Swap/Swap.tsx":
/*!*********************************!*\
  !*** ./src/pages/Swap/Swap.tsx ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Swap": () => (/* binding */ Swap)
/* harmony export */ });
/* harmony import */ var _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @avalabs/vm-module-types */ "./node_modules/@avalabs/vm-module-types/dist/index.js");
/* harmony import */ var _src_contexts_SwapProvider_SwapProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/contexts/SwapProvider/SwapProvider */ "./src/contexts/SwapProvider/SwapProvider.tsx");
/* harmony import */ var _src_hooks_useTokensWithBalances__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/hooks/useTokensWithBalances */ "./src/hooks/useTokensWithBalances.ts");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _src_utils_promiseResolver__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @src/utils/promiseResolver */ "./src/utils/promiseResolver.ts");
/* harmony import */ var _components_TransactionDetails__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./components/TransactionDetails */ "./src/pages/Swap/components/TransactionDetails.tsx");
/* harmony import */ var _src_components_common_PageTitle__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @src/components/common/PageTitle */ "./src/components/common/PageTitle.tsx");
/* harmony import */ var _src_contexts_NetworkProvider__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @src/contexts/NetworkProvider */ "./src/contexts/NetworkProvider.tsx");
/* harmony import */ var react_router_dom__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! react-router-dom */ "./node_modules/react-router/esm/react-router.js");
/* harmony import */ var _src_contexts_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @src/contexts/AnalyticsProvider */ "./src/contexts/AnalyticsProvider.tsx");
/* harmony import */ var _src_components_common_FunctionIsOffline__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @src/components/common/FunctionIsOffline */ "./src/components/common/FunctionIsOffline.tsx");
/* harmony import */ var _components_ParaswapNotice__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./components/ParaswapNotice */ "./src/pages/Swap/components/ParaswapNotice.tsx");
/* harmony import */ var _src_hooks_useIsFunctionAvailable__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @src/hooks/useIsFunctionAvailable */ "./src/hooks/useIsFunctionAvailable.ts");
/* harmony import */ var _src_components_common_FunctionIsUnavailable__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @src/components/common/FunctionIsUnavailable */ "./src/components/common/FunctionIsUnavailable.tsx");
/* harmony import */ var _src_contexts_NetworkFeeProvider__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @src/contexts/NetworkFeeProvider */ "./src/contexts/NetworkFeeProvider.tsx");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var _hooks_useSwapStateFunctions__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./hooks/useSwapStateFunctions */ "./src/pages/Swap/hooks/useSwapStateFunctions.ts");
/* harmony import */ var _components_SwapError__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./components/SwapError */ "./src/pages/Swap/components/SwapError.tsx");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./utils */ "./src/pages/Swap/utils/index.tsx");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@mui/material/styles/styled.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@mui/material/styles/useTheme.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/react-hot-toast/dist/index.mjs");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _src_monitoring_sentryCaptureException__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @src/monitoring/sentryCaptureException */ "./src/monitoring/sentryCaptureException.ts");
/* harmony import */ var _src_components_common_TokenSelect__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @src/components/common/TokenSelect */ "./src/components/common/TokenSelect.tsx");
/* harmony import */ var _src_contexts_AccountsProvider__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @src/contexts/AccountsProvider */ "./src/contexts/AccountsProvider.tsx");
/* harmony import */ var _src_background_services_network_utils_isBitcoinNetwork__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @src/background/services/network/utils/isBitcoinNetwork */ "./src/background/services/network/utils/isBitcoinNetwork.ts");
/* harmony import */ var _src_utils_errors__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @src/utils/errors */ "./src/utils/errors/index.ts");
/* harmony import */ var _src_contexts_SwapProvider_models__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @src/contexts/SwapProvider/models */ "./src/contexts/SwapProvider/models.ts");
/* harmony import */ var _src_hooks_useLiveBalance__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @src/hooks/useLiveBalance */ "./src/hooks/useLiveBalance.ts");
/* harmony import */ var _src_hooks_useErrorMessage__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @src/hooks/useErrorMessage */ "./src/hooks/useErrorMessage.ts");
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");




























const ReviewOrderButtonContainer = (0,_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_25__["default"])('div')`
  position: ${({
  isTransactionDetailsOpen
}) => isTransactionDetailsOpen ? 'static' : 'absolute'};
  bottom: 0;
  left: 0;
  width: 100%;
`;
const POLLED_BALANCES = [_avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.NATIVE, _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.ERC20];
function Swap() {
  (0,_src_hooks_useLiveBalance__WEBPACK_IMPORTED_MODULE_23__.useLiveBalance)(POLLED_BALANCES);
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_26__.useTranslation)();
  const {
    capture,
    captureEncrypted
  } = (0,_src_contexts_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_8__.useAnalyticsContext)();
  const {
    network
  } = (0,_src_contexts_NetworkProvider__WEBPACK_IMPORTED_MODULE_7__.useNetworkContext)();
  const {
    swap
  } = (0,_src_contexts_SwapProvider_SwapProvider__WEBPACK_IMPORTED_MODULE_1__.useSwapContext)();
  const {
    networkFee
  } = (0,_src_contexts_NetworkFeeProvider__WEBPACK_IMPORTED_MODULE_13__.useNetworkFeeContext)();
  const getTranslatedError = (0,_src_hooks_useErrorMessage__WEBPACK_IMPORTED_MODULE_24__.useErrorMessage)();
  const {
    isFunctionAvailable: isSwapAvailable,
    isFunctionSupported: isSwapSupported
  } = (0,_src_hooks_useIsFunctionAvailable__WEBPACK_IMPORTED_MODULE_11__.useIsFunctionAvailable)(_src_hooks_useIsFunctionAvailable__WEBPACK_IMPORTED_MODULE_11__.FunctionNames.SWAP);
  const history = (0,react_router_dom__WEBPACK_IMPORTED_MODULE_27__.useHistory)();
  const theme = (0,_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_28__["default"])();
  const tokensWBalances = (0,_src_hooks_useTokensWithBalances__WEBPACK_IMPORTED_MODULE_2__.useTokensWithBalances)({
    disallowedAssets: _src_contexts_SwapProvider_models__WEBPACK_IMPORTED_MODULE_22__.DISALLOWED_SWAP_ASSETS
  });
  const allTokensOnNetwork = (0,_src_hooks_useTokensWithBalances__WEBPACK_IMPORTED_MODULE_2__.useTokensWithBalances)({
    forceShowTokensWithoutBalances: true,
    disallowedAssets: _src_contexts_SwapProvider_models__WEBPACK_IMPORTED_MODULE_22__.DISALLOWED_SWAP_ASSETS
  });
  const allSwappableTokens = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => allTokensOnNetwork.filter(token => token.type === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.ERC20 || token.type === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.NATIVE), [allTokensOnNetwork]);
  const {
    accounts: {
      active: activeAccount
    }
  } = (0,_src_contexts_AccountsProvider__WEBPACK_IMPORTED_MODULE_19__.useAccountsContext)();
  const [slippageTolerance, setSlippageTolerance] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)('1');
  const [isFromTokenSelectOpen, setIsFromTokenSelectOpen] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);
  const [isToTokenSelectOpen, setIsToTokenSelectOpen] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);
  const [isTransactionDetailsOpen, setIsTransactionDetailsOpen] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);
  const [isConfirming, setIsConfirming] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);
  const {
    calculateTokenValueToInput,
    reverseTokens,
    onTokenChange,
    onFromInputAmountChange,
    onToInputAmountChange,
    getSwapValues,
    swapGasLimit,
    selectedFromToken,
    selectedToToken,
    destinationInputField,
    fromTokenValue,
    swapError,
    isLoading,
    defaultFromValue,
    swapWarning,
    isReversed,
    toTokenValue,
    optimalRate,
    destAmount,
    resetValues
  } = (0,_hooks_useSwapStateFunctions__WEBPACK_IMPORTED_MODULE_14__.useSwapStateFunctions)();
  const isFromTokenKnown = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => selectedFromToken ? tokensWBalances.some(getTokenFinder(selectedFromToken)) : true, [tokensWBalances, selectedFromToken]);
  const isToTokenKnown = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => selectedToToken ? allTokensOnNetwork.some(getTokenFinder(selectedToToken)) : true, [allTokensOnNetwork, selectedToToken]);

  // If we detect the form has tokens that do not belong to the newly selected network,
  // we reset the values to avoid any potential issues with the swap.
  (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {
    if (!network) {
      return;
    }
    if (!isToTokenKnown || !isFromTokenKnown) {
      resetValues(true);
    }
  }, [network, isToTokenKnown, isFromTokenKnown, resetValues]);
  const activeAddress = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => network ? (0,_src_background_services_network_utils_isBitcoinNetwork__WEBPACK_IMPORTED_MODULE_20__.isBitcoinNetwork)(network) ? activeAccount?.addressBTC : activeAccount?.addressC : undefined, [activeAccount?.addressBTC, activeAccount?.addressC, network]);
  const fromAmount = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => {
    const result = destinationInputField === 'from' ? BigInt(destAmount) : defaultFromValue;
    return result;
  }, [defaultFromValue, destAmount, destinationInputField]);
  const toAmount = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => {
    const result = destinationInputField === 'to' ? BigInt(destAmount) : toTokenValue?.bigint;
    return result;
  }, [destAmount, destinationInputField, toTokenValue]);
  async function performSwap() {
    const {
      amount,
      fromTokenAddress,
      toTokenAddress,
      toTokenDecimals,
      fromTokenDecimals
    } = getSwapValues();
    if (!networkFee || !optimalRate?.gasCost || !toTokenDecimals || !toTokenAddress || !fromTokenAddress || !fromTokenDecimals || !amount) {
      return;
    }
    setIsConfirming(true);
    const slippage = slippageTolerance || '0';
    const [, error] = await (0,_src_utils_promiseResolver__WEBPACK_IMPORTED_MODULE_4__.resolve)(swap({
      srcToken: fromTokenAddress,
      destToken: toTokenAddress,
      srcDecimals: fromTokenDecimals,
      destDecimals: toTokenDecimals,
      srcAmount: optimalRate.srcAmount,
      priceRoute: optimalRate,
      destAmount: optimalRate.destAmount,
      slippage: parseFloat(slippage)
    }));
    setIsConfirming(false);

    // If there is no error or it wasn't the user rejecting the transaction,
    // we can report that swap operation was confirmed.
    if (!error || !(0,_src_utils_errors__WEBPACK_IMPORTED_MODULE_21__.isUserRejectionError)(error)) {
      captureEncrypted('SwapConfirmed', {
        address: activeAddress,
        chainId: network?.chainId
      });
    }
    if (error && !(0,_src_utils_errors__WEBPACK_IMPORTED_MODULE_21__.isUserRejectionError)(error)) {
      console.error(error);
      (0,_src_monitoring_sentryCaptureException__WEBPACK_IMPORTED_MODULE_17__["default"])(error, _src_monitoring_sentryCaptureException__WEBPACK_IMPORTED_MODULE_17__.SentryExceptionTypes.SWAP);
      const {
        title,
        hint
      } = getTranslatedError(error);
      _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_29__["default"].custom( /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_30__.ToastCard, {
        variant: "error"
      }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_30__.Typography, {
        variant: "body2",
        sx: {
          fontWeight: 'fontWeightSemibold'
        }
      }, title), hint && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_30__.Typography, {
        variant: "caption",
        color: "text.primary"
      }, hint)), {
        duration: 5000
      });
      captureEncrypted('SwapFailed', {
        address: activeAddress,
        chainId: network?.chainId
      });
    }
    if (!error) {
      history.push('/home');
    }
  }
  if (!isSwapSupported) {
    return /*#__PURE__*/React.createElement(_src_components_common_FunctionIsUnavailable__WEBPACK_IMPORTED_MODULE_12__.FunctionIsUnavailable, {
      functionName: _src_hooks_useIsFunctionAvailable__WEBPACK_IMPORTED_MODULE_11__.FunctionNames.SWAP,
      network: network?.chainName || 'Testnet'
    });
  }
  if (!isSwapAvailable) {
    return /*#__PURE__*/React.createElement(_src_components_common_FunctionIsOffline__WEBPACK_IMPORTED_MODULE_9__.FunctionIsOffline, {
      functionName: _src_hooks_useIsFunctionAvailable__WEBPACK_IMPORTED_MODULE_11__.FunctionNames.SWAP
    });
  }
  const canSwap = !swapError?.message && selectedFromToken && selectedToToken && optimalRate && swapGasLimit && (0,_utils__WEBPACK_IMPORTED_MODULE_16__.isSlippageValid)(slippageTolerance) && networkFee;
  const isDetailsAvailable = selectedFromToken && selectedToToken && optimalRate && networkFee;
  if (!isDetailsAvailable && isTransactionDetailsOpen) {
    setIsTransactionDetailsOpen(false);
  }
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_30__.Stack, {
    sx: {
      width: '100%'
    }
  }, /*#__PURE__*/React.createElement(_src_components_common_PageTitle__WEBPACK_IMPORTED_MODULE_6__.PageTitle, null, t('Swap')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_30__.Stack, {
    sx: {
      p: 2,
      mx: 0,
      mb: 0,
      flexGrow: 1
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_30__.Scrollbars, {
    style: {
      flexGrow: 1,
      maxHeight: 'unset',
      height: '100%'
    }
  }, /*#__PURE__*/React.createElement(_src_components_common_TokenSelect__WEBPACK_IMPORTED_MODULE_18__.TokenSelect, {
    label: t('From'),
    onTokenChange: token => {
      onTokenChange({
        fromToken: token
      });
    },
    onSelectToggle: () => {
      setIsFromTokenSelectOpen(!isFromTokenSelectOpen);
      setIsToTokenSelectOpen(false);
    },
    tokensList: tokensWBalances,
    skipHandleMaxAmount: true,
    isOpen: isFromTokenSelectOpen,
    selectedToken: selectedFromToken,
    inputAmount: fromAmount,
    isValueLoading: destinationInputField === 'from' && isLoading,
    hideErrorMessage: true,
    onInputAmountChange: value => {
      onFromInputAmountChange(value);
    },
    setIsOpen: setIsFromTokenSelectOpen,
    withOnlyTokenPreselect: false
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_30__.Stack, {
    sx: {
      flexDirection: 'row',
      my: 2,
      mx: 0,
      justifyContent: `${swapError?.message || swapWarning ? 'space-between' : 'flex-end'}`,
      alignItems: 'start'
    }
  }, swapError?.message && /*#__PURE__*/React.createElement(_components_SwapError__WEBPACK_IMPORTED_MODULE_15__.SwapError, {
    swapError: swapError,
    destinationInputField: destinationInputField,
    fromTokenValue: fromTokenValue,
    toTokenValue: toTokenValue,
    calculateTokenValueToInput: calculateTokenValueToInput,
    selectedFromToken: selectedFromToken,
    selectedToToken: selectedToToken
  }), swapWarning && /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_30__.Typography, {
    variant: "caption",
    sx: {
      color: theme.palette.error.main
    }
  }, swapWarning), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_30__.Stack, {
    "data-testid": "swap-switch-token-button",
    sx: {
      transition: 'all 0.2s',
      transform: isReversed ? 'rotate(0deg)' : 'rotate(180deg)'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_30__.IconButton, {
    variant: "contained",
    color: "secondary",
    onClick: () => {
      reverseTokens(selectedFromToken, selectedToToken);
    },
    disabled: !selectedFromToken || !selectedToToken || isLoading || isConfirming,
    sx: {
      '&.Mui-disabled': {
        backgroundColor: '#FFFFFF10'
      }
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_30__.SwapIcon, {
    size: 20,
    sx: {
      transform: 'rotate(90deg)'
    }
  })))), /*#__PURE__*/React.createElement(_src_components_common_TokenSelect__WEBPACK_IMPORTED_MODULE_18__.TokenSelect, {
    label: t('To'),
    onTokenChange: token => {
      onTokenChange({
        toToken: token
      });
    },
    onSelectToggle: () => {
      setIsToTokenSelectOpen(!isToTokenSelectOpen);
      setIsFromTokenSelectOpen(false);
    },
    tokensList: allSwappableTokens,
    isOpen: isToTokenSelectOpen,
    selectedToken: selectedToToken,
    inputAmount: toAmount,
    isValueLoading: destinationInputField === 'to' && isLoading,
    hideErrorMessage: true,
    onInputAmountChange: value => {
      onToInputAmountChange(value);
    },
    setIsOpen: setIsToTokenSelectOpen,
    withMaxButton: false,
    withOnlyTokenPreselect: false
  }), isDetailsAvailable && /*#__PURE__*/React.createElement(_components_TransactionDetails__WEBPACK_IMPORTED_MODULE_5__.TransactionDetails, {
    fromTokenSymbol: selectedFromToken?.symbol,
    toTokenSymbol: selectedToToken?.symbol,
    rate: (0,_utils__WEBPACK_IMPORTED_MODULE_16__.calculateRate)(optimalRate),
    slippage: slippageTolerance,
    setSlippage: slippage => setSlippageTolerance(slippage),
    setIsOpen: setIsTransactionDetailsOpen,
    isTransactionDetailsOpen: isTransactionDetailsOpen
  }), /*#__PURE__*/React.createElement(ReviewOrderButtonContainer, {
    isTransactionDetailsOpen: isTransactionDetailsOpen
  }, /*#__PURE__*/React.createElement(_components_ParaswapNotice__WEBPACK_IMPORTED_MODULE_10__.ParaswapNotice, null), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_30__.Button, {
    "data-testid": "swap-review-order-button",
    sx: {
      mt: 2
    },
    onClick: async () => {
      capture('SwapReviewOrder', {
        destinationInputField,
        slippageTolerance
      });
      await performSwap();
    },
    fullWidth: true,
    size: "large",
    disabled: isLoading || isConfirming || !canSwap,
    isLoading: isConfirming
  }, t('Review Order'))))));
}
const getTokenFinder = selectedToken => {
  if (selectedToken.type === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.NATIVE) {
    return token => token.type === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.NATIVE && token.symbol === selectedToken.symbol;
  }
  return token => token.type === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.ERC20 && token.address === selectedToken.address;
};

/***/ }),

/***/ "./src/pages/Swap/components/ParaswapNotice.tsx":
/*!******************************************************!*\
  !*** ./src/pages/Swap/components/ParaswapNotice.tsx ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ParaswapNotice": () => (/* binding */ ParaswapNotice)
/* harmony export */ });
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _src_components_icons_ParaswapIcon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @src/components/icons/ParaswapIcon */ "./src/components/icons/ParaswapIcon.tsx");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");



function ParaswapNotice() {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_1__.useTranslation)();
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.Stack, {
    sx: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'center',
      gap: 0.75
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.Typography, {
    variant: "caption"
  }, t('Powered by')), /*#__PURE__*/React.createElement(_src_components_icons_ParaswapIcon__WEBPACK_IMPORTED_MODULE_0__.ParaswapIcon, null), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.Stack, {
    sx: {
      flexDirection: 'row'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.Tooltip, {
    placement: 'top',
    title: t("You will interact directly with Paraswap's smart contracts.")
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__.InfoCircleIcon, {
    size: "14px"
  }))));
}

/***/ }),

/***/ "./src/pages/Swap/components/SlippageToolTip.tsx":
/*!*******************************************************!*\
  !*** ./src/pages/Swap/components/SlippageToolTip.tsx ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SlippageToolTip": () => (/* binding */ SlippageToolTip)
/* harmony export */ });
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");


function SlippageToolTip() {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_0__.useTranslation)();
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__.Tooltip, {
    title: t('Suggested slippage – your transaction will fail if the price changes unfavorably more than this percentage')
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__.InfoCircleIcon, {
    size: "14px"
  }));
}

/***/ }),

/***/ "./src/pages/Swap/components/SwapError.tsx":
/*!*************************************************!*\
  !*** ./src/pages/Swap/components/SwapError.tsx ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SwapError": () => (/* binding */ SwapError)
/* harmony export */ });
/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");
/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bn_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@mui/material/styles/styled.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@mui/material/styles/useTheme.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");



const TryAgainButton = (0,_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_1__["default"])('span')`
  text-decoration: underline;
  cursor: pointer;
`;
function SwapError({
  swapError,
  destinationInputField,
  fromTokenValue,
  toTokenValue,
  calculateTokenValueToInput,
  selectedFromToken,
  selectedToToken
}) {
  const theme = (0,_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_2__["default"])();
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_3__.useTranslation)();
  return /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.Stack, {
    sx: {
      flexDirection: 'row',
      flexGrow: 0,
      alignItems: 'center'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.Typography, {
    variant: "caption",
    sx: {
      color: theme.palette.error.main
    }
  }, swapError.message ?? ''), swapError.hasTryAgain && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_4__.Typography, {
    variant: "caption",
    sx: {
      my: 0,
      mx: 0.5,
      color: theme.palette.error.main
    },
    onClick: () => {
      const value = destinationInputField === 'to' ? fromTokenValue || {
        bn: new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(0),
        amount: '0'
      } : toTokenValue || {
        bn: new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(0),
        amount: '0'
      };
      calculateTokenValueToInput(value, destinationInputField || 'to', selectedFromToken, selectedToToken);
    }
  }, /*#__PURE__*/React.createElement(TryAgainButton, null, t('try again')))));
}

/***/ }),

/***/ "./src/pages/Swap/components/TransactionDetails.tsx":
/*!**********************************************************!*\
  !*** ./src/pages/Swap/components/TransactionDetails.tsx ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TransactionDetails": () => (/* binding */ TransactionDetails)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _SlippageToolTip__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SlippageToolTip */ "./src/pages/Swap/components/SlippageToolTip.tsx");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@mui/material/styles/styled.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@avalabs/core-k2-components/dist/index.js");
/* harmony import */ var _avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @avalabs/core-k2-components */ "./node_modules/@mui/material/styles/useTheme.js");
/* harmony import */ var _src_contexts_SwapProvider_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/contexts/SwapProvider/constants */ "./src/contexts/SwapProvider/constants.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils */ "./src/pages/Swap/utils/index.tsx");
/* harmony import */ var _src_contexts_FeatureFlagsProvider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @src/contexts/FeatureFlagsProvider */ "./src/contexts/FeatureFlagsProvider.tsx");
/* harmony import */ var _src_background_services_featureFlags_models__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @src/background/services/featureFlags/models */ "./src/background/services/featureFlags/models.ts");
/* provided dependency */ var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");








const Container = (0,_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__["default"])('div')`
  margin-bottom: 32px;
`;
const TitleContainer = (0,_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__["default"])(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Stack)`
  flex-direction: row;
  cursor: pointer;
`;
const DetailsContainer = (0,_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__["default"])(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Stack)`
  width: 100%;
`;
const DetailsRow = (0,_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_6__["default"])(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Stack)`
  flex-direction: row;
  justify-content: space-between;
  width: 100%;
  margin: 8px 0;
  align-items: center;
`;
function TransactionDetails({
  fromTokenSymbol,
  toTokenSymbol,
  rate,
  slippage,
  setSlippage,
  setIsOpen,
  isTransactionDetailsOpen
}) {
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_8__.useTranslation)();
  const {
    isFlagEnabled
  } = (0,_src_contexts_FeatureFlagsProvider__WEBPACK_IMPORTED_MODULE_4__.useFeatureFlagContext)();
  const [isDetailsOpen, setIsDetailsOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(isTransactionDetailsOpen || false);
  const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('');
  const theme = (0,_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_9__["default"])();
  return /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(TitleContainer, {
    onClick: () => {
      setIsDetailsOpen(!isDetailsOpen);
      if (!setIsOpen) {
        return;
      }
      setIsOpen(!isDetailsOpen);
    }
  }, /*#__PURE__*/React.createElement(DetailsRow, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Stack, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Typography, {
    variant: "body2",
    sx: {
      fontWeight: theme.typography.fontWeightMedium
    }
  }, t('Transaction details'))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Stack, {
    sx: {
      width: '24px'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.ChevronUpIcon, {
    size: 21,
    sx: {
      transition: 'transform ease .15s',
      transform: isDetailsOpen ? 'rotateX(0deg)' : 'rotateX(180deg)'
    }
  })))), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Grow, {
    in: isDetailsOpen
  }, /*#__PURE__*/React.createElement(DetailsContainer, null, /*#__PURE__*/React.createElement(DetailsRow, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Typography, {
    variant: "body2",
    sx: {
      fontWeight: theme.typography.fontWeightSemibold
    }
  }, t('Rate')), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Typography, {
    variant: "body2"
  }, "1 ", fromTokenSymbol, " \u2248 ", rate?.toFixed(4), " ", toTokenSymbol)), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Stack, null, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Stack, {
    sx: {
      flexDirection: 'row',
      alignItems: 'center',
      mb: 1
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Typography, {
    variant: "body2",
    sx: {
      my: 0,
      mr: 1,
      ml: 0,
      fontWeight: theme.typography.fontWeightSemibold
    }
  }, t('Slippage tolerance')), /*#__PURE__*/React.createElement(_SlippageToolTip__WEBPACK_IMPORTED_MODULE_1__.SlippageToolTip, null)), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Stack, {
    sx: {
      flexDirection: 'column',
      gap: 0.5,
      width: '100%'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.TextField, {
    "data-testid": "swap-slippage-tolerance-input",
    size: 'small',
    value: slippage,
    placeholder: "Input Percent %",
    fullWidth: true,
    type: "number",
    InputProps: {
      inputProps: {
        min: _utils__WEBPACK_IMPORTED_MODULE_3__.MIN_SLIPPAGE,
        max: 100,
        step: 0.1
      }
    },
    onChange: e => {
      const inputValue = e.target.value;
      setSlippage(inputValue);
      if ((0,_utils__WEBPACK_IMPORTED_MODULE_3__.isSlippageValid)(inputValue)) {
        setError('');
      } else {
        setError(t('Enter a value of at least 0.1%'));
      }
    }
  }), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Typography, {
    variant: "caption",
    color: "error.main",
    minHeight: "14px"
  }, error))), isFlagEnabled(_src_background_services_featureFlags_models__WEBPACK_IMPORTED_MODULE_5__.FeatureGates.SWAP_FEES) && /*#__PURE__*/React.createElement(DetailsRow, {
    sx: {
      mt: 2,
      justifyContent: 'start'
    }
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Typography, {
    variant: "caption",
    color: "text.secondary"
  }, t('Quote includes a {{formattedFeePercent}} Core fee', {
    formattedFeePercent: (0,_utils__WEBPACK_IMPORTED_MODULE_3__.formatBasisPointsToPercentage)(_src_contexts_SwapProvider_constants__WEBPACK_IMPORTED_MODULE_2__.PARASWAP_PARTNER_FEE_BPS)
  })), /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.Tooltip, {
    sx: {
      px: 1
    },
    isInfo: true,
    title: t('Core always finds the best price from the top liquidity providers. A fee of {{formattedFeePercent}} is automatically factored into this quote.', {
      formattedFeePercent: (0,_utils__WEBPACK_IMPORTED_MODULE_3__.formatBasisPointsToPercentage)(_src_contexts_SwapProvider_constants__WEBPACK_IMPORTED_MODULE_2__.PARASWAP_PARTNER_FEE_BPS)
    })
  }, /*#__PURE__*/React.createElement(_avalabs_core_k2_components__WEBPACK_IMPORTED_MODULE_7__.InfoCircleIcon, {
    sx: {
      color: 'text.secondary'
    }
  }))))));
}

/***/ }),

/***/ "./src/pages/Swap/hooks/useSwap.tsx":
/*!******************************************!*\
  !*** ./src/pages/Swap/hooks/useSwap.tsx ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "useSwap": () => (/* binding */ useSwap)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/dist/esm5/internal/operators/debounceTime.js");
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react-i18next */ "./node_modules/react-i18next/dist/es/useTranslation.js");
/* harmony import */ var _src_contexts_SwapProvider_swap_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/contexts/SwapProvider/swap-utils */ "./src/contexts/SwapProvider/swap-utils.ts");
/* harmony import */ var _src_contexts_SwapProvider_SwapProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/contexts/SwapProvider/SwapProvider */ "./src/contexts/SwapProvider/SwapProvider.tsx");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils */ "./src/pages/Swap/utils/index.tsx");
/* harmony import */ var _paraswap_sdk__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @paraswap/sdk */ "./node_modules/@paraswap/sdk/dist/sdk.esm.js");







function useSwap() {
  const {
    getRate
  } = (0,_src_contexts_SwapProvider_SwapProvider__WEBPACK_IMPORTED_MODULE_2__.useSwapContext)();
  const [swapError, setSwapError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({
    message: ''
  });
  const [isSwapLoading, setIsSwapLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const [optimalRate, setOptimalRate] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const [swapGasLimit, setSwapGasLimit] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);
  const [destAmount, setDestAmount] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('');
  const [isCalculateAvaxMax, setIsCalculateAvaxMax] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const {
    t
  } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_5__.useTranslation)();
  const setValuesDebouncedSubject = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return new rxjs__WEBPACK_IMPORTED_MODULE_6__.BehaviorSubject({});
  }, []);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const subscription = setValuesDebouncedSubject.pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_7__.debounceTime)(500)).subscribe(({
      amount,
      toTokenAddress,
      fromTokenAddress,
      toTokenDecimals,
      fromTokenDecimals,
      destinationInputField,
      fromTokenBalance
    }) => {
      if (amount && toTokenAddress && fromTokenAddress && fromTokenDecimals && toTokenDecimals) {
        const amountString = amount.toString();
        if (amountString === '0') {
          setSwapError({
            message: t('Please enter an amount')
          });
          setDestAmount('');
          setIsSwapLoading(false);
          return;
        }
        const swapSide = destinationInputField === 'to' ? _paraswap_sdk__WEBPACK_IMPORTED_MODULE_4__.SwapSide.SELL : _paraswap_sdk__WEBPACK_IMPORTED_MODULE_4__.SwapSide.BUY;
        setIsSwapLoading(true);
        getRate({
          srcToken: fromTokenAddress,
          srcDecimals: fromTokenDecimals,
          destToken: toTokenAddress,
          destDecimals: toTokenDecimals,
          srcAmount: amountString,
          swapSide
        }).then(result => {
          /**
           * This can be an error, the bacground tries 10x but if the
           * server is still "busy" it sends the error
           */
          if ((0,_utils__WEBPACK_IMPORTED_MODULE_3__.isAPIError)(result.optimalRate)) {
            throw new Error(t('paraswap error message while get rate: {{message}}', {
              message: result.optimalRate.message
            }));
          }
          // Never modify the properies of the optimalRate since the swap API needs it unchanged
          setOptimalRate(result.optimalRate);
          setSwapGasLimit(Number(result.optimalRate?.gasCost || 0));
          const resultAmount = destinationInputField === 'to' ? result.optimalRate?.destAmount : result.optimalRate?.srcAmount;
          setDestAmount(resultAmount ?? '');
          if (fromTokenBalance && destinationInputField === 'from' && BigInt(resultAmount ?? '') > fromTokenBalance) {
            setSwapError({
              message: t('Insufficient balance.')
            });
            return;
          }
          if (fromTokenBalance && destinationInputField === 'to' && amount > fromTokenBalance) {
            setSwapError({
              message: t('Insufficient balance.')
            });
            return;
          }
          setSwapError({
            message: ''
          });
        }).catch(error => {
          setOptimalRate(undefined);
          setDestAmount('');
          setSwapError((0,_src_contexts_SwapProvider_swap_utils__WEBPACK_IMPORTED_MODULE_1__.paraswapErrorToSwapError)(error));
        }).finally(() => {
          if (!isCalculateAvaxMax) {
            setIsSwapLoading(false);
            return;
          }
          setIsCalculateAvaxMax(false);
        });
      } else {
        setDestAmount('');
        setOptimalRate(undefined);
      }
    });
    return () => {
      subscription.unsubscribe();
    };
  }, [getRate, setValuesDebouncedSubject, isCalculateAvaxMax, setIsSwapLoading, setSwapError, setIsCalculateAvaxMax, t]);
  return {
    setValuesDebouncedSubject,
    swapError,
    setSwapError,
    setIsSwapLoading,
    isSwapLoading,
    optimalRate,
    swapGasLimit,
    destAmount,
    setDestAmount
  };
}

/***/ }),

/***/ "./src/pages/Swap/hooks/useSwapStateFunctions.ts":
/*!*******************************************************!*\
  !*** ./src/pages/Swap/hooks/useSwapStateFunctions.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "useSwapStateFunctions": () => (/* binding */ useSwapStateFunctions)
/* harmony export */ });
/* harmony import */ var i18next__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! i18next */ "./node_modules/i18next/dist/esm/i18next.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _avalabs_core_utils_sdk__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @avalabs/core-utils-sdk */ "./node_modules/@avalabs/core-utils-sdk/esm/bigIntToString.js");
/* harmony import */ var _src_utils_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/utils/constants */ "./src/utils/constants.ts");
/* harmony import */ var _src_hooks_useTokensWithBalances__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @src/hooks/useTokensWithBalances */ "./src/hooks/useTokensWithBalances.ts");
/* harmony import */ var _src_hooks_usePageHistory__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @src/hooks/usePageHistory */ "./src/hooks/usePageHistory.ts");
/* harmony import */ var _src_hooks_useSendAnalyticsData__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @src/hooks/useSendAnalyticsData */ "./src/hooks/useSendAnalyticsData.ts");
/* harmony import */ var _useSwap__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./useSwap */ "./src/pages/Swap/hooks/useSwap.tsx");
/* harmony import */ var _src_contexts_SwapProvider_models__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @src/contexts/SwapProvider/models */ "./src/contexts/SwapProvider/models.ts");
/* harmony import */ var _src_utils_stringToBigint__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @src/utils/stringToBigint */ "./src/utils/stringToBigint.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils */ "./src/pages/Swap/utils/index.tsx");
/* harmony import */ var _useTokensBySymbols__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./useTokensBySymbols */ "./src/pages/Swap/hooks/useTokensBySymbols.ts");












function useSwapStateFunctions() {
  const tokensWBalances = (0,_src_hooks_useTokensWithBalances__WEBPACK_IMPORTED_MODULE_3__.useTokensWithBalances)({
    disallowedAssets: _src_contexts_SwapProvider_models__WEBPACK_IMPORTED_MODULE_7__.DISALLOWED_SWAP_ASSETS
  });
  const {
    getPageHistoryData,
    setNavigationHistoryData
  } = (0,_src_hooks_usePageHistory__WEBPACK_IMPORTED_MODULE_4__.usePageHistory)();
  const {
    sendTokenSelectedAnalytics,
    sendAmountEnteredAnalytics
  } = (0,_src_hooks_useSendAnalyticsData__WEBPACK_IMPORTED_MODULE_5__.useSendAnalyticsData)();
  const pageHistory = getPageHistoryData();
  const [destinationInputField, setDestinationInputField] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');
  const [selectedFromToken, setSelectedFromToken] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();
  const [selectedToToken, setSelectedToToken] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();
  const [isReversed, setIsReversed] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
  const [swapWarning, setSwapWarning] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');
  const [defaultFromValue, setFromDefaultValue] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();
  const [fromTokenValue, setFromTokenValue] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();
  const [toTokenValue, setToTokenValue] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();
  const {
    setValuesDebouncedSubject,
    swapError,
    isSwapLoading,
    setIsSwapLoading,
    optimalRate,
    swapGasLimit,
    destAmount,
    setDestAmount,
    setSwapError
  } = (0,_useSwap__WEBPACK_IMPORTED_MODULE_6__.useSwap)();
  const calculateTokenValueToInput = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((amount, destinationInput, sourceToken, destinationToken) => {
    if (!sourceToken || !destinationToken) {
      return;
    }
    setSwapWarning('');
    setDestinationInputField(destinationInput);
    setValuesDebouncedSubject.next({
      ...setValuesDebouncedSubject.getValue(),
      fromTokenAddress: (0,_utils__WEBPACK_IMPORTED_MODULE_9__.getTokenAddress)(sourceToken),
      toTokenAddress: (0,_utils__WEBPACK_IMPORTED_MODULE_9__.getTokenAddress)(destinationToken),
      fromTokenDecimals: sourceToken.decimals,
      toTokenDecimals: destinationToken.decimals,
      amount,
      destinationInputField: destinationInput,
      fromTokenBalance: sourceToken?.balance
    });
  }, [setValuesDebouncedSubject]);
  const {
    $NATIVE,
    USDC
  } = (0,_useTokensBySymbols__WEBPACK_IMPORTED_MODULE_10__.useTokensBySymbols)({
    $NATIVE: true,
    USDC: _src_utils_constants__WEBPACK_IMPORTED_MODULE_2__.USDC_ADDRESSES
  });

  // reload and recalculate the data from the history
  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {
    if (pageHistory && !pageHistory.isLoading && !selectedFromToken && !selectedToToken) {
      const historyFromToken = pageHistory.selectedFromToken ? {
        ...pageHistory.selectedFromToken,
        balance: pageHistory.selectedFromToken.balance
      } : $NATIVE;
      setSelectedFromToken(historyFromToken);
      const historyToToken = pageHistory.selectedToToken ? {
        ...pageHistory.selectedToToken,
        balance: pageHistory.selectedToToken.balance
      } : USDC;
      setSelectedToToken(historyToToken);
      const tokenValueBigint = pageHistory.tokenValue ?? 0n;
      if (pageHistory.destinationInputField === 'from') {
        setToTokenValue({
          bigint: tokenValueBigint,
          amount: (0,_avalabs_core_utils_sdk__WEBPACK_IMPORTED_MODULE_11__.bigIntToString)(tokenValueBigint, historyToToken?.decimals ?? 18)
        });
      } else {
        setFromDefaultValue(tokenValueBigint);
      }
      calculateTokenValueToInput(tokenValueBigint, pageHistory.destinationInputField || 'to', historyFromToken, historyToToken);
    }
  }, [calculateTokenValueToInput, pageHistory, USDC, $NATIVE, selectedFromToken, selectedToToken]);
  const resetValues = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(clearTokens => {
    setFromTokenValue(undefined);
    setFromDefaultValue(undefined);
    setToTokenValue(undefined);
    setSwapWarning('');
    setDestinationInputField('');
    if (clearTokens) {
      setSelectedFromToken($NATIVE);
      setSelectedToToken(USDC);
    }
    setValuesDebouncedSubject.next({
      ...setValuesDebouncedSubject.getValue(),
      amount: undefined,
      destinationInputField: undefined
    });
  }, [setValuesDebouncedSubject, $NATIVE, USDC]);
  const calculateSwapValue = ({
    fromToken,
    toToken,
    fromValue,
    toValue
  }) => {
    if (!fromToken || !toToken) {
      return;
    }
    if (fromValue) {
      calculateTokenValueToInput(fromValue.bigint, 'to', fromToken, toToken);
    } else if (toValue) {
      calculateTokenValueToInput(toValue.bigint, 'from', fromToken, toToken);
    } else {
      resetValues();
    }
  };
  const reverseTokens = (fromToken, toToken) => {
    if (!tokensWBalances.some(token => token.name === toToken?.name && token.symbol === toToken?.symbol)) {
      setSwapWarning((0,i18next__WEBPACK_IMPORTED_MODULE_0__.t)(`You don't have any {{symbol}} token for swap`, {
        symbol: toToken?.symbol
      }));
      return;
    }
    setSwapError({
      message: ''
    });
    setSelectedFromToken(toToken);
    setSelectedToToken(fromToken);
    setIsReversed(reversed => reversed);
    if (!toToken || !fromToken || !destAmount) {
      return;
    }
    const fromValue = destinationInputField === 'to' ? {
      amount: (0,_avalabs_core_utils_sdk__WEBPACK_IMPORTED_MODULE_11__.bigIntToString)(BigInt(destAmount), fromToken.decimals),
      bigint: BigInt(destAmount)
    } : toTokenValue;
    setDestAmount('');
    setFromTokenValue(fromValue);
    setToTokenValue(undefined);
    if (fromValue) {
      setFromDefaultValue(fromValue.bigint);
      setIsSwapLoading(true);
      calculateTokenValueToInput(fromValue.bigint, 'to', toToken, fromToken);
    }
  };
  const onTokenChange = ({
    fromToken,
    toToken
  }) => {
    sendTokenSelectedAnalytics('Swap');
    setSwapWarning('');
    if (fromToken) {
      setSelectedFromToken(fromToken);
    } else if (toToken) {
      setSelectedToToken(toToken);
    }
    const data = {
      toToken: toToken ?? selectedToToken,
      fromToken: fromToken ?? selectedFromToken,
      fromValue: destinationInputField === 'to' ? fromTokenValue : undefined,
      toValue: destinationInputField === 'to' ? undefined : toTokenValue
    };
    const newTokenDecimals = (toToken ?? fromToken).decimals;
    const prevTokenDecimals = (toToken ? selectedToToken : selectedFromToken)?.decimals;
    const decimalsDiff = typeof prevTokenDecimals === 'number' ? newTokenDecimals - prevTokenDecimals : 0;

    // If previous and new token have different denominations,
    // we need to recalculate the amount.
    const currentAmount = destinationInputField === 'to' && fromToken ? fromTokenValue : destinationInputField === 'from' && toToken ? toTokenValue : undefined;
    if (decimalsDiff && currentAmount) {
      const amount = {
        amount: currentAmount.amount,
        bigint: (0,_src_utils_stringToBigint__WEBPACK_IMPORTED_MODULE_8__.stringToBigint)(currentAmount.amount, newTokenDecimals)
      };
      if (fromToken) {
        setFromDefaultValue(amount.bigint);
        setFromTokenValue(amount);
        calculateTokenValueToInput(amount.bigint, destinationInputField, fromToken, selectedToToken);
      } else if (toToken) {
        setToTokenValue(amount);
        calculateTokenValueToInput(amount.bigint, destinationInputField, selectedToToken, toToken);
      }
    } else {
      calculateSwapValue(data);
    }
    setNavigationHistoryData({
      selectedFromToken: data.fromToken,
      selectedToToken: data.toToken,
      tokenValue: (data.fromValue ?? data.toValue)?.bigint,
      destinationInputField
    });
  };
  const onFromInputAmountChange = value => {
    setDestAmount('');
    setFromDefaultValue(value.bigint);
    setFromTokenValue(value);
    calculateTokenValueToInput(value.bigint, 'to', selectedFromToken, selectedToToken);
    setNavigationHistoryData({
      selectedFromToken,
      selectedToToken,
      tokenValue: value.bigint,
      destinationInputField: 'to'
    });
    sendAmountEnteredAnalytics('Swap');
  };
  const onToInputAmountChange = value => {
    setDestAmount('');
    setToTokenValue(value);
    calculateTokenValueToInput(value.bigint, 'from', selectedFromToken, selectedToToken);
    setNavigationHistoryData({
      selectedFromToken,
      selectedToToken,
      tokenValue: value.bigint,
      destinationInputField: 'from'
    });
    sendAmountEnteredAnalytics('Swap');
  };
  const getSwapValues = () => setValuesDebouncedSubject.getValue();
  return {
    calculateTokenValueToInput,
    reverseTokens,
    onTokenChange,
    onFromInputAmountChange,
    onToInputAmountChange,
    setValuesDebouncedSubject,
    selectedFromToken,
    swapGasLimit,
    selectedToToken,
    destinationInputField,
    fromTokenValue,
    swapError: swapError.message ? swapError : null,
    isLoading: isSwapLoading,
    defaultFromValue,
    swapWarning,
    isReversed,
    toTokenValue,
    optimalRate,
    destAmount,
    getSwapValues,
    resetValues
  };
}

/***/ }),

/***/ "./src/pages/Swap/hooks/useTokensBySymbols.ts":
/*!****************************************************!*\
  !*** ./src/pages/Swap/hooks/useTokensBySymbols.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "useTokensBySymbols": () => (/* binding */ useTokensBySymbols)
/* harmony export */ });
/* harmony import */ var _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @avalabs/vm-module-types */ "./node_modules/@avalabs/vm-module-types/dist/index.js");
/* harmony import */ var _src_contexts_NetworkProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/contexts/NetworkProvider */ "./src/contexts/NetworkProvider.tsx");
/* harmony import */ var _src_contexts_SwapProvider_models__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/contexts/SwapProvider/models */ "./src/contexts/SwapProvider/models.ts");
/* harmony import */ var _src_hooks_useTokensWithBalances__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @src/hooks/useTokensWithBalances */ "./src/hooks/useTokensWithBalances.ts");




function useTokensBySymbols(requestedTokens) {
  const {
    network
  } = (0,_src_contexts_NetworkProvider__WEBPACK_IMPORTED_MODULE_1__.useNetworkContext)();
  const balances = (0,_src_hooks_useTokensWithBalances__WEBPACK_IMPORTED_MODULE_3__.useTokensWithBalances)({
    disallowedAssets: _src_contexts_SwapProvider_models__WEBPACK_IMPORTED_MODULE_2__.DISALLOWED_SWAP_ASSETS,
    forceShowTokensWithoutBalances: true
  });
  const nativeSymbol = network?.networkToken.symbol;
  return Object.entries(requestedTokens).reduce((dict, [symbol, identifier]) => {
    if (!identifier) {
      return dict;
    }
    return {
      ...dict,
      [symbol]: balances.find(token => {
        if (typeof identifier === 'boolean') {
          return token.type === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.NATIVE && token.symbol === nativeSymbol;
        } else if (Array.isArray(identifier)) {
          return token.type !== _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.NATIVE && identifier.includes(token.address.toLowerCase());
        }
      })
    };
  }, {});
}

/***/ }),

/***/ "./src/utils/constants.ts":
/*!********************************!*\
  !*** ./src/utils/constants.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "USDC_ADDRESSES": () => (/* binding */ USDC_ADDRESSES),
/* harmony export */   "USDC_ADDRESS_C_CHAIN": () => (/* binding */ USDC_ADDRESS_C_CHAIN),
/* harmony export */   "USDC_ADDRESS_ETHEREUM": () => (/* binding */ USDC_ADDRESS_ETHEREUM)
/* harmony export */ });
const USDC_ADDRESS_C_CHAIN = '0xb97ef9ef8734c71904d8002f8b6bc66dd9c48a6e';
const USDC_ADDRESS_ETHEREUM = '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48';
const USDC_ADDRESSES = [USDC_ADDRESS_C_CHAIN, USDC_ADDRESS_ETHEREUM];

/***/ }),

/***/ "./node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BehaviorSubject": () => (/* binding */ BehaviorSubject)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Subject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Subject */ "./node_modules/rxjs/dist/esm5/internal/Subject.js");


var BehaviorSubject = (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(BehaviorSubject, _super);
    function BehaviorSubject(_value) {
        var _this = _super.call(this) || this;
        _this._value = _value;
        return _this;
    }
    Object.defineProperty(BehaviorSubject.prototype, "value", {
        get: function () {
            return this.getValue();
        },
        enumerable: false,
        configurable: true
    });
    BehaviorSubject.prototype._subscribe = function (subscriber) {
        var subscription = _super.prototype._subscribe.call(this, subscriber);
        !subscription.closed && subscriber.next(this._value);
        return subscription;
    };
    BehaviorSubject.prototype.getValue = function () {
        var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, _value = _a._value;
        if (hasError) {
            throw thrownError;
        }
        this._throwIfClosed();
        return _value;
    };
    BehaviorSubject.prototype.next = function (value) {
        _super.prototype.next.call(this, (this._value = value));
    };
    return BehaviorSubject;
}(_Subject__WEBPACK_IMPORTED_MODULE_1__.Subject));

//# sourceMappingURL=BehaviorSubject.js.map

/***/ }),

/***/ "./node_modules/rxjs/dist/esm5/internal/operators/debounceTime.js":
/*!************************************************************************!*\
  !*** ./node_modules/rxjs/dist/esm5/internal/operators/debounceTime.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "debounceTime": () => (/* binding */ debounceTime)
/* harmony export */ });
/* harmony import */ var _scheduler_async__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scheduler/async */ "./node_modules/rxjs/dist/esm5/internal/scheduler/async.js");
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/lift */ "./node_modules/rxjs/dist/esm5/internal/util/lift.js");
/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./OperatorSubscriber */ "./node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js");



function debounceTime(dueTime, scheduler) {
    if (scheduler === void 0) { scheduler = _scheduler_async__WEBPACK_IMPORTED_MODULE_0__.asyncScheduler; }
    return (0,_util_lift__WEBPACK_IMPORTED_MODULE_1__.operate)(function (source, subscriber) {
        var activeTask = null;
        var lastValue = null;
        var lastTime = null;
        var emit = function () {
            if (activeTask) {
                activeTask.unsubscribe();
                activeTask = null;
                var value = lastValue;
                lastValue = null;
                subscriber.next(value);
            }
        };
        function emitWhenIdle() {
            var targetTime = lastTime + dueTime;
            var now = scheduler.now();
            if (now < targetTime) {
                activeTask = this.schedule(undefined, targetTime - now);
                subscriber.add(activeTask);
                return;
            }
            emit();
        }
        source.subscribe(new _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__.OperatorSubscriber(subscriber, function (value) {
            lastValue = value;
            lastTime = scheduler.now();
            if (!activeTask) {
                activeTask = scheduler.schedule(emitWhenIdle, dueTime);
                subscriber.add(activeTask);
            }
        }, function () {
            emit();
            subscriber.complete();
        }, undefined, function () {
            lastValue = activeTask = null;
        }));
    });
}
//# sourceMappingURL=debounceTime.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,