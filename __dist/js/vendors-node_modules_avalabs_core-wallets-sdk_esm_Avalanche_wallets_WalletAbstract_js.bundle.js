(self["webpackChunkavalanche_extension"] = self["webpackChunkavalanche_extension"] || []).push([["vendors-node_modules_avalabs_core-wallets-sdk_esm_Avalanche_wallets_WalletAbstract_js"],{

/***/ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/getAllUTXOs.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/getAllUTXOs.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getPaginatedUTXOs": () => (/* binding */ r),
/* harmony export */   "getUTXOsForAddresses": () => (/* binding */ s)
/* harmony export */ });
/* harmony import */ var _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @avalabs/avalanchejs */ "./node_modules/@avalabs/avalanchejs/dist/es/index.js");
const t=1024,n=1024;async function s(e,n,a){const o=e.slice(0,t),c=e.slice(t),i=await r(n,{...a,addresses:o});if(c.length){const t=await s(c,n,{...a,addresses:e});return i.merge(t)}return i}async function r(s,a){if(a.addresses.length>t)throw new Error(`Can not get UTXOs for more than ${t} addresses.`);const{endIndex:o,utxos:c}=await s.getUTXOs(a),i=new _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_0__.utils.UtxoSet(c);if(c.length>=n){const e=await r(s,{...a,startIndex:o});return i.merge(e)}return i}


/***/ }),

/***/ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/getStakeForAddresses.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/getStakeForAddresses.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getStakeForAddresses": () => (/* binding */ t)
/* harmony export */ });
async function t(s,e){const a=s.slice(0,256),u=s.slice(256),d=await e.getStake({addresses:a});if(u.length){const s=await t(u,e);return{staked:d.staked+s.staked,stakedOutputs:[...d.stakedOutputs,...s.stakedOutputs]}}return d}


/***/ }),

/***/ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/getUnixNow.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/getUnixNow.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getUnixNow": () => (/* binding */ t)
/* harmony export */ });
function t(){return BigInt(Math.floor(Date.now()/1e3))}


/***/ }),

/***/ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/orderBy.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/orderBy.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "orderBy": () => (/* binding */ r)
/* harmony export */ });
function r(r,t,n){return[...r].sort(((r,e)=>{for(let o=0;o<t.length;o++){const u=t[o];if(r[u]>e[u])return"asc"===n?1:-1;if(r[u]<e[u])return"asc"===n?-1:1}return 0}))}


/***/ }),

/***/ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/sortUTXOs.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/sortUTXOs.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sortUTXOsByAmount": () => (/* binding */ m),
/* harmony export */   "sortUTXOsByAmountAscending": () => (/* binding */ r),
/* harmony export */   "sortUTXOsByAmountDescending": () => (/* binding */ n),
/* harmony export */   "sortUTXOsStaking": () => (/* binding */ a)
/* harmony export */ });
/* harmony import */ var _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @avalabs/avalanchejs */ "./node_modules/@avalabs/avalanchejs/dist/es/index.js");
/* harmony import */ var _getUnixNow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getUnixNow.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/getUnixNow.js");
/* harmony import */ var _orderBy_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./orderBy.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/orderBy.js");
function a(a){const m=(0,_getUnixNow_js__WEBPACK_IMPORTED_MODULE_0__.getUnixNow)(),n=a.map((o=>({utxo:o,..._avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_1__.utils.getUtxoInfo(o)}))),r=n.filter((t=>t.stakeableLocktime<=m)),s=n.filter((t=>t.stakeableLocktime>m)),c=(0,_orderBy_js__WEBPACK_IMPORTED_MODULE_2__.orderBy)(r,["amount"],"desc"),i=(0,_orderBy_js__WEBPACK_IMPORTED_MODULE_2__.orderBy)(s,["stakeableLocktime","amount"],"desc"),[u,...f]=c;return[...u?[u]:[],...i,...f].map((t=>t.utxo))}function m(o,a){const m=o.map((o=>({utxo:o,..._avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_1__.utils.getUtxoInfo(o)})));return (0,_orderBy_js__WEBPACK_IMPORTED_MODULE_2__.orderBy)(m,["amount"],a?"desc":"asc").map((t=>t.utxo))}const n=t=>m(t,!0),r=t=>m(t,!1);


/***/ }),

/***/ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/wallets/WalletAbstract.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/wallets/WalletAbstract.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "WalletAbstract": () => (/* binding */ l)
/* harmony export */ });
/* harmony import */ var _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @avalabs/avalanchejs */ "./node_modules/@avalabs/avalanchejs/dist/es/index.js");
/* harmony import */ var _avalabs_core_utils_sdk__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @avalabs/core-utils-sdk */ "./node_modules/@avalabs/core-utils-sdk/esm/strip0x.js");
/* harmony import */ var create_hash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! create-hash */ "./node_modules/create-hash/browser.js");
/* harmony import */ var create_hash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(create_hash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var bip32__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bip32 */ "./node_modules/bip32/src/index.js");
/* harmony import */ var _utils_getAllUTXOs_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/getAllUTXOs.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/getAllUTXOs.js");
/* harmony import */ var _utils_getStakeForAddresses_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/getStakeForAddresses.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/getStakeForAddresses.js");
/* harmony import */ var bip39__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! bip39 */ "./node_modules/@avalabs/core-wallets-sdk/node_modules/bip39/src/index.js");
/* harmony import */ var xss__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! xss */ "./node_modules/@avalabs/core-wallets-sdk/node_modules/xss/lib/index.js");
/* harmony import */ var xss__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(xss__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _utils_sortUTXOs_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/sortUTXOs.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/sortUTXOs.js");
/* harmony import */ var bip32_path__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! bip32-path */ "./node_modules/bip32-path/index.js");
/* harmony import */ var bip32_path__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(bip32_path__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _utils_assertFeeStateProvided_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../utils/assertFeeStateProvided.js */ "./node_modules/@avalabs/core-wallets-sdk/esm/utils/assertFeeStateProvided.js");
/* provided dependency */ var Buffer = __webpack_require__(/*! ./node_modules/node-polyfill-webpack-plugin/node_modules/buffer/index.js */ "./node_modules/node-polyfill-webpack-plugin/node_modules/buffer/index.js")["Buffer"];
const{parse:f,hexToBuffer:x}=_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_5__.utils;class l{constructor(e){this.provider=e}setProvider(e){this.provider=e}getProvider(){return this.provider}async getUTXOs(e){const s=this.provider.getApi(e);return (0,_utils_getAllUTXOs_js__WEBPACK_IMPORTED_MODULE_6__.getUTXOsForAddresses)(this.getAddresses(e),s)}async getStake(){const e=this.provider.getApiP();return (0,_utils_getStakeForAddresses_js__WEBPACK_IMPORTED_MODULE_7__.getStakeForAddresses)(this.getAddresses("P"),e)}async getAtomicUTXOs(e,s){if(e===s)throw new Error("Chain can not be the same as source chain.");const t=this.provider.getApi(e),r=this.provider.getChainID(s);return (0,_utils_getAllUTXOs_js__WEBPACK_IMPORTED_MODULE_6__.getUTXOsForAddresses)(this.getAddresses(e),t,{sourceChain:r,addresses:[]})}async getNonce(){const e=this.getAddressEVM();return await this.provider.evmRpc.getTransactionCount(e)}exportX(t,r,d,n){n=n||this.getCurrentAddress(d);const o=f(n)[2],i=this.provider.getAvaxID(),a=_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_5__.TransferableOutput.fromNative(i,t,[o]),m=(0,_utils_sortUTXOs_js__WEBPACK_IMPORTED_MODULE_8__.sortUTXOsByAmount)(r.getUTXOs(),!0),h=this.provider.getChainID(d),g=this.getAddresses("X").map((e=>f(e)[2])),A=f(this.getChangeAddress("X"))[2];return _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_5__.avm.newExportTx(this.provider.getContext(),h,g,m,[a],{threshold:1,changeAddresses:[A]})}importP({utxoSet:e,sourceChain:s,toAddress:r,threshold:d,feeState:n,locktime:o}){const i=this.provider.getChainID(s),a=this.getAddresses("P").map((e=>f(e)[2]));f(this.getChangeAddress("P"))[2],r=r||this.getCurrentAddress("P");const m=f(r)[2],h=e.getUTXOs();return (0,_utils_assertFeeStateProvided_js__WEBPACK_IMPORTED_MODULE_9__.assertFeeStateProvided)(n),_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_5__.pvm.newImportTx({fromAddressesBytes:a,utxos:h,toAddressesBytes:[m],sourceChainId:i,threshold:d,feeState:n,locktime:o},this.provider.getContext())}importX(e,t,r){const d=this.provider.getChainID(t),n=this.getAddresses("X").map((e=>f(e)[2])),o=f(this.getChangeAddress("X"))[2];r=r||this.getCurrentAddress("X");const i=f(r)[2];return _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_5__.avm.newImportTx(this.provider.getContext(),d,e.getUTXOs(),[i],n,{changeAddresses:[o]})}importC(e,s,t,d,n){const o=this.provider.getChainID(s),i=this.getAddresses("C").map((e=>f(e)[2]));n=n||this.getAddressEVM();const a=Buffer.from((0,_avalabs_core_utils_sdk__WEBPACK_IMPORTED_MODULE_10__.strip0x)(n),"hex");return _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_5__.evm.newImportTxFromBaseFee(this.provider.getContext(),a,i,e.getUTXOs(),o,t,d)}exportC(e,s,t,d,n){const o=x(this.getAddressEVM()),i=this.provider.getChainID(s);n=n||this.getCurrentAddress(s);const a=f(n)[2],m=d/BigInt(1e9);return _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_5__.evm.newExportTxFromBaseFee(this.provider.getContext(),m,e,i,o,[a],t)}exportP({amount:s,utxoSet:r,destination:d,feeState:n,toAddress:o}){o=o||this.getCurrentAddress(d);const i=f(o)[2],a=this.provider.getAvaxID(),m=_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_5__.TransferableOutput.fromNative(a,s,[i]),h=(0,_utils_sortUTXOs_js__WEBPACK_IMPORTED_MODULE_8__.sortUTXOsByAmount)(r.getUTXOs(),!0),g=this.provider.getChainID(d),A=this.getAddresses("P").map((e=>f(e)[2])),c=f(this.getChangeAddress("P"))[2];return (0,_utils_assertFeeStateProvided_js__WEBPACK_IMPORTED_MODULE_9__.assertFeeStateProvided)(n),_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_5__.pvm.newExportTx({changeAddressesBytes:[c],fromAddressesBytes:A,utxos:h,outputs:[m],destinationChainId:g,feeState:n},this.provider.getContext())}consolidateP({utxoSet:s,amount:r,feeState:d,toAddress:n,options:o}){const i=(0,_utils_sortUTXOs_js__WEBPACK_IMPORTED_MODULE_8__.sortUTXOsByAmountAscending)(s.getUTXOs());n=n??this.getCurrentAddress("P");const a=f(n)[2],m=this.provider.getContext(),h=[_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_5__.TransferableOutput.fromNative(m.avaxAssetID,r,[a])],g=this.getAddresses("P").map((e=>f(e)[2])),u=f(this.getChangeAddress("P"))[2],c=o?.changeAddresses??[u];return (0,_utils_assertFeeStateProvided_js__WEBPACK_IMPORTED_MODULE_9__.assertFeeStateProvided)(d),_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_5__.pvm.newBaseTx({changeAddressesBytes:c,fromAddressesBytes:g,utxos:i,outputs:h,minIssuanceTime:o?.minIssuanceTime,memo:o?.memo,feeState:d},m)}baseTX({utxoSet:r,chain:d,toAddress:n,amountsPerAsset:o,feeState:i,options:a,fromAddresses:m}){const[h,g,A]=f(n);if(h!==d||g!==this.provider.getHrp())throw new Error(`Invalid recipient address "${n}"`);const c=Object.entries(o).map((([s,t])=>_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_5__.TransferableOutput.fromNative(s,t,[A]))),x=(0,_utils_sortUTXOs_js__WEBPACK_IMPORTED_MODULE_8__.sortUTXOsByAmount)(r.getUTXOs(),!0),l=(m??this.getAddresses(d)).map((e=>f(e)[2])),I=f(this.getChangeAddress("P"))[2],T=a?.changeAddresses??[I];return"X"===d?_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_5__.avm.newBaseTx(this.provider.getContext(),l,x,c,a):((0,_utils_assertFeeStateProvided_js__WEBPACK_IMPORTED_MODULE_9__.assertFeeStateProvided)(i),_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_5__.pvm.newBaseTx({changeAddressesBytes:T,fromAddressesBytes:l,utxos:x,outputs:c,minIssuanceTime:a?.minIssuanceTime,memo:a?.memo,feeState:i},this.provider.getContext()))}convertSubnetToL1({utxoSet:e,chainId:s,subnetId:r,subnetAuth:a,feeState:m,address:h,validators:g,options:A,fromAddresses:c}){const p=(c??this.getAddresses("P")).map((e=>f(e)[2])),x=f(this.getChangeAddress("P"))[2],l=A?.changeAddresses??[x],I=g.map((({nodeId:e,pubKey:s,signature:t,balance:r,weight:a,deactivationOwner:m,remainingBalanceOwner:h})=>{const g=new _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_5__.pvmSerial.ProofOfPossession(Uint8Array.from(_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_5__.utils.hexToBuffer(s)),Uint8Array.from(_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_5__.utils.hexToBuffer(t))),u=_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_5__.PChainOwner.fromNative(h.addresses.map((e=>f(e)[2])),h.threshold??1),A=_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_5__.PChainOwner.fromNative(m.addresses.map((e=>f(e)[2])),m.threshold??1);return _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_5__.L1Validator.fromNative(e,a,r,g,u,A)}));return _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_5__.pvm.newConvertSubnetToL1Tx({changeAddressesBytes:l,validators:I,fromAddressesBytes:p,address:f(h)[2],chainId:s,subnetId:r,subnetAuth:a,feeState:m,utxos:(0,_utils_sortUTXOs_js__WEBPACK_IMPORTED_MODULE_8__.sortUTXOsByAmount)(e.getUTXOs(),!0)},this.provider.getContext())}registerL1Validator({utxoSet:e,balance:s,signature:r,message:d,feeState:o,fromAddresses:i,options:a}){const m=(i??this.getAddresses("P")).map((e=>f(e)[2])),h=f(this.getChangeAddress("P"))[2],g=a?.changeAddresses??[h];return _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_5__.pvm.newRegisterL1ValidatorTx({utxos:(0,_utils_sortUTXOs_js__WEBPACK_IMPORTED_MODULE_8__.sortUTXOsByAmount)(e.getUTXOs(),!0),balance:s,blsSignature:Uint8Array.from(_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_5__.utils.hexToBuffer(r)),changeAddressesBytes:g,feeState:o,fromAddressesBytes:m,memo:a?.memo,message:Uint8Array.from(_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_5__.utils.hexToBuffer(d)),minIssuanceTime:a?.minIssuanceTime},this.provider.getContext())}setL1ValidatorWeight({utxoSet:e,feeState:s,message:r,options:d,fromAddresses:o}){const i=(o??this.getAddresses("P")).map((e=>f(e)[2])),a=f(this.getChangeAddress("P"))[2],m=d?.changeAddresses??[a];return _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_5__.pvm.newSetL1ValidatorWeightTx({utxos:(0,_utils_sortUTXOs_js__WEBPACK_IMPORTED_MODULE_8__.sortUTXOsByAmount)(e.getUTXOs(),!0),changeAddressesBytes:m,feeState:s,fromAddressesBytes:i,memo:d?.memo,message:Uint8Array.from(_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_5__.utils.hexToBuffer(r)),minIssuanceTime:d?.minIssuanceTime},this.provider.getContext())}disableL1Validator({utxoSet:e,feeState:s,options:r,fromAddresses:d,disableAuth:n,validationId:o}){const i=(d??this.getAddresses("P")).map((e=>f(e)[2])),a=f(this.getChangeAddress("P"))[2],m=r?.changeAddresses??[a];return _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_5__.pvm.newDisableL1ValidatorTx({disableAuth:n,validationId:o,utxos:(0,_utils_sortUTXOs_js__WEBPACK_IMPORTED_MODULE_8__.sortUTXOsByAmount)(e.getUTXOs(),!0),changeAddressesBytes:m,feeState:s,fromAddressesBytes:i,memo:r?.memo,minIssuanceTime:r?.minIssuanceTime},this.provider.getContext())}increaseL1ValidatorBalance({utxoSet:e,feeState:s,options:r,fromAddresses:d,balance:n,validationId:o}){const i=(d??this.getAddresses("P")).map((e=>f(e)[2])),a=f(this.getChangeAddress("P"))[2],m=r?.changeAddresses??[a];return _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_5__.pvm.newIncreaseL1ValidatorBalanceTx({balance:n,validationId:o,utxos:(0,_utils_sortUTXOs_js__WEBPACK_IMPORTED_MODULE_8__.sortUTXOsByAmount)(e.getUTXOs(),!0),changeAddressesBytes:m,feeState:s,fromAddressesBytes:i,memo:r?.memo,minIssuanceTime:r?.minIssuanceTime},this.provider.getContext())}createBlockchain({utxoSet:e,subnetId:s,chainName:r,vmID:d,fxIds:n,genesisData:o,subnetAuth:i,feeState:a,options:m,fromAddresses:h}){const g=(0,_utils_sortUTXOs_js__WEBPACK_IMPORTED_MODULE_8__.sortUTXOsByAmount)(e.getUTXOs(),!0),A=(h??this.getAddresses("P")).map((e=>f(e)[2])),c=f(this.getChangeAddress("P"))[2],x=m?.changeAddresses??[c];return (0,_utils_assertFeeStateProvided_js__WEBPACK_IMPORTED_MODULE_9__.assertFeeStateProvided)(a),_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_5__.pvm.newCreateChainTx({chainName:r,feeState:a,fromAddressesBytes:A,fxIds:n,genesisData:o,subnetAuth:i,subnetId:s,utxos:g,vmId:d,changeAddressesBytes:x},this.provider.getContext())}createSubnet({utxoSet:e,rewardAddresses:s,feeState:r,fromAddresses:d,options:n,threshold:o,locktime:i}){const a=(0,_utils_sortUTXOs_js__WEBPACK_IMPORTED_MODULE_8__.sortUTXOsByAmount)(e.getUTXOs(),!0),m=(d??this.getAddresses("P")).map((e=>f(e)[2])),h=f(this.getChangeAddress("P"))[2],g=n?.changeAddresses??[h],A=s.map((e=>f(e)[2]));return (0,_utils_assertFeeStateProvided_js__WEBPACK_IMPORTED_MODULE_9__.assertFeeStateProvided)(r),_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_5__.pvm.newCreateSubnetTx({fromAddressesBytes:m,changeAddressesBytes:g,utxos:a,minIssuanceTime:n?.minIssuanceTime,memo:n?.memo,feeState:r,threshold:o,locktime:i,subnetOwners:A},this.provider.getContext())}addSubnetValidator({utxoSet:e,nodeId:s,start:r,end:d,weight:n,subnetId:o,subnetAuth:i,feeState:a,fromAddresses:m,options:h}){const g=(0,_utils_sortUTXOs_js__WEBPACK_IMPORTED_MODULE_8__.sortUTXOsByAmount)(e.getUTXOs(),!0),A=(m??this.getAddresses("P")).map((e=>f(e)[2])),c=f(this.getChangeAddress("P"))[2],x=h?.changeAddresses??[c];return (0,_utils_assertFeeStateProvided_js__WEBPACK_IMPORTED_MODULE_9__.assertFeeStateProvided)(a),_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_5__.pvm.newAddSubnetValidatorTx({changeAddressesBytes:x,fromAddressesBytes:A,utxos:g,minIssuanceTime:h?.minIssuanceTime,memo:h?.memo,nodeId:s,start:r,end:d,weight:n,subnetId:o,subnetAuth:i,feeState:a},this.provider.getContext())}addPermissionlessValidator({utxoSet:e,nodeId:s,start:r,end:d,weight:n,subnetId:o,shares:i,feeState:m,fromAddresses:h,rewardAddresses:g,delegatorRewardAddresses:u,publicKey:A,signature:x,options:l,threshold:I,locktime:T,stakingAssetId:v}){const C=(0,_utils_sortUTXOs_js__WEBPACK_IMPORTED_MODULE_8__.sortUTXOsStaking)(e.getUTXOs()),S=(h??this.getAddresses("P")).map((e=>f(e)[2])),b=(g??[this.getCurrentAddress("P")]).map((e=>f(e)[2])),w=(u??[this.getCurrentAddress("P")]).map((e=>f(e)[2]));if(!(o!==_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_5__.networkIDs.PrimaryNetworkID.toString()||A&&x))throw new Error("Must provide public key and signature for primary subnet.");const P=f(this.getChangeAddress("P"))[2],B=l?.changeAddresses??[P];return (0,_utils_assertFeeStateProvided_js__WEBPACK_IMPORTED_MODULE_9__.assertFeeStateProvided)(m),_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_5__.pvm.newAddPermissionlessValidatorTx({fromAddressesBytes:S,delegatorRewardsOwner:w,utxos:C,minIssuanceTime:l?.minIssuanceTime,memo:l?.memo,changeAddressesBytes:B,nodeId:s,start:r,end:d,weight:n,subnetId:o,shares:i,feeState:m,publicKey:A,rewardAddresses:b,signature:x,locktime:T,threshold:I,stakingAssetId:v},this.provider.getContext())}addPermissionlessDelegator({utxoSet:e,nodeId:s,start:r,end:d,weight:n,subnetId:o,fromAddresses:i,rewardAddresses:a,options:m,locktime:h,feeState:g,threshold:u,stakingAssetId:A}){const x=(0,_utils_sortUTXOs_js__WEBPACK_IMPORTED_MODULE_8__.sortUTXOsStaking)(e.getUTXOs()),l=(i??this.getAddresses("P")).map((e=>f(e)[2])),I=(a??[this.getCurrentAddress("P")]).map((e=>f(e)[2])),T=f(this.getChangeAddress("P"))[2],v=m?.changeAddresses??[T];return (0,_utils_assertFeeStateProvided_js__WEBPACK_IMPORTED_MODULE_9__.assertFeeStateProvided)(g),_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_5__.pvm.newAddPermissionlessDelegatorTx({fromAddressesBytes:l,utxos:x,minIssuanceTime:m?.minIssuanceTime,memo:m?.memo,changeAddressesBytes:v,nodeId:s,start:r,end:d,weight:n,subnetId:o,rewardAddresses:I,locktime:h,stakingAssetId:A,threshold:u,feeState:g},this.provider.getContext())}removeSubnetValidator({utxoSet:e,nodeId:s,subnetId:r,subnetAuth:d,fromAddresses:n,feeState:o,options:i}){const a=(0,_utils_sortUTXOs_js__WEBPACK_IMPORTED_MODULE_8__.sortUTXOsByAmount)(e.getUTXOs(),!0),m=(n??this.getAddresses("P")).map((e=>f(e)[2])),h=f(this.getChangeAddress("P"))[2],g=i?.changeAddresses??[h];return (0,_utils_assertFeeStateProvided_js__WEBPACK_IMPORTED_MODULE_9__.assertFeeStateProvided)(o),_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_5__.pvm.newRemoveSubnetValidatorTx({changeAddressesBytes:g,fromAddressesBytes:m,utxos:a,minIssuanceTime:i?.minIssuanceTime,memo:i?.memo,nodeId:s,subnetId:r,subnetAuth:d,feeState:o},this.provider.getContext())}transferSubnetOwnershipTx({utxoSet:e,subnetId:s,subnetAuth:r,subnetOwners:d,feeState:n,fromAddresses:o,options:i,threshold:a,locktime:m}){const h=(0,_utils_sortUTXOs_js__WEBPACK_IMPORTED_MODULE_8__.sortUTXOsByAmount)(e.getUTXOs(),!0),g=(o??this.getAddresses("P")).map((e=>f(e)[2])),A=f(this.getChangeAddress("P"))[2],c=i?.changeAddresses??[A],x=d.map((e=>f(e)[2]));return (0,_utils_assertFeeStateProvided_js__WEBPACK_IMPORTED_MODULE_9__.assertFeeStateProvided)(n),_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_5__.pvm.newTransferSubnetOwnershipTx({changeAddressesBytes:c,fromAddressesBytes:g,utxos:h,minIssuanceTime:i?.minIssuanceTime,memo:i?.memo,subnetId:s,subnetAuth:r,subnetOwners:x,feeState:n,threshold:a,locktime:m},this.provider.getContext())}}


/***/ }),

/***/ "./node_modules/@avalabs/core-wallets-sdk/esm/utils/assertFeeStateProvided.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@avalabs/core-wallets-sdk/esm/utils/assertFeeStateProvided.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "assertFeeStateProvided": () => (/* binding */ e)
/* harmony export */ });
function e(e){if("object"!=typeof e||!e)throw new Error("feeState parameter is required post E-upgrade")}


/***/ }),

/***/ "./node_modules/@avalabs/core-wallets-sdk/node_modules/xss/lib/default.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@avalabs/core-wallets-sdk/node_modules/xss/lib/default.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/**
 * default settings
 *
 * @author Zongmin Lei<leizongmin@gmail.com>
 */

var FilterCSS = (__webpack_require__(/*! cssfilter */ "./node_modules/cssfilter/lib/index.js").FilterCSS);
var getDefaultCSSWhiteList = (__webpack_require__(/*! cssfilter */ "./node_modules/cssfilter/lib/index.js").getDefaultWhiteList);
var _ = __webpack_require__(/*! ./util */ "./node_modules/@avalabs/core-wallets-sdk/node_modules/xss/lib/util.js");

function getDefaultWhiteList() {
  return {
    a: ["target", "href", "title"],
    abbr: ["title"],
    address: [],
    area: ["shape", "coords", "href", "alt"],
    article: [],
    aside: [],
    audio: [
      "autoplay",
      "controls",
      "crossorigin",
      "loop",
      "muted",
      "preload",
      "src",
    ],
    b: [],
    bdi: ["dir"],
    bdo: ["dir"],
    big: [],
    blockquote: ["cite"],
    br: [],
    caption: [],
    center: [],
    cite: [],
    code: [],
    col: ["align", "valign", "span", "width"],
    colgroup: ["align", "valign", "span", "width"],
    dd: [],
    del: ["datetime"],
    details: ["open"],
    div: [],
    dl: [],
    dt: [],
    em: [],
    figcaption: [],
    figure: [],
    font: ["color", "size", "face"],
    footer: [],
    h1: [],
    h2: [],
    h3: [],
    h4: [],
    h5: [],
    h6: [],
    header: [],
    hr: [],
    i: [],
    img: ["src", "alt", "title", "width", "height"],
    ins: ["datetime"],
    li: [],
    mark: [],
    nav: [],
    ol: [],
    p: [],
    pre: [],
    s: [],
    section: [],
    small: [],
    span: [],
    sub: [],
    summary: [],
    sup: [],
    strong: [],
    strike: [],
    table: ["width", "border", "align", "valign"],
    tbody: ["align", "valign"],
    td: ["width", "rowspan", "colspan", "align", "valign"],
    tfoot: ["align", "valign"],
    th: ["width", "rowspan", "colspan", "align", "valign"],
    thead: ["align", "valign"],
    tr: ["rowspan", "align", "valign"],
    tt: [],
    u: [],
    ul: [],
    video: [
      "autoplay",
      "controls",
      "crossorigin",
      "loop",
      "muted",
      "playsinline",
      "poster",
      "preload",
      "src",
      "height",
      "width",
    ],
  };
}

var defaultCSSFilter = new FilterCSS();

/**
 * default onTag function
 *
 * @param {String} tag
 * @param {String} html
 * @param {Object} options
 * @return {String}
 */
function onTag(tag, html, options) {
  // do nothing
}

/**
 * default onIgnoreTag function
 *
 * @param {String} tag
 * @param {String} html
 * @param {Object} options
 * @return {String}
 */
function onIgnoreTag(tag, html, options) {
  // do nothing
}

/**
 * default onTagAttr function
 *
 * @param {String} tag
 * @param {String} name
 * @param {String} value
 * @return {String}
 */
function onTagAttr(tag, name, value) {
  // do nothing
}

/**
 * default onIgnoreTagAttr function
 *
 * @param {String} tag
 * @param {String} name
 * @param {String} value
 * @return {String}
 */
function onIgnoreTagAttr(tag, name, value) {
  // do nothing
}

/**
 * default escapeHtml function
 *
 * @param {String} html
 */
function escapeHtml(html) {
  return html.replace(REGEXP_LT, "&lt;").replace(REGEXP_GT, "&gt;");
}

/**
 * default safeAttrValue function
 *
 * @param {String} tag
 * @param {String} name
 * @param {String} value
 * @param {Object} cssFilter
 * @return {String}
 */
function safeAttrValue(tag, name, value, cssFilter) {
  // unescape attribute value firstly
  value = friendlyAttrValue(value);

  if (name === "href" || name === "src") {
    // filter `href` and `src` attribute
    // only allow the value that starts with `http://` | `https://` | `mailto:` | `/` | `#`
    value = _.trim(value);
    if (value === "#") return "#";
    if (
      !(
        value.substr(0, 7) === "http://" ||
        value.substr(0, 8) === "https://" ||
        value.substr(0, 7) === "mailto:" ||
        value.substr(0, 4) === "tel:" ||
        value.substr(0, 11) === "data:image/" ||
        value.substr(0, 6) === "ftp://" ||
        value.substr(0, 2) === "./" ||
        value.substr(0, 3) === "../" ||
        value[0] === "#" ||
        value[0] === "/"
      )
    ) {
      return "";
    }
  } else if (name === "background") {
    // filter `background` attribute (maybe no use)
    // `javascript:`
    REGEXP_DEFAULT_ON_TAG_ATTR_4.lastIndex = 0;
    if (REGEXP_DEFAULT_ON_TAG_ATTR_4.test(value)) {
      return "";
    }
  } else if (name === "style") {
    // `expression()`
    REGEXP_DEFAULT_ON_TAG_ATTR_7.lastIndex = 0;
    if (REGEXP_DEFAULT_ON_TAG_ATTR_7.test(value)) {
      return "";
    }
    // `url()`
    REGEXP_DEFAULT_ON_TAG_ATTR_8.lastIndex = 0;
    if (REGEXP_DEFAULT_ON_TAG_ATTR_8.test(value)) {
      REGEXP_DEFAULT_ON_TAG_ATTR_4.lastIndex = 0;
      if (REGEXP_DEFAULT_ON_TAG_ATTR_4.test(value)) {
        return "";
      }
    }
    if (cssFilter !== false) {
      cssFilter = cssFilter || defaultCSSFilter;
      value = cssFilter.process(value);
    }
  }

  // escape `<>"` before returns
  value = escapeAttrValue(value);
  return value;
}

// RegExp list
var REGEXP_LT = /</g;
var REGEXP_GT = />/g;
var REGEXP_QUOTE = /"/g;
var REGEXP_QUOTE_2 = /&quot;/g;
var REGEXP_ATTR_VALUE_1 = /&#([a-zA-Z0-9]*);?/gim;
var REGEXP_ATTR_VALUE_COLON = /&colon;?/gim;
var REGEXP_ATTR_VALUE_NEWLINE = /&newline;?/gim;
// var REGEXP_DEFAULT_ON_TAG_ATTR_3 = /\/\*|\*\//gm;
var REGEXP_DEFAULT_ON_TAG_ATTR_4 =
  /((j\s*a\s*v\s*a|v\s*b|l\s*i\s*v\s*e)\s*s\s*c\s*r\s*i\s*p\s*t\s*|m\s*o\s*c\s*h\s*a):/gi;
// var REGEXP_DEFAULT_ON_TAG_ATTR_5 = /^[\s"'`]*(d\s*a\s*t\s*a\s*)\:/gi;
// var REGEXP_DEFAULT_ON_TAG_ATTR_6 = /^[\s"'`]*(d\s*a\s*t\s*a\s*)\:\s*image\//gi;
var REGEXP_DEFAULT_ON_TAG_ATTR_7 =
  /e\s*x\s*p\s*r\s*e\s*s\s*s\s*i\s*o\s*n\s*\(.*/gi;
var REGEXP_DEFAULT_ON_TAG_ATTR_8 = /u\s*r\s*l\s*\(.*/gi;

/**
 * escape double quote
 *
 * @param {String} str
 * @return {String} str
 */
function escapeQuote(str) {
  return str.replace(REGEXP_QUOTE, "&quot;");
}

/**
 * unescape double quote
 *
 * @param {String} str
 * @return {String} str
 */
function unescapeQuote(str) {
  return str.replace(REGEXP_QUOTE_2, '"');
}

/**
 * escape html entities
 *
 * @param {String} str
 * @return {String}
 */
function escapeHtmlEntities(str) {
  return str.replace(REGEXP_ATTR_VALUE_1, function replaceUnicode(str, code) {
    return code[0] === "x" || code[0] === "X"
      ? String.fromCharCode(parseInt(code.substr(1), 16))
      : String.fromCharCode(parseInt(code, 10));
  });
}

/**
 * escape html5 new danger entities
 *
 * @param {String} str
 * @return {String}
 */
function escapeDangerHtml5Entities(str) {
  return str
    .replace(REGEXP_ATTR_VALUE_COLON, ":")
    .replace(REGEXP_ATTR_VALUE_NEWLINE, " ");
}

/**
 * clear nonprintable characters
 *
 * @param {String} str
 * @return {String}
 */
function clearNonPrintableCharacter(str) {
  var str2 = "";
  for (var i = 0, len = str.length; i < len; i++) {
    str2 += str.charCodeAt(i) < 32 ? " " : str.charAt(i);
  }
  return _.trim(str2);
}

/**
 * get friendly attribute value
 *
 * @param {String} str
 * @return {String}
 */
function friendlyAttrValue(str) {
  str = unescapeQuote(str);
  str = escapeHtmlEntities(str);
  str = escapeDangerHtml5Entities(str);
  str = clearNonPrintableCharacter(str);
  return str;
}

/**
 * unescape attribute value
 *
 * @param {String} str
 * @return {String}
 */
function escapeAttrValue(str) {
  str = escapeQuote(str);
  str = escapeHtml(str);
  return str;
}

/**
 * `onIgnoreTag` function for removing all the tags that are not in whitelist
 */
function onIgnoreTagStripAll() {
  return "";
}

/**
 * remove tag body
 * specify a `tags` list, if the tag is not in the `tags` list then process by the specify function (optional)
 *
 * @param {array} tags
 * @param {function} next
 */
function StripTagBody(tags, next) {
  if (typeof next !== "function") {
    next = function () {};
  }

  var isRemoveAllTag = !Array.isArray(tags);
  function isRemoveTag(tag) {
    if (isRemoveAllTag) return true;
    return _.indexOf(tags, tag) !== -1;
  }

  var removeList = [];
  var posStart = false;

  return {
    onIgnoreTag: function (tag, html, options) {
      if (isRemoveTag(tag)) {
        if (options.isClosing) {
          var ret = "[/removed]";
          var end = options.position + ret.length;
          removeList.push([
            posStart !== false ? posStart : options.position,
            end,
          ]);
          posStart = false;
          return ret;
        } else {
          if (!posStart) {
            posStart = options.position;
          }
          return "[removed]";
        }
      } else {
        return next(tag, html, options);
      }
    },
    remove: function (html) {
      var rethtml = "";
      var lastPos = 0;
      _.forEach(removeList, function (pos) {
        rethtml += html.slice(lastPos, pos[0]);
        lastPos = pos[1];
      });
      rethtml += html.slice(lastPos);
      return rethtml;
    },
  };
}

/**
 * remove html comments
 *
 * @param {String} html
 * @return {String}
 */
function stripCommentTag(html) {
  var retHtml = "";
  var lastPos = 0;
  while (lastPos < html.length) {
    var i = html.indexOf("<!--", lastPos);
    if (i === -1) {
      retHtml += html.slice(lastPos);
      break;
    }
    retHtml += html.slice(lastPos, i);
    var j = html.indexOf("-->", i);
    if (j === -1) {
      break;
    }
    lastPos = j + 3;
  }
  return retHtml;
}

/**
 * remove invisible characters
 *
 * @param {String} html
 * @return {String}
 */
function stripBlankChar(html) {
  var chars = html.split("");
  chars = chars.filter(function (char) {
    var c = char.charCodeAt(0);
    if (c === 127) return false;
    if (c <= 31) {
      if (c === 10 || c === 13) return true;
      return false;
    }
    return true;
  });
  return chars.join("");
}

exports.whiteList = getDefaultWhiteList();
exports.getDefaultWhiteList = getDefaultWhiteList;
exports.onTag = onTag;
exports.onIgnoreTag = onIgnoreTag;
exports.onTagAttr = onTagAttr;
exports.onIgnoreTagAttr = onIgnoreTagAttr;
exports.safeAttrValue = safeAttrValue;
exports.escapeHtml = escapeHtml;
exports.escapeQuote = escapeQuote;
exports.unescapeQuote = unescapeQuote;
exports.escapeHtmlEntities = escapeHtmlEntities;
exports.escapeDangerHtml5Entities = escapeDangerHtml5Entities;
exports.clearNonPrintableCharacter = clearNonPrintableCharacter;
exports.friendlyAttrValue = friendlyAttrValue;
exports.escapeAttrValue = escapeAttrValue;
exports.onIgnoreTagStripAll = onIgnoreTagStripAll;
exports.StripTagBody = StripTagBody;
exports.stripCommentTag = stripCommentTag;
exports.stripBlankChar = stripBlankChar;
exports.cssFilter = defaultCSSFilter;
exports.getDefaultCSSWhiteList = getDefaultCSSWhiteList;


/***/ }),

/***/ "./node_modules/@avalabs/core-wallets-sdk/node_modules/xss/lib/index.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@avalabs/core-wallets-sdk/node_modules/xss/lib/index.js ***!
  \******************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

/**
 * xss
 *
 * @author Zongmin Lei<leizongmin@gmail.com>
 */

var DEFAULT = __webpack_require__(/*! ./default */ "./node_modules/@avalabs/core-wallets-sdk/node_modules/xss/lib/default.js");
var parser = __webpack_require__(/*! ./parser */ "./node_modules/@avalabs/core-wallets-sdk/node_modules/xss/lib/parser.js");
var FilterXSS = __webpack_require__(/*! ./xss */ "./node_modules/@avalabs/core-wallets-sdk/node_modules/xss/lib/xss.js");

/**
 * filter xss function
 *
 * @param {String} html
 * @param {Object} options { whiteList, onTag, onTagAttr, onIgnoreTag, onIgnoreTagAttr, safeAttrValue, escapeHtml }
 * @return {String}
 */
function filterXSS(html, options) {
  var xss = new FilterXSS(options);
  return xss.process(html);
}

exports = module.exports = filterXSS;
exports.filterXSS = filterXSS;
exports.FilterXSS = FilterXSS;

(function () {
  for (var i in DEFAULT) {
    exports[i] = DEFAULT[i];
  }
  for (var j in parser) {
    exports[j] = parser[j];
  }
})();

// using `xss` on the browser, output `filterXSS` to the globals
if (typeof window !== "undefined") {
  window.filterXSS = module.exports;
}

// using `xss` on the WebWorker, output `filterXSS` to the globals
function isWorkerEnv() {
  return (
    typeof self !== "undefined" &&
    typeof DedicatedWorkerGlobalScope !== "undefined" &&
    self instanceof DedicatedWorkerGlobalScope
  );
}
if (isWorkerEnv()) {
  self.filterXSS = module.exports;
}


/***/ }),

/***/ "./node_modules/@avalabs/core-wallets-sdk/node_modules/xss/lib/parser.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@avalabs/core-wallets-sdk/node_modules/xss/lib/parser.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/**
 * Simple HTML Parser
 *
 * @author Zongmin Lei<leizongmin@gmail.com>
 */

var _ = __webpack_require__(/*! ./util */ "./node_modules/@avalabs/core-wallets-sdk/node_modules/xss/lib/util.js");

/**
 * get tag name
 *
 * @param {String} html e.g. '<a hef="#">'
 * @return {String}
 */
function getTagName(html) {
  var i = _.spaceIndex(html);
  var tagName;
  if (i === -1) {
    tagName = html.slice(1, -1);
  } else {
    tagName = html.slice(1, i + 1);
  }
  tagName = _.trim(tagName).toLowerCase();
  if (tagName.slice(0, 1) === "/") tagName = tagName.slice(1);
  if (tagName.slice(-1) === "/") tagName = tagName.slice(0, -1);
  return tagName;
}

/**
 * is close tag?
 *
 * @param {String} html 如：'<a hef="#">'
 * @return {Boolean}
 */
function isClosing(html) {
  return html.slice(0, 2) === "</";
}

/**
 * parse input html and returns processed html
 *
 * @param {String} html
 * @param {Function} onTag e.g. function (sourcePosition, position, tag, html, isClosing)
 * @param {Function} escapeHtml
 * @return {String}
 */
function parseTag(html, onTag, escapeHtml) {
  "use strict";

  var rethtml = "";
  var lastPos = 0;
  var tagStart = false;
  var quoteStart = false;
  var currentPos = 0;
  var len = html.length;
  var currentTagName = "";
  var currentHtml = "";

  chariterator: for (currentPos = 0; currentPos < len; currentPos++) {
    var c = html.charAt(currentPos);
    if (tagStart === false) {
      if (c === "<") {
        tagStart = currentPos;
        continue;
      }
    } else {
      if (quoteStart === false) {
        if (c === "<") {
          rethtml += escapeHtml(html.slice(lastPos, currentPos));
          tagStart = currentPos;
          lastPos = currentPos;
          continue;
        }
        if (c === ">" || currentPos === len - 1) {
          rethtml += escapeHtml(html.slice(lastPos, tagStart));
          currentHtml = html.slice(tagStart, currentPos + 1);
          currentTagName = getTagName(currentHtml);
          rethtml += onTag(
            tagStart,
            rethtml.length,
            currentTagName,
            currentHtml,
            isClosing(currentHtml)
          );
          lastPos = currentPos + 1;
          tagStart = false;
          continue;
        }
        if (c === '"' || c === "'") {
          var i = 1;
          var ic = html.charAt(currentPos - i);

          while (ic.trim() === "" || ic === "=") {
            if (ic === "=") {
              quoteStart = c;
              continue chariterator;
            }
            ic = html.charAt(currentPos - ++i);
          }
        }
      } else {
        if (c === quoteStart) {
          quoteStart = false;
          continue;
        }
      }
    }
  }
  if (lastPos < len) {
    rethtml += escapeHtml(html.substr(lastPos));
  }

  return rethtml;
}

var REGEXP_ILLEGAL_ATTR_NAME = /[^a-zA-Z0-9\\_:.-]/gim;

/**
 * parse input attributes and returns processed attributes
 *
 * @param {String} html e.g. `href="#" target="_blank"`
 * @param {Function} onAttr e.g. `function (name, value)`
 * @return {String}
 */
function parseAttr(html, onAttr) {
  "use strict";

  var lastPos = 0;
  var lastMarkPos = 0;
  var retAttrs = [];
  var tmpName = false;
  var len = html.length;

  function addAttr(name, value) {
    name = _.trim(name);
    name = name.replace(REGEXP_ILLEGAL_ATTR_NAME, "").toLowerCase();
    if (name.length < 1) return;
    var ret = onAttr(name, value || "");
    if (ret) retAttrs.push(ret);
  }

  // 逐个分析字符
  for (var i = 0; i < len; i++) {
    var c = html.charAt(i);
    var v, j;
    if (tmpName === false && c === "=") {
      tmpName = html.slice(lastPos, i);
      lastPos = i + 1;
      lastMarkPos = html.charAt(lastPos) === '"' || html.charAt(lastPos) === "'" ? lastPos : findNextQuotationMark(html, i + 1);
      continue;
    }
    if (tmpName !== false) {
      if (
        i === lastMarkPos
      ) {
        j = html.indexOf(c, i + 1);
        if (j === -1) {
          break;
        } else {
          v = _.trim(html.slice(lastMarkPos + 1, j));
          addAttr(tmpName, v);
          tmpName = false;
          i = j;
          lastPos = i + 1;
          continue;
        }
      }
    }
    if (/\s|\n|\t/.test(c)) {
      html = html.replace(/\s|\n|\t/g, " ");
      if (tmpName === false) {
        j = findNextEqual(html, i);
        if (j === -1) {
          v = _.trim(html.slice(lastPos, i));
          addAttr(v);
          tmpName = false;
          lastPos = i + 1;
          continue;
        } else {
          i = j - 1;
          continue;
        }
      } else {
        j = findBeforeEqual(html, i - 1);
        if (j === -1) {
          v = _.trim(html.slice(lastPos, i));
          v = stripQuoteWrap(v);
          addAttr(tmpName, v);
          tmpName = false;
          lastPos = i + 1;
          continue;
        } else {
          continue;
        }
      }
    }
  }

  if (lastPos < html.length) {
    if (tmpName === false) {
      addAttr(html.slice(lastPos));
    } else {
      addAttr(tmpName, stripQuoteWrap(_.trim(html.slice(lastPos))));
    }
  }

  return _.trim(retAttrs.join(" "));
}

function findNextEqual(str, i) {
  for (; i < str.length; i++) {
    var c = str[i];
    if (c === " ") continue;
    if (c === "=") return i;
    return -1;
  }
}

function findNextQuotationMark(str, i) {
  for (; i < str.length; i++) {
    var c = str[i];
    if (c === " ") continue;
    if (c === "'" || c === '"') return i;
    return -1;
  }
}

function findBeforeEqual(str, i) {
  for (; i > 0; i--) {
    var c = str[i];
    if (c === " ") continue;
    if (c === "=") return i;
    return -1;
  }
}

function isQuoteWrapString(text) {
  if (
    (text[0] === '"' && text[text.length - 1] === '"') ||
    (text[0] === "'" && text[text.length - 1] === "'")
  ) {
    return true;
  } else {
    return false;
  }
}

function stripQuoteWrap(text) {
  if (isQuoteWrapString(text)) {
    return text.substr(1, text.length - 2);
  } else {
    return text;
  }
}

exports.parseTag = parseTag;
exports.parseAttr = parseAttr;


/***/ }),

/***/ "./node_modules/@avalabs/core-wallets-sdk/node_modules/xss/lib/util.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@avalabs/core-wallets-sdk/node_modules/xss/lib/util.js ***!
  \*****************************************************************************/
/***/ ((module) => {

module.exports = {
  indexOf: function (arr, item) {
    var i, j;
    if (Array.prototype.indexOf) {
      return arr.indexOf(item);
    }
    for (i = 0, j = arr.length; i < j; i++) {
      if (arr[i] === item) {
        return i;
      }
    }
    return -1;
  },
  forEach: function (arr, fn, scope) {
    var i, j;
    if (Array.prototype.forEach) {
      return arr.forEach(fn, scope);
    }
    for (i = 0, j = arr.length; i < j; i++) {
      fn.call(scope, arr[i], i, arr);
    }
  },
  trim: function (str) {
    if (String.prototype.trim) {
      return str.trim();
    }
    return str.replace(/(^\s*)|(\s*$)/g, "");
  },
  spaceIndex: function (str) {
    var reg = /\s|\n|\t/;
    var match = reg.exec(str);
    return match ? match.index : -1;
  },
};


/***/ }),

/***/ "./node_modules/@avalabs/core-wallets-sdk/node_modules/xss/lib/xss.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@avalabs/core-wallets-sdk/node_modules/xss/lib/xss.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");
/**
 * filter xss
 *
 * @author Zongmin Lei<leizongmin@gmail.com>
 */

var FilterCSS = (__webpack_require__(/*! cssfilter */ "./node_modules/cssfilter/lib/index.js").FilterCSS);
var DEFAULT = __webpack_require__(/*! ./default */ "./node_modules/@avalabs/core-wallets-sdk/node_modules/xss/lib/default.js");
var parser = __webpack_require__(/*! ./parser */ "./node_modules/@avalabs/core-wallets-sdk/node_modules/xss/lib/parser.js");
var parseTag = parser.parseTag;
var parseAttr = parser.parseAttr;
var _ = __webpack_require__(/*! ./util */ "./node_modules/@avalabs/core-wallets-sdk/node_modules/xss/lib/util.js");

/**
 * returns `true` if the input value is `undefined` or `null`
 *
 * @param {Object} obj
 * @return {Boolean}
 */
function isNull(obj) {
  return obj === undefined || obj === null;
}

/**
 * get attributes for a tag
 *
 * @param {String} html
 * @return {Object}
 *   - {String} html
 *   - {Boolean} closing
 */
function getAttrs(html) {
  var i = _.spaceIndex(html);
  if (i === -1) {
    return {
      html: "",
      closing: html[html.length - 2] === "/",
    };
  }
  html = _.trim(html.slice(i + 1, -1));
  var isClosing = html[html.length - 1] === "/";
  if (isClosing) html = _.trim(html.slice(0, -1));
  return {
    html: html,
    closing: isClosing,
  };
}

/**
 * shallow copy
 *
 * @param {Object} obj
 * @return {Object}
 */
function shallowCopyObject(obj) {
  var ret = {};
  for (var i in obj) {
    ret[i] = obj[i];
  }
  return ret;
}

function keysToLowerCase(obj) {
  var ret = {};
  for (var i in obj) {
    if (Array.isArray(obj[i])) {
      ret[i.toLowerCase()] = obj[i].map(function (item) {
        return item.toLowerCase();
      });
    } else {
      ret[i.toLowerCase()] = obj[i];
    }
  }
  return ret;
}

/**
 * FilterXSS class
 *
 * @param {Object} options
 *        whiteList (or allowList), onTag, onTagAttr, onIgnoreTag,
 *        onIgnoreTagAttr, safeAttrValue, escapeHtml
 *        stripIgnoreTagBody, allowCommentTag, stripBlankChar
 *        css{whiteList, onAttr, onIgnoreAttr} `css=false` means don't use `cssfilter`
 */
function FilterXSS(options) {
  options = shallowCopyObject(options || {});

  if (options.stripIgnoreTag) {
    if (options.onIgnoreTag) {
      console.error(
        'Notes: cannot use these two options "stripIgnoreTag" and "onIgnoreTag" at the same time'
      );
    }
    options.onIgnoreTag = DEFAULT.onIgnoreTagStripAll;
  }
  if (options.whiteList || options.allowList) {
    options.whiteList = keysToLowerCase(options.whiteList || options.allowList);
  } else {
    options.whiteList = DEFAULT.whiteList;
  }

  options.onTag = options.onTag || DEFAULT.onTag;
  options.onTagAttr = options.onTagAttr || DEFAULT.onTagAttr;
  options.onIgnoreTag = options.onIgnoreTag || DEFAULT.onIgnoreTag;
  options.onIgnoreTagAttr = options.onIgnoreTagAttr || DEFAULT.onIgnoreTagAttr;
  options.safeAttrValue = options.safeAttrValue || DEFAULT.safeAttrValue;
  options.escapeHtml = options.escapeHtml || DEFAULT.escapeHtml;
  this.options = options;

  if (options.css === false) {
    this.cssFilter = false;
  } else {
    options.css = options.css || {};
    this.cssFilter = new FilterCSS(options.css);
  }
}

/**
 * start process and returns result
 *
 * @param {String} html
 * @return {String}
 */
FilterXSS.prototype.process = function (html) {
  // compatible with the input
  html = html || "";
  html = html.toString();
  if (!html) return "";

  var me = this;
  var options = me.options;
  var whiteList = options.whiteList;
  var onTag = options.onTag;
  var onIgnoreTag = options.onIgnoreTag;
  var onTagAttr = options.onTagAttr;
  var onIgnoreTagAttr = options.onIgnoreTagAttr;
  var safeAttrValue = options.safeAttrValue;
  var escapeHtml = options.escapeHtml;
  var cssFilter = me.cssFilter;

  // remove invisible characters
  if (options.stripBlankChar) {
    html = DEFAULT.stripBlankChar(html);
  }

  // remove html comments
  if (!options.allowCommentTag) {
    html = DEFAULT.stripCommentTag(html);
  }

  // if enable stripIgnoreTagBody
  var stripIgnoreTagBody = false;
  if (options.stripIgnoreTagBody) {
    stripIgnoreTagBody = DEFAULT.StripTagBody(
      options.stripIgnoreTagBody,
      onIgnoreTag
    );
    onIgnoreTag = stripIgnoreTagBody.onIgnoreTag;
  }

  var retHtml = parseTag(
    html,
    function (sourcePosition, position, tag, html, isClosing) {
      var info = {
        sourcePosition: sourcePosition,
        position: position,
        isClosing: isClosing,
        isWhite: Object.prototype.hasOwnProperty.call(whiteList, tag),
      };

      // call `onTag()`
      var ret = onTag(tag, html, info);
      if (!isNull(ret)) return ret;

      if (info.isWhite) {
        if (info.isClosing) {
          return "</" + tag + ">";
        }

        var attrs = getAttrs(html);
        var whiteAttrList = whiteList[tag];
        var attrsHtml = parseAttr(attrs.html, function (name, value) {
          // call `onTagAttr()`
          var isWhiteAttr = _.indexOf(whiteAttrList, name) !== -1;
          var ret = onTagAttr(tag, name, value, isWhiteAttr);
          if (!isNull(ret)) return ret;

          if (isWhiteAttr) {
            // call `safeAttrValue()`
            value = safeAttrValue(tag, name, value, cssFilter);
            if (value) {
              return name + '="' + value + '"';
            } else {
              return name;
            }
          } else {
            // call `onIgnoreTagAttr()`
            ret = onIgnoreTagAttr(tag, name, value, isWhiteAttr);
            if (!isNull(ret)) return ret;
            return;
          }
        });

        // build new tag html
        html = "<" + tag;
        if (attrsHtml) html += " " + attrsHtml;
        if (attrs.closing) html += " /";
        html += ">";
        return html;
      } else {
        // call `onIgnoreTag()`
        ret = onIgnoreTag(tag, html, info);
        if (!isNull(ret)) return ret;
        return escapeHtml(html);
      }
    },
    escapeHtml
  );

  // if enable stripIgnoreTagBody
  if (stripIgnoreTagBody) {
    retHtml = stripIgnoreTagBody.remove(retHtml);
  }

  return retHtml;
};

module.exports = FilterXSS;


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,