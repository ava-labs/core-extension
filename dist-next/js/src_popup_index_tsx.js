"use strict";
(globalThis["webpackChunk_core_ext_next"] = globalThis["webpackChunk_core_ext_next"] || []).push([["src_popup_index_tsx"], {
"./src/monitoring/initSentryForPopup.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/common/src/index.ts");


if (false) {}


}),
"./src/popup/index.tsx": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
/* ESM import */var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/jsx-dev-runtime.js");
/* ESM import */var _monitoring_initSentryForPopup__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/monitoring/initSentryForPopup.ts");
/* ESM import */var _sentry_react__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("../../node_modules/@sentry/react/esm/errorboundary.js");
/* ESM import */var react_dom_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./node_modules/react-dom/client.js");
/* ESM import */var webextension_polyfill__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../node_modules/webextension-polyfill/dist/browser-polyfill.js");
/* ESM import */var webextension_polyfill__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(webextension_polyfill__WEBPACK_IMPORTED_MODULE_3__);
/* ESM import */var _avalabs_k2_alpine__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./node_modules/@avalabs/k2-alpine/dist/index.js");
/* ESM import */var _core_ui__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../packages/ui/src/index.ts");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_6__);
/* ESM import */var react_i18next__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("./node_modules/react-i18next/dist/es/I18nextProvider.js");
/* ESM import */var react_router_dom__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("../../node_modules/react-router-dom/esm/react-router-dom.js");
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../../packages/common/src/index.ts");
// initialize sentry first to enable error collection





// MemoryRouter doesn't handle deep linking well.  And BrowserRouter doesn't work in extensions.






// Initialize translations
(0,_core_common__WEBPACK_IMPORTED_MODULE_7__.initI18n)();
const App = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_6__.lazy)(()=>{
    return Promise.all(/* import() | App */ [__webpack_require__.e("vendors-node_modules_react-i18next_dist_es_Trans_js-node_modules_react-i18next_dist_es_useTra-b33023"), __webpack_require__.e("App")]).then(__webpack_require__.bind(__webpack_require__, "./src/popup/app.tsx")).then((m)=>({
            default: m.App
        }));
});
const root = (0,react_dom_client__WEBPACK_IMPORTED_MODULE_2__.createRoot)(document.getElementById('popup'));
webextension_polyfill__WEBPACK_IMPORTED_MODULE_3___default().tabs.query({
    active: true
}).then(()=>{
    root.render(/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_sentry_react__WEBPACK_IMPORTED_MODULE_8__.ErrorBoundary, {
        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_router_dom__WEBPACK_IMPORTED_MODULE_9__.HashRouter, {
            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_i18next__WEBPACK_IMPORTED_MODULE_10__.I18nextProvider, {
                i18n: _core_common__WEBPACK_IMPORTED_MODULE_7__.i18next,
                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_core_ui__WEBPACK_IMPORTED_MODULE_5__.ConnectionContextProvider, {
                    LoadingComponent: _avalabs_k2_alpine__WEBPACK_IMPORTED_MODULE_4__.CircularProgress,
                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_core_ui__WEBPACK_IMPORTED_MODULE_5__.SettingsContextProvider, {
                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_core_ui__WEBPACK_IMPORTED_MODULE_5__.FeatureFlagsContextProvider, {
                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_core_ui__WEBPACK_IMPORTED_MODULE_5__.AnalyticsContextProvider, {
                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react__WEBPACK_IMPORTED_MODULE_6__.Suspense, {
                                    fallback: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_avalabs_k2_alpine__WEBPACK_IMPORTED_MODULE_4__.CircularProgress, {}, void 0, false, {
                                        fileName: "/Users/meehow/ava/extension-avalanche/apps/next/src/popup/index.tsx",
                                        lineNumber: 40,
                                        columnNumber: 39
                                    }, void 0),
                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(App, {}, void 0, false, {
                                        fileName: "/Users/meehow/ava/extension-avalanche/apps/next/src/popup/index.tsx",
                                        lineNumber: 41,
                                        columnNumber: 21
                                    }, undefined)
                                }, void 0, false, {
                                    fileName: "/Users/meehow/ava/extension-avalanche/apps/next/src/popup/index.tsx",
                                    lineNumber: 40,
                                    columnNumber: 19
                                }, undefined)
                            }, void 0, false, {
                                fileName: "/Users/meehow/ava/extension-avalanche/apps/next/src/popup/index.tsx",
                                lineNumber: 39,
                                columnNumber: 17
                            }, undefined)
                        }, void 0, false, {
                            fileName: "/Users/meehow/ava/extension-avalanche/apps/next/src/popup/index.tsx",
                            lineNumber: 38,
                            columnNumber: 15
                        }, undefined)
                    }, void 0, false, {
                        fileName: "/Users/meehow/ava/extension-avalanche/apps/next/src/popup/index.tsx",
                        lineNumber: 37,
                        columnNumber: 13
                    }, undefined)
                }, void 0, false, {
                    fileName: "/Users/meehow/ava/extension-avalanche/apps/next/src/popup/index.tsx",
                    lineNumber: 36,
                    columnNumber: 11
                }, undefined)
            }, void 0, false, {
                fileName: "/Users/meehow/ava/extension-avalanche/apps/next/src/popup/index.tsx",
                lineNumber: 35,
                columnNumber: 9
            }, undefined)
        }, void 0, false, {
            fileName: "/Users/meehow/ava/extension-avalanche/apps/next/src/popup/index.tsx",
            lineNumber: 34,
            columnNumber: 7
        }, undefined)
    }, void 0, false, {
        fileName: "/Users/meehow/ava/extension-avalanche/apps/next/src/popup/index.tsx",
        lineNumber: 33,
        columnNumber: 5
    }, undefined));
});


}),
"../../packages/common/src/constants.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  KNOWN_CORE_DOMAINS: () => (KNOWN_CORE_DOMAINS),
  SYNCED_DOMAINS: () => (SYNCED_DOMAINS),
  WALLET_CONNECT_APP_METADATA: () => (WALLET_CONNECT_APP_METADATA)
});
/* ESM import */var _utils_environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/common/src/utils/environment.ts");
/* ESM import */var webextension_polyfill__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/webextension-polyfill/dist/browser-polyfill.js");
/* ESM import */var webextension_polyfill__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(webextension_polyfill__WEBPACK_IMPORTED_MODULE_1__);


const CORE_WEB_DOMAIN = 'core.app';
const CORE_WEB_TESTNET_DOMAIN = 'test.core.app';
const CORE_WEB_STAGING_DOMAIN = 'core-web.pages.dev';
const DAPP_DEV_DOMAINS = [
    'localhost',
    '127.0.0.1',
    'redesign-aa3.pages.dev'
];
const SYNCED_DOMAINS_PRODUCTION_BUILD = [
    CORE_WEB_DOMAIN
];
const SYNCED_DOMAINS_DEVELOPMENT_BUILD = [
    CORE_WEB_DOMAIN,
    CORE_WEB_TESTNET_DOMAIN,
    CORE_WEB_STAGING_DOMAIN,
    ...DAPP_DEV_DOMAINS
];
const KNOWN_CORE_DOMAINS = [
    CORE_WEB_DOMAIN,
    CORE_WEB_TESTNET_DOMAIN,
    CORE_WEB_STAGING_DOMAIN,
    ...DAPP_DEV_DOMAINS
];
const SYNCED_DOMAINS = (0,_utils_environment__WEBPACK_IMPORTED_MODULE_0__.isProductionBuild)() ? SYNCED_DOMAINS_PRODUCTION_BUILD : SYNCED_DOMAINS_DEVELOPMENT_BUILD;
const WALLET_CONNECT_APP_METADATA = {
    name: webextension_polyfill__WEBPACK_IMPORTED_MODULE_1___default().i18n.getMessage('appName'),
    // When connecting to Core Mobile, it will allow us to send avalanche_*
    // requests, as long as it recognizes us as part of the Core product.
    //
    // In local development, the extension ID may change from one machine
    // to another, so we use localhost to make it work.
    //
    // For production & blue builds, Core Mobile is able to recognize their
    // extension IDs, since they are permanent.
    url: (0,_utils_environment__WEBPACK_IMPORTED_MODULE_0__.isDevelopment)() ? 'https://localhost' : location.origin,
    description: webextension_polyfill__WEBPACK_IMPORTED_MODULE_1___default().i18n.getMessage('appDesc'),
    icons: [
        'https://extension.core.app/apple-touch-icon.png'
    ]
};


}),
"../../packages/common/src/feature-flags.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  DEFAULT_FLAGS: () => (DEFAULT_FLAGS),
  DISABLED_FLAG_VALUES: () => (DISABLED_FLAG_VALUES),
  FEATURE_FLAGS_OVERRIDES_KEY: () => (FEATURE_FLAGS_OVERRIDES_KEY)
});
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/types/src/index.ts");

// Posthog API does not return disabled flags on their `/decide` api endpoint
// Define disabled state values for the flags
const DISABLED_FLAG_VALUES = {
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.EVERYTHING]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.EVENTS]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.SWAP]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.SWAP_C_CHAIN]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.SWAP_ETHEREUM]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.SWAP_SOLANA]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.SWAP_FEES]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.SWAP_FEES_JUPITER]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.BRIDGE]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.BRIDGE_ETH]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.BRIDGE_BTC]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.SEND]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.SEND_P_CHAIN]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.SEND_X_CHAIN]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.SENDTRANSACTION_CHAIN_ID_SUPPORT]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.BUY]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.BUY_MOONPAY]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.BUY_COINBASE]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.KEYSTONE]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.NFT_MARKETPLACE]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.BOTTOM_NAVIGATION]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.DEFI]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.IMPORT_WALLET_CONNECT]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.IMPORT_FIREBLOCKS]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.IN_APP_SUPPORT_P_CHAIN]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.IN_APP_SUPPORT_X_CHAIN]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.SEEDLESS_ONBOARDING]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.SEEDLESS_ONBOARDING_GOOGLE]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.SEEDLESS_ONBOARDING_APPLE]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.SEEDLESS_MFA_PASSKEY]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.SEEDLESS_MFA_AUTHENTICATOR]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.SEEDLESS_MFA_YUBIKEY]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.SEEDLESS_SIGNING]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.SEEEDLESS_MFA_SETTINGS]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.SEEDLESS_OPTIONAL_MFA]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.UNIFIED_BRIDGE_CCTP]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.UNIFIED_BRIDGE_ICTT]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.UNIFIED_BRIDGE_AB_EVM]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.UNIFIED_BRIDGE_AB_AVA_TO_BTC]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.UNIFIED_BRIDGE_AB_BTC_TO_AVA]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.DEBANK_TRANSACTION_PARSING]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.DEBANK_TRANSACTION_PRE_EXECUTION]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.PRIMARY_ACCOUNT_REMOVAL]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.ADD_WALLET_WITH_SEEDPHRASE]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.ADD_WALLET_WITH_KEYSTORE_FILE]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.ADD_WALLET_WITH_LEDGER]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.BLOCKAID_DAPP_SCAN]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.BLOCKAID_DAPP_SCAN_WARNING]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.BLOCKAID_TRANSACTION_SCAN]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.BLOCKAID_JSONRPC_SCAN]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.HALLIDAY_BRIDGE_BANNER]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.FIREBASE_CLOUD_MESSAGING]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.ONE_CLICK_SWAP]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.GASLESS]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.SOLANA_SUPPORT]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.CORE_ASSISTANT]: false
};
// Default flags are used when posthog is not available
const DEFAULT_FLAGS = {
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.EVERYTHING]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.EVENTS]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.SWAP]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.SWAP_C_CHAIN]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.SWAP_ETHEREUM]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.SWAP_SOLANA]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.SWAP_FEES]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.SWAP_FEES_JUPITER]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.BRIDGE]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.BRIDGE_ETH]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.BRIDGE_BTC]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.SEND]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.SEND_P_CHAIN]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.SEND_X_CHAIN]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.SENDTRANSACTION_CHAIN_ID_SUPPORT]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.BUY]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.BUY_MOONPAY]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.BUY_COINBASE]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.KEYSTONE]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.NFT_MARKETPLACE]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.BOTTOM_NAVIGATION]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.DEFI]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.IMPORT_WALLET_CONNECT]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.IMPORT_FIREBLOCKS]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.IN_APP_SUPPORT_P_CHAIN]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.IN_APP_SUPPORT_X_CHAIN]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.SEEDLESS_ONBOARDING]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.SEEDLESS_ONBOARDING_GOOGLE]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.SEEDLESS_ONBOARDING_APPLE]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.SEEDLESS_MFA_PASSKEY]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.SEEDLESS_MFA_AUTHENTICATOR]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.SEEDLESS_MFA_YUBIKEY]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.SEEDLESS_SIGNING]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.SEEEDLESS_MFA_SETTINGS]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.SEEDLESS_OPTIONAL_MFA]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.UNIFIED_BRIDGE_CCTP]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.UNIFIED_BRIDGE_ICTT]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.UNIFIED_BRIDGE_AB_EVM]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.UNIFIED_BRIDGE_AB_AVA_TO_BTC]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.UNIFIED_BRIDGE_AB_BTC_TO_AVA]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.DEBANK_TRANSACTION_PARSING]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.DEBANK_TRANSACTION_PRE_EXECUTION]: false,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.PRIMARY_ACCOUNT_REMOVAL]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.ADD_WALLET_WITH_SEEDPHRASE]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.ADD_WALLET_WITH_KEYSTORE_FILE]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.ADD_WALLET_WITH_LEDGER]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.BLOCKAID_DAPP_SCAN]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.BLOCKAID_DAPP_SCAN_WARNING]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.BLOCKAID_TRANSACTION_SCAN]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.BLOCKAID_JSONRPC_SCAN]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.HALLIDAY_BRIDGE_BANNER]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.FIREBASE_CLOUD_MESSAGING]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.ONE_CLICK_SWAP]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.GASLESS]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.SOLANA_SUPPORT]: true,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.CORE_ASSISTANT]: true
};
const FEATURE_FLAGS_OVERRIDES_KEY = '__feature-flag-overrides__';


}),
"../../packages/common/src/index.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  AvaxCaipId: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.AvaxCaipId),
  AvaxLegacyCaipId: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.AvaxLegacyCaipId),
  BitcoinCaipId: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.BitcoinCaipId),
  CONTENT_SCRIPT: () => (/* reexport safe */ _script_names__WEBPACK_IMPORTED_MODULE_0__.CONTENT_SCRIPT),
  CaipNamespace: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.CaipNamespace),
  DEFAULT_FLAGS: () => (/* reexport safe */ _feature_flags__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_FLAGS),
  DISABLED_FLAG_VALUES: () => (/* reexport safe */ _feature_flags__WEBPACK_IMPORTED_MODULE_3__.DISABLED_FLAG_VALUES),
  ETHEREUM_ADDRESS: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.ETHEREUM_ADDRESS),
  EXTENSION_SCRIPT: () => (/* reexport safe */ _script_names__WEBPACK_IMPORTED_MODULE_0__.EXTENSION_SCRIPT),
  FEATURE_FLAGS_OVERRIDES_KEY: () => (/* reexport safe */ _feature_flags__WEBPACK_IMPORTED_MODULE_3__.FEATURE_FLAGS_OVERRIDES_KEY),
  INPAGE_SCRIPT: () => (/* reexport safe */ _script_names__WEBPACK_IMPORTED_MODULE_0__.INPAGE_SCRIPT),
  IPFS_URL: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.IPFS_URL),
  KEYSTORE_VERSION: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.KEYSTORE_VERSION),
  KNOWN_CORE_DOMAINS: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_2__.KNOWN_CORE_DOMAINS),
  KeystoreFixtures: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.KeystoreFixtures),
  Monitoring: () => (/* reexport module object */ _monitoring__WEBPACK_IMPORTED_MODULE_1__),
  OFFSCREEN_SCRIPT: () => (/* reexport safe */ _script_names__WEBPACK_IMPORTED_MODULE_0__.OFFSCREEN_SCRIPT),
  SYNCED_DOMAINS: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_2__.SYNCED_DOMAINS),
  SeedlessRegistartionResult: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.SeedlessRegistartionResult),
  SolanaCaipId: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.SolanaCaipId),
  USDC_ADDRESSES: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.USDC_ADDRESSES),
  USDC_ADDRESS_C_CHAIN: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.USDC_ADDRESS_C_CHAIN),
  USDC_ADDRESS_ETHEREUM: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.USDC_ADDRESS_ETHEREUM),
  USDC_ADDRESS_SOLANA: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.USDC_ADDRESS_SOLANA),
  WALLET_CONNECT_APP_METADATA: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_2__.WALLET_CONNECT_APP_METADATA),
  addGlacierAPIKeyIfNeeded: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.addGlacierAPIKeyIfNeeded),
  approveSeedlessRegistration: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.approveSeedlessRegistration),
  areArraysOverlapping: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.areArraysOverlapping),
  assert: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.assert),
  assertNonEmptyString: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.assertNonEmptyString),
  assertPresent: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.assertPresent),
  assertPropDefined: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.assertPropDefined),
  assertTrue: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.assertTrue),
  authenticateWithApple: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.authenticateWithApple),
  authenticateWithGoogle: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.authenticateWithGoogle),
  base64ToBase64Url: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.base64ToBase64Url),
  base64UrlToBuffer: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.base64UrlToBuffer),
  bigintToBig: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.bigintToBig),
  blockchainToNetwork: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.blockchainToNetwork),
  bufferToBase64Url: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.bufferToBase64Url),
  buildBtcTx: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.buildBtcTx),
  buildGlacierAuthHeaders: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.buildGlacierAuthHeaders),
  caipToChainId: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.caipToChainId),
  calculateGasAndFees: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.calculateGasAndFees),
  calculatePasswordHash: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.calculatePasswordHash),
  calculateTotalBalance: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.calculateTotalBalance),
  canSkipApproval: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.canSkipApproval),
  chainIdToCaip: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.chainIdToCaip),
  connectionLog: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.connectionLog),
  convertRequest: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.convertRequest),
  convertResult: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.convertResult),
  createNewMnemonic: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.createNewMnemonic),
  decorateWithCaipId: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.decorateWithCaipId),
  decrypt: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.decrypt),
  disconnectLog: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.disconnectLog),
  engine: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.engine),
  eventLog: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.eventLog),
  extractKeysFromDecryptedFile: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.extractKeysFromDecryptedFile),
  fetchAndVerify: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.fetchAndVerify),
  filterBridgeStateToNetwork: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.filterBridgeStateToNetwork),
  filterFalseyValues: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.filterFalseyValues),
  findMatchingBridgeAsset: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.findMatchingBridgeAsset),
  findTokenForAsset: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.findTokenForAsset),
  formatAndLog: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.formatAndLog),
  formatTime: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.formatTime),
  getAccountKey: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.getAccountKey),
  getAddressByVMType: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.getAddressByVMType),
  getAddressForChain: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.getAddressForChain),
  getAddressesInRange: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.getAddressesInRange),
  getAllAddressesForAccount: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.getAllAddressesForAccount),
  getAllAddressesForAccounts: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.getAllAddressesForAccounts),
  getAvalancheAddressLink: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.getAvalancheAddressLink),
  getAvaxAssetId: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.getAvaxAssetId),
  getBridgedAssetSymbol: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.getBridgedAssetSymbol),
  getBtcInputUtxos: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.getBtcInputUtxos),
  getCoreWebUrl: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.getCoreWebUrl),
  getDefaultChainIds: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.getDefaultChainIds),
  getEnabledBridgeTypes: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.getEnabledBridgeTypes),
  getEnv: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.getEnv),
  getExplorerAddress: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.getExplorerAddress),
  getExplorerAddressByNetwork: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.getExplorerAddressByNetwork),
  getExponentialBackoffDelay: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.getExponentialBackoffDelay),
  getFireblocksBtcAccessErrorCode: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.getFireblocksBtcAccessErrorCode),
  getHash: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.getHash),
  getHexStringToBytes: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.getHexStringToBytes),
  getNameSpaceFromScope: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.getNameSpaceFromScope),
  getNativeTokenSymbol: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.getNativeTokenSymbol),
  getNetworkCaipId: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.getNetworkCaipId),
  getNftMetadata: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.getNftMetadata),
  getOidcClient: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.getOidcClient),
  getOidcTokenProvider: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.getOidcTokenProvider),
  getOrgId: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.getOrgId),
  getPriceChangeValues: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.getPriceChangeValues),
  getProviderForNetwork: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.getProviderForNetwork),
  getSignerSession: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.getSignerSession),
  getSignerToken: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.getSignerToken),
  getSmallImageForNFT: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.getSmallImageForNFT),
  getSyncDomain: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.getSyncDomain),
  getTokenValue: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.getTokenValue),
  getUpdatedSigningData: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.getUpdatedSigningData),
  getXPChainIds: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.getXPChainIds),
  groupTokensByType: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.groupTokensByType),
  handleTxOutcome: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.handleTxOutcome),
  hasAccountBalances: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.hasAccountBalances),
  hasDefined: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.hasDefined),
  hasUnconfirmedBalance: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.hasUnconfirmedBalance),
  i18next: () => (/* reexport safe */ _initI18n__WEBPACK_IMPORTED_MODULE_5__.i18next),
  incrementalPromiseResolve: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.incrementalPromiseResolve),
  initI18n: () => (/* reexport safe */ _initI18n__WEBPACK_IMPORTED_MODULE_5__.initI18n),
  ipfsResolverWithFallback: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.ipfsResolverWithFallback),
  is1155Response: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.is1155Response),
  isActiveTab: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isActiveTab),
  isAddressBlockedError: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isAddressBlockedError),
  isAvalancheChainId: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isAvalancheChainId),
  isAvalancheNetwork: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isAvalancheNetwork),
  isBitcoin: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isBitcoin),
  isBitcoinCaipId: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isBitcoinCaipId),
  isBitcoinChainId: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isBitcoinChainId),
  isBitcoinNetwork: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isBitcoinNetwork),
  isBridgeConfigUpdateEventListener: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isBridgeConfigUpdateEventListener),
  isBridgeStateUpdateEventListener: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isBridgeStateUpdateEventListener),
  isBridgeTransferEventListener: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isBridgeTransferEventListener),
  isBtcAddressInNetwork: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isBtcAddressInNetwork),
  isContactValid: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isContactValid),
  isDevelopment: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isDevelopment),
  isErc721TokenBalance: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isErc721TokenBalance),
  isEthereumChainId: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isEthereumChainId),
  isEthereumNetwork: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isEthereumNetwork),
  isExportRequestOutdated: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isExportRequestOutdated),
  isFailedMfaError: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isFailedMfaError),
  isFailedToFetchError: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isFailedToFetchError),
  isFireblocksAccount: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isFireblocksAccount),
  isFireblocksApiSupported: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isFireblocksApiSupported),
  isFulfilled: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isFulfilled),
  isImportedAccount: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isImportedAccount),
  isLedgerVersionCompatible: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isLedgerVersionCompatible),
  isLockStateChangedEvent: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isLockStateChangedEvent),
  isNFT: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isNFT),
  isNewsletterConfigured: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isNewsletterConfigured),
  isNftTokenType: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isNftTokenType),
  isNonXPHistoryItem: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isNonXPHistoryItem),
  isNotNullish: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isNotNullish),
  isPchainNetwork: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isPchainNetwork),
  isPchainNetworkId: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isPchainNetworkId),
  isPchainTxHistoryItem: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isPchainTxHistoryItem),
  isPendingBridgeTransaction: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isPendingBridgeTransaction),
  isPhraseCorrect: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isPhraseCorrect),
  isPrimaryAccount: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isPrimaryAccount),
  isPrimarySubnet: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isPrimarySubnet),
  isProductionBuild: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isProductionBuild),
  isSeedlessMfaChoiceRequest: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isSeedlessMfaChoiceRequest),
  isSeedlessMfaEvent: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isSeedlessMfaEvent),
  isSeedlessMfaMethodsUpdatedEvent: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isSeedlessMfaMethodsUpdatedEvent),
  isSeedlessTokenEvent: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isSeedlessTokenEvent),
  isSessionPermissionsMismatchEvent: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isSessionPermissionsMismatchEvent),
  isSolanaChainId: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isSolanaChainId),
  isSolanaNetwork: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isSolanaNetwork),
  isSupportedBrowser: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isSupportedBrowser),
  isSwimmer: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isSwimmer),
  isSwimmerByChainId: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isSwimmerByChainId),
  isSyncDomain: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isSyncDomain),
  isTokenExpiredError: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isTokenExpiredError),
  isTokenMalicious: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isTokenMalicious),
  isTokenWithBalanceAVM: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isTokenWithBalanceAVM),
  isTokenWithBalancePVM: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isTokenWithBalancePVM),
  isUnifiedBridgeStateUpdate: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isUnifiedBridgeStateUpdate),
  isUnifiedBridgeTransfer: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isUnifiedBridgeTransfer),
  isUnifiedBridgeTransferStepChanged: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isUnifiedBridgeTransferStepChanged),
  isUriGeneratedEvent: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isUriGeneratedEvent),
  isUserRejectionError: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isUserRejectionError),
  isValidAddress: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isValidAddress),
  isValidAvmAddress: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isValidAvmAddress),
  isValidBtcAddress: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isValidBtcAddress),
  isValidHttpHeader: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isValidHttpHeader),
  isValidPvmAddress: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isValidPvmAddress),
  isValidResponse: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isValidResponse),
  isValidSvmAddress: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isValidSvmAddress),
  isValidXPAddress: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isValidXPAddress),
  isWalletConnectAccount: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isWalletConnectAccount),
  isWalletConnectEvent: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isWalletConnectEvent),
  isWalletStateUpdateEvent: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isWalletStateUpdateEvent),
  isWrappedError: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isWrappedError),
  isXchainNetwork: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isXchainNetwork),
  isXchainNetworkId: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isXchainNetworkId),
  launchFidoFlow: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.launchFidoFlow),
  lowerCaseKeys: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.lowerCaseKeys),
  makeBNLike: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.makeBNLike),
  mapAddressesToVMs: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.mapAddressesToVMs),
  mapMfasToRecoveryMethods: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.mapMfasToRecoveryMethods),
  mapVMAddresses: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.mapVMAddresses),
  measureDuration: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.measureDuration),
  networkToBlockchain: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.networkToBlockchain),
  noop: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.noop),
  normalizeBalance: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.normalizeBalance),
  now: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.now),
  omitUndefined: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.omitUndefined),
  onPageActivated: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.onPageActivated),
  openExtensionNewWindow: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.openExtensionNewWindow),
  openFullscreenTab: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.openFullscreenTab),
  openNewTab: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.openNewTab),
  openPopup: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.openPopup),
  openWindow: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.openWindow),
  padStart: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.padStart),
  parseAttributes: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.parseAttributes),
  parseRawAttributesString: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.parseRawAttributesString),
  readKeyFile: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.readKeyFile),
  reload: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.reload),
  repeat: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.repeat),
  requestLog: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.requestLog),
  requestOidcAuth: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.requestOidcAuth),
  requestParser: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.requestParser),
  resolve: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.resolve),
  responseLog: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.responseLog),
  responseParser: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.responseParser),
  shouldUseWalletConnectApproval: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.shouldUseWalletConnectApproval),
  signUpForNewsletter: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.signUpForNewsletter),
  stateLog: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.stateLog),
  stringToBigint: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.stringToBigint),
  stripAddressPrefix: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.stripAddressPrefix),
  sumByProperty: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.sumByProperty),
  supportedBrowsers: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.supportedBrowsers),
  toLogger: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.toLogger),
  toPrecision: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.toPrecision),
  truncateAddress: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.truncateAddress),
  updateIfDifferent: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.updateIfDifferent),
  validateBtcSend: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.validateBtcSend),
  wordPhraseLength: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.wordPhraseLength),
  wrapError: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.wrapError)
});
/* ESM import */var _script_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/common/src/script-names.ts");
/* ESM import */var _monitoring__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/common/src/monitoring/index.ts");
/* ESM import */var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/common/src/constants.ts");
/* ESM import */var _feature_flags__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../packages/common/src/feature-flags.ts");
/* ESM import */var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../packages/common/src/utils/index.ts");
/* ESM import */var _initI18n__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../packages/common/src/initI18n.ts");








}),
"../../packages/common/src/initI18n.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  i18next: () => (/* reexport safe */ i18next__WEBPACK_IMPORTED_MODULE_0__["default"]),
  initI18n: () => (initI18n)
});
/* ESM import */var i18next__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/i18next/dist/esm/i18next.js");
/* ESM import */var react_i18next__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/react-i18next/dist/es/context.js");
/* ESM import */var i18next_http_backend__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/i18next-http-backend/esm/index.js");



const initI18n = ()=>i18next__WEBPACK_IMPORTED_MODULE_0__["default"].use(react_i18next__WEBPACK_IMPORTED_MODULE_2__.initReactI18next).use(i18next_http_backend__WEBPACK_IMPORTED_MODULE_1__["default"]) // Registering the back-end plugin
    .init({
        // Remove resources from here
        lng: 'en',
        fallbackLng: 'en',
        supportedLngs: [
            'en',
            'de-DE',
            'hi-IN',
            'ko-KR',
            'ru-RU',
            'tr-TR',
            'zh-CN',
            'zh-TW',
            'es-EM',
            'ja-JP',
            'fr-FR'
        ],
        load: 'currentOnly',
        interpolation: {
            escapeValue: false
        },
        // turn on if you want to print out to the console the whole translation object (e.g. check your key and value has been added to the json)
        debug: false
    });



}),
"../../packages/common/src/monitoring/index.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  SentryExceptionTypes: () => (/* reexport safe */ _sentryCaptureException__WEBPACK_IMPORTED_MODULE_0__.SentryExceptionTypes),
  sentryCaptureException: () => (/* reexport safe */ _sentryCaptureException__WEBPACK_IMPORTED_MODULE_0__["default"]),
  sharedSentryConfig: () => (/* reexport safe */ _sharedSentryConfig__WEBPACK_IMPORTED_MODULE_1__["default"])
});
/* ESM import */var _sentryCaptureException__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/common/src/monitoring/sentryCaptureException.ts");
/* ESM import */var _sharedSentryConfig__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/common/src/monitoring/sharedSentryConfig.ts");





}),
"../../packages/common/src/monitoring/sentryCaptureException.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  SentryExceptionTypes: () => (SentryExceptionTypes),
  "default": () => (__WEBPACK_DEFAULT_EXPORT__)
});
/* ESM import */var _sentry_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/@sentry/core/esm/exports.js");

var SentryExceptionTypes = /*#__PURE__*/ function(SentryExceptionTypes) {
    // dApp
    SentryExceptionTypes["DAPP_CONNECTION_EVENT"] = "dAppConnectionEvent";
    // extension
    SentryExceptionTypes["EXTENSION_CONNECTION_MESSAGE"] = "extensionConnectionMessage";
    SentryExceptionTypes["EXTENSION_CONNECTION_EVENT"] = "extensionConnectionEvent";
    SentryExceptionTypes["SWAP"] = "swap";
    SentryExceptionTypes["AI_AGENT"] = "aiAgent";
    // ledger
    SentryExceptionTypes["LEDGER"] = "ledger";
    SentryExceptionTypes["WALLETCONNECT"] = "walletConnect";
    SentryExceptionTypes["SEEDLESS"] = "seedless";
    SentryExceptionTypes["FIREBLOCKS"] = "fireblocks";
    SentryExceptionTypes["UNIFIED_BRIDGE"] = "unifiedBridge";
    SentryExceptionTypes["ANALYTICS"] = "analytics";
    SentryExceptionTypes["WALLET_IMPORT"] = "walletImport";
    SentryExceptionTypes["INTERNAL_ERROR"] = "internalError";
    SentryExceptionTypes["BALANCES"] = "balances";
    SentryExceptionTypes["VM_MODULES"] = "vmModules";
    SentryExceptionTypes["ONBOARDING"] = "onboarding";
    SentryExceptionTypes["FIREBASE"] = "firebase";
    SentryExceptionTypes["NOTIFICATIONS"] = "notifications";
    return SentryExceptionTypes;
}({});
// wrapper to make error reporting contexts unfirom accross the codebase
const sentryCaptureException = (error, type)=>_sentry_browser__WEBPACK_IMPORTED_MODULE_0__.captureException(error, {
        tags: {
            type
        }
    });
/* ESM default export */ const __WEBPACK_DEFAULT_EXPORT__ = (sentryCaptureException);


}),
"../../packages/common/src/monitoring/sharedSentryConfig.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  "default": () => (__WEBPACK_DEFAULT_EXPORT__)
});
/* ESM import */var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/webextension-polyfill/dist/browser-polyfill.js");
/* ESM import */var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__);

const sharedSentryConfig = {
    dsn: "",
    environment:  false || 'dev',
    release: `core-extension@${webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().runtime.getManifest().version}`,
    debug: "" === 'true',
    tracesSampleRate: 0.003,
    ignoreErrors: [
        /Attempting to use a disconnected port object/,
        /^.*The user aborted a request\.$/,
        /^.*could not detect network.*$/,
        /^.*Failed to fetch$/,
        /AbortError: Registration failed - push service error/,
        /^.*NotAllowedError: Registration failed - permission denied/
    ]
};
/* ESM default export */ const __WEBPACK_DEFAULT_EXPORT__ = (sharedSentryConfig);


}),
"../../packages/common/src/script-names.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  CONTENT_SCRIPT: () => (CONTENT_SCRIPT),
  EXTENSION_SCRIPT: () => (EXTENSION_SCRIPT),
  INPAGE_SCRIPT: () => (INPAGE_SCRIPT),
  OFFSCREEN_SCRIPT: () => (OFFSCREEN_SCRIPT)
});
const CONTENT_SCRIPT = 'avalanche-contentscript';
const EXTENSION_SCRIPT = 'avalanche-extension';
const INPAGE_SCRIPT = 'avalanche-inpage';
const OFFSCREEN_SCRIPT = 'avalanche-offscreen';


}),
"../../packages/common/src/utils/account.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getAllAddressesForAccount: () => (getAllAddressesForAccount),
  getAllAddressesForAccounts: () => (getAllAddressesForAccounts)
});
function getAllAddressesForAccount(acc) {
    return [
        acc.addressC,
        acc.addressBTC,
        acc.addressAVM,
        acc.addressPVM,
        acc.addressCoreEth,
        acc.addressHVM,
        acc.addressSVM
    ].filter((addr)=>typeof addr === 'string');
}
function getAllAddressesForAccounts(accounts) {
    return accounts.flatMap(getAllAddressesForAccount).filter((v)=>typeof v === 'string');
}


}),
"../../packages/common/src/utils/accounts/accountTypeGuards.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isFireblocksAccount: () => (isFireblocksAccount),
  isImportedAccount: () => (isImportedAccount),
  isPrimaryAccount: () => (isPrimaryAccount),
  isWalletConnectAccount: () => (isWalletConnectAccount)
});
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/types/src/index.ts");

const isFireblocksAccount = (account)=>account?.type === _core_types__WEBPACK_IMPORTED_MODULE_0__.AccountType.FIREBLOCKS;
const isWalletConnectAccount = (account)=>account?.type === _core_types__WEBPACK_IMPORTED_MODULE_0__.AccountType.WALLET_CONNECT;
const isPrimaryAccount = (account)=>account?.type === _core_types__WEBPACK_IMPORTED_MODULE_0__.AccountType.PRIMARY;
const isImportedAccount = (account)=>Boolean(account) && !isPrimaryAccount(account);


}),
"../../packages/common/src/utils/accounts/index.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isFireblocksAccount: () => (/* reexport safe */ _accountTypeGuards__WEBPACK_IMPORTED_MODULE_0__.isFireblocksAccount),
  isImportedAccount: () => (/* reexport safe */ _accountTypeGuards__WEBPACK_IMPORTED_MODULE_0__.isImportedAccount),
  isPrimaryAccount: () => (/* reexport safe */ _accountTypeGuards__WEBPACK_IMPORTED_MODULE_0__.isPrimaryAccount),
  isWalletConnectAccount: () => (/* reexport safe */ _accountTypeGuards__WEBPACK_IMPORTED_MODULE_0__.isWalletConnectAccount)
});
/* ESM import */var _accountTypeGuards__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/common/src/utils/accounts/accountTypeGuards.ts");



}),
"../../packages/common/src/utils/actions/getUpdatedActionData.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getUpdatedSigningData: () => (getUpdatedSigningData)
});
const getUpdatedSigningData = (oldSigningData, newSigningData)=>{
    if (!oldSigningData) {
        return newSigningData;
    } else if (!newSigningData) {
        return oldSigningData;
    }
    return {
        ...oldSigningData,
        ...newSigningData
    };
};


}),
"../../packages/common/src/utils/address.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getAddressByVMType: () => (getAddressByVMType),
  getAddressesInRange: () => (getAddressesInRange),
  mapAddressesToVMs: () => (mapAddressesToVMs),
  mapVMAddresses: () => (mapVMAddresses)
});
/* ESM import */var _avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/utils/getAddressFromXpub.js");
/* ESM import */var _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/@avalabs/vm-module-types/dist/index.js");
/* ESM import */var _object__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/common/src/utils/object.ts");



const mapVMAddresses = (addresses)=>(0,_object__WEBPACK_IMPORTED_MODULE_1__.omitUndefined)({
        addressC: addresses[_avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.NetworkVMType.EVM],
        addressBTC: addresses[_avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.NetworkVMType.BITCOIN] || undefined,
        addressAVM: addresses[_avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.NetworkVMType.AVM] || undefined,
        addressPVM: addresses[_avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.NetworkVMType.PVM] || undefined,
        addressCoreEth: addresses[_avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.NetworkVMType.CoreEth] || undefined,
        addressHVM: addresses[_avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.NetworkVMType.HVM] || undefined,
        addressSVM: addresses[_avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.NetworkVMType.SVM] || undefined
    });
const mapAddressesToVMs = (account)=>(0,_object__WEBPACK_IMPORTED_MODULE_1__.omitUndefined)({
        [_avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.NetworkVMType.EVM]: account.addressC,
        [_avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.NetworkVMType.BITCOIN]: account.addressBTC,
        [_avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.NetworkVMType.AVM]: account.addressAVM,
        [_avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.NetworkVMType.PVM]: account.addressPVM,
        [_avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.NetworkVMType.CoreEth]: account.addressCoreEth,
        [_avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.NetworkVMType.HVM]: account.addressHVM,
        [_avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.NetworkVMType.SVM]: account.addressSVM
    });
const getAddressByVMType = (account, vmType)=>mapAddressesToVMs(account)[vmType];
function getAddressesInRange(xpubXP, providerXP, internal = false, start = 0, limit = 64) {
    const addresses = [];
    for(let i = start; i < start + limit; i++){
        addresses.push(_avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_2__.getAddressFromXpub(xpubXP, i, providerXP, 'P', internal).split('-')[1]);
    }
    return addresses;
}


}),
"../../packages/common/src/utils/approveSeedlessRegistration.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  SeedlessRegistartionResult: () => (SeedlessRegistartionResult),
  approveSeedlessRegistration: () => (approveSeedlessRegistration)
});
var SeedlessRegistartionResult = /*#__PURE__*/ function(SeedlessRegistartionResult) {
    SeedlessRegistartionResult["ALREADY_REGISTERED"] = "ALREADY_REGISTERED";
    SeedlessRegistartionResult["APPROVED"] = "APPROVED";
    SeedlessRegistartionResult["ERROR"] = "ERROR";
    return SeedlessRegistartionResult;
}({});
var SeedlessRegistartionResponseTextStatus = /*#__PURE__*/ function(SeedlessRegistartionResponseTextStatus) {
    SeedlessRegistartionResponseTextStatus["ALREADY_REGISTERED"] = "ALREADY_REGISTERED";
    SeedlessRegistartionResponseTextStatus["APPROVED"] = "ok";
    return SeedlessRegistartionResponseTextStatus;
}(SeedlessRegistartionResponseTextStatus || {});
async function approveSeedlessRegistration(identityProof, isMfaRequired) {
    return fetch("https://seedless-api.avax-test.network" + `/v1/register?mfa-required=${isMfaRequired ? 'true' : 'false'}`, {
        method: 'POST',
        body: JSON.stringify(identityProof),
        headers: {
            'Content-Type': 'application/json'
        }
    }).then(async (response)=>{
        const { message } = await response.json();
        if (message === "ALREADY_REGISTERED") {
            return "ALREADY_REGISTERED";
        }
        if (message === "ok") {
            return "APPROVED";
        }
        throw new Error(message);
    }).catch(()=>{
        return "ERROR";
    });
}


}),
"../../packages/common/src/utils/array.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  areArraysOverlapping: () => (areArraysOverlapping)
});
const areArraysOverlapping = (listA, listB)=>{
    return listA.some((itemFromA)=>listB.includes(itemFromA));
};


}),
"../../packages/common/src/utils/assertions.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  assert: () => (assert),
  assertNonEmptyString: () => (assertNonEmptyString),
  assertPresent: () => (assertPresent),
  assertPropDefined: () => (assertPropDefined),
  assertTrue: () => (assertTrue)
});
/* ESM import */var eth_rpc_errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/eth-rpc-errors/dist/index.js");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/types/src/index.ts");
/* provided dependency */ var Buffer = __webpack_require__("../../node_modules/buffer/index.js")["Buffer"];


function assertPresent(value, reason, context) {
    const isNullish = typeof value === 'undefined' || value === null;
    const isEmptyBuffer = Buffer.isBuffer(value) && value.length === 0;
    if (isNullish || isEmptyBuffer || value === '') {
        throw eth_rpc_errors__WEBPACK_IMPORTED_MODULE_0__.ethErrors.rpc.internal({
            data: {
                reason: reason ?? _core_types__WEBPACK_IMPORTED_MODULE_1__.CommonError.Unknown,
                context
            }
        });
    }
}
function assertPropDefined(obj, prop, reason) {
    assertPresent(obj[prop], reason);
}
function assertNonEmptyString(value) {
    if (typeof value !== 'string' || value === '') {
        throw eth_rpc_errors__WEBPACK_IMPORTED_MODULE_0__.ethErrors.rpc.internal({
            data: {
                reason: 'Expected non-empty string',
                value
            }
        });
    }
}
function assertTrue(condition) {
    if (condition !== true) {
        throw eth_rpc_errors__WEBPACK_IMPORTED_MODULE_0__.ethErrors.rpc.internal({
            data: {
                reason: 'Expected condition to evaluate as true',
                evaluationResult: condition
            }
        });
    }
}
function assert(value, reason) {
    if (!value) {
        throw eth_rpc_errors__WEBPACK_IMPORTED_MODULE_0__.ethErrors.rpc.internal({
            data: {
                reason: reason ?? _core_types__WEBPACK_IMPORTED_MODULE_1__.CommonError.Unknown
            }
        });
    }
}


}),
"../../packages/common/src/utils/balance/getPriceChangeValues.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getPriceChangeValues: () => (getPriceChangeValues)
});
function getPriceChangeValues(tokenSymbol, balanceInCurrency, priceChanges) {
    if (!priceChanges) {
        return {
            percentage: undefined,
            value: 0
        };
    }
    const symbol = tokenSymbol.toLowerCase();
    const tokenChangePercentage = priceChanges[symbol]?.priceChangePercentage;
    const tokenChangeValue = (balanceInCurrency || 0) * ((priceChanges[symbol]?.priceChangePercentage || 0) / 100);
    return {
        percentage: tokenChangePercentage,
        value: tokenChangeValue
    };
}


}),
"../../packages/common/src/utils/balance/getTokenValue.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getTokenValue: () => (getTokenValue)
});
function getTokenValue(decimals, amount) {
    return amount === undefined ? 0 : amount / 10 ** decimals;
}


}),
"../../packages/common/src/utils/balance/groupTokensByType.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  groupTokensByType: () => (groupTokensByType)
});
/* ESM import */var _nfts_isNFT__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/common/src/utils/nfts/isNFT.ts");

function groupTokensByType(balances) {
    const nfts = {};
    const tokens = {};
    if (!balances) {
        return {
            tokens,
            nfts
        };
    }
    for(const address in balances){
        const nftsForAddress = {};
        const tokensForAddress = {};
        for(const tokenId in balances[address]){
            const token = balances[address]?.[tokenId];
            if (!token) {
                continue;
            }
            if ((0,_nfts_isNFT__WEBPACK_IMPORTED_MODULE_0__.isNFT)(token)) {
                nftsForAddress[tokenId] = token;
            } else {
                tokensForAddress[tokenId] = token;
            }
        }
        nfts[address] = nftsForAddress;
        tokens[address] = tokensForAddress;
    }
    return {
        nfts,
        tokens
    };
}


}),
"../../packages/common/src/utils/balance/index.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getPriceChangeValues: () => (/* reexport safe */ _getPriceChangeValues__WEBPACK_IMPORTED_MODULE_0__.getPriceChangeValues),
  getTokenValue: () => (/* reexport safe */ _getTokenValue__WEBPACK_IMPORTED_MODULE_1__.getTokenValue),
  groupTokensByType: () => (/* reexport safe */ _groupTokensByType__WEBPACK_IMPORTED_MODULE_2__.groupTokensByType),
  isTokenWithBalanceAVM: () => (/* reexport safe */ _isTokenWithBalanceAVM__WEBPACK_IMPORTED_MODULE_3__.isTokenWithBalanceAVM),
  isTokenWithBalancePVM: () => (/* reexport safe */ _isTokenWithBalancePVM__WEBPACK_IMPORTED_MODULE_4__.isTokenWithBalancePVM)
});
/* ESM import */var _getPriceChangeValues__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/common/src/utils/balance/getPriceChangeValues.ts");
/* ESM import */var _getTokenValue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/common/src/utils/balance/getTokenValue.ts");
/* ESM import */var _groupTokensByType__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/common/src/utils/balance/groupTokensByType.ts");
/* ESM import */var _isTokenWithBalanceAVM__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../packages/common/src/utils/balance/isTokenWithBalanceAVM.ts");
/* ESM import */var _isTokenWithBalancePVM__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../packages/common/src/utils/balance/isTokenWithBalancePVM.ts");







}),
"../../packages/common/src/utils/balance/isTokenWithBalanceAVM.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isTokenWithBalanceAVM: () => (isTokenWithBalanceAVM)
});
const isTokenWithBalanceAVM = (balance)=>{
    if (!balance) {
        return false;
    }
    return 'balancePerType' in balance && 'locked' in balance.balancePerType;
};


}),
"../../packages/common/src/utils/balance/isTokenWithBalancePVM.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isTokenWithBalancePVM: () => (isTokenWithBalancePVM)
});
const isTokenWithBalancePVM = (balance)=>{
    if (!balance) {
        return false;
    }
    return 'balancePerType' in balance && 'lockedStaked' in balance.balancePerType;
};


}),
"../../packages/common/src/utils/bigintToBig.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  bigintToBig: () => (bigintToBig)
});
/* ESM import */var _avalabs_core_utils_sdk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/@avalabs/core-utils-sdk/esm/bnToBig.js");
/* ESM import */var bn_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/bn.js/lib/bn.js");
/* ESM import */var bn_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bn_js__WEBPACK_IMPORTED_MODULE_0__);


function bigintToBig(amount, denomination) {
    return (0,_avalabs_core_utils_sdk__WEBPACK_IMPORTED_MODULE_1__.bnToBig)(new bn_js__WEBPACK_IMPORTED_MODULE_0__.BN(amount.toString()), denomination);
}


}),
"../../packages/common/src/utils/bridge/blockchainConversion.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  blockchainToNetwork: () => (blockchainToNetwork),
  networkToBlockchain: () => (networkToBlockchain)
});
/* ESM import */var _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/@avalabs/core-bridge-sdk/esm/types/config.js");
/* ESM import */var _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/@avalabs/core-chains-sdk/esm/models.js");
/* ESM import */var _caipConversion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/common/src/utils/caipConversion.ts");



const blockchainToNetwork = (blockChain, networks, bridgeConfig, isTestnet)=>{
    if (typeof blockChain === 'object') {
        // We got a Chain from @avalabs/bridge-unified
        const chain = networks.find((network)=>network.chainId === (0,_caipConversion__WEBPACK_IMPORTED_MODULE_0__.caipToChainId)(blockChain.chainId));
        if (!chain) {
            throw new Error('Blockchain not supported');
        }
        return chain;
    }
    switch(blockChain){
        case _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_1__.Blockchain.AVALANCHE:
            return networks.find((network)=>network.chainId === bridgeConfig.config?.critical.networks[_avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_1__.Blockchain.AVALANCHE]);
        case _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_1__.Blockchain.ETHEREUM:
            {
                return networks.find((network)=>network.chainId === bridgeConfig.config?.critical.networks[_avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_1__.Blockchain.ETHEREUM]);
            }
        case _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_1__.Blockchain.BITCOIN:
            return networks.find((network)=>{
                if (isTestnet === undefined) {
                    return network.chainId === _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_2__.ChainId.BITCOIN_TESTNET || network.chainId === _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_2__.ChainId.BITCOIN;
                }
                return isTestnet ? network.chainId === _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_2__.ChainId.BITCOIN_TESTNET : network.chainId === _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_2__.ChainId.BITCOIN;
            });
        default:
            throw new Error('Blockchain not supported');
    }
};
const networkToBlockchain = (network)=>{
    const chainId = typeof network?.chainId === 'string' ? (0,_caipConversion__WEBPACK_IMPORTED_MODULE_0__.caipToChainId)(network.chainId) : network?.chainId;
    switch(chainId){
        case _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_2__.ChainId.AVALANCHE_MAINNET_ID:
        case _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_2__.ChainId.AVALANCHE_LOCAL_ID:
        case _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_2__.ChainId.AVALANCHE_TESTNET_ID:
            return _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_1__.Blockchain.AVALANCHE;
        case _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_2__.ChainId.ETHEREUM_HOMESTEAD:
        case _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_2__.ChainId.ETHEREUM_TEST_RINKEBY:
        case _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_2__.ChainId.ETHEREUM_TEST_GOERLY:
        case _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_2__.ChainId.ETHEREUM_TEST_SEPOLIA:
            return _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_1__.Blockchain.ETHEREUM;
        case _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_2__.ChainId.BITCOIN:
        case _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_2__.ChainId.BITCOIN_TESTNET:
            return _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_1__.Blockchain.BITCOIN;
        default:
            return _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_1__.Blockchain.UNKNOWN;
    }
};


}),
"../../packages/common/src/utils/bridge/bridgeEventFilters.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isBridgeConfigUpdateEventListener: () => (isBridgeConfigUpdateEventListener),
  isBridgeStateUpdateEventListener: () => (isBridgeStateUpdateEventListener),
  isBridgeTransferEventListener: () => (isBridgeTransferEventListener),
  isUnifiedBridgeStateUpdate: () => (isUnifiedBridgeStateUpdate),
  isUnifiedBridgeTransferStepChanged: () => (isUnifiedBridgeTransferStepChanged)
});
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/types/src/index.ts");

function isBridgeStateUpdateEventListener(evt) {
    return evt.name === _core_types__WEBPACK_IMPORTED_MODULE_0__.BridgeEvents.BRIDGE_STATE_UPDATE_EVENT;
}
function isBridgeConfigUpdateEventListener(evt) {
    return evt?.name === _core_types__WEBPACK_IMPORTED_MODULE_0__.BridgeEvents.BRIDGE_CONFIG_UPDATE_EVENT;
}
function isBridgeTransferEventListener(evt) {
    return evt?.name === _core_types__WEBPACK_IMPORTED_MODULE_0__.BridgeEvents.BRIDGE_TRANSFER_EVENT;
}
const isUnifiedBridgeStateUpdate = (ev)=>ev.name === _core_types__WEBPACK_IMPORTED_MODULE_0__.UnifiedBridgeEvent.StateUpdated;
const isUnifiedBridgeTransferStepChanged = (ev)=>ev.name === _core_types__WEBPACK_IMPORTED_MODULE_0__.UnifiedBridgeEvent.TransferStepChange;


}),
"../../packages/common/src/utils/bridge/filterBridgeStateToNetwork.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  filterBridgeStateToNetwork: () => (filterBridgeStateToNetwork)
});
/* ESM import */var _network_isBitcoinNetwork__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/common/src/utils/network/isBitcoinNetwork.ts");
/* ESM import */var _network_isAvalancheNetwork__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/common/src/utils/network/isAvalancheNetwork.ts");
/* ESM import */var _network_isEthereumNetwork__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/common/src/utils/network/isEthereumNetwork.ts");



var BridgeNetwork = /*#__PURE__*/ function(BridgeNetwork) {
    BridgeNetwork["AVALANCHE"] = "avalanche";
    BridgeNetwork["BITCOIN"] = "bitcoin";
    BridgeNetwork["ETHEREUM"] = "ethereum";
    return BridgeNetwork;
}(BridgeNetwork || {});
/**
 * Remove bridgeTransactions that don't belong to the given network.
 */ function filterBridgeStateToNetwork(bridge, network) {
    const networkNameToCheck = (0,_network_isBitcoinNetwork__WEBPACK_IMPORTED_MODULE_0__.isBitcoinNetwork)(network) ? "bitcoin" : (0,_network_isAvalancheNetwork__WEBPACK_IMPORTED_MODULE_1__.isAvalancheNetwork)(network) ? "avalanche" : (0,_network_isEthereumNetwork__WEBPACK_IMPORTED_MODULE_2__.isEthereumNetwork)(network) ? "ethereum" : null;
    const isMainnet = !network.isTestnet;
    const bridgeTransactions = Object.values(bridge.bridgeTransactions).reduce((txs, btx)=>{
        if ((btx.sourceChain.valueOf() === networkNameToCheck || btx.targetChain.valueOf() === networkNameToCheck) && btx.environment === (isMainnet ? 'main' : 'test')) {
            txs[btx.sourceTxHash] = btx;
        }
        return txs;
    }, {});
    return {
        ...bridge,
        bridgeTransactions
    };
}


}),
"../../packages/common/src/utils/bridge/findMatchingBridgeAsset.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  findMatchingBridgeAsset: () => (findMatchingBridgeAsset)
});
/* ESM import */var _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/@avalabs/bridge-unified/dist/index.js");
/* ESM import */var _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/@avalabs/vm-module-types/dist/index.js");


const findMatchingBridgeAsset = (assets, token)=>{
    return assets.find((a)=>{
        if (a.type === _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_0__.TokenType.NATIVE && token.type === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.NATIVE) {
            return a.symbol.toLowerCase() === token.symbol.toLowerCase();
        }
        if (a.type === _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_0__.TokenType.ERC20 && token.type === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.ERC20) {
            return a.address.toLowerCase() === token.address.toLowerCase();
        }
        return false;
    });
};


}),
"../../packages/common/src/utils/bridge/getBridgedAssetSymbol.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getBridgedAssetSymbol: () => (getBridgedAssetSymbol)
});
/* ESM import */var _isUnifiedBridgeTransfer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/common/src/utils/bridge/isUnifiedBridgeTransfer.ts");

const getBridgedAssetSymbol = (tx)=>{
    if ((0,_isUnifiedBridgeTransfer__WEBPACK_IMPORTED_MODULE_0__.isUnifiedBridgeTransfer)(tx)) {
        return tx.asset.symbol;
    }
    return tx.symbol;
};


}),
"../../packages/common/src/utils/bridge/getNativeTokenSymbol.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getNativeTokenSymbol: () => (getNativeTokenSymbol)
});
/* ESM import */var _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/@avalabs/core-bridge-sdk/esm/utils/getNativeSymbol.js");

const getNativeTokenSymbol = (chain)=>{
    if (typeof chain === 'object') {
        return chain.networkToken.symbol;
    }
    return (0,_avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_0__.getNativeSymbol)(chain);
};


}),
"../../packages/common/src/utils/bridge/index.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  blockchainToNetwork: () => (/* reexport safe */ _blockchainConversion__WEBPACK_IMPORTED_MODULE_0__.blockchainToNetwork),
  filterBridgeStateToNetwork: () => (/* reexport safe */ _filterBridgeStateToNetwork__WEBPACK_IMPORTED_MODULE_7__.filterBridgeStateToNetwork),
  findMatchingBridgeAsset: () => (/* reexport safe */ _findMatchingBridgeAsset__WEBPACK_IMPORTED_MODULE_1__.findMatchingBridgeAsset),
  getBridgedAssetSymbol: () => (/* reexport safe */ _getBridgedAssetSymbol__WEBPACK_IMPORTED_MODULE_2__.getBridgedAssetSymbol),
  getNativeTokenSymbol: () => (/* reexport safe */ _getNativeTokenSymbol__WEBPACK_IMPORTED_MODULE_5__.getNativeTokenSymbol),
  isAddressBlockedError: () => (/* reexport safe */ _isAddressBlockedError__WEBPACK_IMPORTED_MODULE_3__.isAddressBlockedError),
  isBridgeConfigUpdateEventListener: () => (/* reexport safe */ _bridgeEventFilters__WEBPACK_IMPORTED_MODULE_6__.isBridgeConfigUpdateEventListener),
  isBridgeStateUpdateEventListener: () => (/* reexport safe */ _bridgeEventFilters__WEBPACK_IMPORTED_MODULE_6__.isBridgeStateUpdateEventListener),
  isBridgeTransferEventListener: () => (/* reexport safe */ _bridgeEventFilters__WEBPACK_IMPORTED_MODULE_6__.isBridgeTransferEventListener),
  isUnifiedBridgeStateUpdate: () => (/* reexport safe */ _bridgeEventFilters__WEBPACK_IMPORTED_MODULE_6__.isUnifiedBridgeStateUpdate),
  isUnifiedBridgeTransfer: () => (/* reexport safe */ _isUnifiedBridgeTransfer__WEBPACK_IMPORTED_MODULE_4__.isUnifiedBridgeTransfer),
  isUnifiedBridgeTransferStepChanged: () => (/* reexport safe */ _bridgeEventFilters__WEBPACK_IMPORTED_MODULE_6__.isUnifiedBridgeTransferStepChanged),
  networkToBlockchain: () => (/* reexport safe */ _blockchainConversion__WEBPACK_IMPORTED_MODULE_0__.networkToBlockchain)
});
/* ESM import */var _blockchainConversion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/common/src/utils/bridge/blockchainConversion.ts");
/* ESM import */var _findMatchingBridgeAsset__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/common/src/utils/bridge/findMatchingBridgeAsset.ts");
/* ESM import */var _getBridgedAssetSymbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/common/src/utils/bridge/getBridgedAssetSymbol.ts");
/* ESM import */var _isAddressBlockedError__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../packages/common/src/utils/bridge/isAddressBlockedError.ts");
/* ESM import */var _isUnifiedBridgeTransfer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../packages/common/src/utils/bridge/isUnifiedBridgeTransfer.ts");
/* ESM import */var _getNativeTokenSymbol__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../packages/common/src/utils/bridge/getNativeTokenSymbol.ts");
/* ESM import */var _bridgeEventFilters__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../../packages/common/src/utils/bridge/bridgeEventFilters.ts");
/* ESM import */var _filterBridgeStateToNetwork__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../../packages/common/src/utils/bridge/filterBridgeStateToNetwork.ts");










}),
"../../packages/common/src/utils/bridge/isAddressBlockedError.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isAddressBlockedError: () => (isAddressBlockedError)
});
/* ESM import */var _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/@avalabs/bridge-unified/dist/index.js");

const isAddressBlockedError = (err)=>{
    return !!err && err instanceof Error && err.message === _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_0__.ErrorReason.ADDRESS_IS_BLOCKED;
};


}),
"../../packages/common/src/utils/bridge/isUnifiedBridgeTransfer.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isUnifiedBridgeTransfer: () => (isUnifiedBridgeTransfer)
});
const isUnifiedBridgeTransfer = (transfer)=>{
    return transfer !== undefined && 'type' in transfer;
};


}),
"../../packages/common/src/utils/bridgeTransactionUtils.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  ETHEREUM_ADDRESS: () => (ETHEREUM_ADDRESS),
  isPendingBridgeTransaction: () => (isPendingBridgeTransaction)
});
const ETHEREUM_ADDRESS = '0x0000000000000000000000000000000000000000';
function isPendingBridgeTransaction(item) {
    return 'addressBTC' in item || 'sourceChain' in item;
}


}),
"../../packages/common/src/utils/caipConversion.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  AvaxCaipId: () => (AvaxCaipId),
  AvaxLegacyCaipId: () => (AvaxLegacyCaipId),
  BitcoinCaipId: () => (BitcoinCaipId),
  CaipNamespace: () => (CaipNamespace),
  SolanaCaipId: () => (SolanaCaipId),
  caipToChainId: () => (caipToChainId),
  chainIdToCaip: () => (chainIdToCaip),
  decorateWithCaipId: () => (decorateWithCaipId),
  getNameSpaceFromScope: () => (getNameSpaceFromScope),
  getNetworkCaipId: () => (getNetworkCaipId),
  isBitcoinCaipId: () => (isBitcoinCaipId)
});
/* ESM import */var _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/@avalabs/core-chains-sdk/esm/models.js");
/* ESM import */var _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/@avalabs/core-chains-sdk/esm/bitcoin.chain.js");
/* ESM import */var _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/@avalabs/core-chains-sdk/esm/avalanche.chain.js");
/* ESM import */var _avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/providers/constants.js");
/* ESM import */var _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/@avalabs/vm-module-types/dist/index.js");



var CaipNamespace = /*#__PURE__*/ function(CaipNamespace) {
    CaipNamespace["AVAX"] = "avax";
    CaipNamespace["BIP122"] = "bip122";
    CaipNamespace["EIP155"] = "eip155";
    CaipNamespace["HVM"] = "hvm";
    CaipNamespace["SOLANA"] = "solana";
    return CaipNamespace;
}({});
const BitcoinCaipId = {
    [_avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_1__.ChainId.BITCOIN]: _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_2__.BitcoinCaip2ChainId.MAINNET,
    [_avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_1__.ChainId.BITCOIN_TESTNET]: _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_2__.BitcoinCaip2ChainId.TESTNET
};
const SolanaCaipId = {
    [_avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_1__.ChainId.SOLANA_MAINNET_ID]: `${"solana"}:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp`,
    [_avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_1__.ChainId.SOLANA_DEVNET_ID]: `${"solana"}:EtWTRABZaYq6iMfeYKouRu166VU2xqa1`,
    [_avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_1__.ChainId.SOLANA_TESTNET_ID]: `${"solana"}:4uhcVJyU9pJkvQyS88uRDiswHXSCkY3z`
};
const AvaxLegacyCaipId = {
    [_avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_1__.ChainId.AVALANCHE_P]: `${"avax"}:${_avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_3__.MainnetContext.pBlockchainID}`,
    [_avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_1__.ChainId.AVALANCHE_X]: `${"avax"}:${_avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_3__.MainnetContext.xBlockchainID}`,
    [_avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_1__.ChainId.AVALANCHE_TEST_P]: `${"avax"}:fuji${_avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_3__.FujiContext.pBlockchainID}`,
    [_avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_1__.ChainId.AVALANCHE_TEST_X]: `${"avax"}:fuji${_avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_3__.FujiContext.xBlockchainID}`
};
const AvaxCaipId = {
    [_avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_1__.ChainId.AVALANCHE_P]: _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_4__.AvalancheCaip2ChainId.P,
    [_avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_1__.ChainId.AVALANCHE_X]: _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_4__.AvalancheCaip2ChainId.X,
    [_avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_1__.ChainId.AVALANCHE_TEST_P]: _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_4__.AvalancheCaip2ChainId.P_TESTNET,
    [_avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_1__.ChainId.AVALANCHE_TEST_X]: _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_4__.AvalancheCaip2ChainId.X_TESTNET
};
const getNetworkCaipId = (network)=>{
    if (network.caipId) {
        return network.caipId;
    } else if (network.caip2Id) {
        return network.caip2Id;
    }
    if (network.vmName === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.NetworkVMType.EVM) {
        return `eip155:${network.chainId}`;
    }
    if (network.vmName === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.NetworkVMType.BITCOIN) {
        return BitcoinCaipId[network.chainId];
    }
    const isXChain = network.vmName === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.NetworkVMType.AVM;
    const isPChain = network.vmName === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.NetworkVMType.PVM;
    if (isXChain || isPChain) {
        return AvaxCaipId[network.chainId];
    }
    if (network.vmName === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.NetworkVMType.HVM) {
        return `hvm:${network.chainId}`;
    }
    throw new Error('Unsupported VM type: ' + network.vmName);
};
const caipToChainId = (identifier)=>{
    const [namespace, reference] = identifier.split(':');
    if (!namespace) {
        throw new Error('No namespace found in identifier: ' + identifier);
    }
    if (!reference) {
        throw new Error('No reference found in identifier: ' + identifier);
    }
    if (namespace === "eip155") {
        return Number(reference);
    }
    if (reference.length === 32 && namespace === "hvm") {
        return parseInt(reference.slice(0, 16), 16);
    }
    if (namespace === "solana") {
        const chainId = Object.keys(SolanaCaipId).find((chainIdLookup)=>SolanaCaipId[chainIdLookup] === identifier);
        if (!chainId) {
            throw new Error('No chainId match for CAIP identifier: ' + identifier);
        }
        return Number(chainId);
    }
    if (namespace === "bip122") {
        const chainId = Object.keys(BitcoinCaipId).find((chainIdLookup)=>BitcoinCaipId[chainIdLookup] === identifier);
        if (!chainId) {
            throw new Error('No chainId match for CAIP identifier: ' + identifier);
        }
        return Number(chainId);
    }
    if (namespace === "avax") {
        const chainId = Object.keys(AvaxCaipId).find((chainIdLookup)=>AvaxCaipId[chainIdLookup] === identifier || AvaxLegacyCaipId[chainIdLookup] === identifier);
        if (!chainId) {
            throw new Error('No chainId match for CAIP identifier: ' + identifier);
        }
        return Number(chainId);
    }
    throw new Error('No chainId match for CAIP identifier: ' + identifier);
};
const chainIdToCaip = (chainId)=>{
    return BitcoinCaipId[chainId] ?? AvaxCaipId[chainId] ?? `eip155:${chainId}`;
};
const decorateWithCaipId = (network)=>({
        ...network,
        caipId: getNetworkCaipId(network)
    });
const getNameSpaceFromScope = (scope)=>{
    if (!scope) {
        return null;
    }
    const [namespace] = scope.split(':');
    return namespace;
};
const isBitcoinCaipId = (caipId)=>Object.values(BitcoinCaipId).includes(caipId);


}),
"../../packages/common/src/utils/calculateGasAndFees.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  calculateGasAndFees: () => (calculateGasAndFees)
});
/* ESM import */var _avalabs_core_utils_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/@avalabs/core-utils-sdk/esm/tokenUnit.js");

function calculateGasAndFees({ gasPrice, maxFeePerGas, maxPriorityFeePerGas, tokenPrice, tokenDecimals = 18, gasLimit }) {
    const pricePerGas = maxFeePerGas ?? gasPrice;
    if (pricePerGas == null) {
        throw new Error('Please provide gasPrice or maxFeePerGas parameters');
    }
    const bnFee = gasLimit ? pricePerGas * BigInt(gasLimit) : pricePerGas;
    const bnTip = gasLimit && maxPriorityFeePerGas ? maxPriorityFeePerGas * BigInt(gasLimit) : maxPriorityFeePerGas;
    const fee = new _avalabs_core_utils_sdk__WEBPACK_IMPORTED_MODULE_0__.TokenUnit(bnFee, tokenDecimals, '');
    const tip = bnTip ? new _avalabs_core_utils_sdk__WEBPACK_IMPORTED_MODULE_0__.TokenUnit(bnTip, tokenDecimals, '') : null;
    const price = tokenPrice ? new _avalabs_core_utils_sdk__WEBPACK_IMPORTED_MODULE_0__.TokenUnit(tokenPrice, 0, '') : null;
    return {
        maxFeePerGas: maxFeePerGas,
        gasLimit: gasLimit || 0,
        feeUnit: fee,
        fee: fee.toDisplay(),
        bnFee,
        feeUSD: price ? price.mul(fee).toDisplay({
            fixedDp: 6,
            asNumber: true
        }) : null,
        tipUSD: price && tip ? price.mul(tip).toDisplay({
            fixedDp: 2,
            asNumber: true
        }) : null
    };
}


}),
"../../packages/common/src/utils/calculateTotalBalance.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  calculateTotalBalance: () => (calculateTotalBalance)
});
/* ESM import */var _hasAccountBalances__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/common/src/utils/hasAccountBalances.ts");
/* ESM import */var _getAddressForChain__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/common/src/utils/getAddressForChain.ts");


function calculateTotalBalance(account, networks, balances) {
    if (!account || !balances || !networks?.length) {
        return {
            sum: null,
            priceChange: {
                value: 0,
                percentage: []
            }
        };
    }
    const networkDict = networks.reduce((dict, network)=>({
            ...dict,
            [network.chainId]: network
        }), {});
    const chainIdsToSum = new Set(Object.keys(networkDict).map(Number));
    const hasBalances = (0,_hasAccountBalances__WEBPACK_IMPORTED_MODULE_0__.hasAccountBalances)(balances, account, Array.from(chainIdsToSum));
    if (!hasBalances) {
        return {
            sum: null,
            priceChange: {
                value: 0,
                percentage: []
            }
        };
    }
    const sum = Array.from(chainIdsToSum).reduce((total, chainId)=>{
        const address = (0,_getAddressForChain__WEBPACK_IMPORTED_MODULE_1__.getAddressForChain)(networkDict[chainId], account);
        if (!address) {
            return total;
        }
        const sumValues = Object.values(balances?.[chainId]?.[address] ?? {})?.reduce((sumTotal, token)=>{
            const percentage = token.priceChanges?.percentage ? [
                ...sumTotal.priceChange.percentage,
                token.priceChanges?.percentage
            ] : [
                ...sumTotal.priceChange.percentage
            ];
            return {
                sum: sumTotal.sum + (token.balanceInCurrency ?? 0),
                priceChange: {
                    value: sumTotal.priceChange.value + (token.priceChanges?.value ?? 0),
                    percentage
                }
            };
        }, {
            sum: 0,
            priceChange: {
                value: 0,
                percentage: []
            }
        }) || {
            sum: 0,
            priceChange: {
                value: 0,
                percentage: []
            }
        };
        return {
            ...total,
            sum: total.sum + sumValues.sum,
            priceChange: {
                value: sumValues.priceChange.value + total.priceChange.value,
                percentage: [
                    ...sumValues.priceChange.percentage,
                    ...total.priceChange.percentage
                ]
            }
        };
    }, {
        sum: 0,
        priceChange: {
            value: 0,
            percentage: []
        }
    });
    return sum;
}


}),
"../../packages/common/src/utils/canSkipApproval.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  canSkipApproval: () => (canSkipApproval)
});
/* ESM import */var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/webextension-polyfill/dist/browser-polyfill.js");
/* ESM import */var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var _getSyncDomain__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/common/src/utils/getSyncDomain.ts");
/* ESM import */var _isActiveTab__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/common/src/utils/isActiveTab.ts");



const canSkipApproval = async (domain, tabId, { allowInactiveTabs, domainWhitelist } = {})=>{
    if (!(0,_getSyncDomain__WEBPACK_IMPORTED_MODULE_1__.isSyncDomain)(domain, domainWhitelist)) {
        return false;
    }
    return allowInactiveTabs || domain === webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__.runtime.id || // chrome.tabs.get(...) does not see extension popup
    await (0,_isActiveTab__WEBPACK_IMPORTED_MODULE_2__.isActiveTab)(tabId);
};


}),
"../../packages/common/src/utils/constants.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  USDC_ADDRESSES: () => (USDC_ADDRESSES),
  USDC_ADDRESS_C_CHAIN: () => (USDC_ADDRESS_C_CHAIN),
  USDC_ADDRESS_ETHEREUM: () => (USDC_ADDRESS_ETHEREUM),
  USDC_ADDRESS_SOLANA: () => (USDC_ADDRESS_SOLANA)
});
const USDC_ADDRESS_C_CHAIN = '0xb97ef9ef8734c71904d8002f8b6bc66dd9c48a6e';
const USDC_ADDRESS_ETHEREUM = '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48';
const USDC_ADDRESS_SOLANA = 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v';
const USDC_ADDRESSES = [
    USDC_ADDRESS_C_CHAIN,
    USDC_ADDRESS_ETHEREUM,
    USDC_ADDRESS_SOLANA
];


}),
"../../packages/common/src/utils/createMnemonicPhrase.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  createNewMnemonic: () => (createNewMnemonic)
});
/* ESM import */var ethers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/ethers/lib.esm/wallet/mnemonic.js");

function createNewMnemonic() {
    const randomBytes = crypto.getRandomValues(new Uint8Array(32));
    return ethers__WEBPACK_IMPORTED_MODULE_0__.Mnemonic.entropyToPhrase(randomBytes);
}


}),
"../../packages/common/src/utils/distributiveomit.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
// if you want to remove properties from a union ype, you can use this
// currently working stackoverflow answer: https://stackoverflow.com/questions/57103834/typescript-omit-a-property-from-all-interfaces-in-a-union-but-keep-the-union-s/57103940#57103940



}),
"../../packages/common/src/utils/encoding.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  base64ToBase64Url: () => (base64ToBase64Url),
  base64UrlToBuffer: () => (base64UrlToBuffer),
  bufferToBase64Url: () => (bufferToBase64Url)
});
/* provided dependency */ var Buffer = __webpack_require__("../../node_modules/buffer/index.js")["Buffer"];
const base64ToBase64Url = (b64)=>{
    return b64.replace(/\+/g, '-').replace(/\//g, '_').replace(/[=]*$/g, '');
};
const base64UrlToBuffer = (b64url)=>{
    const b64 = b64url.replace(/-/g, '+').replace(/_/g, '/').replace(/[=]*$/g, '');
    return Buffer.from(b64, 'base64');
};
function bufferToBase64Url(buffer) {
    // buffer to binary string
    const byteView = new Uint8Array(buffer);
    let str = '';
    for (const charCode of byteView){
        str += String.fromCharCode(charCode);
    }
    // binary string to base64
    const base64String = btoa(str); //Buffer.from(str).toString('base64');
    // base64 to base64url
    return base64String.replace(/\+/g, '-').replace(/\//g, '_').replace(/[=]/g, '');
}


}),
"../../packages/common/src/utils/environment.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isDevelopment: () => (isDevelopment),
  isProductionBuild: () => (isProductionBuild)
});
function isDevelopment() {
    return "development" === 'development';
}
function isProductionBuild() {
    return "" === 'production';
}


}),
"../../packages/common/src/utils/errors/errorHelpers.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isUserRejectionError: () => (isUserRejectionError),
  isWrappedError: () => (isWrappedError),
  wrapError: () => (wrapError)
});
/* ESM import */var eth_rpc_errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/eth-rpc-errors/dist/index.js");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/types/src/index.ts");


const isWrappedError = (maybeErr)=>{
    return typeof maybeErr === 'object' && maybeErr !== null && 'code' in maybeErr && 'data' in maybeErr && typeof maybeErr.code === 'number' && typeof maybeErr.data === 'object' && maybeErr.data !== null && 'reason' in maybeErr.data;
};
function wrapError(fallbackError) {
    return (err)=>{
        if (isWrappedError(err)) {
            throw err;
        }
        if (isWrappedError(fallbackError)) {
            throw fallbackError;
        }
        throw eth_rpc_errors__WEBPACK_IMPORTED_MODULE_0__.ethErrors.rpc.internal({
            data: {
                reason: _core_types__WEBPACK_IMPORTED_MODULE_1__.CommonError.Unknown,
                originalError: fallbackError ?? err
            }
        });
    };
}
const isUserRejectionError = (err)=>{
    if (!err) {
        return false;
    }
    if (typeof err === 'object') {
        return err.message?.startsWith('User rejected') || err.code === 4001;
    }
    return false;
};


}),
"../../packages/common/src/utils/errors/index.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isUserRejectionError: () => (/* reexport safe */ _errorHelpers__WEBPACK_IMPORTED_MODULE_0__.isUserRejectionError),
  isWrappedError: () => (/* reexport safe */ _errorHelpers__WEBPACK_IMPORTED_MODULE_0__.isWrappedError),
  wrapError: () => (/* reexport safe */ _errorHelpers__WEBPACK_IMPORTED_MODULE_0__.wrapError)
});
/* ESM import */var _errorHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/common/src/utils/errors/errorHelpers.ts");



}),
"../../packages/common/src/utils/exponentialBackoff.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getExponentialBackoffDelay: () => (getExponentialBackoffDelay)
});
/**
 * Returns the delay (in milliseconds) before another attempt should start.
 * Runs on power of 2.
 */ const getExponentialBackoffDelay = ({ attempt, startsAfter = 3, maxDelay = 30000 })=>{
    return Math.min(maxDelay, 2 ** Math.max(1, attempt - startsAfter + 1) * 1000);
};


}),
"../../packages/common/src/utils/extensionUtils.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  openExtensionNewWindow: () => (openExtensionNewWindow),
  openNewTab: () => (openNewTab),
  openPopup: () => (openPopup),
  openWindow: () => (openWindow),
  reload: () => (reload)
});
/* ESM import */var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/webextension-polyfill/dist/browser-polyfill.js");
/* ESM import */var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/Subject.js");
/* ESM import */var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/filter.js");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/types/src/index.ts");




const NOTIFICATION_WIDTH = 375;
const NOTIFICATION_HEIGHT = 668;
const WINDOWS_SCROLLBAR_WIDTH = 26;
const contextToOpenIn = _core_types__WEBPACK_IMPORTED_MODULE_1__.ContextContainer.CONFIRM;
/**
 * Fired when a window is removed (closed).
 */ const windowRemovedSignal = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Subject();
/**
 * Fired when the currently focused window changes. Returns chrome.windows.WINDOW_ID_NONE if
 * all Chrome windows have lost focus. Note: On some Linux window managers, WINDOW_ID_NONE is
 * always sent immediately preceding a switch from one Chrome window to another.
 */ const windowFocusChangedSignal = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Subject();
/**
 * Pipe the two events blow into the matching signal. This way we dont create a bunch of listeners
 */ webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().windows.onRemoved.addListener((windowId)=>{
    windowRemovedSignal.next(windowId);
});
webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().windows.onFocusChanged.addListener((windowId)=>{
    windowFocusChangedSignal.next(windowId);
});
/**
 * Since we cant get direct events from the window we have to rely on a global events that a window has been
 * closed. Each window or tab created then returns a config with a listener on the global events. The listener
 * filters by the windowId tied to the event. Once that is reached then the consumer is notified and can act accordingly
 *
 * @param info the window configs used to create the window
 * @returns
 */ function createWindowInfoAndEvents(info) {
    return {
        ...info,
        removed: windowRemovedSignal.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.filter)((windowId)=>windowId === info.id)),
        focusChanged: windowRemovedSignal.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.filter)((windowId)=>windowId === info.id))
    };
}
const checkForError = ()=>{
    const { lastError } = (webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().runtime);
    if (!lastError) {
        return undefined;
    }
    // if it quacks like an Error, its an Error
    if (lastError.message) {
        return lastError;
    }
    // repair incomplete error object (eg chromium v77)
    return new Error('Something went wrong.');
};
const openNewTab = async (options)=>{
    try {
        const tab = await webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().tabs.create(options);
        const error = checkForError();
        if (error) {
            throw new Error(error.message);
        }
        return tab;
    } catch (error) {
        return error;
    }
};
const openWindow = async (options)=>{
    try {
        const newWindow = await webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().windows.create(options);
        return createWindowInfoAndEvents(newWindow);
    } catch (error) {
        console.error(error);
        throw new Error('failed to open new window');
    }
};
const openPopup = async ({ url, setSelfAsOpener = false, top = 0, right = 0 })=>{
    const platform = await webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().runtime.getPlatformInfo();
    const isPlatformWindows = platform?.os === 'win';
    let left = 0;
    try {
        const lastFocused = await webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().windows.getLastFocused();
        // Position window in top right corner of lastFocused window.
        top = lastFocused.top ? lastFocused.top + top : 0;
        left = typeof lastFocused.left === 'number' && typeof lastFocused.width === 'number' ? lastFocused.left + (lastFocused.width - NOTIFICATION_WIDTH) - right : 0;
    } catch (_) {
    // do nothing, don't know where the last window is so let's just place it to 0,0
    }
    return openWindow({
        url,
        focused: true,
        setSelfAsOpener,
        type: 'popup',
        height: !isPlatformWindows ? NOTIFICATION_HEIGHT : NOTIFICATION_HEIGHT + WINDOWS_SCROLLBAR_WIDTH,
        width: !isPlatformWindows ? NOTIFICATION_WIDTH : NOTIFICATION_WIDTH + WINDOWS_SCROLLBAR_WIDTH,
        left,
        top
    });
};
const openExtensionNewWindow = async (route, queryString)=>{
    let extensionURL = webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().runtime.getURL(contextToOpenIn);
    if (queryString) {
        extensionURL += `?${queryString}`;
    }
    if (route) {
        extensionURL += `#/${route}`;
    }
    return openPopup({
        url: extensionURL
    });
};
const reload = ()=>{
    webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().runtime.reload();
};


}),
"../../packages/common/src/utils/fetchAndVerify.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  fetchAndVerify: () => (fetchAndVerify)
});
async function fetchAndVerify(fetchOptions, schema) {
    const response = await fetch(...fetchOptions);
    if (!response.ok) {
        throw new Error(`Request failed with status ${response.status}`);
    }
    const responseJson = await response.json();
    return schema.parse(responseJson);
}


}),
"../../packages/common/src/utils/filterFalsyValues.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  filterFalseyValues: () => (filterFalseyValues)
});
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/filter.js");

function filterFalseyValues() {
    return (observer)=>observer.pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_0__.filter)((value)=>!!value));
}


}),
"../../packages/common/src/utils/findTokenForAsset.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  findTokenForAsset: () => (findTokenForAsset)
});
/* ESM import */var _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/@avalabs/core-bridge-sdk/esm/types/config.js");

function findTokenForAsset(symbol, nativeChain, tokens) {
    // When the source is Avalanche use the wrapped version of the symbol e.g. BTC.b
    const wrappedSymbol = getWrappedSymbol(symbol, nativeChain);
    return tokens.find((t)=>t.symbol === symbol || t.symbol === wrappedSymbol);
}
function getWrappedSymbol(symbol, chain) {
    if (chain === _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_0__.Blockchain.ETHEREUM) {
        return `${symbol}.e`;
    } else if (chain === _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_0__.Blockchain.BITCOIN) {
        return `${symbol}.b`;
    }
    return symbol;
}


}),
"../../packages/common/src/utils/fireblocks/getFireblocksBtcAccessErrorCode.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getFireblocksBtcAccessErrorCode: () => (getFireblocksBtcAccessErrorCode)
});
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/types/src/index.ts");

function getFireblocksBtcAccessErrorCode(message) {
    const [, code] = message.split(_core_types__WEBPACK_IMPORTED_MODULE_0__.BTC_ACCESS_ERROR_PREFIX);
    if (typeof code === 'undefined' || code === '') {
        return null;
    }
    return parseInt(code);
}


}),
"../../packages/common/src/utils/fireblocks/isFireblocksApiSupported.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isFireblocksApiSupported: () => (isFireblocksApiSupported)
});
// If we have the BTC address for a Fireblocks account, that means that we were
// provided the correct API credentials (otherwise we wouldn't be able to fetch
// the address).
function isFireblocksApiSupported(account) {
    return Boolean(account?.addressBTC);
}


}),
"../../packages/common/src/utils/getAccountKey.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getAccountKey: () => (getAccountKey)
});
function getAccountKey({ address, isTestnet }) {
    const accountSuffix = !isTestnet ? '' : '-test';
    return `${address}${accountSuffix}`;
}


}),
"../../packages/common/src/utils/getAddressForChain.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getAddressForChain: () => (getAddressForChain)
});
/* ESM import */var _address__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/common/src/utils/address.ts");

function getAddressForChain(network, account) {
    if (!network || !account) {
        return '';
    }
    return (0,_address__WEBPACK_IMPORTED_MODULE_0__.mapAddressesToVMs)(account)[network.vmName] ?? '';
}


}),
"../../packages/common/src/utils/getCoreWebUrl.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getCoreWebUrl: () => (getCoreWebUrl)
});
const getCoreWebUrl = (address, networkId)=>{
    const baseCoreWebUrl = "https://core.app";
    if (!address) {
        return baseCoreWebUrl;
    }
    if (address && networkId) {
        return `${baseCoreWebUrl}/account/${address}?network=${networkId}`;
    }
    return `${baseCoreWebUrl}/account/${address}`;
};


}),
"../../packages/common/src/utils/getDefaultChainIds.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getDefaultChainIds: () => (getDefaultChainIds),
  getXPChainIds: () => (getXPChainIds)
});
/* ESM import */var _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/@avalabs/core-chains-sdk/esm/models.js");

function getXPChainIds(isMainnet) {
    const xChainId = isMainnet ? _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.AVALANCHE_X : _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.AVALANCHE_TEST_X;
    const pChainId = isMainnet ? _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.AVALANCHE_P : _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.AVALANCHE_TEST_P;
    return [
        pChainId,
        xChainId
    ];
}
function getDefaultChainIds(isMainnet) {
    return [
        isMainnet ? _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.AVALANCHE_MAINNET_ID : _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.AVALANCHE_TESTNET_ID,
        ...getXPChainIds(isMainnet)
    ];
}


}),
"../../packages/common/src/utils/getEnabledBridgeTypes.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getEnabledBridgeTypes: () => (getEnabledBridgeTypes)
});
/* ESM import */var _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/@avalabs/bridge-unified/dist/index.js");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/types/src/index.ts");


const getEnabledBridgeTypes = (featureFlags)=>{
    const enabled = [];
    if (featureFlags[_core_types__WEBPACK_IMPORTED_MODULE_1__.FeatureGates.UNIFIED_BRIDGE_CCTP]) {
        enabled.push(_avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_0__.BridgeType.CCTP);
    }
    if (featureFlags[_core_types__WEBPACK_IMPORTED_MODULE_1__.FeatureGates.UNIFIED_BRIDGE_ICTT]) {
        enabled.push(_avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_0__.BridgeType.ICTT_ERC20_ERC20);
    }
    if (featureFlags[_core_types__WEBPACK_IMPORTED_MODULE_1__.FeatureGates.UNIFIED_BRIDGE_AB_EVM]) {
        enabled.push(_avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_0__.BridgeType.AVALANCHE_EVM);
    }
    if (featureFlags[_core_types__WEBPACK_IMPORTED_MODULE_1__.FeatureGates.UNIFIED_BRIDGE_AB_BTC_TO_AVA]) {
        enabled.push(_avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_0__.BridgeType.AVALANCHE_BTC_AVA);
    }
    if (featureFlags[_core_types__WEBPACK_IMPORTED_MODULE_1__.FeatureGates.UNIFIED_BRIDGE_AB_AVA_TO_BTC]) {
        enabled.push(_avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_0__.BridgeType.AVALANCHE_AVA_BTC);
    }
    return enabled;
};


}),
"../../packages/common/src/utils/getExplorerAddress.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getAvalancheAddressLink: () => (getAvalancheAddressLink),
  getExplorerAddress: () => (getExplorerAddress),
  getExplorerAddressByNetwork: () => (getExplorerAddressByNetwork)
});
/* ESM import */var _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/@avalabs/core-bridge-sdk/esm/types/config.js");
/* ESM import */var _bridge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/common/src/utils/bridge/index.ts");


function getAvalancheExplorerBaseUrl(isMainnet = true) {
    return isMainnet ? 'https://subnets.avax.network/c-chain' : 'https://subnets-test.avax.network/c-chain';
}
function getAvalancheTxLink(hash, isMainnet = true) {
    const root = getAvalancheExplorerBaseUrl(isMainnet);
    return `${root}/tx/${hash}`;
}
function getEtherscanLink(txHash, isMainnet) {
    const root = isMainnet ? 'https://etherscan.io' : 'https://sepolia.etherscan.io';
    return `${root}/tx/${txHash}`;
}
function getBTCBlockchainLink(txHash, isMainnet) {
    const env = isMainnet ? 'btc' : 'btc-testnet';
    return `https://www.blockchain.com/${env}/tx/${txHash}`;
}
function getExplorerAddress(chain, txHash, isMainnet, getNetwork) {
    const normalizedChain = typeof chain === 'object' ? (0,_bridge__WEBPACK_IMPORTED_MODULE_0__.networkToBlockchain)(chain) : chain;
    switch(normalizedChain){
        case _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_1__.Blockchain.AVALANCHE:
            return getAvalancheTxLink(txHash, isMainnet);
        case _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_1__.Blockchain.BITCOIN:
            return getBTCBlockchainLink(txHash, isMainnet);
        case _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_1__.Blockchain.ETHEREUM:
            return getEtherscanLink(txHash, isMainnet);
    }
    if (typeof chain === 'string') {
        return '#';
    }
    const network = getNetwork(chain.chainId);
    return network ? getExplorerAddressByNetwork(network, txHash, 'tx') : '#';
}
function getAvalancheAddressLink(hash, isMainnet = true) {
    const root = getAvalancheExplorerBaseUrl(isMainnet);
    return `${root}/address/${hash}`;
}
function getExplorerAddressByNetwork(network, hash, hashType = 'tx') {
    try {
        // Try to respect any query params set on {network.explorerUrl}
        const baseUrl = new URL(network.explorerUrl);
        baseUrl.pathname += `/${hashType}/${hash}`;
        return baseUrl.toString();
    } catch  {
        return `${network.explorerUrl}/${hashType}/${hash}`;
    }
}


}),
"../../packages/common/src/utils/getHexStringToBytes.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getHexStringToBytes: () => (getHexStringToBytes)
});
function getHexStringToBytes(hex) {
    if (!hex) return null;
    // the first 2 chars can be ignore since it indicates the hexadecimal representation ( -2 )
    // the reason byte size is calculated this way => F in hex is the biggest number which can be represented with 4 bits (1111)
    // therefore 2 chars at a time can be represented in 1 byte which is 8 bits
    // so the byte value of a hex is the half of the character count
    return (hex.length - 2) / 2;
}


}),
"../../packages/common/src/utils/getNftMetadata.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getNftMetadata: () => (getNftMetadata)
});
/* ESM import */var _ipsfResolverWithFallback__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/common/src/utils/ipsfResolverWithFallback.ts");
/* provided dependency */ var Buffer = __webpack_require__("../../node_modules/buffer/index.js")["Buffer"];

async function fetchWithTimeout(uri, timeout = 5000) {
    const controller = new AbortController();
    setTimeout(()=>controller.abort(), timeout);
    return fetch(uri, {
        signal: controller.signal
    });
}
async function getNftMetadata(tokenUri) {
    let data = {};
    if (!tokenUri) {
        return {};
    } else if (tokenUri.startsWith('data:application/json;base64,')) {
        const value = tokenUri.substring(29);
        try {
            const json = Buffer.from(value, 'base64').toString();
            data = JSON.parse(json);
        } catch  {
            data = {};
        }
    } else {
        data = await fetchWithTimeout((0,_ipsfResolverWithFallback__WEBPACK_IMPORTED_MODULE_0__.ipfsResolverWithFallback)(tokenUri)).then((r)=>r.json()).catch(()=>({}));
    }
    return data;
}


}),
"../../packages/common/src/utils/getSyncDomain.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getSyncDomain: () => (getSyncDomain),
  isSyncDomain: () => (isSyncDomain)
});
/* ESM import */var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/webextension-polyfill/dist/browser-polyfill.js");
/* ESM import */var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/common/src/constants.ts");


const isSyncDomain = (domain, exposedDomainList = [])=>{
    return [
        webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__.runtime.id,
        ..._constants__WEBPACK_IMPORTED_MODULE_1__.SYNCED_DOMAINS,
        ...exposedDomainList
    ].some((syncDomain)=>{
        // Match exact domains, but also allow subdomains (i.e. develop.core-web.pages.dev)
        return syncDomain === domain || domain.endsWith(`.${syncDomain}`);
    });
};
/**
 * Returns the extension's ID for synced domains (i.e. the Core Suite apps)
 */ const getSyncDomain = (domain)=>{
    return isSyncDomain(domain) ? webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__.runtime.id : domain;
};


}),
"../../packages/common/src/utils/handleTxOutcome.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  handleTxOutcome: () => (handleTxOutcome)
});
/* ESM import */var _errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/common/src/utils/errors/index.ts");

/**
 * Use this util function to distinguish between the user rejecting the
 */ async function handleTxOutcome(txRequestPromise) {
    try {
        const result = await txRequestPromise;
        return {
            isApproved: true,
            hasError: false,
            result
        };
    } catch (err) {
        return {
            isApproved: !(0,_errors__WEBPACK_IMPORTED_MODULE_0__.isUserRejectionError)(err),
            hasError: true,
            error: err
        };
    }
}


}),
"../../packages/common/src/utils/hasAccountBalances.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  hasAccountBalances: () => (hasAccountBalances)
});
/* ESM import */var _account__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/common/src/utils/account.ts");

function hasAccountBalances(balances, account, networkIds) {
    const accountAddresses = (0,_account__WEBPACK_IMPORTED_MODULE_0__.getAllAddressesForAccount)(account);
    return Object.entries(balances).filter(([networkId])=>networkIds.includes(Number(networkId))).some(([, item])=>{
        if (!item) {
            return false;
        }
        const balanceAddresses = Object.keys(item);
        return balanceAddresses.some((address)=>{
            return accountAddresses.includes(address);
        });
    });
}


}),
"../../packages/common/src/utils/hasUnconfirmedBalance.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  hasUnconfirmedBalance: () => (hasUnconfirmedBalance)
});
const hasUnconfirmedBalance = (token)=>{
    return 'unconfirmedBalance' in token && Boolean(token.unconfirmedBalance);
};


}),
"../../packages/common/src/utils/history/getAvaxAssetId.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getAvaxAssetId: () => (getAvaxAssetId)
});
/* ESM import */var _avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/providers/constants.js");

const getAvaxAssetId = (isTestnet)=>isTestnet ? _avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_0__.FujiContext.avaxAssetID : _avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_0__.MainnetContext.avaxAssetID;


}),
"../../packages/common/src/utils/history/index.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getAvaxAssetId: () => (/* reexport safe */ _getAvaxAssetId__WEBPACK_IMPORTED_MODULE_1__.getAvaxAssetId),
  isNonXPHistoryItem: () => (/* reexport safe */ _isTxHistoryItem__WEBPACK_IMPORTED_MODULE_0__.isNonXPHistoryItem),
  isPchainTxHistoryItem: () => (/* reexport safe */ _isTxHistoryItem__WEBPACK_IMPORTED_MODULE_0__.isPchainTxHistoryItem)
});
/* ESM import */var _isTxHistoryItem__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/common/src/utils/history/isTxHistoryItem.ts");
/* ESM import */var _getAvaxAssetId__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/common/src/utils/history/getAvaxAssetId.ts");




}),
"../../packages/common/src/utils/history/isTxHistoryItem.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isNonXPHistoryItem: () => (isNonXPHistoryItem),
  isPchainTxHistoryItem: () => (isPchainTxHistoryItem)
});
function isNonXPHistoryItem(tx) {
    return tx.vmType !== 'AVM' && tx.vmType !== 'PVM';
}
function isPchainTxHistoryItem(tx) {
    return tx.vmType === 'PVM';
}


}),
"../../packages/common/src/utils/incrementalPromiseResolve.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  incrementalPromiseResolve: () => (incrementalPromiseResolve)
});
function incrementAndCall(prom, interval = 0) {
    return new Promise((resolve, reject)=>{
        setTimeout(()=>{
            prom().then((res)=>resolve(res)).catch((err)=>reject(err));
        }, 500 * interval);
    });
}
/**
 * If we have api requests or fetches that need to be tried a few times in order to get results
 * we expect than we can do an incremental step off before telling the user it failed
 *
 * @param prom
 * @param errorParser
 * @param increment
 * @param maxTries
 * @returns promise result
 */ async function incrementalPromiseResolve(prom, errorParser, increment = 0, maxTries = 10) {
    try {
        const res = await incrementAndCall(prom, increment);
        if (maxTries === increment + 1) return res;
        if (errorParser(res)) {
            return incrementalPromiseResolve(prom, errorParser, increment + 1, maxTries);
        }
        return res;
    } catch (err) {
        if (maxTries === increment + 1) throw typeof err === 'string' ? new Error(err) : err;
        if (errorParser(err)) {
            return incrementalPromiseResolve(prom, errorParser, increment + 1, maxTries);
        }
        throw typeof err === 'string' ? new Error(err) : err;
    }
}


}),
"../../packages/common/src/utils/index.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  AvaxCaipId: () => (/* reexport safe */ _caipConversion__WEBPACK_IMPORTED_MODULE_50__.AvaxCaipId),
  AvaxLegacyCaipId: () => (/* reexport safe */ _caipConversion__WEBPACK_IMPORTED_MODULE_50__.AvaxLegacyCaipId),
  BitcoinCaipId: () => (/* reexport safe */ _caipConversion__WEBPACK_IMPORTED_MODULE_50__.BitcoinCaipId),
  CaipNamespace: () => (/* reexport safe */ _caipConversion__WEBPACK_IMPORTED_MODULE_50__.CaipNamespace),
  ETHEREUM_ADDRESS: () => (/* reexport safe */ _bridgeTransactionUtils__WEBPACK_IMPORTED_MODULE_33__.ETHEREUM_ADDRESS),
  IPFS_URL: () => (/* reexport safe */ _ipsfResolverWithFallback__WEBPACK_IMPORTED_MODULE_68__.IPFS_URL),
  KEYSTORE_VERSION: () => (/* reexport safe */ _keystore__WEBPACK_IMPORTED_MODULE_31__.KEYSTORE_VERSION),
  KeystoreFixtures: () => (/* reexport safe */ _keystore__WEBPACK_IMPORTED_MODULE_31__.KeystoreFixtures),
  SeedlessRegistartionResult: () => (/* reexport safe */ _approveSeedlessRegistration__WEBPACK_IMPORTED_MODULE_100__.SeedlessRegistartionResult),
  SolanaCaipId: () => (/* reexport safe */ _caipConversion__WEBPACK_IMPORTED_MODULE_50__.SolanaCaipId),
  USDC_ADDRESSES: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_30__.USDC_ADDRESSES),
  USDC_ADDRESS_C_CHAIN: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_30__.USDC_ADDRESS_C_CHAIN),
  USDC_ADDRESS_ETHEREUM: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_30__.USDC_ADDRESS_ETHEREUM),
  USDC_ADDRESS_SOLANA: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_30__.USDC_ADDRESS_SOLANA),
  addGlacierAPIKeyIfNeeded: () => (/* reexport safe */ _network_addGlacierAPIKeyIfNeeded__WEBPACK_IMPORTED_MODULE_5__.addGlacierAPIKeyIfNeeded),
  approveSeedlessRegistration: () => (/* reexport safe */ _approveSeedlessRegistration__WEBPACK_IMPORTED_MODULE_100__.approveSeedlessRegistration),
  areArraysOverlapping: () => (/* reexport safe */ _array__WEBPACK_IMPORTED_MODULE_70__.areArraysOverlapping),
  assert: () => (/* reexport safe */ _assertions__WEBPACK_IMPORTED_MODULE_54__.assert),
  assertNonEmptyString: () => (/* reexport safe */ _assertions__WEBPACK_IMPORTED_MODULE_54__.assertNonEmptyString),
  assertPresent: () => (/* reexport safe */ _assertions__WEBPACK_IMPORTED_MODULE_54__.assertPresent),
  assertPropDefined: () => (/* reexport safe */ _assertions__WEBPACK_IMPORTED_MODULE_54__.assertPropDefined),
  assertTrue: () => (/* reexport safe */ _assertions__WEBPACK_IMPORTED_MODULE_54__.assertTrue),
  authenticateWithApple: () => (/* reexport safe */ _seedless_authenticateWithApple__WEBPACK_IMPORTED_MODULE_35__.authenticateWithApple),
  authenticateWithGoogle: () => (/* reexport safe */ _seedless_authenticateWithGoogle__WEBPACK_IMPORTED_MODULE_36__.authenticateWithGoogle),
  base64ToBase64Url: () => (/* reexport safe */ _encoding__WEBPACK_IMPORTED_MODULE_88__.base64ToBase64Url),
  base64UrlToBuffer: () => (/* reexport safe */ _encoding__WEBPACK_IMPORTED_MODULE_88__.base64UrlToBuffer),
  bigintToBig: () => (/* reexport safe */ _bigintToBig__WEBPACK_IMPORTED_MODULE_84__.bigintToBig),
  blockchainToNetwork: () => (/* reexport safe */ _bridge__WEBPACK_IMPORTED_MODULE_3__.blockchainToNetwork),
  bufferToBase64Url: () => (/* reexport safe */ _encoding__WEBPACK_IMPORTED_MODULE_88__.bufferToBase64Url),
  buildBtcTx: () => (/* reexport safe */ _send_btcSendUtils__WEBPACK_IMPORTED_MODULE_17__.buildBtcTx),
  buildGlacierAuthHeaders: () => (/* reexport safe */ _network_buildGlacierAuthHeaders__WEBPACK_IMPORTED_MODULE_6__.buildGlacierAuthHeaders),
  caipToChainId: () => (/* reexport safe */ _caipConversion__WEBPACK_IMPORTED_MODULE_50__.caipToChainId),
  calculateGasAndFees: () => (/* reexport safe */ _calculateGasAndFees__WEBPACK_IMPORTED_MODULE_57__.calculateGasAndFees),
  calculatePasswordHash: () => (/* reexport safe */ _keystore__WEBPACK_IMPORTED_MODULE_31__.calculatePasswordHash),
  calculateTotalBalance: () => (/* reexport safe */ _calculateTotalBalance__WEBPACK_IMPORTED_MODULE_18__.calculateTotalBalance),
  canSkipApproval: () => (/* reexport safe */ _canSkipApproval__WEBPACK_IMPORTED_MODULE_48__.canSkipApproval),
  chainIdToCaip: () => (/* reexport safe */ _caipConversion__WEBPACK_IMPORTED_MODULE_50__.chainIdToCaip),
  connectionLog: () => (/* reexport safe */ _logging__WEBPACK_IMPORTED_MODULE_24__.connectionLog),
  convertRequest: () => (/* reexport safe */ _seedless_fido__WEBPACK_IMPORTED_MODULE_39__.convertRequest),
  convertResult: () => (/* reexport safe */ _seedless_fido__WEBPACK_IMPORTED_MODULE_39__.convertResult),
  createNewMnemonic: () => (/* reexport safe */ _createMnemonicPhrase__WEBPACK_IMPORTED_MODULE_15__.createNewMnemonic),
  decorateWithCaipId: () => (/* reexport safe */ _caipConversion__WEBPACK_IMPORTED_MODULE_50__.decorateWithCaipId),
  decrypt: () => (/* reexport safe */ _keystore__WEBPACK_IMPORTED_MODULE_31__.decrypt),
  disconnectLog: () => (/* reexport safe */ _logging__WEBPACK_IMPORTED_MODULE_24__.disconnectLog),
  engine: () => (/* reexport safe */ _jsonRpcEngine__WEBPACK_IMPORTED_MODULE_75__.engine),
  eventLog: () => (/* reexport safe */ _logging__WEBPACK_IMPORTED_MODULE_24__.eventLog),
  extractKeysFromDecryptedFile: () => (/* reexport safe */ _keystore__WEBPACK_IMPORTED_MODULE_31__.extractKeysFromDecryptedFile),
  fetchAndVerify: () => (/* reexport safe */ _fetchAndVerify__WEBPACK_IMPORTED_MODULE_98__.fetchAndVerify),
  filterBridgeStateToNetwork: () => (/* reexport safe */ _bridge__WEBPACK_IMPORTED_MODULE_3__.filterBridgeStateToNetwork),
  filterFalseyValues: () => (/* reexport safe */ _filterFalsyValues__WEBPACK_IMPORTED_MODULE_94__.filterFalseyValues),
  findMatchingBridgeAsset: () => (/* reexport safe */ _bridge__WEBPACK_IMPORTED_MODULE_3__.findMatchingBridgeAsset),
  findTokenForAsset: () => (/* reexport safe */ _findTokenForAsset__WEBPACK_IMPORTED_MODULE_51__.findTokenForAsset),
  formatAndLog: () => (/* reexport safe */ _logging__WEBPACK_IMPORTED_MODULE_24__.formatAndLog),
  formatTime: () => (/* reexport safe */ _logging__WEBPACK_IMPORTED_MODULE_24__.formatTime),
  getAccountKey: () => (/* reexport safe */ _getAccountKey__WEBPACK_IMPORTED_MODULE_90__.getAccountKey),
  getAddressByVMType: () => (/* reexport safe */ _address__WEBPACK_IMPORTED_MODULE_0__.getAddressByVMType),
  getAddressForChain: () => (/* reexport safe */ _getAddressForChain__WEBPACK_IMPORTED_MODULE_32__.getAddressForChain),
  getAddressesInRange: () => (/* reexport safe */ _address__WEBPACK_IMPORTED_MODULE_0__.getAddressesInRange),
  getAllAddressesForAccount: () => (/* reexport safe */ _account__WEBPACK_IMPORTED_MODULE_26__.getAllAddressesForAccount),
  getAllAddressesForAccounts: () => (/* reexport safe */ _account__WEBPACK_IMPORTED_MODULE_26__.getAllAddressesForAccounts),
  getAvalancheAddressLink: () => (/* reexport safe */ _getExplorerAddress__WEBPACK_IMPORTED_MODULE_28__.getAvalancheAddressLink),
  getAvaxAssetId: () => (/* reexport safe */ _history__WEBPACK_IMPORTED_MODULE_25__.getAvaxAssetId),
  getBridgedAssetSymbol: () => (/* reexport safe */ _bridge__WEBPACK_IMPORTED_MODULE_3__.getBridgedAssetSymbol),
  getBtcInputUtxos: () => (/* reexport safe */ _send_btcSendUtils__WEBPACK_IMPORTED_MODULE_17__.getBtcInputUtxos),
  getCoreWebUrl: () => (/* reexport safe */ _getCoreWebUrl__WEBPACK_IMPORTED_MODULE_71__.getCoreWebUrl),
  getDefaultChainIds: () => (/* reexport safe */ _getDefaultChainIds__WEBPACK_IMPORTED_MODULE_74__.getDefaultChainIds),
  getEnabledBridgeTypes: () => (/* reexport safe */ _getEnabledBridgeTypes__WEBPACK_IMPORTED_MODULE_27__.getEnabledBridgeTypes),
  getEnv: () => (/* reexport safe */ _seedless_getCubeSigner__WEBPACK_IMPORTED_MODULE_34__.getEnv),
  getExplorerAddress: () => (/* reexport safe */ _getExplorerAddress__WEBPACK_IMPORTED_MODULE_28__.getExplorerAddress),
  getExplorerAddressByNetwork: () => (/* reexport safe */ _getExplorerAddress__WEBPACK_IMPORTED_MODULE_28__.getExplorerAddressByNetwork),
  getExponentialBackoffDelay: () => (/* reexport safe */ _exponentialBackoff__WEBPACK_IMPORTED_MODULE_77__.getExponentialBackoffDelay),
  getFireblocksBtcAccessErrorCode: () => (/* reexport safe */ _fireblocks_getFireblocksBtcAccessErrorCode__WEBPACK_IMPORTED_MODULE_46__.getFireblocksBtcAccessErrorCode),
  getHash: () => (/* reexport safe */ _keystore__WEBPACK_IMPORTED_MODULE_31__.getHash),
  getHexStringToBytes: () => (/* reexport safe */ _getHexStringToBytes__WEBPACK_IMPORTED_MODULE_55__.getHexStringToBytes),
  getNameSpaceFromScope: () => (/* reexport safe */ _caipConversion__WEBPACK_IMPORTED_MODULE_50__.getNameSpaceFromScope),
  getNativeTokenSymbol: () => (/* reexport safe */ _bridge__WEBPACK_IMPORTED_MODULE_3__.getNativeTokenSymbol),
  getNetworkCaipId: () => (/* reexport safe */ _caipConversion__WEBPACK_IMPORTED_MODULE_50__.getNetworkCaipId),
  getNftMetadata: () => (/* reexport safe */ _getNftMetadata__WEBPACK_IMPORTED_MODULE_29__.getNftMetadata),
  getOidcClient: () => (/* reexport safe */ _seedless_getCubeSigner__WEBPACK_IMPORTED_MODULE_34__.getOidcClient),
  getOidcTokenProvider: () => (/* reexport safe */ _seedless_getOidcTokenProvider__WEBPACK_IMPORTED_MODULE_37__.getOidcTokenProvider),
  getOrgId: () => (/* reexport safe */ _seedless_getCubeSigner__WEBPACK_IMPORTED_MODULE_34__.getOrgId),
  getPriceChangeValues: () => (/* reexport safe */ _balance__WEBPACK_IMPORTED_MODULE_95__.getPriceChangeValues),
  getProviderForNetwork: () => (/* reexport safe */ _network_getProviderForNetwork__WEBPACK_IMPORTED_MODULE_4__.getProviderForNetwork),
  getSignerSession: () => (/* reexport safe */ _seedless_getCubeSigner__WEBPACK_IMPORTED_MODULE_34__.getSignerSession),
  getSignerToken: () => (/* reexport safe */ _seedless_getSignerToken__WEBPACK_IMPORTED_MODULE_38__.getSignerToken),
  getSmallImageForNFT: () => (/* reexport safe */ _nfts_getSmallImageForNFT__WEBPACK_IMPORTED_MODULE_42__.getSmallImageForNFT),
  getSyncDomain: () => (/* reexport safe */ _getSyncDomain__WEBPACK_IMPORTED_MODULE_14__.getSyncDomain),
  getTokenValue: () => (/* reexport safe */ _balance__WEBPACK_IMPORTED_MODULE_95__.getTokenValue),
  getUpdatedSigningData: () => (/* reexport safe */ _actions_getUpdatedActionData__WEBPACK_IMPORTED_MODULE_1__.getUpdatedSigningData),
  getXPChainIds: () => (/* reexport safe */ _getDefaultChainIds__WEBPACK_IMPORTED_MODULE_74__.getXPChainIds),
  groupTokensByType: () => (/* reexport safe */ _balance__WEBPACK_IMPORTED_MODULE_95__.groupTokensByType),
  handleTxOutcome: () => (/* reexport safe */ _handleTxOutcome__WEBPACK_IMPORTED_MODULE_79__.handleTxOutcome),
  hasAccountBalances: () => (/* reexport safe */ _hasAccountBalances__WEBPACK_IMPORTED_MODULE_21__.hasAccountBalances),
  hasDefined: () => (/* reexport safe */ _object__WEBPACK_IMPORTED_MODULE_20__.hasDefined),
  hasUnconfirmedBalance: () => (/* reexport safe */ _hasUnconfirmedBalance__WEBPACK_IMPORTED_MODULE_67__.hasUnconfirmedBalance),
  incrementalPromiseResolve: () => (/* reexport safe */ _incrementalPromiseResolve__WEBPACK_IMPORTED_MODULE_52__.incrementalPromiseResolve),
  ipfsResolverWithFallback: () => (/* reexport safe */ _ipsfResolverWithFallback__WEBPACK_IMPORTED_MODULE_68__.ipfsResolverWithFallback),
  is1155Response: () => (/* reexport safe */ _nfts_nftTypesUtils__WEBPACK_IMPORTED_MODULE_45__.is1155Response),
  isActiveTab: () => (/* reexport safe */ _isActiveTab__WEBPACK_IMPORTED_MODULE_73__.isActiveTab),
  isAddressBlockedError: () => (/* reexport safe */ _bridge__WEBPACK_IMPORTED_MODULE_3__.isAddressBlockedError),
  isAvalancheChainId: () => (/* reexport safe */ _network_isAvalancheNetwork__WEBPACK_IMPORTED_MODULE_7__.isAvalancheChainId),
  isAvalancheNetwork: () => (/* reexport safe */ _network_isAvalancheNetwork__WEBPACK_IMPORTED_MODULE_7__.isAvalancheNetwork),
  isBitcoin: () => (/* reexport safe */ _isBitcoin__WEBPACK_IMPORTED_MODULE_83__.isBitcoin),
  isBitcoinCaipId: () => (/* reexport safe */ _caipConversion__WEBPACK_IMPORTED_MODULE_50__.isBitcoinCaipId),
  isBitcoinChainId: () => (/* reexport safe */ _network_isBitcoinNetwork__WEBPACK_IMPORTED_MODULE_11__.isBitcoinChainId),
  isBitcoinNetwork: () => (/* reexport safe */ _network_isBitcoinNetwork__WEBPACK_IMPORTED_MODULE_11__.isBitcoinNetwork),
  isBridgeConfigUpdateEventListener: () => (/* reexport safe */ _bridge__WEBPACK_IMPORTED_MODULE_3__.isBridgeConfigUpdateEventListener),
  isBridgeStateUpdateEventListener: () => (/* reexport safe */ _bridge__WEBPACK_IMPORTED_MODULE_3__.isBridgeStateUpdateEventListener),
  isBridgeTransferEventListener: () => (/* reexport safe */ _bridge__WEBPACK_IMPORTED_MODULE_3__.isBridgeTransferEventListener),
  isBtcAddressInNetwork: () => (/* reexport safe */ _isBtcAddressInNetwork__WEBPACK_IMPORTED_MODULE_80__.isBtcAddressInNetwork),
  isContactValid: () => (/* reexport safe */ _isContactValid__WEBPACK_IMPORTED_MODULE_23__.isContactValid),
  isDevelopment: () => (/* reexport safe */ _environment__WEBPACK_IMPORTED_MODULE_76__.isDevelopment),
  isErc721TokenBalance: () => (/* reexport safe */ _nfts_nftTypesUtils__WEBPACK_IMPORTED_MODULE_45__.isErc721TokenBalance),
  isEthereumChainId: () => (/* reexport safe */ _network_isEthereumNetwork__WEBPACK_IMPORTED_MODULE_10__.isEthereumChainId),
  isEthereumNetwork: () => (/* reexport safe */ _network_isEthereumNetwork__WEBPACK_IMPORTED_MODULE_10__.isEthereumNetwork),
  isExportRequestOutdated: () => (/* reexport safe */ _seedless_fido__WEBPACK_IMPORTED_MODULE_39__.isExportRequestOutdated),
  isFailedMfaError: () => (/* reexport safe */ _seedless_fido__WEBPACK_IMPORTED_MODULE_39__.isFailedMfaError),
  isFailedToFetchError: () => (/* reexport safe */ _isFailedToFetchError__WEBPACK_IMPORTED_MODULE_87__.isFailedToFetchError),
  isFireblocksAccount: () => (/* reexport safe */ _accounts__WEBPACK_IMPORTED_MODULE_2__.isFireblocksAccount),
  isFireblocksApiSupported: () => (/* reexport safe */ _fireblocks_isFireblocksApiSupported__WEBPACK_IMPORTED_MODULE_47__.isFireblocksApiSupported),
  isFulfilled: () => (/* reexport safe */ _typeUtils__WEBPACK_IMPORTED_MODULE_53__.isFulfilled),
  isImportedAccount: () => (/* reexport safe */ _accounts__WEBPACK_IMPORTED_MODULE_2__.isImportedAccount),
  isLedgerVersionCompatible: () => (/* reexport safe */ _isLedgerVersionCompatible__WEBPACK_IMPORTED_MODULE_66__.isLedgerVersionCompatible),
  isLockStateChangedEvent: () => (/* reexport safe */ _isLockStateChangedEvent__WEBPACK_IMPORTED_MODULE_96__.isLockStateChangedEvent),
  isNFT: () => (/* reexport safe */ _nfts_isNFT__WEBPACK_IMPORTED_MODULE_44__.isNFT),
  isNewsletterConfigured: () => (/* reexport safe */ _newsletter__WEBPACK_IMPORTED_MODULE_61__.isNewsletterConfigured),
  isNftTokenType: () => (/* reexport safe */ _nfts_isNFT__WEBPACK_IMPORTED_MODULE_44__.isNftTokenType),
  isNonXPHistoryItem: () => (/* reexport safe */ _history__WEBPACK_IMPORTED_MODULE_25__.isNonXPHistoryItem),
  isNotNullish: () => (/* reexport safe */ _typeUtils__WEBPACK_IMPORTED_MODULE_53__.isNotNullish),
  isPchainNetwork: () => (/* reexport safe */ _network_isAvalanchePchainNetwork__WEBPACK_IMPORTED_MODULE_8__.isPchainNetwork),
  isPchainNetworkId: () => (/* reexport safe */ _network_isAvalanchePchainNetwork__WEBPACK_IMPORTED_MODULE_8__.isPchainNetworkId),
  isPchainTxHistoryItem: () => (/* reexport safe */ _history__WEBPACK_IMPORTED_MODULE_25__.isPchainTxHistoryItem),
  isPendingBridgeTransaction: () => (/* reexport safe */ _bridgeTransactionUtils__WEBPACK_IMPORTED_MODULE_33__.isPendingBridgeTransaction),
  isPhraseCorrect: () => (/* reexport safe */ _seedPhraseValidation__WEBPACK_IMPORTED_MODULE_85__.isPhraseCorrect),
  isPrimaryAccount: () => (/* reexport safe */ _accounts__WEBPACK_IMPORTED_MODULE_2__.isPrimaryAccount),
  isPrimarySubnet: () => (/* reexport safe */ _isPrimarySubnet__WEBPACK_IMPORTED_MODULE_81__.isPrimarySubnet),
  isProductionBuild: () => (/* reexport safe */ _environment__WEBPACK_IMPORTED_MODULE_76__.isProductionBuild),
  isSeedlessMfaChoiceRequest: () => (/* reexport safe */ _seedless_seedlessEventFilters__WEBPACK_IMPORTED_MODULE_40__.isSeedlessMfaChoiceRequest),
  isSeedlessMfaEvent: () => (/* reexport safe */ _seedless_seedlessEventFilters__WEBPACK_IMPORTED_MODULE_40__.isSeedlessMfaEvent),
  isSeedlessMfaMethodsUpdatedEvent: () => (/* reexport safe */ _seedless_seedlessEventFilters__WEBPACK_IMPORTED_MODULE_40__.isSeedlessMfaMethodsUpdatedEvent),
  isSeedlessTokenEvent: () => (/* reexport safe */ _seedless_seedlessEventFilters__WEBPACK_IMPORTED_MODULE_40__.isSeedlessTokenEvent),
  isSessionPermissionsMismatchEvent: () => (/* reexport safe */ _walletConnectEventFilters__WEBPACK_IMPORTED_MODULE_41__.isSessionPermissionsMismatchEvent),
  isSolanaChainId: () => (/* reexport safe */ _network_isSolanaNetwork__WEBPACK_IMPORTED_MODULE_12__.isSolanaChainId),
  isSolanaNetwork: () => (/* reexport safe */ _network_isSolanaNetwork__WEBPACK_IMPORTED_MODULE_12__.isSolanaNetwork),
  isSupportedBrowser: () => (/* reexport safe */ _isSupportedBrowser__WEBPACK_IMPORTED_MODULE_56__.isSupportedBrowser),
  isSwimmer: () => (/* reexport safe */ _isSwimmerNetwork__WEBPACK_IMPORTED_MODULE_82__.isSwimmer),
  isSwimmerByChainId: () => (/* reexport safe */ _isSwimmerNetwork__WEBPACK_IMPORTED_MODULE_82__.isSwimmerByChainId),
  isSyncDomain: () => (/* reexport safe */ _getSyncDomain__WEBPACK_IMPORTED_MODULE_14__.isSyncDomain),
  isTokenExpiredError: () => (/* reexport safe */ _seedless_fido__WEBPACK_IMPORTED_MODULE_39__.isTokenExpiredError),
  isTokenMalicious: () => (/* reexport safe */ _isTokenMalicious__WEBPACK_IMPORTED_MODULE_58__.isTokenMalicious),
  isTokenWithBalanceAVM: () => (/* reexport safe */ _balance__WEBPACK_IMPORTED_MODULE_95__.isTokenWithBalanceAVM),
  isTokenWithBalancePVM: () => (/* reexport safe */ _balance__WEBPACK_IMPORTED_MODULE_95__.isTokenWithBalancePVM),
  isUnifiedBridgeStateUpdate: () => (/* reexport safe */ _bridge__WEBPACK_IMPORTED_MODULE_3__.isUnifiedBridgeStateUpdate),
  isUnifiedBridgeTransfer: () => (/* reexport safe */ _bridge__WEBPACK_IMPORTED_MODULE_3__.isUnifiedBridgeTransfer),
  isUnifiedBridgeTransferStepChanged: () => (/* reexport safe */ _bridge__WEBPACK_IMPORTED_MODULE_3__.isUnifiedBridgeTransferStepChanged),
  isUriGeneratedEvent: () => (/* reexport safe */ _walletConnectEventFilters__WEBPACK_IMPORTED_MODULE_41__.isUriGeneratedEvent),
  isUserRejectionError: () => (/* reexport safe */ _errors__WEBPACK_IMPORTED_MODULE_16__.isUserRejectionError),
  isValidAddress: () => (/* reexport safe */ _isAddressValid__WEBPACK_IMPORTED_MODULE_22__.isValidAddress),
  isValidAvmAddress: () => (/* reexport safe */ _isAddressValid__WEBPACK_IMPORTED_MODULE_22__.isValidAvmAddress),
  isValidBtcAddress: () => (/* reexport safe */ _isAddressValid__WEBPACK_IMPORTED_MODULE_22__.isValidBtcAddress),
  isValidHttpHeader: () => (/* reexport safe */ _network_isValidHttpHeader__WEBPACK_IMPORTED_MODULE_13__.isValidHttpHeader),
  isValidPvmAddress: () => (/* reexport safe */ _isAddressValid__WEBPACK_IMPORTED_MODULE_22__.isValidPvmAddress),
  isValidResponse: () => (/* reexport safe */ _seedless_fido__WEBPACK_IMPORTED_MODULE_39__.isValidResponse),
  isValidSvmAddress: () => (/* reexport safe */ _isAddressValid__WEBPACK_IMPORTED_MODULE_22__.isValidSvmAddress),
  isValidXPAddress: () => (/* reexport safe */ _isAddressValid__WEBPACK_IMPORTED_MODULE_22__.isValidXPAddress),
  isWalletConnectAccount: () => (/* reexport safe */ _accounts__WEBPACK_IMPORTED_MODULE_2__.isWalletConnectAccount),
  isWalletConnectEvent: () => (/* reexport safe */ _walletConnectEventFilters__WEBPACK_IMPORTED_MODULE_41__.isWalletConnectEvent),
  isWalletStateUpdateEvent: () => (/* reexport safe */ _isWalletStateUpdateEvent__WEBPACK_IMPORTED_MODULE_97__.isWalletStateUpdateEvent),
  isWrappedError: () => (/* reexport safe */ _errors__WEBPACK_IMPORTED_MODULE_16__.isWrappedError),
  isXchainNetwork: () => (/* reexport safe */ _network_isAvalancheXchainNetwork__WEBPACK_IMPORTED_MODULE_9__.isXchainNetwork),
  isXchainNetworkId: () => (/* reexport safe */ _network_isAvalancheXchainNetwork__WEBPACK_IMPORTED_MODULE_9__.isXchainNetworkId),
  launchFidoFlow: () => (/* reexport safe */ _seedless_fido__WEBPACK_IMPORTED_MODULE_39__.launchFidoFlow),
  lowerCaseKeys: () => (/* reexport safe */ _lowerCaseKeys__WEBPACK_IMPORTED_MODULE_63__.lowerCaseKeys),
  makeBNLike: () => (/* reexport safe */ _makeBNLike__WEBPACK_IMPORTED_MODULE_64__.makeBNLike),
  mapAddressesToVMs: () => (/* reexport safe */ _address__WEBPACK_IMPORTED_MODULE_0__.mapAddressesToVMs),
  mapMfasToRecoveryMethods: () => (/* reexport safe */ _seedless_fido__WEBPACK_IMPORTED_MODULE_39__.mapMfasToRecoveryMethods),
  mapVMAddresses: () => (/* reexport safe */ _address__WEBPACK_IMPORTED_MODULE_0__.mapVMAddresses),
  measureDuration: () => (/* reexport safe */ _measureDuration__WEBPACK_IMPORTED_MODULE_65__.measureDuration),
  networkToBlockchain: () => (/* reexport safe */ _bridge__WEBPACK_IMPORTED_MODULE_3__.networkToBlockchain),
  noop: () => (/* reexport safe */ _noop__WEBPACK_IMPORTED_MODULE_91__.noop),
  normalizeBalance: () => (/* reexport safe */ _normalizeBalance__WEBPACK_IMPORTED_MODULE_62__.normalizeBalance),
  now: () => (/* reexport safe */ _logging__WEBPACK_IMPORTED_MODULE_24__.now),
  omitUndefined: () => (/* reexport safe */ _object__WEBPACK_IMPORTED_MODULE_20__.omitUndefined),
  onPageActivated: () => (/* reexport safe */ _onPageActivated__WEBPACK_IMPORTED_MODULE_49__.onPageActivated),
  openExtensionNewWindow: () => (/* reexport safe */ _extensionUtils__WEBPACK_IMPORTED_MODULE_69__.openExtensionNewWindow),
  openFullscreenTab: () => (/* reexport safe */ _openFullscreenTab__WEBPACK_IMPORTED_MODULE_99__.openFullscreenTab),
  openNewTab: () => (/* reexport safe */ _extensionUtils__WEBPACK_IMPORTED_MODULE_69__.openNewTab),
  openPopup: () => (/* reexport safe */ _extensionUtils__WEBPACK_IMPORTED_MODULE_69__.openPopup),
  openWindow: () => (/* reexport safe */ _extensionUtils__WEBPACK_IMPORTED_MODULE_69__.openWindow),
  padStart: () => (/* reexport safe */ _logging__WEBPACK_IMPORTED_MODULE_24__.padStart),
  parseAttributes: () => (/* reexport safe */ _nfts_metadataParser__WEBPACK_IMPORTED_MODULE_43__.parseAttributes),
  parseRawAttributesString: () => (/* reexport safe */ _nfts_metadataParser__WEBPACK_IMPORTED_MODULE_43__.parseRawAttributesString),
  readKeyFile: () => (/* reexport safe */ _keystore__WEBPACK_IMPORTED_MODULE_31__.readKeyFile),
  reload: () => (/* reexport safe */ _extensionUtils__WEBPACK_IMPORTED_MODULE_69__.reload),
  repeat: () => (/* reexport safe */ _logging__WEBPACK_IMPORTED_MODULE_24__.repeat),
  requestLog: () => (/* reexport safe */ _logging__WEBPACK_IMPORTED_MODULE_24__.requestLog),
  requestOidcAuth: () => (/* reexport safe */ _seedless_getCubeSigner__WEBPACK_IMPORTED_MODULE_34__.requestOidcAuth),
  requestParser: () => (/* reexport safe */ _logging__WEBPACK_IMPORTED_MODULE_24__.requestParser),
  resolve: () => (/* reexport safe */ _promiseResolver__WEBPACK_IMPORTED_MODULE_89__.resolve),
  responseLog: () => (/* reexport safe */ _logging__WEBPACK_IMPORTED_MODULE_24__.responseLog),
  responseParser: () => (/* reexport safe */ _logging__WEBPACK_IMPORTED_MODULE_24__.responseParser),
  shouldUseWalletConnectApproval: () => (/* reexport safe */ _shouldUseWalletConnectApproval__WEBPACK_IMPORTED_MODULE_19__.shouldUseWalletConnectApproval),
  signUpForNewsletter: () => (/* reexport safe */ _newsletter__WEBPACK_IMPORTED_MODULE_61__.signUpForNewsletter),
  stateLog: () => (/* reexport safe */ _logging__WEBPACK_IMPORTED_MODULE_24__.stateLog),
  stringToBigint: () => (/* reexport safe */ _stringToBigint__WEBPACK_IMPORTED_MODULE_72__.stringToBigint),
  stripAddressPrefix: () => (/* reexport safe */ _stripAddressPrefix__WEBPACK_IMPORTED_MODULE_78__.stripAddressPrefix),
  sumByProperty: () => (/* reexport safe */ _sumByProperty__WEBPACK_IMPORTED_MODULE_60__.sumByProperty),
  supportedBrowsers: () => (/* reexport safe */ _isSupportedBrowser__WEBPACK_IMPORTED_MODULE_56__.supportedBrowsers),
  toLogger: () => (/* reexport safe */ _logging__WEBPACK_IMPORTED_MODULE_24__.toLogger),
  toPrecision: () => (/* reexport safe */ _number__WEBPACK_IMPORTED_MODULE_92__.toPrecision),
  truncateAddress: () => (/* reexport safe */ _truncateAddress__WEBPACK_IMPORTED_MODULE_93__.truncateAddress),
  updateIfDifferent: () => (/* reexport safe */ _updateIfDifferent__WEBPACK_IMPORTED_MODULE_59__.updateIfDifferent),
  validateBtcSend: () => (/* reexport safe */ _send_btcSendUtils__WEBPACK_IMPORTED_MODULE_17__.validateBtcSend),
  wordPhraseLength: () => (/* reexport safe */ _seedPhraseValidation__WEBPACK_IMPORTED_MODULE_85__.wordPhraseLength),
  wrapError: () => (/* reexport safe */ _errors__WEBPACK_IMPORTED_MODULE_16__.wrapError)
});
/* ESM import */var _address__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/common/src/utils/address.ts");
/* ESM import */var _actions_getUpdatedActionData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/common/src/utils/actions/getUpdatedActionData.ts");
/* ESM import */var _accounts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/common/src/utils/accounts/index.ts");
/* ESM import */var _bridge__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../packages/common/src/utils/bridge/index.ts");
/* ESM import */var _network_getProviderForNetwork__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../packages/common/src/utils/network/getProviderForNetwork.ts");
/* ESM import */var _network_addGlacierAPIKeyIfNeeded__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../packages/common/src/utils/network/addGlacierAPIKeyIfNeeded.ts");
/* ESM import */var _network_buildGlacierAuthHeaders__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../../packages/common/src/utils/network/buildGlacierAuthHeaders.ts");
/* ESM import */var _network_isAvalancheNetwork__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../../packages/common/src/utils/network/isAvalancheNetwork.ts");
/* ESM import */var _network_isAvalanchePchainNetwork__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("../../packages/common/src/utils/network/isAvalanchePchainNetwork.ts");
/* ESM import */var _network_isAvalancheXchainNetwork__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("../../packages/common/src/utils/network/isAvalancheXchainNetwork.ts");
/* ESM import */var _network_isEthereumNetwork__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("../../packages/common/src/utils/network/isEthereumNetwork.ts");
/* ESM import */var _network_isBitcoinNetwork__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__("../../packages/common/src/utils/network/isBitcoinNetwork.ts");
/* ESM import */var _network_isSolanaNetwork__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__("../../packages/common/src/utils/network/isSolanaNetwork.ts");
/* ESM import */var _network_isValidHttpHeader__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__("../../packages/common/src/utils/network/isValidHttpHeader.ts");
/* ESM import */var _getSyncDomain__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__("../../packages/common/src/utils/getSyncDomain.ts");
/* ESM import */var _createMnemonicPhrase__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__("../../packages/common/src/utils/createMnemonicPhrase.ts");
/* ESM import */var _errors__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__("../../packages/common/src/utils/errors/index.ts");
/* ESM import */var _send_btcSendUtils__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__("../../packages/common/src/utils/send/btcSendUtils.ts");
/* ESM import */var _calculateTotalBalance__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__("../../packages/common/src/utils/calculateTotalBalance.ts");
/* ESM import */var _shouldUseWalletConnectApproval__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__("../../packages/common/src/utils/shouldUseWalletConnectApproval.ts");
/* ESM import */var _object__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__("../../packages/common/src/utils/object.ts");
/* ESM import */var _hasAccountBalances__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__("../../packages/common/src/utils/hasAccountBalances.ts");
/* ESM import */var _isAddressValid__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__("../../packages/common/src/utils/isAddressValid.ts");
/* ESM import */var _isContactValid__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__("../../packages/common/src/utils/isContactValid.ts");
/* ESM import */var _logging__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__("../../packages/common/src/utils/logging.ts");
/* ESM import */var _history__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__("../../packages/common/src/utils/history/index.ts");
/* ESM import */var _account__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__("../../packages/common/src/utils/account.ts");
/* ESM import */var _getEnabledBridgeTypes__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__("../../packages/common/src/utils/getEnabledBridgeTypes.ts");
/* ESM import */var _getExplorerAddress__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__("../../packages/common/src/utils/getExplorerAddress.ts");
/* ESM import */var _getNftMetadata__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__("../../packages/common/src/utils/getNftMetadata.ts");
/* ESM import */var _constants__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__("../../packages/common/src/utils/constants.ts");
/* ESM import */var _keystore__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__("../../packages/common/src/utils/keystore/index.ts");
/* ESM import */var _getAddressForChain__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__("../../packages/common/src/utils/getAddressForChain.ts");
/* ESM import */var _bridgeTransactionUtils__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__("../../packages/common/src/utils/bridgeTransactionUtils.ts");
/* ESM import */var _seedless_getCubeSigner__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__("../../packages/common/src/utils/seedless/getCubeSigner.ts");
/* ESM import */var _seedless_authenticateWithApple__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__("../../packages/common/src/utils/seedless/authenticateWithApple.ts");
/* ESM import */var _seedless_authenticateWithGoogle__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__("../../packages/common/src/utils/seedless/authenticateWithGoogle.ts");
/* ESM import */var _seedless_getOidcTokenProvider__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__("../../packages/common/src/utils/seedless/getOidcTokenProvider.ts");
/* ESM import */var _seedless_getSignerToken__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__("../../packages/common/src/utils/seedless/getSignerToken.ts");
/* ESM import */var _seedless_fido__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__("../../packages/common/src/utils/seedless/fido/index.ts");
/* ESM import */var _seedless_seedlessEventFilters__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__("../../packages/common/src/utils/seedless/seedlessEventFilters.ts");
/* ESM import */var _walletConnectEventFilters__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__("../../packages/common/src/utils/walletConnectEventFilters.ts");
/* ESM import */var _nfts_getSmallImageForNFT__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__("../../packages/common/src/utils/nfts/getSmallImageForNFT.ts");
/* ESM import */var _nfts_metadataParser__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__("../../packages/common/src/utils/nfts/metadataParser.ts");
/* ESM import */var _nfts_isNFT__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__("../../packages/common/src/utils/nfts/isNFT.ts");
/* ESM import */var _nfts_nftTypesUtils__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__("../../packages/common/src/utils/nfts/nftTypesUtils.ts");
/* ESM import */var _fireblocks_getFireblocksBtcAccessErrorCode__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__("../../packages/common/src/utils/fireblocks/getFireblocksBtcAccessErrorCode.ts");
/* ESM import */var _fireblocks_isFireblocksApiSupported__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__("../../packages/common/src/utils/fireblocks/isFireblocksApiSupported.ts");
/* ESM import */var _canSkipApproval__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__("../../packages/common/src/utils/canSkipApproval.ts");
/* ESM import */var _onPageActivated__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__("../../packages/common/src/utils/onPageActivated.ts");
/* ESM import */var _caipConversion__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__("../../packages/common/src/utils/caipConversion.ts");
/* ESM import */var _findTokenForAsset__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__("../../packages/common/src/utils/findTokenForAsset.ts");
/* ESM import */var _incrementalPromiseResolve__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__("../../packages/common/src/utils/incrementalPromiseResolve.ts");
/* ESM import */var _typeUtils__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__("../../packages/common/src/utils/typeUtils.ts");
/* ESM import */var _assertions__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__("../../packages/common/src/utils/assertions.ts");
/* ESM import */var _getHexStringToBytes__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__("../../packages/common/src/utils/getHexStringToBytes.ts");
/* ESM import */var _isSupportedBrowser__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__("../../packages/common/src/utils/isSupportedBrowser.ts");
/* ESM import */var _calculateGasAndFees__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__("../../packages/common/src/utils/calculateGasAndFees.ts");
/* ESM import */var _isTokenMalicious__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__("../../packages/common/src/utils/isTokenMalicious.ts");
/* ESM import */var _updateIfDifferent__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__("../../packages/common/src/utils/updateIfDifferent.ts");
/* ESM import */var _sumByProperty__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__("../../packages/common/src/utils/sumByProperty.ts");
/* ESM import */var _newsletter__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__("../../packages/common/src/utils/newsletter.ts");
/* ESM import */var _normalizeBalance__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__("../../packages/common/src/utils/normalizeBalance.ts");
/* ESM import */var _lowerCaseKeys__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__("../../packages/common/src/utils/lowerCaseKeys.ts");
/* ESM import */var _makeBNLike__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__("../../packages/common/src/utils/makeBNLike.ts");
/* ESM import */var _measureDuration__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__("../../packages/common/src/utils/measureDuration.ts");
/* ESM import */var _isLedgerVersionCompatible__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__("../../packages/common/src/utils/isLedgerVersionCompatible.ts");
/* ESM import */var _hasUnconfirmedBalance__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__("../../packages/common/src/utils/hasUnconfirmedBalance.ts");
/* ESM import */var _ipsfResolverWithFallback__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__("../../packages/common/src/utils/ipsfResolverWithFallback.ts");
/* ESM import */var _extensionUtils__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__("../../packages/common/src/utils/extensionUtils.ts");
/* ESM import */var _array__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__("../../packages/common/src/utils/array.ts");
/* ESM import */var _getCoreWebUrl__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__("../../packages/common/src/utils/getCoreWebUrl.ts");
/* ESM import */var _stringToBigint__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__("../../packages/common/src/utils/stringToBigint.ts");
/* ESM import */var _isActiveTab__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__("../../packages/common/src/utils/isActiveTab.ts");
/* ESM import */var _getDefaultChainIds__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__("../../packages/common/src/utils/getDefaultChainIds.ts");
/* ESM import */var _jsonRpcEngine__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__("../../packages/common/src/utils/jsonRpcEngine.ts");
/* ESM import */var _environment__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__("../../packages/common/src/utils/environment.ts");
/* ESM import */var _exponentialBackoff__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__("../../packages/common/src/utils/exponentialBackoff.ts");
/* ESM import */var _stripAddressPrefix__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__("../../packages/common/src/utils/stripAddressPrefix.ts");
/* ESM import */var _handleTxOutcome__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__("../../packages/common/src/utils/handleTxOutcome.ts");
/* ESM import */var _isBtcAddressInNetwork__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__("../../packages/common/src/utils/isBtcAddressInNetwork.ts");
/* ESM import */var _isPrimarySubnet__WEBPACK_IMPORTED_MODULE_81__ = __webpack_require__("../../packages/common/src/utils/isPrimarySubnet.ts");
/* ESM import */var _isSwimmerNetwork__WEBPACK_IMPORTED_MODULE_82__ = __webpack_require__("../../packages/common/src/utils/isSwimmerNetwork.ts");
/* ESM import */var _isBitcoin__WEBPACK_IMPORTED_MODULE_83__ = __webpack_require__("../../packages/common/src/utils/isBitcoin.ts");
/* ESM import */var _bigintToBig__WEBPACK_IMPORTED_MODULE_84__ = __webpack_require__("../../packages/common/src/utils/bigintToBig.ts");
/* ESM import */var _seedPhraseValidation__WEBPACK_IMPORTED_MODULE_85__ = __webpack_require__("../../packages/common/src/utils/seedPhraseValidation.ts");
/* ESM import */var _distributiveomit__WEBPACK_IMPORTED_MODULE_86__ = __webpack_require__("../../packages/common/src/utils/distributiveomit.ts");
/* ESM import */var _isFailedToFetchError__WEBPACK_IMPORTED_MODULE_87__ = __webpack_require__("../../packages/common/src/utils/isFailedToFetchError.ts");
/* ESM import */var _encoding__WEBPACK_IMPORTED_MODULE_88__ = __webpack_require__("../../packages/common/src/utils/encoding.ts");
/* ESM import */var _promiseResolver__WEBPACK_IMPORTED_MODULE_89__ = __webpack_require__("../../packages/common/src/utils/promiseResolver.ts");
/* ESM import */var _getAccountKey__WEBPACK_IMPORTED_MODULE_90__ = __webpack_require__("../../packages/common/src/utils/getAccountKey.ts");
/* ESM import */var _noop__WEBPACK_IMPORTED_MODULE_91__ = __webpack_require__("../../packages/common/src/utils/noop.ts");
/* ESM import */var _number__WEBPACK_IMPORTED_MODULE_92__ = __webpack_require__("../../packages/common/src/utils/number.ts");
/* ESM import */var _truncateAddress__WEBPACK_IMPORTED_MODULE_93__ = __webpack_require__("../../packages/common/src/utils/truncateAddress.ts");
/* ESM import */var _filterFalsyValues__WEBPACK_IMPORTED_MODULE_94__ = __webpack_require__("../../packages/common/src/utils/filterFalsyValues.ts");
/* ESM import */var _balance__WEBPACK_IMPORTED_MODULE_95__ = __webpack_require__("../../packages/common/src/utils/balance/index.ts");
/* ESM import */var _isLockStateChangedEvent__WEBPACK_IMPORTED_MODULE_96__ = __webpack_require__("../../packages/common/src/utils/isLockStateChangedEvent.ts");
/* ESM import */var _isWalletStateUpdateEvent__WEBPACK_IMPORTED_MODULE_97__ = __webpack_require__("../../packages/common/src/utils/isWalletStateUpdateEvent.ts");
/* ESM import */var _fetchAndVerify__WEBPACK_IMPORTED_MODULE_98__ = __webpack_require__("../../packages/common/src/utils/fetchAndVerify.ts");
/* ESM import */var _openFullscreenTab__WEBPACK_IMPORTED_MODULE_99__ = __webpack_require__("../../packages/common/src/utils/openFullscreenTab.ts");
/* ESM import */var _approveSeedlessRegistration__WEBPACK_IMPORTED_MODULE_100__ = __webpack_require__("../../packages/common/src/utils/approveSeedlessRegistration.ts");








































































































}),
"../../packages/common/src/utils/ipsfResolverWithFallback.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  IPFS_URL: () => (IPFS_URL),
  ipfsResolverWithFallback: () => (ipfsResolverWithFallback)
});
/* ESM import */var _avalabs_core_utils_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/@avalabs/core-utils-sdk/esm/ipfsResolver.js");

const IPFS_URL = 'https://ipfs.io';
function ipfsResolverWithFallback(sourceUrl, desiredGatewayPrefix = IPFS_URL) {
    if (!sourceUrl) {
        return '';
    }
    try {
        return (0,_avalabs_core_utils_sdk__WEBPACK_IMPORTED_MODULE_0__.ipfsResolver)(sourceUrl, desiredGatewayPrefix);
    } catch  {
        return sourceUrl;
    }
}


}),
"../../packages/common/src/utils/isActiveTab.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isActiveTab: () => (isActiveTab)
});
/* ESM import */var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/webextension-polyfill/dist/browser-polyfill.js");
/* ESM import */var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__);

const isActiveTab = async (tabId)=>{
    try {
        const tab = await webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__.tabs.get(tabId);
        return Boolean(tab) && tab.active;
    } catch  {
        return false;
    }
};


}),
"../../packages/common/src/utils/isAddressValid.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isValidAddress: () => (isValidAddress),
  isValidAvmAddress: () => (isValidAvmAddress),
  isValidBtcAddress: () => (isValidBtcAddress),
  isValidPvmAddress: () => (isValidPvmAddress),
  isValidSvmAddress: () => (isValidSvmAddress),
  isValidXPAddress: () => (isValidXPAddress)
});
/* ESM import */var _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/@avalabs/core-bridge-sdk/esm/lib/btc/address.js");
/* ESM import */var ethers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/ethers/lib.esm/address/checks.js");
/* ESM import */var _solana_kit__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../node_modules/@solana/addresses/dist/index.browser.mjs");
/* ESM import */var _stripAddressPrefix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/common/src/utils/stripAddressPrefix.ts");
/* ESM import */var _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/@avalabs/avalanchejs/dist/es/index.js");





const isValidAddress = (address)=>{
    return !!address.length && (0,ethers__WEBPACK_IMPORTED_MODULE_1__.isAddress)(address);
};
const isValidBtcAddress = (address)=>{
    return !!address.length && (0,_avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_2__.isBech32Address)(address);
};
const isValidPvmAddress = (address)=>{
    return isValidXPAddressWithPrefix(address, 'P-');
};
const isValidAvmAddress = (address)=>{
    return isValidXPAddressWithPrefix(address, 'X-');
};
const isValidSvmAddress = (address)=>{
    return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.isAddress)(address);
};
function isValidXPAddressWithPrefix(value, forcedPrefix) {
    const address = forcedPrefix && !value.startsWith(forcedPrefix) ? `${forcedPrefix}${value}` : value;
    const addressBody = (0,_stripAddressPrefix__WEBPACK_IMPORTED_MODULE_0__.stripAddressPrefix)(address);
    return isValidXPAddress(addressBody);
}
const isValidXPAddress = (address)=>{
    try {
        _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_4__.utils.parseBech32(address);
        return true;
    } catch  {
        return false;
    }
};


}),
"../../packages/common/src/utils/isBitcoin.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isBitcoin: () => (isBitcoin)
});
/* ESM import */var _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/@avalabs/core-chains-sdk/esm/models.js");

function isBitcoin(network) {
    return network?.vmName === _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__.NetworkVMType.BITCOIN;
}


}),
"../../packages/common/src/utils/isBtcAddressInNetwork.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isBtcAddressInNetwork: () => (isBtcAddressInNetwork)
});
/* ESM import */var _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/@avalabs/core-bridge-sdk/esm/lib/btc/address.js");

/**
 * Check if the given address is a valid Bitcoin address
 * @param address Bitcoin address, bech32 or b58
 * @param isMainnet Verify address against mainnet or testnet
 */ function isBtcAddressInNetwork(address, isMainnet) {
    return (0,_avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_0__.isBech32AddressInNetwork)(address, isMainnet) || (0,_avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_0__.isBase58AddressInNetwork)(address, isMainnet);
}


}),
"../../packages/common/src/utils/isContactValid.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isContactValid: () => (isContactValid)
});
/* ESM import */var ethers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/ethers/lib.esm/address/checks.js");
/* ESM import */var _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/@avalabs/core-bridge-sdk/esm/lib/btc/address.js");
/* ESM import */var _isAddressValid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/common/src/utils/isAddressValid.ts");



const isContactValid = (contact)=>{
    if (!contact.name || !contact.address && !contact.addressBTC && !contact.addressXP && !contact.addressSVM) {
        return {
            valid: false,
            reason: 'contact name or address is missing'
        };
    }
    const isAddressValid = (!contact.address || (0,ethers__WEBPACK_IMPORTED_MODULE_1__.isAddress)(contact.address)) && (!contact.addressBTC || (0,_avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_2__.isBech32Address)(contact.addressBTC)) && (!contact.addressXP || (0,_isAddressValid__WEBPACK_IMPORTED_MODULE_0__.isValidXPAddress)(contact.addressXP)) && (!contact.addressSVM || (0,_isAddressValid__WEBPACK_IMPORTED_MODULE_0__.isValidSvmAddress)(contact.addressSVM));
    if (isAddressValid) {
        return {
            valid: true,
            reason: ''
        };
    }
    return {
        valid: false,
        reason: 'address is invalid'
    };
};


}),
"../../packages/common/src/utils/isFailedToFetchError.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isFailedToFetchError: () => (isFailedToFetchError)
});
const isFailedToFetchError = (err)=>{
    return err instanceof Error && /Failed to fetch/.test(err.message);
};


}),
"../../packages/common/src/utils/isLedgerVersionCompatible.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isLedgerVersionCompatible: () => (isLedgerVersionCompatible)
});
// ledgerAppVersion >= requiredAppVersion
function isLedgerVersionCompatible(ledgerAppVersion, requiredAppVersion) {
    const compare = ledgerAppVersion.localeCompare(requiredAppVersion, undefined, {
        numeric: true,
        sensitivity: 'base'
    });
    // ledgerAppVersion > requiredAppVersion
    if (compare === 1) return true;
    // ledgerAppVersion = requiredAppVersion
    if (compare === 0) return true;
    // ledgerAppVersion < requiredAppVersion
    if (compare === -1) return false;
}


}),
"../../packages/common/src/utils/isLockStateChangedEvent.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isLockStateChangedEvent: () => (isLockStateChangedEvent)
});
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/types/src/index.ts");

function isLockStateChangedEvent(evt) {
    return evt.name === _core_types__WEBPACK_IMPORTED_MODULE_0__.LockEvents.LOCK_STATE_CHANGED;
}


}),
"../../packages/common/src/utils/isPrimarySubnet.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isPrimarySubnet: () => (isPrimarySubnet)
});
/* ESM import */var _avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/providers/constants.js");

function isPrimarySubnet(subnetId) {
    return subnetId === _avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_0__.MainnetContext.pBlockchainID;
}


}),
"../../packages/common/src/utils/isSupportedBrowser.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isSupportedBrowser: () => (isSupportedBrowser),
  supportedBrowsers: () => (supportedBrowsers)
});
/* ESM import */var detect_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/detect-browser/es/index.js");

const supportedBrowsers = [
    'chrome'
];
const isSupportedBrowser = ()=>{
    const browser = (0,detect_browser__WEBPACK_IMPORTED_MODULE_0__.detect)();
    const isSupported = supportedBrowsers.includes(browser?.name ?? '');
    return isSupported;
};


}),
"../../packages/common/src/utils/isSwimmerNetwork.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isSwimmer: () => (isSwimmer),
  isSwimmerByChainId: () => (isSwimmerByChainId)
});
/* ESM import */var _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/@avalabs/core-chains-sdk/esm/models.js");

function isSwimmer(network) {
    return isSwimmerByChainId(network.chainId);
}
function isSwimmerByChainId(chainId) {
    return !!(chainId === _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.SWIMMER || chainId === _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.SWIMMER_TESTNET);
}


}),
"../../packages/common/src/utils/isTokenMalicious.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isTokenMalicious: () => (isTokenMalicious)
});
/* ESM import */var _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/@avalabs/vm-module-types/dist/index.js");
/* ESM import */var _avalabs_glacier_sdk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/@avalabs/glacier-sdk/esm/generated/models/Erc20TokenBalance.js");


const isTokenMalicious = (token)=>{
    if (!('type' in token) || token.type !== _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.ERC20) {
        return false;
    }
    return token.reputation === _avalabs_glacier_sdk__WEBPACK_IMPORTED_MODULE_1__.Erc20TokenBalance.tokenReputation.MALICIOUS;
};


}),
"../../packages/common/src/utils/isWalletStateUpdateEvent.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isWalletStateUpdateEvent: () => (isWalletStateUpdateEvent)
});
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/types/src/index.ts");

function isWalletStateUpdateEvent(evt) {
    return evt.name === _core_types__WEBPACK_IMPORTED_MODULE_0__.WalletEvents.WALLET_STATE_UPDATE;
}


}),
"../../packages/common/src/utils/jsonRpcEngine.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  engine: () => (engine)
});
/* ESM import */var json_rpc_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/json-rpc-engine/dist/index.js");
/* ESM import */var json_rpc_engine__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(json_rpc_engine__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var eth_json_rpc_middleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/eth-json-rpc-middleware/dist/index.js");
/* ESM import */var eth_json_rpc_middleware__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(eth_json_rpc_middleware__WEBPACK_IMPORTED_MODULE_1__);
/* ESM import */var _network_addGlacierAPIKeyIfNeeded__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/common/src/utils/network/addGlacierAPIKeyIfNeeded.ts");



async function engine(network) {
    const fetchMiddleware = (0,eth_json_rpc_middleware__WEBPACK_IMPORTED_MODULE_1__.createFetchMiddleware)({
        get rpcUrl () {
            return (0,_network_addGlacierAPIKeyIfNeeded__WEBPACK_IMPORTED_MODULE_2__.addGlacierAPIKeyIfNeeded)(network.rpcUrl);
        }
    });
    const rpcEngine = new json_rpc_engine__WEBPACK_IMPORTED_MODULE_0__.JsonRpcEngine();
    rpcEngine.push(fetchMiddleware);
    return rpcEngine;
}


}),
"../../packages/common/src/utils/keystore/cryptoHelpers.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  calculatePasswordHash: () => (calculatePasswordHash),
  decrypt: () => (decrypt),
  getHash: () => (getHash)
});
/* ESM import */var _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/@noble/hashes/esm/sha256.js");
/* ESM import */var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/@noble/hashes/esm/utils.js");
/**
 * Helper utilities for encryption and password hashing, browser-safe.
 * Encryption is using AES-GCM with a random public nonce.
 */ 

const SALT_SIZE = 16;
const AES_LENGTH = 256;
const TAG_LENGTH = 128;
const KEYGEN_ITERATIONS_V3 = 200000; // v3 and and any version above
const makeSalt = ()=>(0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.randomBytes)(SALT_SIZE);
const getHash = (password, salt)=>(0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_1__.sha256)((0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.concatBytes)((0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes)(password), salt));
const calculatePasswordHash = (password, salt)=>{
    let slt;
    if (salt instanceof Uint8Array) {
        slt = salt;
    } else {
        slt = makeSalt();
    }
    const hash = getHash(password, getHash(password, slt));
    return {
        salt: slt,
        hash
    };
};
const importKey = async (pwkey)=>crypto.subtle.importKey('raw', pwkey, {
        name: 'PBKDF2'
    }, false, [
        'deriveKey'
    ]);
const deriveKey = async (keyMaterial, salt, iterations = KEYGEN_ITERATIONS_V3)=>crypto.subtle.deriveKey({
        name: 'PBKDF2',
        salt,
        iterations,
        hash: 'SHA-256'
    }, keyMaterial, {
        name: 'AES-GCM',
        length: AES_LENGTH
    }, false, [
        'encrypt',
        'decrypt'
    ]);
const decrypt = async (password, ciphertext, salt, iv, keygenIterations)=>{
    const pwkey = getHash(password, salt);
    const keyMaterial = await importKey(pwkey);
    const pkey = await deriveKey(keyMaterial, salt, keygenIterations);
    const pt = await crypto.subtle.decrypt({
        name: 'AES-GCM',
        iv,
        additionalData: salt,
        tagLength: TAG_LENGTH
    }, pkey, ciphertext);
    return new Uint8Array(pt);
};


}),
"../../packages/common/src/utils/keystore/index.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  KEYSTORE_VERSION: () => (/* reexport safe */ _keystore__WEBPACK_IMPORTED_MODULE_0__.KEYSTORE_VERSION),
  KeystoreFixtures: () => (/* reexport module object */ _keystore_fixtures__WEBPACK_IMPORTED_MODULE_2__),
  calculatePasswordHash: () => (/* reexport safe */ _cryptoHelpers__WEBPACK_IMPORTED_MODULE_1__.calculatePasswordHash),
  decrypt: () => (/* reexport safe */ _cryptoHelpers__WEBPACK_IMPORTED_MODULE_1__.decrypt),
  extractKeysFromDecryptedFile: () => (/* reexport safe */ _keystore__WEBPACK_IMPORTED_MODULE_0__.extractKeysFromDecryptedFile),
  getHash: () => (/* reexport safe */ _cryptoHelpers__WEBPACK_IMPORTED_MODULE_1__.getHash),
  readKeyFile: () => (/* reexport safe */ _keystore__WEBPACK_IMPORTED_MODULE_0__.readKeyFile)
});
/* ESM import */var _keystore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/common/src/utils/keystore/keystore.ts");
/* ESM import */var _cryptoHelpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/common/src/utils/keystore/cryptoHelpers.ts");
/* ESM import */var _keystore_fixtures__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/common/src/utils/keystore/keystore-fixtures/index.ts");





}),
"../../packages/common/src/utils/keystore/keystore-fixtures/index.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  KEYSTORE_V2: () => (KEYSTORE_V2),
  KEYSTORE_V3: () => (KEYSTORE_V3),
  KEYSTORE_V4: () => (KEYSTORE_V4),
  KEYSTORE_V5: () => (KEYSTORE_V5),
  KEYSTORE_V6: () => (KEYSTORE_V6),
  KEYSTORE_V6_PKEY: () => (KEYSTORE_V6_PKEY)
});
/* ESM import */var _keystore_v2_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/common/src/utils/keystore/keystore-fixtures/keystore-v2.json");
/* ESM import */var _keystore_v3_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/common/src/utils/keystore/keystore-fixtures/keystore-v3.json");
/* ESM import */var _keystore_v4_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/common/src/utils/keystore/keystore-fixtures/keystore-v4.json");
/* ESM import */var _keystore_v5_json__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../packages/common/src/utils/keystore/keystore-fixtures/keystore-v5.json");
/* ESM import */var _keystore_v6_json__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../packages/common/src/utils/keystore/keystore-fixtures/keystore-v6.json");
/* ESM import */var _keystore_v6_private_key_json__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../packages/common/src/utils/keystore/keystore-fixtures/keystore-v6-private-key.json");
/**
 * All of the keys in the files below are for testing purposes only.
 * Do not use them in any other way.
 */ 





const KEYSTORE_V2 = {
    file: _keystore_v2_json__WEBPACK_IMPORTED_MODULE_0__,
    password: '111111111',
    expectedKeys: [
        {
            key: '2DvMW4ZsNVdiiBsrEdPBTDr47bTtgr4H8qQKXz2D37YKeTLwDw'
        },
        {
            key: '2rr9Fzq87moKGkkJeCjqewGEWY1KW4Na3bnF31GecggLL16XXG'
        }
    ],
    expectedPhrases: [
        {
            key: 'patient dragon there taxi husband medal amused push busy draft only axis chat august december essence vintage must liquid zero truck inner potato effort',
            type: 'mnemonic'
        },
        {
            key: 'visual arctic dune seminar ask balcony mass truly entire surround income battle clump village manual alter purpose various squeeze recipe round fade blame meadow',
            type: 'mnemonic'
        }
    ]
};
const KEYSTORE_V3 = {
    file: _keystore_v3_json__WEBPACK_IMPORTED_MODULE_1__,
    password: '111111111',
    expectedKeys: [
        {
            key: '2DvMW4ZsNVdiiBsrEdPBTDr47bTtgr4H8qQKXz2D37YKeTLwDw'
        },
        {
            key: '2rr9Fzq87moKGkkJeCjqewGEWY1KW4Na3bnF31GecggLL16XXG'
        }
    ],
    expectedPhrases: [
        {
            key: 'patient dragon there taxi husband medal amused push busy draft only axis chat august december essence vintage must liquid zero truck inner potato effort',
            type: 'mnemonic'
        },
        {
            key: 'visual arctic dune seminar ask balcony mass truly entire surround income battle clump village manual alter purpose various squeeze recipe round fade blame meadow',
            type: 'mnemonic'
        }
    ]
};
const KEYSTORE_V4 = {
    file: _keystore_v4_json__WEBPACK_IMPORTED_MODULE_2__,
    password: '111111111',
    expectedKeys: [
        {
            key: 'jegD9bfh1qYjnyxUgnG92CEyAx7s4iZRgcYatdN2u1qhy1Tbr'
        }
    ],
    expectedPhrases: [
        {
            key: 'general ritual pitch clump tragic entry possible detail case moment fade sleep cabin pig churn solid nation wrestle armor because simple disagree cry meat',
            type: 'mnemonic'
        }
    ]
};
const KEYSTORE_V5 = {
    file: _keystore_v5_json__WEBPACK_IMPORTED_MODULE_3__,
    password: '111111111',
    expectedKeys: [
        {
            key: 'solar ordinary sentence pelican trim ring indicate cake ordinary water size improve impose gentle frown sound know siren sick elder wait govern tortoise unit'
        }
    ],
    expectedPhrases: [
        {
            key: 'solar ordinary sentence pelican trim ring indicate cake ordinary water size improve impose gentle frown sound know siren sick elder wait govern tortoise unit',
            type: 'mnemonic'
        }
    ]
};
const KEYSTORE_V6 = {
    file: _keystore_v6_json__WEBPACK_IMPORTED_MODULE_4__,
    password: '111111111',
    expectedPhrases: [
        {
            key: 'solar ordinary sentence pelican trim ring indicate cake ordinary water size improve impose gentle frown sound know siren sick elder wait govern tortoise unit',
            type: 'mnemonic'
        }
    ]
};
const KEYSTORE_V6_PKEY = {
    file: _keystore_v6_private_key_json__WEBPACK_IMPORTED_MODULE_5__,
    password: '123123123',
    expectedPhrases: [
        {
            key: 'PrivateKey-2NryVJe1H9dqRbJggntZggK7fEmj3QpCHTqadj6i6m4qciANPE',
            type: 'singleton'
        }
    ]
};


}),
"../../packages/common/src/utils/keystore/keystore.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  KEYSTORE_VERSION: () => (KEYSTORE_VERSION),
  extractKeysFromDecryptedFile: () => (extractKeysFromDecryptedFile),
  readKeyFile: () => (readKeyFile)
});
/* ESM import */var bip39__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/bip39/src/index.js");
/* ESM import */var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/@noble/hashes/esm/utils.js");
/* ESM import */var _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../node_modules/@avalabs/avalanchejs/dist/es/index.js");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var _cryptoHelpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/common/src/utils/keystore/cryptoHelpers.ts");
/* provided dependency */ var Buffer = __webpack_require__("../../node_modules/buffer/index.js")["Buffer"];





const KEYSTORE_VERSION = '6.0';
const KEYGEN_ITERATIONS_V2 = 100000;
async function readV2(data, pass) {
    const version = data.version;
    const salt = _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_3__.utils.base58check.decode(data.salt);
    const checkHash = (0,_cryptoHelpers__WEBPACK_IMPORTED_MODULE_2__.getHash)(pass, salt);
    const checkHashString = _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_3__.utils.base58check.encode((0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_4__.toBytes)(checkHash));
    if (checkHashString !== data.pass_hash) {
        throw _core_types__WEBPACK_IMPORTED_MODULE_1__.KeystoreError.InvalidPassword;
    }
    const decryptedKeys = await Promise.all(data.keys.map(async (keyData)=>{
        const key = _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_3__.utils.base58check.decode(keyData.key);
        const nonce = _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_3__.utils.base58check.decode(keyData.iv);
        const decryptedKey = await (0,_cryptoHelpers__WEBPACK_IMPORTED_MODULE_2__.decrypt)(pass, key, salt, nonce, KEYGEN_ITERATIONS_V2);
        return {
            key: _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_3__.utils.base58check.encode(decryptedKey)
        };
    }));
    return {
        version,
        activeIndex: 0,
        keys: decryptedKeys
    };
}
async function readV3(data, pass) {
    const version = data.version;
    const salt = _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_3__.utils.base58check.decode(data.salt);
    const checkHash = await (0,_cryptoHelpers__WEBPACK_IMPORTED_MODULE_2__.calculatePasswordHash)(pass, salt);
    const checkHashString = _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_3__.utils.base58check.encode(checkHash.hash);
    if (checkHashString !== data.pass_hash) {
        throw _core_types__WEBPACK_IMPORTED_MODULE_1__.KeystoreError.InvalidPassword;
    }
    const decryptedKeys = await Promise.all(data.keys.map(async (keyData)=>{
        const key = _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_3__.utils.base58check.decode(keyData.key);
        const nonce = _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_3__.utils.base58check.decode(keyData.iv);
        const decryptedKey = await (0,_cryptoHelpers__WEBPACK_IMPORTED_MODULE_2__.decrypt)(pass, key, salt, nonce);
        return {
            key: _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_3__.utils.base58check.encode(decryptedKey)
        };
    }));
    return {
        version,
        activeIndex: 0,
        keys: decryptedKeys
    };
}
async function readV4(data, pass) {
    const version = data.version;
    const salt = _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_3__.utils.base58check.decode(data.salt);
    const checkHash = await (0,_cryptoHelpers__WEBPACK_IMPORTED_MODULE_2__.calculatePasswordHash)(pass, salt);
    const checkHashString = _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_3__.utils.base58check.encode(checkHash.hash);
    if (checkHashString !== data.pass_hash) {
        throw _core_types__WEBPACK_IMPORTED_MODULE_1__.KeystoreError.InvalidPassword;
    }
    const decryptedKeys = await Promise.all(data.keys.map(async (keyData)=>{
        const key = _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_3__.utils.base58check.decode(keyData.key);
        const nonce = _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_3__.utils.base58check.decode(keyData.iv);
        const decryptedKey = await (0,_cryptoHelpers__WEBPACK_IMPORTED_MODULE_2__.decrypt)(pass, key, salt, nonce);
        return {
            key: _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_3__.utils.base58check.encode(decryptedKey)
        };
    }));
    return {
        version,
        activeIndex: 0,
        keys: decryptedKeys
    };
}
async function readV5(data, pass) {
    const version = data.version;
    const salt = _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_3__.utils.base58check.decode(data.salt);
    const checkHash = await (0,_cryptoHelpers__WEBPACK_IMPORTED_MODULE_2__.calculatePasswordHash)(pass, salt);
    const checkHashString = _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_3__.utils.base58check.encode(checkHash.hash);
    if (checkHashString !== data.pass_hash) {
        throw _core_types__WEBPACK_IMPORTED_MODULE_1__.KeystoreError.InvalidPassword;
    }
    const decoder = new TextDecoder();
    const decryptedKeys = await Promise.all(data.keys.map(async (keyData)=>{
        const key = _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_3__.utils.base58check.decode(keyData.key);
        const nonce = _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_3__.utils.base58check.decode(keyData.iv);
        return {
            key: decoder.decode(await (0,_cryptoHelpers__WEBPACK_IMPORTED_MODULE_2__.decrypt)(pass, key, salt, nonce))
        };
    }));
    return {
        version,
        activeIndex: 0,
        keys: decryptedKeys
    };
}
async function readV6(data, pass) {
    const version = data.version;
    const activeIndex = data.activeIndex;
    const salt = _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_3__.utils.base58check.decode(data.salt);
    const decoder = new TextDecoder();
    const decryptedKeys = await Promise.all(data.keys.map(async (keyData)=>{
        const key = _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_3__.utils.base58check.decode(keyData.key);
        const nonce = _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_3__.utils.base58check.decode(keyData.iv);
        try {
            return {
                key: decoder.decode(await (0,_cryptoHelpers__WEBPACK_IMPORTED_MODULE_2__.decrypt)(pass, key, salt, nonce)),
                type: keyData.type
            };
        } catch (_err) {
            throw _core_types__WEBPACK_IMPORTED_MODULE_1__.KeystoreError.InvalidPassword;
        }
    }));
    return {
        version,
        activeIndex: activeIndex || 0,
        keys: decryptedKeys
    };
}
async function readKeyFile(data, pass) {
    switch(data.version){
        case '6.0':
            return await readV6(data, pass);
        case '5.0':
            return await readV5(data, pass);
        case '4.0':
            return await readV4(data, pass);
        case '3.0':
            return await readV3(data, pass);
        case '2.0':
            return await readV2(data, pass);
        default:
            throw _core_types__WEBPACK_IMPORTED_MODULE_1__.KeystoreError.InvalidVersion;
    }
}
function extractKeysV2({ keys }) {
    return keys.map((key)=>{
        const keyBuf = Buffer.from(_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_3__.utils.base58check.decode(key.key));
        const keyHex = keyBuf.toString('hex');
        const paddedKeyHex = keyHex.padStart(64, '0');
        const mnemonic = bip39__WEBPACK_IMPORTED_MODULE_0__.entropyToMnemonic(paddedKeyHex);
        return {
            key: mnemonic,
            type: 'mnemonic'
        };
    });
}
function extractKeysV5(file) {
    return file.keys.map((key)=>({
            key: key.key,
            type: 'mnemonic'
        }));
}
function extractKeysV6(file) {
    return file.keys.map((key)=>({
            type: key.type,
            key: key.key
        }));
}
function extractKeysFromDecryptedFile(file) {
    switch(file.version){
        case '6.0':
            return extractKeysV6(file);
        case '5.0':
            return extractKeysV5(file);
        case '4.0':
            return extractKeysV2(file);
        case '3.0':
            return extractKeysV2(file);
        case '2.0':
            return extractKeysV2(file);
        default:
            throw _core_types__WEBPACK_IMPORTED_MODULE_1__.KeystoreError.InvalidVersion;
    }
}


}),
"../../packages/common/src/utils/logging.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  connectionLog: () => (connectionLog),
  disconnectLog: () => (disconnectLog),
  eventLog: () => (eventLog),
  formatAndLog: () => (formatAndLog),
  formatTime: () => (formatTime),
  now: () => (now),
  padStart: () => (padStart),
  repeat: () => (repeat),
  requestLog: () => (requestLog),
  requestParser: () => (requestParser),
  responseLog: () => (responseLog),
  responseParser: () => (responseParser),
  stateLog: () => (stateLog),
  toLogger: () => (toLogger)
});
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/tap.js");
/* ESM import */var _environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/common/src/utils/environment.ts");


const repeat = (str, times)=>new Array(times + 1).join(str);
const padStart = (num, maxLength, char = ' ')=>repeat(char, maxLength - num.toString().length) + num;
const formatTime = (time)=>{
    const h = padStart(time.getHours(), 2, '0');
    const m = padStart(time.getMinutes(), 2, '0');
    const s = padStart(time.getSeconds(), 2, '0');
    const ms = padStart(time.getMilliseconds(), 3, '0');
    return `${h}:${m}:${s}.${ms}`;
};
const now = ()=>formatTime(new Date());
const style = (color, bold = true)=>{
    return `color:${color};font-weight:${bold ? '600' : '300'};font-size:11px`;
};
function formatAndLog(message, value, config) {
    console.groupCollapsed('%c%s  %s', style(config?.color ?? '#cccccc'), now(), message);
    console.log(value.data ? requestParser(value.data) : responseParser(value));
    console.groupEnd();
}
function responseParser(response) {
    function setKeyAndValue(key) {
        const value = response[key];
        if (key === 'result' || key === 'value') {
            try {
                return value ? JSON.parse(value) : value;
            } catch  {
                return value;
            }
        }
        return value;
    }
    return Object.keys(response).reduce((acc, key)=>{
        acc[key] = setKeyAndValue(key);
        return acc;
    }, {});
}
function requestParser(request) {
    function setKeyAndValue(key) {
        if (key === 'params') {
            return `${key}: ${JSON.stringify(request[key] || [])}`;
        }
        return `${key}: ${request[key]}`;
    }
    return Object.keys(request).reduce((acc, key)=>{
        return acc ? `${acc}\n${setKeyAndValue(key)}` : setKeyAndValue(key);
    }, ``);
}
function toLogger(name, showLogs = true) {
    return (observer)=>{
        return observer.pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_1__.tap)((value)=>showLogs && formatAndLog(name, value)));
    };
}
function connectionLog(message) {
    console.log('%c%s', style('#F2C53D'), `⚡️ connection: ${message}`);
}
function disconnectLog(message) {
    console.log('%c%s', style('#FA981D'), `🔌 disconnected: ${message}`);
}
function responseLog(message, value) {
    if (value.result || value.data?.result || value.result === '') {
        formatAndLog(`🚀 ${message}`, value, {
            color: '#A6BF4B'
        });
    } else if (value.error || value.data?.error) {
        formatAndLog(`💥 ${message}`, value, {
            color: '#E3460E'
        });
    } else {
        formatAndLog(`❓ ${message}`, value, {
            color: '#cccccc'
        });
    }
}
function requestLog(message, data) {
    formatAndLog(`📫 ${message}`, data, {
        color: '#424242'
    });
}
function eventLog(message, data) {
    formatAndLog(`🎯 ${message}`, data, {
        color: '#598AFA'
    });
}
function stateLog(data) {
    // prevent logging sensitive information such as mnemonic or wallet object in production
    if (!(0,_environment__WEBPACK_IMPORTED_MODULE_0__.isDevelopment)()) {
        return;
    }
    if (data.walletState.locked) {
        formatAndLog(`📚 Background State (Locked)`, data, {
            color: '#E346C5'
        });
    } else {
        formatAndLog(`📚 Background State`, data, {
            color: '#E346C5'
        });
    }
}


}),
"../../packages/common/src/utils/lowerCaseKeys.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  lowerCaseKeys: () => (lowerCaseKeys)
});
const lowerCaseKeys = (obj)=>{
    return Object.fromEntries(Object.entries(obj).map(([key, value])=>[
            key.toLowerCase(),
            value
        ]));
};


}),
"../../packages/common/src/utils/makeBNLike.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  makeBNLike: () => (makeBNLike)
});
function makeBNLike(n) {
    if (n == null) return undefined;
    return '0x' + BigInt(n).toString(16);
}


}),
"../../packages/common/src/utils/measureDuration.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  measureDuration: () => (measureDuration)
});
const measureDuration = (id)=>{
    const measurementId = id ?? crypto.randomUUID();
    const start = ()=>{
        performance.mark(`${measurementId}-start`);
    };
    const end = ()=>{
        const measurement = performance.measure(`${measurementId}-measurement`, `${measurementId}-start`);
        performance.clearMarks(`${measurementId}-start`);
        performance.clearMeasures(`${measurementId}-measurement`);
        return measurement.duration;
    };
    return {
        measurementId,
        start,
        end
    };
};


}),
"../../packages/common/src/utils/network/addGlacierAPIKeyIfNeeded.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  addGlacierAPIKeyIfNeeded: () => (addGlacierAPIKeyIfNeeded)
});
function addGlacierAPIKeyIfNeeded(url) {
    if (false) {}
    // RPC urls returned in the token list are always using the production URL
    const knownHosts = new Set([
        'glacier-api.avax.network',
        'proxy-api.avax.network',
        new URL("https://glacier-api-dev.avax.network").host,
        new URL("https://proxy-api-dev.avax.network").host
    ]);
    const urlObject = new URL(url);
    if ( true && knownHosts.has(urlObject.host)) {
        urlObject.searchParams.append('token', "bf117238dd19756d9d1845631b189036be0c1f28dca7b35bd7f822eaae3de596");
        return urlObject.toString();
    }
    return url;
}


}),
"../../packages/common/src/utils/network/buildGlacierAuthHeaders.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  buildGlacierAuthHeaders: () => (buildGlacierAuthHeaders)
});
const buildGlacierAuthHeaders = (apiKey)=>{
    if (!apiKey) {
        return {};
    }
    return {
        'X-Glacier-Api-Key': apiKey
    };
};


}),
"../../packages/common/src/utils/network/getProviderForNetwork.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getProviderForNetwork: () => (getProviderForNetwork)
});
/* ESM import */var _avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/@avalabs/core-wallets-sdk/esm/SolanaVM/utils/solanaProvider.js");
/* ESM import */var _avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../node_modules/@avalabs/core-wallets-sdk/esm/BitcoinVM/providers/BitcoinProvider.js");
/* ESM import */var _avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../node_modules/@avalabs/core-wallets-sdk/esm/EVM/utils/jsonRpcBatchProvider.js");
/* ESM import */var _avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../../node_modules/@avalabs/core-wallets-sdk/esm/Avalanche/providers/JsonRpcProvider.js");
/* ESM import */var _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/@avalabs/core-chains-sdk/esm/models.js");
/* ESM import */var ethers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/ethers/lib.esm/utils/fetch.js");
/* ESM import */var ethers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../../node_modules/ethers/lib.esm/providers/network.js");
/* ESM import */var _addGlacierAPIKeyIfNeeded__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/common/src/utils/network/addGlacierAPIKeyIfNeeded.ts");




const getProviderForNetwork = async (network, useMulticall = false)=>{
    if (network.vmName === _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_1__.NetworkVMType.SVM) {
        return (0,_avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_2__.getSolanaProvider)({
            isTestnet: Boolean(network.isTestnet),
            rpcUrl: network.isTestnet ? 'https://api.devnet.solana.com' // NowNodes does not support Solana Devnet
             : `${"https://proxy-api-dev.avax.network"}/proxy/nownodes/sol`
        });
    }
    if (network.vmName === _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_1__.NetworkVMType.BITCOIN) {
        return new _avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_3__.BitcoinProvider(!network.isTestnet, undefined, `${"https://proxy-api-dev.avax.network"}/proxy/nownodes/${network.isTestnet ? 'btcbook-testnet' : 'btcbook'}`, `${"https://proxy-api-dev.avax.network"}/proxy/nownodes/${network.isTestnet ? 'btc-testnet' : 'btc'}`,  true ? {
            token: "bf117238dd19756d9d1845631b189036be0c1f28dca7b35bd7f822eaae3de596"
        } : 0);
    } else if (network.vmName === _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_1__.NetworkVMType.EVM) {
        const fetchConfig = new ethers__WEBPACK_IMPORTED_MODULE_4__.FetchRequest((0,_addGlacierAPIKeyIfNeeded__WEBPACK_IMPORTED_MODULE_0__.addGlacierAPIKeyIfNeeded)(network.rpcUrl));
        if (network.customRpcHeaders) {
            const headers = Object.entries(network.customRpcHeaders);
            for (const [name, value] of headers){
                fetchConfig.setHeader(name, value);
            }
        }
        const provider = new _avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_5__.JsonRpcBatchInternal(useMulticall ? {
            maxCalls: 40,
            multiContractAddress: network.utilityAddresses?.multicall
        } : 40, fetchConfig, new ethers__WEBPACK_IMPORTED_MODULE_6__.Network(network.chainName, network.chainId));
        provider.pollingInterval = 2000;
        return provider;
    } else if (network.vmName === _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_1__.NetworkVMType.AVM || network.vmName === _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_1__.NetworkVMType.PVM || network.vmName === _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_1__.NetworkVMType.CoreEth) {
        return network.isTestnet ? _avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_7__.JsonRpcProvider.getDefaultFujiProvider() : _avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_7__.JsonRpcProvider.getDefaultMainnetProvider();
    } else {
        throw new Error('unsupported network');
    }
};


}),
"../../packages/common/src/utils/network/isAvalancheNetwork.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isAvalancheChainId: () => (isAvalancheChainId),
  isAvalancheNetwork: () => (isAvalancheNetwork)
});
/* ESM import */var _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/@avalabs/core-chains-sdk/esm/models.js");

function isAvalancheNetwork(network) {
    return isAvalancheChainId(network.chainId);
}
function isAvalancheChainId(chainId) {
    return _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.AVALANCHE_MAINNET_ID === chainId || _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.AVALANCHE_LOCAL_ID === chainId || _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.AVALANCHE_TESTNET_ID === chainId;
}


}),
"../../packages/common/src/utils/network/isAvalanchePchainNetwork.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isPchainNetwork: () => (isPchainNetwork),
  isPchainNetworkId: () => (isPchainNetworkId)
});
/* ESM import */var _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/@avalabs/core-chains-sdk/esm/models.js");

function isPchainNetwork(network) {
    if (!network) {
        return false;
    }
    return network.vmName === _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__.NetworkVMType.PVM;
}
function isPchainNetworkId(chainId) {
    return _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.AVALANCHE_P === chainId || _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.AVALANCHE_TEST_P === chainId;
}


}),
"../../packages/common/src/utils/network/isAvalancheXchainNetwork.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isXchainNetwork: () => (isXchainNetwork),
  isXchainNetworkId: () => (isXchainNetworkId)
});
/* ESM import */var _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/@avalabs/core-chains-sdk/esm/models.js");

function isXchainNetwork(network) {
    if (!network) {
        return false;
    }
    return network.vmName === _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__.NetworkVMType.AVM;
}
//TODO: Fix this once we figure out how to separate between x and p chain ID
function isXchainNetworkId(chainId) {
    return _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.AVALANCHE_X === chainId || _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.AVALANCHE_TEST_X === chainId;
}


}),
"../../packages/common/src/utils/network/isBitcoinNetwork.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isBitcoinChainId: () => (isBitcoinChainId),
  isBitcoinNetwork: () => (isBitcoinNetwork)
});
/* ESM import */var _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/@avalabs/core-chains-sdk/esm/models.js");

function isBitcoinNetwork(network) {
    return isBitcoinChainId(network.chainId);
}
function isBitcoinChainId(chainId) {
    return _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.BITCOIN === chainId || _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.BITCOIN_TESTNET === chainId;
}


}),
"../../packages/common/src/utils/network/isEthereumNetwork.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isEthereumChainId: () => (isEthereumChainId),
  isEthereumNetwork: () => (isEthereumNetwork)
});
/* ESM import */var _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/@avalabs/core-chains-sdk/esm/models.js");

function isEthereumNetwork(network) {
    return isEthereumChainId(network.chainId);
}
function isEthereumChainId(chainId) {
    return _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.ETHEREUM_HOMESTEAD === chainId || _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.ETHEREUM_TEST_GOERLY === chainId || _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.ETHEREUM_TEST_RINKEBY === chainId || _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.ETHEREUM_TEST_SEPOLIA === chainId;
}


}),
"../../packages/common/src/utils/network/isSolanaNetwork.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isSolanaChainId: () => (isSolanaChainId),
  isSolanaNetwork: () => (isSolanaNetwork)
});
/* ESM import */var _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/@avalabs/core-chains-sdk/esm/models.js");

function isSolanaNetwork(network) {
    return network ? isSolanaChainId(network.chainId) : false;
}
function isSolanaChainId(chainId) {
    return _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.SOLANA_DEVNET_ID === chainId || _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.SOLANA_MAINNET_ID === chainId || _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_0__.ChainId.SOLANA_TESTNET_ID === chainId;
}


}),
"../../packages/common/src/utils/network/isValidHttpHeader.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isValidHttpHeader: () => (isValidHttpHeader)
});
const isValidHttpHeader = (name, value)=>{
    try {
        new Headers({
            [name]: value
        });
        return true;
    } catch  {
        return false;
    }
};


}),
"../../packages/common/src/utils/newsletter.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isNewsletterConfigured: () => (isNewsletterConfigured),
  signUpForNewsletter: () => (signUpForNewsletter)
});
function isNewsletterConfigured() {
    return Boolean( true && "8c7d7ccd-5a7e-4fcb-b1aa-20c1b3b4ba7c");
}
async function signUpForNewsletter(data) {
    if (!isNewsletterConfigured()) {
        throw new Error('Newsletter is not configured');
    }
    const proxyURl = `${"https://ac-gateway-development-integration-k8s-us-east-1.avacloud-dev.io"}/v1/hs/forms/${"7522520"}/${"8c7d7ccd-5a7e-4fcb-b1aa-20c1b3b4ba7c"}`;
    const headers = {
        Accept: '*',
        'Content-Type': 'application/json'
    };
    const requestOptions = {
        method: 'POST',
        headers,
        body: JSON.stringify(data)
    };
    return fetch(proxyURl, requestOptions);
}


}),
"../../packages/common/src/utils/nfts/getSmallImageForNFT.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getSmallImageForNFT: () => (getSmallImageForNFT)
});
/* ESM import */var _ipsfResolverWithFallback__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/common/src/utils/ipsfResolverWithFallback.ts");

const COVALENT_IMG_SIZER = 'https://image-proxy.svc.prod.covalenthq.com/cdn-cgi/image';
/**
 * Covalent has an on the fly image resizer, it resolves image urls then resizes the image.
 *
 * This allows us to request smaller images depending on the UI needs
 *
 * @param imgUrl the url of the image to convert to size
 * @returns The url to the image which is sized at the time of request
 */ function getSmallImageForNFT(imgUrl, imageSize = '256') {
    const url = (0,_ipsfResolverWithFallback__WEBPACK_IMPORTED_MODULE_0__.ipfsResolverWithFallback)(imgUrl);
    return `${COVALENT_IMG_SIZER}/width=${imageSize},fit/${url}`;
}


}),
"../../packages/common/src/utils/nfts/isNFT.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isNFT: () => (isNFT),
  isNftTokenType: () => (isNftTokenType)
});
/* ESM import */var _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/@avalabs/vm-module-types/dist/index.js");

function isNftTokenType(type) {
    return type === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.ERC721 || type === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.ERC1155;
}
function isNFT(token) {
    return isNftTokenType(token.type);
}


}),
"../../packages/common/src/utils/nfts/metadataParser.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  parseAttributes: () => (parseAttributes),
  parseRawAttributesString: () => (parseRawAttributesString)
});
const parseAttributes = (attributes)=>{
    return Array.isArray(attributes) ? parseRawAttributesArray(attributes) : attributes === 'string' ? parseRawAttributesString(attributes) : attributes;
};
const parseRawAttributesString = (rawAttributesString)=>{
    if (rawAttributesString === undefined) return [];
    const rawAttributes = rawAttributesString ? JSON.parse(rawAttributesString) : [];
    const parsedAttributes = rawAttributes.reduce((acc, attr)=>[
            ...acc,
            {
                name: attr.name ?? attr.trait_type,
                value: attr.value
            }
        ], []);
    return parsedAttributes;
};
const parseRawAttributesArray = (rawAttributesArray)=>{
    if (rawAttributesArray === undefined) return [];
    const parsedAttributes = rawAttributesArray.map((attr)=>{
        return {
            name: attr.name ?? attr.trait_type,
            value: attr.value
        };
    });
    return parsedAttributes;
};


}),
"../../packages/common/src/utils/nfts/nftTypesUtils.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  is1155Response: () => (is1155Response),
  isErc721TokenBalance: () => (isErc721TokenBalance)
});
/* ESM import */var _avalabs_glacier_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/@avalabs/glacier-sdk/esm/generated/models/Erc721TokenBalance.js");

function is1155Response(item) {
    return Object.keys(item.value).includes('erc1155TokenBalances');
}
function isErc721TokenBalance(token) {
    return token.ercType === _avalabs_glacier_sdk__WEBPACK_IMPORTED_MODULE_0__.Erc721TokenBalance.ercType.ERC_721;
}


}),
"../../packages/common/src/utils/noop.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  noop: () => (noop)
});
const noop = ()=>{
// noop for testing puposes
};


}),
"../../packages/common/src/utils/normalizeBalance.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  normalizeBalance: () => (normalizeBalance)
});
/* ESM import */var _avalabs_core_utils_sdk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/@avalabs/core-utils-sdk/esm/bnToBig.js");
/* ESM import */var bn_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/bn.js/lib/bn.js");
/* ESM import */var bn_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bn_js__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var _bigintToBig__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/common/src/utils/bigintToBig.ts");



function normalizeBalance(balance, decimals) {
    if ((0,bn_js__WEBPACK_IMPORTED_MODULE_0__.isBN)(balance)) {
        return (0,_avalabs_core_utils_sdk__WEBPACK_IMPORTED_MODULE_2__.bnToBig)(balance, decimals);
    }
    if (typeof balance === 'bigint') {
        return (0,_bigintToBig__WEBPACK_IMPORTED_MODULE_1__.bigintToBig)(balance, decimals);
    }
    return balance;
}


}),
"../../packages/common/src/utils/number.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  toPrecision: () => (toPrecision)
});
function toPrecision(num, precision = 4) {
    const [leftSide, rightSide] = num.split('.');
    if (!rightSide) {
        return leftSide;
    }
    return `${leftSide}.${rightSide.substring(0, precision)}`;
}


}),
"../../packages/common/src/utils/object.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  hasDefined: () => (hasDefined),
  omitUndefined: () => (omitUndefined)
});
const omitUndefined = (obj)=>Object.fromEntries(Object.entries(obj).filter(([, value])=>value !== undefined));
const hasDefined = (obj, key)=>{
    return obj[key] !== undefined;
};


}),
"../../packages/common/src/utils/onPageActivated.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  onPageActivated: () => (onPageActivated)
});
/**
 * Pre-rendering causes some issues with the way the extension
 * communicates with dApps. Namely, when the page is first pre-rendered,
 * content scripts are injected before the page is activated
 * by the user. Then when the user finally activates it, the connection
 * gets lost.
 *
 * This util is useful for only running certain actions after the page
 * has been activated by the user. This ensures that the connection
 * remains active.
 *
 * References:
 * https://developer.chrome.com/blog/prerender-pages/
 * https://developer.chrome.com/blog/extension-instantnav/#lifecyle
 */ function onPageActivated(callback) {
    // eslint-disable-next-line
    // @ts-ignore
    if (document.prerendering) {
        document.addEventListener('prerenderingchange', callback, {
            once: true
        });
    } else {
        callback();
    }
}


}),
"../../packages/common/src/utils/openFullscreenTab.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  openFullscreenTab: () => (openFullscreenTab)
});
/* ESM import */var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/webextension-polyfill/dist/browser-polyfill.js");
/* ESM import */var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__);

const openFullscreenTab = (url)=>{
    webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__.tabs.create({
        url: `/fullscreen.html#/${url}`
    });
};


}),
"../../packages/common/src/utils/promiseResolver.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  resolve: () => (resolve)
});
function resolve(promise) {
    try {
        return promise.then((res)=>[
                res,
                null
            ]).catch((err)=>[
                null,
                err
            ]);
    } catch (err) {
        return Promise.resolve([
            null,
            err
        ]);
    }
}


}),
"../../packages/common/src/utils/seedPhraseValidation.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isPhraseCorrect: () => (isPhraseCorrect),
  wordPhraseLength: () => (wordPhraseLength)
});
/* ESM import */var ethers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/ethers/lib.esm/wallet/mnemonic.js");

const wordPhraseLength = [
    12,
    18,
    24
];
const isPhraseCorrect = (phrase)=>{
    const trimmed = phrase.trim().split(/\s+/g);
    return wordPhraseLength.includes(trimmed.length) && ethers__WEBPACK_IMPORTED_MODULE_0__.Mnemonic.isValidMnemonic(trimmed.join(' ').toLowerCase());
};


}),
"../../packages/common/src/utils/seedless/authenticateWithApple.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  authenticateWithApple: () => (authenticateWithApple)
});
/* ESM import */var _launchWebAuthFlow__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/common/src/utils/seedless/launchWebAuthFlow.ts");

async function authenticateWithApple() {
    const clientId = "org.avalabs.corewallet.extension";
    const redirectUrl = "https://seedless-api.avax-test.network/v1/redirectAppleAuth";
    // This is the base URL that the Core Seedless API should redirect to after receiving the data from Apple.
    const baseUrl = 'https://' + chrome.runtime.id + '.chromiumapp.org';
    if (!clientId || !redirectUrl) {
        throw new Error('Apple OAuth not configured');
    }
    const url = new URL('https://appleid.apple.com/auth/authorize');
    url.searchParams.set('client_id', clientId);
    url.searchParams.set('nonce', crypto.randomUUID());
    url.searchParams.set('response_type', 'code id_token');
    url.searchParams.set('state', baseUrl);
    url.searchParams.set('redirect_uri', redirectUrl);
    url.searchParams.set('scope', 'email');
    // "form_post" response mode is forced since we request user's email in "scope".
    // Reference: https://developer.apple.com/documentation/sign_in_with_apple/request_an_authorization_to_the_sign_in_with_apple_server#query-parameters
    url.searchParams.set('response_mode', 'form_post');
    return (0,_launchWebAuthFlow__WEBPACK_IMPORTED_MODULE_0__.launchWebAuthFlow)(url);
}


}),
"../../packages/common/src/utils/seedless/authenticateWithGoogle.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  authenticateWithGoogle: () => (authenticateWithGoogle)
});
/* ESM import */var _launchWebAuthFlow__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/common/src/utils/seedless/launchWebAuthFlow.ts");

async function authenticateWithGoogle() {
    const manifest = chrome.runtime.getManifest();
    if (!manifest.oauth2 || !manifest.oauth2.scopes) {
        throw new Error('Oauth not configured');
    }
    const redirectUri = 'https://' + chrome.runtime.id + '.chromiumapp.org';
    const url = new URL('https://accounts.google.com/o/oauth2/auth');
    url.searchParams.set('client_id', manifest.oauth2.client_id);
    url.searchParams.set('response_type', 'id_token');
    url.searchParams.set('redirect_uri', redirectUri);
    url.searchParams.set('scope', manifest.oauth2.scopes.join(' '));
    return (0,_launchWebAuthFlow__WEBPACK_IMPORTED_MODULE_0__.launchWebAuthFlow)(url);
}


}),
"../../packages/common/src/utils/seedless/fido/convertRequest.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  convertRequest: () => (convertRequest)
});
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var _encoding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/common/src/utils/encoding.ts");
/* provided dependency */ var Buffer = __webpack_require__("../../node_modules/buffer/index.js")["Buffer"];


function convertRequest(endpoint, options) {
    if (endpoint === _core_types__WEBPACK_IMPORTED_MODULE_0__.FIDOApiEndpoint.Authenticate || endpoint === _core_types__WEBPACK_IMPORTED_MODULE_0__.FIDOApiEndpoint.Register) {
        return JSON.stringify(options, convertBuffersToBase64Url);
    }
    throw new Error('Unsupported FIDO identity endpoint');
}
function convertBuffersToBase64Url(key, value) {
    const el = this[key];
    if (el instanceof Buffer) {
        return (0,_encoding__WEBPACK_IMPORTED_MODULE_1__.bufferToBase64Url)(el);
    }
    return value;
}


}),
"../../packages/common/src/utils/seedless/fido/convertResult.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  convertResult: () => (convertResult)
});
/* ESM import */var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/lodash/lodash.js");
/* ESM import */var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var _encoding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/common/src/utils/encoding.ts");


// Result properties that are known to contain Base64Url-encoded
// values. We need these values to be converted back to Buffers
// to satisfy CubeSigner's SDK.
const KNOWN_BUFFER_PROPERTIES = [
    'rawId',
    'response.clientDataJSON',
    'response.attestationObject',
    'response.authenticatorData',
    'response.signature',
    'response.userHandle'
];
function convertResult(result) {
    const copy = (0,lodash__WEBPACK_IMPORTED_MODULE_0__.cloneDeep)(result);
    KNOWN_BUFFER_PROPERTIES.forEach((path)=>{
        // If object does not contain given property or it is nullish,
        // do nothing with it.
        const currentValue = (0,lodash__WEBPACK_IMPORTED_MODULE_0__.get)(copy, path);
        if (currentValue === undefined || currentValue === null) {
            return;
        }
        // Otherwise, convert it to Buffer
        (0,lodash__WEBPACK_IMPORTED_MODULE_0__.update)(copy, path, _encoding__WEBPACK_IMPORTED_MODULE_1__.base64UrlToBuffer);
    });
    return copy;
}


}),
"../../packages/common/src/utils/seedless/fido/index.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  convertRequest: () => (/* reexport safe */ _convertRequest__WEBPACK_IMPORTED_MODULE_0__.convertRequest),
  convertResult: () => (/* reexport safe */ _convertResult__WEBPACK_IMPORTED_MODULE_1__.convertResult),
  isExportRequestOutdated: () => (/* reexport safe */ _seedless_utils__WEBPACK_IMPORTED_MODULE_4__.isExportRequestOutdated),
  isFailedMfaError: () => (/* reexport safe */ _seedless_utils__WEBPACK_IMPORTED_MODULE_4__.isFailedMfaError),
  isTokenExpiredError: () => (/* reexport safe */ _seedless_utils__WEBPACK_IMPORTED_MODULE_4__.isTokenExpiredError),
  isValidResponse: () => (/* reexport safe */ _validateResponse__WEBPACK_IMPORTED_MODULE_2__.isValidResponse),
  launchFidoFlow: () => (/* reexport safe */ _launchFidoFlow__WEBPACK_IMPORTED_MODULE_3__.launchFidoFlow),
  mapMfasToRecoveryMethods: () => (/* reexport safe */ _seedless_utils__WEBPACK_IMPORTED_MODULE_4__.mapMfasToRecoveryMethods)
});
/* ESM import */var _convertRequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/common/src/utils/seedless/fido/convertRequest.ts");
/* ESM import */var _convertResult__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/common/src/utils/seedless/fido/convertResult.ts");
/* ESM import */var _validateResponse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/common/src/utils/seedless/fido/validateResponse.ts");
/* ESM import */var _launchFidoFlow__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../packages/common/src/utils/seedless/fido/launchFidoFlow.ts");
/* ESM import */var _seedless_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../packages/common/src/utils/seedless/fido/seedless-utils.ts");







}),
"../../packages/common/src/utils/seedless/fido/launchFidoFlow.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  launchFidoFlow: () => (launchFidoFlow)
});
/* ESM import */var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/webextension-polyfill/dist/browser-polyfill.js");
/* ESM import */var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var _convertRequest__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/common/src/utils/seedless/fido/convertRequest.ts");
/* ESM import */var _convertResult__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../packages/common/src/utils/seedless/fido/convertResult.ts");
/* ESM import */var _validateResponse__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../packages/common/src/utils/seedless/fido/validateResponse.ts");
/* ESM import */var _extensionUtils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../packages/common/src/utils/extensionUtils.ts");






async function launchFidoFlow(endpoint, challenge, keyType) {
    const baseUrl = "https://identity.core.app";
    if (!baseUrl) {
        throw new Error('FIDO Identity Service URL is not configured');
    }
    const url = new URL(baseUrl);
    url.pathname = endpoint;
    url.searchParams.set('responseMode', 'post-message');
    url.searchParams.set('origin', location.origin);
    url.searchParams.set('options', (0,_convertRequest__WEBPACK_IMPORTED_MODULE_2__.convertRequest)(endpoint, challenge));
    if (endpoint === _core_types__WEBPACK_IMPORTED_MODULE_1__.FIDOApiEndpoint.Register) {
        if (!keyType) {
            throw new Error('FIDO key type not defined for registration request');
        }
        url.searchParams.set('keyType', keyType);
    }
    const popup = await (0,_extensionUtils__WEBPACK_IMPORTED_MODULE_5__.openPopup)({
        url: url.toString(),
        setSelfAsOpener: true,
        right: 70
    });
    // Make sure to close the popup if the calling window gets closed
    window.addEventListener('beforeunload', ()=>{
        if (popup?.id) {
            webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__.windows.remove(popup.id).catch(()=>{
            // Do nothing, we can't really do anything about it and
            // the most likely reason of error is that it was already closed.
            });
        }
    });
    return new Promise((resolve, reject)=>{
        // Throw error if popup is closed prematurely
        const closeSubscription = popup.removed.subscribe(()=>{
            reject(new Error('Popup closed'));
        });
        const onResponse = (event)=>{
            if (event.origin !== url.origin) {
                return;
            }
            const response = JSON.parse(event.data);
            if ((0,_validateResponse__WEBPACK_IMPORTED_MODULE_4__.isValidResponse)(endpoint, response)) {
                // Popup can now be closed safely
                closeSubscription.unsubscribe();
                if (popup?.id) {
                    webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__.windows.remove(popup.id).then(()=>{
                    // Do nothing, we can't really do anything about it and
                    // the most likely reason of error is that it was already closed.
                    });
                }
                window.removeEventListener('message', onResponse);
                resolve((0,_convertResult__WEBPACK_IMPORTED_MODULE_3__.convertResult)(response));
            }
        };
        window.addEventListener('message', onResponse);
    });
}


}),
"../../packages/common/src/utils/seedless/fido/seedless-utils.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isExportRequestOutdated: () => (isExportRequestOutdated),
  isFailedMfaError: () => (isFailedMfaError),
  isTokenExpiredError: () => (isTokenExpiredError),
  mapMfasToRecoveryMethods: () => (mapMfasToRecoveryMethods)
});
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/types/src/index.ts");

const isTokenExpiredError = (err)=>{
    // When CubeSigner's refresh token (or the entire session) expires,
    // we get a 403 Forbidden error on attempted API calls.
    return err instanceof Error && 'status' in err && err.status === 403;
};
const isFailedMfaError = (err)=>{
    // When CubeSigner's refresh token (or the entire session) expires,
    // we get a 403 Forbidden error on attempted API calls.
    return err instanceof Error && 'status' in err && err.status === 403 && err.message.includes('Invalid');
};
const isExportRequestOutdated = (exportRequest)=>exportRequest.exp_epoch <= Date.now() / 1000;
const mapMfasToRecoveryMethods = (method)=>{
    if (method.type === 'fido') {
        return {
            ...method,
            type: _core_types__WEBPACK_IMPORTED_MODULE_0__.MfaRequestType.Fido
        };
    }
    return {
        type: _core_types__WEBPACK_IMPORTED_MODULE_0__.MfaRequestType.Totp
    };
};


}),
"../../packages/common/src/utils/seedless/fido/validateResponse.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isValidResponse: () => (isValidResponse)
});
/* ESM import */var joi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/joi/dist/joi-browser.min.js");
/* ESM import */var joi__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(joi__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var ___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/common/src/index.ts");



const REGISTRATION_RESPONSE_SCHEMA = joi__WEBPACK_IMPORTED_MODULE_0___default().object({
    id: joi__WEBPACK_IMPORTED_MODULE_0___default().string().required(),
    rawId: joi__WEBPACK_IMPORTED_MODULE_0___default().string().required(),
    type: joi__WEBPACK_IMPORTED_MODULE_0___default().string(),
    response: joi__WEBPACK_IMPORTED_MODULE_0___default().object({
        attestationObject: joi__WEBPACK_IMPORTED_MODULE_0___default().string().required(),
        clientDataJSON: joi__WEBPACK_IMPORTED_MODULE_0___default().string().required()
    }).unknown(true)
}).unknown(true);
const AUTHENTICATION_RESPONSE_SCHEMA = joi__WEBPACK_IMPORTED_MODULE_0___default().object({
    id: joi__WEBPACK_IMPORTED_MODULE_0___default().string().required(),
    rawId: joi__WEBPACK_IMPORTED_MODULE_0___default().string().required(),
    type: joi__WEBPACK_IMPORTED_MODULE_0___default().string(),
    response: joi__WEBPACK_IMPORTED_MODULE_0___default().object({
        authenticatorData: joi__WEBPACK_IMPORTED_MODULE_0___default().string().required(),
        clientDataJSON: joi__WEBPACK_IMPORTED_MODULE_0___default().string().required(),
        signature: joi__WEBPACK_IMPORTED_MODULE_0___default().string().required(),
        userHandle: joi__WEBPACK_IMPORTED_MODULE_0___default().string().allow(null)
    }).unknown(true)
}).unknown(true);
const isValidResponse = (endpoint, response)=>{
    // The schemas allow additional properties to be defined,
    // but we care about the ones that are specified in the schema.
    const schema = endpoint === _core_types__WEBPACK_IMPORTED_MODULE_1__.FIDOApiEndpoint.Authenticate ? AUTHENTICATION_RESPONSE_SCHEMA : REGISTRATION_RESPONSE_SCHEMA;
    const { error } = schema.validate(response);
    if (error) {
        const messages = error.details.map(({ message })=>message);
        ___WEBPACK_IMPORTED_MODULE_2__.Monitoring.sentryCaptureException(new Error(`Invalid Identity API response: ${messages.join(' | ')}`), ___WEBPACK_IMPORTED_MODULE_2__.Monitoring.SentryExceptionTypes.SEEDLESS);
        return false;
    }
    return true;
};


}),
"../../packages/common/src/utils/seedless/getCubeSigner.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getEnv: () => (getEnv),
  getOidcClient: () => (getOidcClient),
  getOrgId: () => (getOrgId),
  getSignerSession: () => (getSignerSession),
  requestOidcAuth: () => (requestOidcAuth)
});
/* ESM import */var _cubist_labs_cubesigner_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/@cubist-labs/cubesigner-sdk/dist/esm/src/index.js");

/**
 * Get the CubeSigner deployment environment to use.
 *
 * Defaults to 'gamma' but can be overridden via the 'CUBESIGNER_ENV' environment variable.
 *
 * @return {EnvInterface} CubeSigner deployment environment
 */ function getEnv() {
    return _cubist_labs_cubesigner_sdk__WEBPACK_IMPORTED_MODULE_0__.envs["gamma" || 0];
}
/**
 * Get the ID of the CubeSigner organization to use.
 *
 * Must be set via the 'SEEDLESS_ORG_ID' environment variable.
 *
 * @return {string} The ID of the organization in CubeSigner.
 */ function getOrgId() {
    const orgId = "Org#abc03353-9320-4bf4-bc25-d1b687bf2b2c";
    if (!orgId) {
        throw new Error('SEEDLESS_ORG_ID must be set');
    }
    return orgId;
}
/**
 * Create a CubeSigner API client for methods that require OIDC authorization.
 *
 * This client can be used to:
 * - obtain a proof of identity (see {@link OidcClient.identityProve})
 * - obtain a full CubeSigner session (see {@link OidcClient.sessionCreate})
 *
 * @param {string} oidcToken The OIDC token to include in 'Authorization' header.
 * @return {OidcClient} CubeSigner API client for methods that require OIDC authorization.
 */ function getOidcClient(oidcToken) {
    return new _cubist_labs_cubesigner_sdk__WEBPACK_IMPORTED_MODULE_0__.OidcClient(getEnv(), getOrgId(), oidcToken);
}
/**
 * Create a CubeSigner API client for methods that require signer session authorization.
 *
 * @param {NewSessionResponse | SignerSessionData} sessionInfo Signer session information
 *  (e.g., obtained via {@link OidcClient.sessionCreate}) from which to construct the client.
 * @return {SignerSession} CubeSigner API client.
 */ async function getSignerSession(sessionInfo) {
    return new _cubist_labs_cubesigner_sdk__WEBPACK_IMPORTED_MODULE_0__.SignerSession(await _cubist_labs_cubesigner_sdk__WEBPACK_IMPORTED_MODULE_0__.SignerSessionManager.createFromSessionInfo(getEnv(), getOrgId(), sessionInfo));
}
/**
 * Request a new CubeSigner session by logging in via OIDC.
 *
 * The new session can be passed to {@link getSignerSession} to create a CubeSigner API client.
 *
 * @param {string} oidcToken The OIDC token to include in 'Authorization' header.
 * @param {MfaReceipt | undefined} mfaReceipt Optional MFA receipt to attach to this request.
 * @return {CubeSignerResponse<SignerSessionData>} The response. If MFA for this request is
 *   required, {@link CubeSignerResponse.requiresMfa()} is set to true and
 *   {@link CubeSignerResponse.mfaSessionInfo()} contains a temporary session that allows
 *   access to the CubeSigner MFA endpoints; otherwise, {@link CubeSignerResponse.data()}
 *   contains the new session information.
 */ async function requestOidcAuth(oidcToken, mfaReceipt) {
    const oidcClient = getOidcClient(oidcToken);
    return await oidcClient.sessionCreate([
        'sign:*',
        'manage:*',
        'export:*'
    ], {
        // How long singing with a particular token works from the token creation
        auth_lifetime: 5 * 60,
        // How long a refresh token is valid, the user has to unlock Core in this timeframe otherwise they will have to re-login
        // Sessions expire either if the session lifetime expires or if a refresh token expires before a new one is generated
        refresh_lifetime: 90 * 24 * 60 * 60,
        // How long till the user absolutely must sign in again
        session_lifetime: 1 * 365 * 24 * 60 * 60
    }, mfaReceipt);
}


}),
"../../packages/common/src/utils/seedless/getOidcTokenProvider.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getOidcTokenProvider: () => (getOidcTokenProvider)
});
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var _authenticateWithGoogle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/common/src/utils/seedless/authenticateWithGoogle.ts");
/* ESM import */var _authenticateWithApple__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/common/src/utils/seedless/authenticateWithApple.ts");



const SUPPORTED_PROVIDERS = {
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.SeedlessAuthProvider.Google]: _authenticateWithGoogle__WEBPACK_IMPORTED_MODULE_1__.authenticateWithGoogle,
    [_core_types__WEBPACK_IMPORTED_MODULE_0__.SeedlessAuthProvider.Apple]: _authenticateWithApple__WEBPACK_IMPORTED_MODULE_2__.authenticateWithApple
};
const getOidcTokenProvider = (authProvider)=>{
    if (!authProvider || !SUPPORTED_PROVIDERS[authProvider]) {
        throw new Error(`Unsupported provider: ${authProvider || 'unknown'}`);
    }
    return SUPPORTED_PROVIDERS[authProvider];
};


}),
"../../packages/common/src/utils/seedless/getSignerToken.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getSignerToken: () => (getSignerToken)
});
/* ESM import */var _cubist_labs_cubesigner_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/@cubist-labs/cubesigner-sdk/dist/esm/src/index.js");

const getSignerToken = async (oidcAuthResponse)=>{
    const sessionInfo = oidcAuthResponse.data();
    const sessionMgr = await _cubist_labs_cubesigner_sdk__WEBPACK_IMPORTED_MODULE_0__.SignerSessionManager.createFromSessionInfo(_cubist_labs_cubesigner_sdk__WEBPACK_IMPORTED_MODULE_0__.envs["gamma" || 0], "Org#abc03353-9320-4bf4-bc25-d1b687bf2b2c" || 0, sessionInfo);
    return sessionMgr.storage.retrieve();
};


}),
"../../packages/common/src/utils/seedless/launchWebAuthFlow.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  launchWebAuthFlow: () => (launchWebAuthFlow)
});
function launchWebAuthFlow(url) {
    return new Promise((resolve, reject)=>{
        chrome.identity.launchWebAuthFlow({
            url: url.toString(),
            interactive: true
        }, (redirectedTo)=>{
            if (!redirectedTo) {
                reject(new Error('Redirect url is undefined'));
                return;
            }
            if (chrome.runtime.lastError) {
                // Example: Authorization page could not be loaded.
                return reject(chrome.runtime.lastError);
            }
            const parsedUrl = new URL(redirectedTo);
            const params = new URLSearchParams(parsedUrl.hash.slice(1)); // hash contains a query string
            const idToken = params.get('id_token');
            if (!idToken) {
                throw new Error('no id token');
            }
            resolve(idToken);
        });
    });
}


}),
"../../packages/common/src/utils/seedless/seedlessEventFilters.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isSeedlessMfaChoiceRequest: () => (isSeedlessMfaChoiceRequest),
  isSeedlessMfaEvent: () => (isSeedlessMfaEvent),
  isSeedlessMfaMethodsUpdatedEvent: () => (isSeedlessMfaMethodsUpdatedEvent),
  isSeedlessTokenEvent: () => (isSeedlessTokenEvent)
});
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/types/src/index.ts");

function isSeedlessTokenEvent(evt) {
    return evt?.name === _core_types__WEBPACK_IMPORTED_MODULE_0__.SeedlessEvents.TokenExpired || evt?.name === _core_types__WEBPACK_IMPORTED_MODULE_0__.SeedlessEvents.TokenRefreshed;
}
function isSeedlessMfaEvent(evt) {
    return evt?.name === _core_types__WEBPACK_IMPORTED_MODULE_0__.SeedlessEvents.MfaRequest || evt?.name === _core_types__WEBPACK_IMPORTED_MODULE_0__.SeedlessEvents.MfaFailure || evt?.name === _core_types__WEBPACK_IMPORTED_MODULE_0__.SeedlessEvents.MfaClear;
}
function isSeedlessMfaMethodsUpdatedEvent(evt) {
    return evt?.name === _core_types__WEBPACK_IMPORTED_MODULE_0__.SeedlessEvents.MfaMethodsUpdated;
}
function isSeedlessMfaChoiceRequest(evt) {
    return evt?.name === _core_types__WEBPACK_IMPORTED_MODULE_0__.SeedlessEvents.MfaChoiceRequest;
}


}),
"../../packages/common/src/utils/send/btcSendUtils.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  buildBtcTx: () => (buildBtcTx),
  getBtcInputUtxos: () => (getBtcInputUtxos),
  validateBtcSend: () => (validateBtcSend)
});
/* ESM import */var _avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../node_modules/@avalabs/core-wallets-sdk/esm/BitcoinVM/utils/createTransferTx.js");
/* ESM import */var _avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/@avalabs/core-wallets-sdk/esm/BitcoinVM/utils/getMaxTransferAmount.js");
/* ESM import */var coinselect_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/coinselect/utils.js");
/* ESM import */var coinselect_utils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(coinselect_utils__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var _isBtcAddressInNetwork__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/common/src/utils/isBtcAddressInNetwork.ts");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/types/src/index.ts");




const getBtcInputUtxos = async (provider, token, feeRate)=>{
    const utxos = await provider.getScriptsForUtxos(token.utxos ?? []);
    if (typeof feeRate === 'number') {
        // Filter out UTXOs that would not be used with the current fee rate,
        // that is those for which fee to use the UTXO would be higher than its value.
        return utxos.filter((utxo)=>{
            const utxoFee = (0,coinselect_utils__WEBPACK_IMPORTED_MODULE_0__.inputBytes)(utxo) * feeRate;
            return utxoFee < utxo.value;
        });
    }
    return utxos;
};
const buildBtcTx = async (from, provider, { amount, address, token, feeRate })=>{
    const utxos = await getBtcInputUtxos(provider, token);
    return (0,_avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_3__.createTransferTx)(address, from, amount, feeRate, utxos, provider.getNetwork());
};
const validateBtcSend = (from, { address, amount, feeRate }, utxos, isMainnet)=>{
    if (!address) {
        return _core_types__WEBPACK_IMPORTED_MODULE_2__.SendErrorMessage.ADDRESS_REQUIRED;
    }
    if (!feeRate) {
        return _core_types__WEBPACK_IMPORTED_MODULE_2__.SendErrorMessage.INVALID_NETWORK_FEE;
    }
    if (!(0,_isBtcAddressInNetwork__WEBPACK_IMPORTED_MODULE_1__.isBtcAddressInNetwork)(address, isMainnet)) {
        return _core_types__WEBPACK_IMPORTED_MODULE_2__.SendErrorMessage.INVALID_ADDRESS;
    }
    if (!amount || amount <= 0) {
        return _core_types__WEBPACK_IMPORTED_MODULE_2__.SendErrorMessage.AMOUNT_REQUIRED;
    }
    const maxTransferAmount = Math.max((0,_avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_4__.getMaxTransferAmount)(utxos, address, from, feeRate), 0);
    if (amount > maxTransferAmount) {
        return _core_types__WEBPACK_IMPORTED_MODULE_2__.SendErrorMessage.INSUFFICIENT_BALANCE;
    }
    return null;
};


}),
"../../packages/common/src/utils/shouldUseWalletConnectApproval.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  shouldUseWalletConnectApproval: () => (shouldUseWalletConnectApproval)
});
/* ESM import */var _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/@avalabs/core-chains-sdk/esm/models.js");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/types/src/index.ts");


function shouldUseWalletConnectApproval(network, account) {
    // We are not supporting CoreEth as a network
    if (network.vmName === _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_1__.NetworkVMType.CoreEth) {
        return false;
    }
    if (account.type === _core_types__WEBPACK_IMPORTED_MODULE_0__.AccountType.FIREBLOCKS || account.type === _core_types__WEBPACK_IMPORTED_MODULE_0__.AccountType.WALLET_CONNECT) {
        return network.vmName === _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_1__.NetworkVMType.BITCOIN ? false : true;
    }
    return false;
}


}),
"../../packages/common/src/utils/stringToBigint.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  stringToBigint: () => (stringToBigint)
});
/* ESM import */var big_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/big.js/big.mjs");

function stringToBigint(value, decimals) {
    const big = (0,big_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value.replace(/,/gi, ''));
    const tens = (0,big_js__WEBPACK_IMPORTED_MODULE_0__["default"])(10).pow(decimals);
    const mult = big.times(tens);
    const rawStr = mult.toFixed(0, 0);
    return BigInt(rawStr);
}


}),
"../../packages/common/src/utils/stripAddressPrefix.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  stripAddressPrefix: () => (stripAddressPrefix)
});
/**
 * Removes the C-, P- and X- prefix from the provided address.
 */ const stripAddressPrefix = (address)=>address.replace(/^[XPC]-/, '');


}),
"../../packages/common/src/utils/sumByProperty.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  sumByProperty: () => (sumByProperty)
});
/* ESM import */var _logging__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/common/src/utils/logging.ts");

const sumByProperty = (values, key)=>{
    return values.reduce((acc, curr, index)=>{
        const value = curr[key];
        if (typeof value === 'number') {
            return acc + value;
        }
        // Log out instances when provided list contains non-numeric values
        (0,_logging__WEBPACK_IMPORTED_MODULE_0__.formatAndLog)(`sumByProperty(): object at index ${index} was ignored. Property ${String(key)} does not contain a number:`, curr);
        return acc;
    }, 0);
};


}),
"../../packages/common/src/utils/truncateAddress.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  truncateAddress: () => (truncateAddress)
});
const truncateAddress = (address, size = 6)=>{
    const firstChunk = address.substring(0, size);
    const lastChunk = address.substr(-(size / 2));
    return `${firstChunk}...${lastChunk}`;
};


}),
"../../packages/common/src/utils/typeUtils.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isFulfilled: () => (isFulfilled),
  isNotNullish: () => (isNotNullish)
});
const isFulfilled = (x)=>x.status === 'fulfilled';
const isNotNullish = (x)=>x != null;


}),
"../../packages/common/src/utils/updateIfDifferent.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  updateIfDifferent: () => (updateIfDifferent)
});
/* ESM import */var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/lodash/lodash.js");
/* ESM import */var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

/**
 * @param newValue New value being proposed to the state setter
 * @returns A callback to be passed to React's SetState functions.
 * 					It will only update the state if the actual value (not the reference) change.
 * 					Use it to prevent unnecessary re-renders.
 */ function updateIfDifferent(setStateFn, newState) {
    setStateFn((prevState)=>{
        if (newState === prevState) {
            return prevState;
        }
        if ((0,lodash__WEBPACK_IMPORTED_MODULE_0__.isEqual)(prevState, newState)) {
            return prevState;
        }
        return newState;
    });
}


}),
"../../packages/common/src/utils/walletConnectEventFilters.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isSessionPermissionsMismatchEvent: () => (isSessionPermissionsMismatchEvent),
  isUriGeneratedEvent: () => (isUriGeneratedEvent),
  isWalletConnectEvent: () => (isWalletConnectEvent)
});
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/types/src/index.ts");

function isUriGeneratedEvent(evt) {
    return evt?.name === _core_types__WEBPACK_IMPORTED_MODULE_0__.WalletConnectEvent.UriGenerated;
}
function isSessionPermissionsMismatchEvent(evt) {
    return evt?.name === _core_types__WEBPACK_IMPORTED_MODULE_0__.WalletConnectEvent.SessionPermissionsMismatch;
}
function isWalletConnectEvent(evt) {
    const wcEvents = Object.values(_core_types__WEBPACK_IMPORTED_MODULE_0__.WalletConnectEvent);
    return wcEvents.includes(evt?.name);
}


}),
"../../packages/messaging/src/AbstractConnection.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  AbstractConnection: () => (AbstractConnection)
});
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var eth_rpc_errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/eth-rpc-errors/dist/index.js");
/* ESM import */var events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/events/events.js");
/* ESM import */var events__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_2__);
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../packages/common/src/index.ts");
/* ESM import */var _models__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../packages/messaging/src/models.ts");





class AbstractConnection extends events__WEBPACK_IMPORTED_MODULE_2__.EventEmitter {
    #concurrentRequestLimit;
    #listenCallback;
    #waitingMap;
    constructor(concurrentRequestLimit = 1000){
        super(), this.#waitingMap = new Map(), this.connect = async (listenCallback)=>{
            this.#listenCallback = listenCallback;
            await this._connect();
        }, this.message = (data)=>{
            this._send({
                type: 'message',
                data
            });
        }, this.deferredResponse = (id, res, err)=>{
            this._send({
                type: 'response',
                id,
                res,
                err
            });
        }, this.request = (data)=>{
            if (this.#waitingMap.size >= this.#concurrentRequestLimit) {
                throw eth_rpc_errors__WEBPACK_IMPORTED_MODULE_1__.ethErrors.rpc.limitExceeded();
            }
            const id = crypto.randomUUID();
            const requestData = {
                ...data,
                params: {
                    ...data.params,
                    request: {
                        ...data.params.request,
                        id
                    }
                },
                id
            };
            return new Promise((resolve, reject)=>{
                this.#waitingMap.set(requestData.id, {
                    data: requestData,
                    resolve,
                    reject
                });
                this._send({
                    type: 'request',
                    id: requestData.id,
                    data: requestData
                });
            });
        }, this.dispose = ()=>{
            for (const request of this.#waitingMap.values()){
                request.reject(eth_rpc_errors__WEBPACK_IMPORTED_MODULE_1__.ethErrors.provider.userRejectedRequest());
            }
            this.#waitingMap.clear();
            this._disconnect();
        }, this.#onResponse = async ({ id, res, err })=>{
            const request = this.#waitingMap.get(id);
            if (!request) {
                return;
            }
            const { resolve, reject } = request;
            this.#waitingMap.delete(id);
            if (err) {
                reject(err);
                return;
            }
            resolve(res);
        }, this.onMessage = (message)=>{
            if (message.type === 'message') {
                this.emit('message', message.data);
            } else if ((0,_models__WEBPACK_IMPORTED_MODULE_4__.isResponse)(message)) {
                this.#onResponse(message);
            } else if ((0,_models__WEBPACK_IMPORTED_MODULE_4__.isRequest)(message)) {
                this.#onRequest(message);
            }
        }, this.#onRequest = async ({ id, data })=>{
            if (!this.#listenCallback) {
                return;
            }
            let res, err;
            try {
                res = await this.#listenCallback({
                    ...data
                });
            } catch (e) {
                err = {
                    message: e.message
                };
                if ((0,_core_common__WEBPACK_IMPORTED_MODULE_3__.isDevelopment)()) {
                    err.stack = e.stack;
                }
                if (e.code !== undefined) {
                    err.code = e.code;
                }
                if (e.data !== undefined) {
                    err.data = e.data;
                }
            }
            if (res === _core_types__WEBPACK_IMPORTED_MODULE_0__.DEFERRED_RESPONSE) {
                // the response is going to be returned as a message
                // i.e. after the user has approved / rejected the request
                return;
            }
            this._send({
                type: 'response',
                id,
                res,
                err
            });
        };
        this.#concurrentRequestLimit = concurrentRequestLimit;
    }
    #onResponse;
    #onRequest;
}


}),
"../../packages/messaging/src/AutoPairingPostMessageConnection.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  AutoPairingPostMessageConnection: () => (AutoPairingPostMessageConnection)
});
/* ESM import */var _AbstractConnection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/messaging/src/AbstractConnection.ts");

const CHANNEL_BROADCAST_EVENT = 'initialize-post-message-connection';
const CHANNEL_BROADCAST_REQUEST_EVENT = 'initialize-post-message-connection-request';
class AutoPairingPostMessageConnection extends _AbstractConnection__WEBPACK_IMPORTED_MODULE_0__.AbstractConnection {
    #channel;
    #connectionId;
    #connectionReadyPromiseResolve;
    #connectionReadyPromiseReject;
    constructor(isConnectionLeader, concurrentRequestLimit = 1000){
        super(concurrentRequestLimit), this.isConnectionLeader = isConnectionLeader, this.#broadcastConnectionId = ()=>{
            const broadcast = ()=>{
                this.#channel.postMessage({
                    message: {
                        type: CHANNEL_BROADCAST_EVENT,
                        connectionId: this.#connectionId
                    }
                }, window.location.origin);
            };
            // boadcast connection id immediately when connection is initialized
            broadcast();
            // listen for requests from clients initialised after the connection leader
            this.#channel.addEventListener('message', (event)=>{
                if (event.origin !== window.location.origin || !event.data?.message || event.data.message.type !== CHANNEL_BROADCAST_REQUEST_EVENT) {
                    return;
                }
                broadcast();
            });
        }, this.#listenForConnectionNameBroadcast = ()=>{
            const handler = (event)=>{
                if (event.origin !== window.location.origin || !event.data?.message || event.data.message.type !== CHANNEL_BROADCAST_EVENT) {
                    return;
                }
                this.#connectionId = event.data.message.connectionId;
                if (this.#connectionReadyPromiseResolve) {
                    this.#connectionReadyPromiseResolve();
                }
            };
            this.#channel.addEventListener('message', handler);
            // request connection leader to announce the channel ID
            this.#channel.postMessage({
                message: {
                    type: CHANNEL_BROADCAST_REQUEST_EVENT
                }
            }, window.location.origin);
        }, this.#messageListener = ({ origin, data: { connectionId, message } })=>{
            // ignore cross origin messages and messages from other connections
            if (!this.#connectionId || origin === 'null' || origin !== window.location.origin || connectionId !== this.#connectionId || !message) {
                return;
            }
            return this.onMessage(message);
        }, this._connect = async ()=>{
            this.#channel.addEventListener('message', this.#messageListener);
            if (this.#connectionId) {
                return;
            }
            // wait for connection ID if not already set
            return new Promise((res, reject)=>{
                this.#connectionReadyPromiseResolve = res;
                this.#connectionReadyPromiseReject = reject;
            });
        }, this._disconnect = ()=>{
            // reject pending connection if we have not received any connection ID till destruction
            if (!this.#connectionId && this.#connectionReadyPromiseReject) {
                this.#connectionReadyPromiseReject();
            }
            this.#channel.removeEventListener('message', this.#messageListener);
        }, this._send = (message)=>{
            if (!this.#connectionId) {
                return;
            }
            this.#channel.postMessage({
                connectionId: this.#connectionId,
                message
            });
        };
        this.#channel = window;
        if (this.isConnectionLeader) {
            this.#connectionId = `PM-Connection-${crypto.randomUUID()}`;
            this.#broadcastConnectionId();
        } else {
            this.#listenForConnectionNameBroadcast();
        }
    }
    #broadcastConnectionId;
    #listenForConnectionNameBroadcast;
    #messageListener;
}


}),
"../../packages/messaging/src/PortConnection.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  PortConnection: () => (PortConnection)
});
/* ESM import */var _AbstractConnection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/messaging/src/AbstractConnection.ts");
/* ESM import */var _serialization__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/messaging/src/serialization/index.ts");


class PortConnection extends _AbstractConnection__WEBPACK_IMPORTED_MODULE_0__.AbstractConnection {
    #port;
    constructor(port, concurrentRequestLimit = 1000){
        super(concurrentRequestLimit), this._connect = async ()=>{
            this.#port.onMessage.addListener((message)=>{
                const deserialised = (0,_serialization__WEBPACK_IMPORTED_MODULE_1__.deserializeFromJSON)(message);
                return deserialised && this.onMessage(deserialised);
            });
        }, this._disconnect = ()=>{
            this.#port.disconnect();
        }, this._send = (message)=>{
            // we need to serialize some values that the browser does not know how to handle,
            // but still pass the message forward as an object (not a JSON string)
            this.#port.postMessage((0,_serialization__WEBPACK_IMPORTED_MODULE_1__.serializeToJSON)(message));
        };
        this.#port = port;
        this.#port.onDisconnect.addListener(()=>{
            this.emit('disconnect');
        });
    }
}


}),
"../../packages/messaging/src/index.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  AbstractConnection: () => (/* reexport safe */ _AbstractConnection__WEBPACK_IMPORTED_MODULE_3__.AbstractConnection),
  AutoPairingPostMessageConnection: () => (/* reexport safe */ _AutoPairingPostMessageConnection__WEBPACK_IMPORTED_MODULE_1__.AutoPairingPostMessageConnection),
  PortConnection: () => (/* reexport safe */ _PortConnection__WEBPACK_IMPORTED_MODULE_0__.PortConnection),
  deserializeFromJSON: () => (/* reexport safe */ _serialization__WEBPACK_IMPORTED_MODULE_4__.deserializeFromJSON),
  isRequest: () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_2__.isRequest),
  isResponse: () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_2__.isResponse),
  serializeToJSON: () => (/* reexport safe */ _serialization__WEBPACK_IMPORTED_MODULE_4__.serializeToJSON)
});
/* ESM import */var _PortConnection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/messaging/src/PortConnection.ts");
/* ESM import */var _AutoPairingPostMessageConnection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/messaging/src/AutoPairingPostMessageConnection.ts");
/* ESM import */var _models__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/messaging/src/models.ts");
/* ESM import */var _AbstractConnection__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../packages/messaging/src/AbstractConnection.ts");
/* ESM import */var _serialization__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../packages/messaging/src/serialization/index.ts");







}),
"../../packages/messaging/src/models.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isRequest: () => (isRequest),
  isResponse: () => (isResponse)
});
const isResponse = (message)=>{
    return message.type === 'response';
};
const isRequest = (message)=>{
    return message.type === 'request';
};


}),
"../../packages/messaging/src/serialization/deserialize.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  deserializeFromJSON: () => (deserializeFromJSON)
});
/* ESM import */var big_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/big.js/big.mjs");
/* ESM import */var bn_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/bn.js/lib/bn.js");
/* ESM import */var bn_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(bn_js__WEBPACK_IMPORTED_MODULE_1__);
/* provided dependency */ var Buffer = __webpack_require__("../../node_modules/buffer/index.js")["Buffer"];


/**
 * Deserialize complex numbers like `Big`, `BN`, etc. back to their original
 * form after they were serialized with `serializeToJSON`.
 *
 * For example, `{ type: 'BN', value: '100_000_000_000' }` is converted to
 * `new BN(100_000_000_000)`
 */ function deserializeFromJSON(value) {
    if (value === undefined) {
        return value;
    }
    return JSON.parse(value, function(_, element) {
        if (isDeserializable(element)) {
            return deserializeValue(element);
        }
        return element;
    });
}
function deserializeValue({ type, value }) {
    switch(type){
        case 'Big':
            return new big_js__WEBPACK_IMPORTED_MODULE_0__["default"](value);
        case 'BN':
            return new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(value);
        case 'BigNumber':
        case 'BigInt':
            return BigInt(value);
        case 'Buffer':
            return Buffer.from(value);
        default:
            throw new Error('unhandled serialization');
    }
}
function isDeserializable(obj) {
    return typeof obj === 'object' && obj != null && 'type' in obj && 'value' in obj && Object.keys(obj).length === 2;
}


}),
"../../packages/messaging/src/serialization/index.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  deserializeFromJSON: () => (/* reexport safe */ _deserialize__WEBPACK_IMPORTED_MODULE_0__.deserializeFromJSON),
  serializeToJSON: () => (/* reexport safe */ _serialize__WEBPACK_IMPORTED_MODULE_1__.serializeToJSON)
});
/* ESM import */var _deserialize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/messaging/src/serialization/deserialize.ts");
/* ESM import */var _serialize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/messaging/src/serialization/serialize.ts");




}),
"../../packages/messaging/src/serialization/serialize.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  serializeToJSON: () => (serializeToJSON)
});
/* ESM import */var big_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/big.js/big.mjs");
/* ESM import */var bn_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/bn.js/lib/bn.js");
/* ESM import */var bn_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(bn_js__WEBPACK_IMPORTED_MODULE_1__);
/* provided dependency */ var Buffer = __webpack_require__("../../node_modules/buffer/index.js")["Buffer"];


/**
 * Prepare data for JSON serialization by converting complex numbers like `Big`,
 * `BN`, etc. into a format that can be auto-deserialized with
 * `deserializeFromJSON`.
 *
 * For example, `new BN(100_000_000_000)` is converted to
 * `{ type: 'BN', value: '100_000_000_000' }`
 */ function serializeToJSON(value) {
    return JSON.stringify(value, function(key, stringifiedElement) {
        const element = this[key];
        if (isSerializable(element)) {
            return serializeValue(element);
        }
        return stringifiedElement;
    });
}
function serializeValue(value) {
    if (value instanceof big_js__WEBPACK_IMPORTED_MODULE_0__["default"]) {
        return {
            type: 'Big',
            value: value.toFixed()
        };
    } else if (value instanceof (bn_js__WEBPACK_IMPORTED_MODULE_1___default())) {
        return {
            type: 'BN',
            value: value.toString()
        };
    } else if (typeof value === 'bigint') {
        return {
            type: 'BigInt',
            value: value.toString()
        };
    } else if (value instanceof Buffer) {
        return {
            type: 'Buffer',
            value: Array.from(value)
        };
    } else {
        throw new Error('unhandled serialization');
    }
}
function isSerializable(value) {
    return value instanceof big_js__WEBPACK_IMPORTED_MODULE_0__["default"] || value instanceof (bn_js__WEBPACK_IMPORTED_MODULE_1___default()) || typeof value === 'bigint' || value instanceof Buffer;
}


}),
"../../packages/types/src/account.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  ACCOUNTS_STORAGE_KEY: () => (ACCOUNTS_STORAGE_KEY),
  AccountType: () => (AccountType),
  AccountsEvents: () => (AccountsEvents),
  GetPrivateKeyErrorTypes: () => (GetPrivateKeyErrorTypes),
  IMPORTED_ACCOUNTS_WALLET_ID: () => (IMPORTED_ACCOUNTS_WALLET_ID),
  IMPORT_TYPE_TO_ACCOUNT_TYPE_MAP: () => (IMPORT_TYPE_TO_ACCOUNT_TYPE_MAP),
  ImportType: () => (ImportType),
  PrivateKeyChain: () => (PrivateKeyChain)
});
var AccountType = /*#__PURE__*/ function(AccountType) {
    AccountType["PRIMARY"] = "primary";
    AccountType["IMPORTED"] = "imported";
    AccountType["WALLET_CONNECT"] = "walletConnect";
    AccountType["FIREBLOCKS"] = "fireblocks";
    return AccountType;
}({});
var ImportType = /*#__PURE__*/ function(ImportType) {
    ImportType["PRIVATE_KEY"] = "privateKey";
    ImportType["WALLET_CONNECT"] = "walletConnect";
    ImportType["FIREBLOCKS"] = "fireblocks";
    return ImportType;
}({});
const IMPORT_TYPE_TO_ACCOUNT_TYPE_MAP = {
    ["privateKey"]: "imported",
    ["walletConnect"]: "walletConnect",
    ["fireblocks"]: "fireblocks"
};
const ACCOUNTS_STORAGE_KEY = 'accounts';
var AccountsEvents = /*#__PURE__*/ function(AccountsEvents) {
    AccountsEvents["ACCOUNTS_UPDATED"] = "accounts-updated";
    AccountsEvents["ACTIVE_ACCOUNT_CHANGED"] = "active-account-changed";
    return AccountsEvents;
}({});
var GetPrivateKeyErrorTypes = /*#__PURE__*/ function(GetPrivateKeyErrorTypes) {
    GetPrivateKeyErrorTypes["Password"] = "password";
    GetPrivateKeyErrorTypes["Type"] = "type";
    GetPrivateKeyErrorTypes["Chain"] = "chain";
    GetPrivateKeyErrorTypes["DerivePath"] = "derivePath";
    GetPrivateKeyErrorTypes["Mnemonic"] = "mnemonic";
    return GetPrivateKeyErrorTypes;
}({});
var PrivateKeyChain = /*#__PURE__*/ function(PrivateKeyChain) {
    PrivateKeyChain["C"] = "C";
    PrivateKeyChain["XP"] = "XP";
    return PrivateKeyChain;
}({});
const IMPORTED_ACCOUNTS_WALLET_ID = '__IMPORTED__';


}),
"../../packages/types/src/actions.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  ACTIONS_STORAGE_KEY: () => (ACTIONS_STORAGE_KEY),
  ActionCompletedEventType: () => (ActionCompletedEventType),
  ActionStatus: () => (ActionStatus),
  ActionType: () => (ActionType),
  ActionsEvent: () => (ActionsEvent),
  buildActionForRequest: () => (buildActionForRequest),
  isBatchApprovalAction: () => (isBatchApprovalAction)
});
var ActionStatus = /*#__PURE__*/ function(ActionStatus) {
    // user has been shown the UI and we are waiting on approval
    ActionStatus["PENDING"] = "pending";
    // user has approved and we are waiting on the background to confirm
    ActionStatus["SUBMITTING"] = "submitting";
    // tx was submitted and returned successful
    ActionStatus["COMPLETED"] = "completed";
    ActionStatus["ERROR"] = "error";
    ActionStatus["ERROR_USER_CANCELED"] = "error-user-canceled";
    return ActionStatus;
}({});
var ActionType = /*#__PURE__*/ function(ActionType) {
    ActionType["Single"] = "single";
    ActionType["Batch"] = "batch";
    return ActionType;
}({});
const ACTIONS_STORAGE_KEY = 'actions';
var ActionsEvent = /*#__PURE__*/ function(ActionsEvent) {
    ActionsEvent["ACTION_UPDATED"] = "action-updated";
    ActionsEvent["ACTION_COMPLETED"] = "action-completed";
    return ActionsEvent;
}({});
var ActionCompletedEventType = /*#__PURE__*/ function(ActionCompletedEventType) {
    ActionCompletedEventType["COMPLETED"] = "completed";
    ActionCompletedEventType["ERROR"] = "error";
    return ActionCompletedEventType;
}({});
const isBatchApprovalAction = (action)=>action && action.type === "batch";
const buildActionForRequest = (request, params)=>{
    return {
        ...request,
        type: "single",
        scope: params.scope,
        displayData: params.displayData
    };
};


}),
"../../packages/types/src/analytics.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  ANALYTICS_SESSION_KEY: () => (ANALYTICS_SESSION_KEY),
  ANALYTICS_STORAGE_KEY: () => (ANALYTICS_STORAGE_KEY),
  ANALYTICS_UNENCRYPTED_STORAGE_KEY: () => (ANALYTICS_UNENCRYPTED_STORAGE_KEY),
  AnalyticsEvents: () => (AnalyticsEvents),
  BlockchainId: () => (BlockchainId)
});
var AnalyticsEvents = /*#__PURE__*/ function(AnalyticsEvents) {
    AnalyticsEvents["ANALYTICS_STATE_UPDATED"] = "AnalyticsEvents: ANALYTICS_STATE_UPDATED";
    return AnalyticsEvents;
}({});
const ANALYTICS_STORAGE_KEY = 'ANALYTICS_STORAGE_KEY';
const ANALYTICS_UNENCRYPTED_STORAGE_KEY = 'ANALYTICS_UNENCRYPTED_STORAGE_KEY';
const ANALYTICS_SESSION_KEY = 'ANALYTICS_SESSION_KEY';
//Based on CAIP-2
var BlockchainId = /*#__PURE__*/ function(BlockchainId) {
    BlockchainId["P_CHAIN"] = "avax:11111111111111111111111111111111LpoYY";
    BlockchainId["P_CHAIN_TESTNET"] = "avax:fuji-11111111111111111111111111111111LpoYY";
    BlockchainId["X_CHAIN"] = "avax:2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM";
    BlockchainId["X_CHAIN_TESTNET"] = "avax:2JVSBoinj9C2J33VntvzYtVJNZdN2NKiwwKjcumHUWEb5DbBrm";
    return BlockchainId;
}({});


}),
"../../packages/types/src/app-check.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  Algorithm: () => (Algorithm),
  ChallengeTypes: () => (ChallengeTypes)
});
var Algorithm = /*#__PURE__*/ function(Algorithm) {
    Algorithm["SHA256"] = "SHA256";
    Algorithm["SHA512"] = "SHA512";
    return Algorithm;
}({});
var ChallengeTypes = /*#__PURE__*/ function(ChallengeTypes) {
    ChallengeTypes["BASIC"] = "BASIC";
    ChallengeTypes["REVERSE"] = "REVERSE";
    return ChallengeTypes;
}({});


}),
"../../packages/types/src/approvals.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  ApprovalEvent: () => (ApprovalEvent)
});
var ApprovalEvent = /*#__PURE__*/ function(ApprovalEvent) {
    ApprovalEvent["ApprovalRequested"] = "approval-requested";
    return ApprovalEvent;
}({});


}),
"../../packages/types/src/balance.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  BALANCES_CACHE_KEY: () => (BALANCES_CACHE_KEY),
  BalanceServiceEvents: () => (BalanceServiceEvents),
  GlacierUnhealthyError: () => (GlacierUnhealthyError),
  getUnconfirmedBalanceInCurrency: () => (getUnconfirmedBalanceInCurrency),
  hasUnconfirmedBTCBalance: () => (hasUnconfirmedBTCBalance),
  isAvaxWithUnavailableBalance: () => (isAvaxWithUnavailableBalance)
});
const BALANCES_CACHE_KEY = 'balances-service-cache';
var BalanceServiceEvents = /*#__PURE__*/ function(BalanceServiceEvents) {
    BalanceServiceEvents["UPDATED"] = "BalanceServiceEvents:updated";
    return BalanceServiceEvents;
}({});
class GlacierUnhealthyError extends Error {
    constructor(...args){
        super(...args), this.message = 'Glacier is unhealthy. Try again later.';
    }
}
const hasUnconfirmedBTCBalance = (token)=>Boolean(token && 'unconfirmedBalance' in token);
const isAvaxWithUnavailableBalance = (token)=>Boolean(token && 'balancePerType' in token && token.available && token.available !== token.balance);
const getUnconfirmedBalanceInCurrency = (token)=>{
    if (!token || !hasUnconfirmedBTCBalance(token)) {
        return undefined;
    }
    return token.unconfirmedBalanceInCurrency;
};


}),
"../../packages/types/src/bridge.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  BRIDGE_STORAGE_KEY: () => (BRIDGE_STORAGE_KEY),
  BridgeEvents: () => (BridgeEvents),
  DefaultBridgeState: () => (DefaultBridgeState),
  TransferEventType: () => (TransferEventType)
});
var TransferEventType = /*#__PURE__*/ function(TransferEventType) {
    TransferEventType["WRAP_STATUS"] = "wrap_status";
    TransferEventType["TX_HASH"] = "tx_hash";
    return TransferEventType;
}({});
var BridgeEvents = /*#__PURE__*/ function(BridgeEvents) {
    BridgeEvents["BRIDGE_CONFIG_UPDATE_EVENT"] = "BRIDGE_CONFIG_UPDATE_EVENT";
    BridgeEvents["BRIDGE_STATE_UPDATE_EVENT"] = "BRIDGE_STATE_UPDATE_EVENT";
    BridgeEvents["BRIDGE_TRANSFER_EVENT"] = "BRIDGE_TRANSFER_EVENT";
    return BridgeEvents;
}({});
const BRIDGE_STORAGE_KEY = 'bridge';
const DefaultBridgeState = {
    bridgeTransactions: {},
    isDevEnv: false
};


}),
"../../packages/types/src/contacts.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  CONTACTS_STORAGE_KEY: () => (CONTACTS_STORAGE_KEY),
  ContactsEvents: () => (ContactsEvents)
});
var ContactsEvents = /*#__PURE__*/ function(ContactsEvents) {
    ContactsEvents["CONTACTS_UPDATED"] = "ContactsEvents: CONTACTS_UPDATED";
    return ContactsEvents;
}({});
const CONTACTS_STORAGE_KEY = 'contacts';


}),
"../../packages/types/src/currency.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  CURRENCY_EXCHANGE_RATES_REFRESH_INTERVAL: () => (CURRENCY_EXCHANGE_RATES_REFRESH_INTERVAL),
  CURRENCY_EXCHANGE_RATES_STORAGE_KEY: () => (CURRENCY_EXCHANGE_RATES_STORAGE_KEY),
  CURRENCY_EXCHANGE_RATES_URL: () => (CURRENCY_EXCHANGE_RATES_URL),
  CurrencyServiceEvents: () => (CurrencyServiceEvents),
  ExchangeRatesSchema: () => (ExchangeRatesSchema)
});
/* ESM import */var joi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/joi/dist/joi-browser.min.js");
/* ESM import */var joi__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(joi__WEBPACK_IMPORTED_MODULE_0__);

const ExchangeRatesSchema = joi__WEBPACK_IMPORTED_MODULE_0___default().object({
    date: joi__WEBPACK_IMPORTED_MODULE_0___default().string().required(),
    usd: joi__WEBPACK_IMPORTED_MODULE_0___default().object().pattern(joi__WEBPACK_IMPORTED_MODULE_0___default().string(), joi__WEBPACK_IMPORTED_MODULE_0___default().number())
});
var CurrencyServiceEvents = /*#__PURE__*/ function(CurrencyServiceEvents) {
    CurrencyServiceEvents["RatesUpdated"] = "CurrencyService::RatesUpdated";
    return CurrencyServiceEvents;
}({});
// We're only loading exchange rates for USD at the moment.
const CURRENCY_EXCHANGE_RATES_URL = 'https://cdn.jsdelivr.net/npm/@fawazahmed0/currency-api@latest/v1/currencies/usd.min.json';
// We refresh data every one hour.
// No need to do it more often, since the above API updates the exchange rates daily.
const CURRENCY_EXCHANGE_RATES_REFRESH_INTERVAL = 1000 * 60 * 60;
const CURRENCY_EXCHANGE_RATES_STORAGE_KEY = 'currency-exchange-rates';


}),
"../../packages/types/src/dapp-connection.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  DAppProviderRequest: () => (DAppProviderRequest),
  DAppRequestHandler: () => (DAppRequestHandler),
  Web3Event: () => (Web3Event)
});
var DAppProviderRequest = /*#__PURE__*/ function(DAppProviderRequest) {
    DAppProviderRequest["DOMAIN_METADATA_METHOD"] = "avalanche_sendDomainMetadata";
    DAppProviderRequest["CONNECT_METHOD"] = "eth_requestAccounts";
    DAppProviderRequest["INIT_DAPP_STATE"] = "avalanche_getProviderState";
    DAppProviderRequest["ETH_ACCOUNTS"] = "eth_accounts";
    DAppProviderRequest["WALLET_PERMISSIONS"] = "wallet_requestPermissions";
    DAppProviderRequest["WALLET_GET_PERMISSIONS"] = "wallet_getPermissions";
    DAppProviderRequest["WALLET_ADD_CHAIN"] = "wallet_addEthereumChain";
    DAppProviderRequest["WALLET_GET_CHAIN"] = "wallet_getEthereumChain";
    DAppProviderRequest["WALLET_SWITCH_ETHEREUM_CHAIN"] = "wallet_switchEthereumChain";
    DAppProviderRequest["WALLET_WATCH_ASSET"] = "wallet_watchAsset";
    DAppProviderRequest["PERSONAL_EC_RECOVER"] = "personal_ecRecover";
    DAppProviderRequest["PERSONAL_SIGN"] = "personal_sign";
    DAppProviderRequest["ETH_SIGN_TYPED_DATA_V4"] = "eth_signTypedData_v4";
    DAppProviderRequest["ETH_SIGN_TYPED_DATA_V3"] = "eth_signTypedData_v3";
    DAppProviderRequest["ETH_SIGN_TYPED_DATA_V1"] = "eth_signTypedData_v1";
    DAppProviderRequest["ETH_SIGN_TYPED_DATA"] = "eth_signTypedData";
    DAppProviderRequest["ETH_SIGN"] = "eth_sign";
    DAppProviderRequest["AVALANCHE_GET_CONTACTS"] = "avalanche_getContacts";
    DAppProviderRequest["AVALANCHE_CREATE_CONTACT"] = "avalanche_createContact";
    DAppProviderRequest["AVALANCHE_UPDATE_CONTACT"] = "avalanche_updateContact";
    DAppProviderRequest["AVALANCHE_REMOVE_CONTACT"] = "avalanche_removeContact";
    DAppProviderRequest["AVALANCHE_GET_ACCOUNTS"] = "avalanche_getAccounts";
    DAppProviderRequest["AVALANCHE_GET_ADDRESSES_IN_RANGE"] = "avalanche_getAddressesInRange";
    DAppProviderRequest["AVALANCHE_GET_BRIDGE_STATE"] = "avalanche_getBridgeState";
    DAppProviderRequest["AVALANCHE_SELECT_WALLET"] = "avalanche_selectWallet";
    DAppProviderRequest["AVALANCHE_SET_DEVELOPER_MODE"] = "avalanche_setDeveloperMode";
    DAppProviderRequest["ACCOUNT_SELECT"] = "avalanche_selectAccount";
    DAppProviderRequest["ACCOUNT_RENAME"] = "avalanche_renameAccount";
    DAppProviderRequest["ACCOUNTS_DELETE"] = "avalanche_deleteAccounts";
    DAppProviderRequest["AVALANCHE_GET_ACCOUNT_PUB_KEY"] = "avalanche_getAccountPubKey";
    DAppProviderRequest["AVALANCHE_SEND_TRANSACTION"] = "avalanche_sendTransaction";
    DAppProviderRequest["AVALANCHE_SIGN_TRANSACTION"] = "avalanche_signTransaction";
    DAppProviderRequest["AVALANCHE_SIGN_MESSAGE"] = "avalanche_signMessage";
    DAppProviderRequest["BITCOIN_SEND_TRANSACTION"] = "bitcoin_sendTransaction";
    DAppProviderRequest["WALLET_RENAME"] = "avalanche_renameWallet";
    DAppProviderRequest["WALLET_ADD_NETWORK"] = "wallet_addNetwork";
    DAppProviderRequest["WALLET_GET_PUBKEY"] = "wallet_getPublicKey";
    DAppProviderRequest["WALLET_CONNECT"] = "wallet_requestAccountPermission";
    return DAppProviderRequest;
}({});
var Web3Event = /*#__PURE__*/ function(Web3Event) {
    // https://eips.ethereum.org/EIPS/eip-1193#connect-1
    // not emitted as a separate event from the background, the inpage provider handles it
    // based on the `avalanche_getProviderState` and the `chainChanged` event
    Web3Event["CONNECT"] = "connect";
    // https://eips.ethereum.org/EIPS/eip-1193#disconnect-1
    Web3Event["DISCONNECT"] = "disconnect";
    // https://eips.ethereum.org/EIPS/eip-1193#accountschanged-1
    Web3Event["ACCOUNTS_CHANGED"] = "accountsChanged";
    Web3Event["ACCOUNTS_CHANGED_CA"] = "accountsChangedCA";
    // https://eips.ethereum.org/EIPS/eip-1193#chainchanged-1
    Web3Event["CHAIN_CHANGED"] = "chainChanged";
    return Web3Event;
}({});
class DAppRequestHandler {
}


}),
"../../packages/types/src/debank.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  DebankProtocolDetailTypes: () => (DebankProtocolDetailTypes)
});
// The API reference:
// https://docs.open.debank.com/en/reference/api-models/portfolioitemobject
var DebankProtocolDetailTypes = /*#__PURE__*/ function(DebankProtocolDetailTypes) {
    DebankProtocolDetailTypes["COMMON"] = "common";
    DebankProtocolDetailTypes["LOCKED"] = "locked";
    DebankProtocolDetailTypes["LENDING"] = "lending";
    DebankProtocolDetailTypes["LEVERAGED_FARMING"] = "leveraged_farming";
    DebankProtocolDetailTypes["VESTING"] = "vesting";
    DebankProtocolDetailTypes["REWARD"] = "reward";
    DebankProtocolDetailTypes["OPTIONS_SELLER"] = "options_seller";
    DebankProtocolDetailTypes["OPTIONS_BUYER"] = "options_buyer";
    DebankProtocolDetailTypes["PERPETUALS"] = "perpetuals";
    DebankProtocolDetailTypes["INSURANCE_SELLER"] = "insurance_seller";
    DebankProtocolDetailTypes["INSURANCE_BUYER"] = "insurance_buyer";
    return DebankProtocolDetailTypes;
}({});


}),
"../../packages/types/src/defi.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  DefiItemType: () => (DefiItemType),
  DefiServiceEvents: () => (DefiServiceEvents)
});
var DefiItemType = /*#__PURE__*/ function(DefiItemType) {
    DefiItemType["Common"] = "common";
    DefiItemType["Locked"] = "locked";
    DefiItemType["Lending"] = "lending";
    DefiItemType["Vesting"] = "vesting";
    DefiItemType["Reward"] = "reward";
    DefiItemType["InsuranceBuyer"] = "insurance_buyer";
    DefiItemType["Perpetual"] = "perpetual";
    return DefiItemType;
}({});
var DefiServiceEvents = /*#__PURE__*/ function(DefiServiceEvents) {
    DefiServiceEvents["PortfolioUpdated"] = "DefiService::PortfolioUpdated";
    return DefiServiceEvents;
}({});


}),
"../../packages/types/src/domain-metadata.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);



}),
"../../packages/types/src/error.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  AccountError: () => (AccountError),
  CommonError: () => (CommonError),
  FireblocksErrorCode: () => (FireblocksErrorCode),
  KeystoreError: () => (KeystoreError),
  LedgerError: () => (LedgerError),
  RpcErrorCode: () => (RpcErrorCode),
  SecretsError: () => (SecretsError),
  SeedlessError: () => (SeedlessError),
  SeedphraseImportError: () => (SeedphraseImportError),
  SwapErrorCode: () => (SwapErrorCode),
  UnifiedBridgeError: () => (UnifiedBridgeError),
  VMModuleError: () => (VMModuleError)
});
var KeystoreError = /*#__PURE__*/ function(KeystoreError) {
    KeystoreError["InvalidPassword"] = "keystore-invalid-password";
    KeystoreError["InvalidVersion"] = "keystore-invalid-version";
    KeystoreError["NoNewWallets"] = "keystore-no-new-wallets";
    KeystoreError["Unknown"] = "keystore-unknown-error";
    return KeystoreError;
}({});
var SwapErrorCode = /*#__PURE__*/ function(SwapErrorCode) {
    SwapErrorCode["ClientNotInitialized"] = "client-not-initialized";
    SwapErrorCode["MissingParams"] = "missing-params";
    SwapErrorCode["CannotFetchAllowance"] = "cannot-fetch-allowance";
    SwapErrorCode["MissingContractMethod"] = "missing-contract-method";
    SwapErrorCode["ApiError"] = "api-error";
    SwapErrorCode["UnknownSpender"] = "unknown-spender";
    SwapErrorCode["UnexpectedApiResponse"] = "unexpected-api-response";
    SwapErrorCode["CannotBuildTx"] = "cannot-build-tx";
    SwapErrorCode["InvalidParams"] = "invalid-params";
    SwapErrorCode["FeatureDisabled"] = "feature-disabled";
    SwapErrorCode["TransactionError"] = "transaction-error";
    return SwapErrorCode;
}({});
var VMModuleError = /*#__PURE__*/ function(VMModuleError) {
    VMModuleError["UnsupportedChain"] = "unsupported-chain";
    VMModuleError["UnsupportedMethod"] = "unsupported-method";
    VMModuleError["UnsupportedNamespace"] = "unsupported-namespace";
    VMModuleError["ModulesNotInitialized"] = "modules-not-initialized";
    return VMModuleError;
}({});
var SeedphraseImportError = /*#__PURE__*/ function(SeedphraseImportError) {
    SeedphraseImportError["ExistingSeedphrase"] = "existing-seedphrase";
    return SeedphraseImportError;
}({});
var UnifiedBridgeError = /*#__PURE__*/ function(UnifiedBridgeError) {
    UnifiedBridgeError["UnknownAsset"] = "unknown-asset";
    UnifiedBridgeError["AmountLessThanFee"] = "amount-less-than-fee";
    UnifiedBridgeError["InvalidFee"] = "invalid-fee";
    UnifiedBridgeError["UnsupportedNetwork"] = "unsupported-network";
    UnifiedBridgeError["InvalidTxPayload"] = "invalid-tx-payload";
    UnifiedBridgeError["NonBitcoinAccount"] = "non-bitcoin-account";
    return UnifiedBridgeError;
}({});
var SeedlessError = /*#__PURE__*/ function(SeedlessError) {
    SeedlessError["NoMfaMethodAvailable"] = "no-mfa-method-available";
    return SeedlessError;
}({});
var FireblocksErrorCode = /*#__PURE__*/ function(FireblocksErrorCode) {
    FireblocksErrorCode["Failed"] = "fireblocks-tx-failed";
    FireblocksErrorCode["Blocked"] = "fireblocks-tx-blocked";
    FireblocksErrorCode["Cancelled"] = "fireblocks-tx-cancelled";
    FireblocksErrorCode["Rejected"] = "fireblocks-tx-rejected";
    FireblocksErrorCode["Timeout"] = "fireblocks-tx-timeout";
    FireblocksErrorCode["Unknown"] = "fireblocks-tx-unknown-error";
    return FireblocksErrorCode;
}({});
var CommonError = /*#__PURE__*/ function(CommonError) {
    CommonError["Unknown"] = "unknown";
    CommonError["UserRejected"] = "user-rejected";
    CommonError["NetworkError"] = "network-error";
    CommonError["NoActiveAccount"] = "no-active-account";
    CommonError["NoActiveNetwork"] = "no-active-network";
    CommonError["UnknownNetwork"] = "unknown-network";
    CommonError["UnknownNetworkFee"] = "unknown-network-fee";
    CommonError["RequestTimeout"] = "request-timeout";
    CommonError["MigrationFailed"] = "migration-failed";
    CommonError["ModuleManagerNotSet"] = "module-manager-not-set";
    CommonError["UnableToSign"] = "unable-to-sign";
    CommonError["UnableToEstimateGas"] = "unable-to-estimate-gas";
    CommonError["UnsupportedTokenType"] = "unsupported-token-type";
    CommonError["MismatchingProvider"] = "mismatching-provider";
    return CommonError;
}({});
var LedgerError = /*#__PURE__*/ function(LedgerError) {
    LedgerError["TransportNotFound"] = "ledger-transport-not-found";
    LedgerError["NoPublicKeyReturned"] = "ledger-no-public-key-returned";
    return LedgerError;
}({});
var SecretsError = /*#__PURE__*/ function(SecretsError) {
    SecretsError["SecretsNotFound"] = "secrets-not-found";
    SecretsError["UnsupportedSecretType"] = "unsupported-secret-type";
    SecretsError["MissingExtendedPublicKey"] = "missing-ext-pubkey";
    SecretsError["WalletAlreadyExists"] = "wallet-already-exists";
    SecretsError["PublicKeyNotFound"] = "public-key-not-found";
    SecretsError["NoAccountIndex"] = "no-account-index";
    SecretsError["DerivationPathMissing"] = "derivation-path-missing";
    SecretsError["UnknownDerivationPathFormat"] = "unknown-derivation-path-format";
    SecretsError["DerivationPathTooShort"] = "derivation-path-too-short";
    SecretsError["UnsupportedCurve"] = "unsupported-curve";
    return SecretsError;
}({});
var AccountError = /*#__PURE__*/ function(AccountError) {
    AccountError["EVMAddressNotFound"] = "evm-address-not-found";
    AccountError["BTCAddressNotFound"] = "btc-address-not-found";
    AccountError["SVMAddressNotFound"] = "svm-address-not-found";
    AccountError["NoAddressesFound"] = "no-addresses-found";
    return AccountError;
}({});
var RpcErrorCode = /*#__PURE__*/ function(RpcErrorCode) {
    RpcErrorCode["InsufficientFunds"] = "INSUFFICIENT_FUNDS";
    return RpcErrorCode;
}({});


}),
"../../packages/types/src/feature-flags.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  FeatureFlagEvents: () => (FeatureFlagEvents),
  FeatureGates: () => (FeatureGates)
});
var FeatureGates = /*#__PURE__*/ function(FeatureGates) {
    FeatureGates["EVERYTHING"] = "everything";
    FeatureGates["EVENTS"] = "events";
    FeatureGates["SWAP"] = "swap-feature";
    FeatureGates["SWAP_C_CHAIN"] = "swap-c-chain";
    FeatureGates["SWAP_ETHEREUM"] = "swap-ethereum";
    FeatureGates["SWAP_SOLANA"] = "swap-solana";
    FeatureGates["SWAP_FEES"] = "swap-fees";
    FeatureGates["SWAP_FEES_JUPITER"] = "swap-fees-jupiter";
    FeatureGates["BRIDGE"] = "bridge-feature";
    FeatureGates["BRIDGE_ETH"] = "bridge-feature-eth";
    FeatureGates["BRIDGE_BTC"] = "bridge-feature-btc";
    FeatureGates["SEND"] = "send-feature";
    FeatureGates["SEND_P_CHAIN"] = "send-p-chain";
    FeatureGates["SEND_X_CHAIN"] = "send-x-chain";
    FeatureGates["SENDTRANSACTION_CHAIN_ID_SUPPORT"] = "sendtransaction-chain-id-support-feature";
    FeatureGates["BUY"] = "buy";
    FeatureGates["BUY_MOONPAY"] = "buy-feature-moonpay";
    FeatureGates["BUY_COINBASE"] = "buy-feature-coinbase";
    FeatureGates["KEYSTONE"] = "keystone";
    FeatureGates["NFT_MARKETPLACE"] = "nft-marketplace";
    FeatureGates["BOTTOM_NAVIGATION"] = "bottom-navigation";
    FeatureGates["DEFI"] = "defi-feature";
    FeatureGates["IMPORT_WALLET_CONNECT"] = "import-wallet-connect";
    FeatureGates["IMPORT_FIREBLOCKS"] = "import-fireblocks";
    FeatureGates["IN_APP_SUPPORT_P_CHAIN"] = "in-app-support-p-chain";
    FeatureGates["IN_APP_SUPPORT_X_CHAIN"] = "in-app-support-x-chain";
    FeatureGates["SEEDLESS_ONBOARDING"] = "seedless-onboarding";
    FeatureGates["SEEDLESS_ONBOARDING_GOOGLE"] = "seedless-onboarding-google";
    FeatureGates["SEEDLESS_ONBOARDING_APPLE"] = "seedless-onboarding-apple";
    FeatureGates["SEEDLESS_MFA_PASSKEY"] = "seedless-mfa-passkey";
    FeatureGates["SEEDLESS_MFA_AUTHENTICATOR"] = "seedless-mfa-authenticator";
    FeatureGates["SEEDLESS_MFA_YUBIKEY"] = "seedless-mfa-yubikey";
    FeatureGates["SEEDLESS_SIGNING"] = "seedless-signing";
    FeatureGates["SEEEDLESS_MFA_SETTINGS"] = "seedless-mfa-settings";
    FeatureGates["SEEDLESS_OPTIONAL_MFA"] = "seedless-optional-mfa";
    FeatureGates["UNIFIED_BRIDGE_CCTP"] = "unified-bridge-cctp";
    FeatureGates["UNIFIED_BRIDGE_ICTT"] = "unified-bridge-ictt";
    FeatureGates["UNIFIED_BRIDGE_AB_EVM"] = "unified-bridge-ab-evm";
    FeatureGates["UNIFIED_BRIDGE_AB_AVA_TO_BTC"] = "unified-bridge-ab-ava-to-btc";
    FeatureGates["UNIFIED_BRIDGE_AB_BTC_TO_AVA"] = "unified-bridge-ab-btc-to-ava";
    FeatureGates["DEBANK_TRANSACTION_PARSING"] = "debank-transaction-parsing";
    FeatureGates["DEBANK_TRANSACTION_PRE_EXECUTION"] = "debank-transaction-pre-execution";
    FeatureGates["PRIMARY_ACCOUNT_REMOVAL"] = "primary-account-removal";
    FeatureGates["ADD_WALLET_WITH_SEEDPHRASE"] = "add-wallet-with-seedphrase";
    FeatureGates["ADD_WALLET_WITH_KEYSTORE_FILE"] = "add-wallet-with-keystore-file";
    FeatureGates["ADD_WALLET_WITH_LEDGER"] = "add-wallet-with-ledger";
    FeatureGates["BLOCKAID_DAPP_SCAN"] = "blockaid-dapp-scan";
    FeatureGates["BLOCKAID_DAPP_SCAN_WARNING"] = "blockaid-dapp-scan-warning";
    FeatureGates["BLOCKAID_TRANSACTION_SCAN"] = "blockaid-transaction-scan";
    FeatureGates["BLOCKAID_JSONRPC_SCAN"] = "blockaid-jsonrpc-scan";
    FeatureGates["HALLIDAY_BRIDGE_BANNER"] = "halliday-bridge-banner";
    FeatureGates["FIREBASE_CLOUD_MESSAGING"] = "firebase-cloud-messaging";
    FeatureGates["ONE_CLICK_SWAP"] = "one-click-swap";
    FeatureGates["GASLESS"] = "gasless";
    FeatureGates["SOLANA_SUPPORT"] = "solana-support";
    FeatureGates["CORE_ASSISTANT"] = "core-assistant";
    return FeatureGates;
}({});
var FeatureFlagEvents = /*#__PURE__*/ function(FeatureFlagEvents) {
    FeatureFlagEvents["FEATURE_FLAG_UPDATED"] = "FeatureFlagEvents: FEATURE_FLAG_UPDATED";
    return FeatureFlagEvents;
}({});


}),
"../../packages/types/src/firebase.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  FirebaseEvents: () => (FirebaseEvents)
});
var FirebaseEvents = /*#__PURE__*/ function(FirebaseEvents) {
    FirebaseEvents["FCM_INITIALIZED"] = "FCM_INITIALIZED";
    FirebaseEvents["FCM_TERMINATED"] = "FCM_TERMINATED";
    return FirebaseEvents;
}({});


}),
"../../packages/types/src/fireblocks.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  BTC_ACCESS_ERROR_PREFIX: () => (BTC_ACCESS_ERROR_PREFIX),
  FIREBLOCKS_REQUEST_EXPIRY: () => (FIREBLOCKS_REQUEST_EXPIRY),
  FireblocksBtcAccessError: () => (FireblocksBtcAccessError),
  FireblocksBtcAccessErrorCode: () => (FireblocksBtcAccessErrorCode),
  MAINNET_LOOKUP_ASSETS: () => (MAINNET_LOOKUP_ASSETS),
  TESTNET_LOOKUP_ASSETS: () => (TESTNET_LOOKUP_ASSETS),
  TRANSACTION_POLLING_INTERVAL_MS: () => (TRANSACTION_POLLING_INTERVAL_MS),
  TX_SUBMISSION_FAILURE_STATUSES: () => (TX_SUBMISSION_FAILURE_STATUSES)
});
/* ESM import */var fireblocks_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/fireblocks-sdk/dist/src/fireblocks-sdk.js");
/* ESM import */var fireblocks_sdk__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fireblocks_sdk__WEBPACK_IMPORTED_MODULE_0__);

const TRANSACTION_POLLING_INTERVAL_MS = 2000;
const TX_SUBMISSION_FAILURE_STATUSES = [
    fireblocks_sdk__WEBPACK_IMPORTED_MODULE_0__.TransactionStatus.BLOCKED,
    fireblocks_sdk__WEBPACK_IMPORTED_MODULE_0__.TransactionStatus.CANCELLED,
    fireblocks_sdk__WEBPACK_IMPORTED_MODULE_0__.TransactionStatus.CANCELLING,
    fireblocks_sdk__WEBPACK_IMPORTED_MODULE_0__.TransactionStatus.TIMEOUT,
    fireblocks_sdk__WEBPACK_IMPORTED_MODULE_0__.TransactionStatus.FAILED,
    fireblocks_sdk__WEBPACK_IMPORTED_MODULE_0__.TransactionStatus.REJECTED
];
const BTC_ACCESS_ERROR_PREFIX = `FireblocksBtcAccessError:`;
var FireblocksBtcAccessErrorCode = /*#__PURE__*/ function(FireblocksBtcAccessErrorCode) {
    FireblocksBtcAccessErrorCode[FireblocksBtcAccessErrorCode["VaultAccountNotFound"] = 0] = "VaultAccountNotFound";
    FireblocksBtcAccessErrorCode[FireblocksBtcAccessErrorCode["BTCAddressNotFound"] = 1] = "BTCAddressNotFound";
    FireblocksBtcAccessErrorCode[FireblocksBtcAccessErrorCode["InvalidSecretKey"] = 2] = "InvalidSecretKey";
    FireblocksBtcAccessErrorCode[FireblocksBtcAccessErrorCode["WrongAccountType"] = 3] = "WrongAccountType";
    FireblocksBtcAccessErrorCode[FireblocksBtcAccessErrorCode["SecretsNotConfigured"] = 4] = "SecretsNotConfigured";
    return FireblocksBtcAccessErrorCode;
}({});
class FireblocksBtcAccessError extends Error {
    constructor(code){
        super(`${BTC_ACCESS_ERROR_PREFIX}${code}`), this.code = code;
    }
}
// On Testnet Fireblocks workspaces, we require the connected vault to have one of those wallets created.
const TESTNET_LOOKUP_ASSETS = [
    'AVAXTEST',
    'ETH_TEST3',
    'ETH_TEST4',
    'ETH_TEST5'
];
// On Mainnet Fireblocks workspaces, we require the connected vault to have one of those wallets created.
// We need such a wallet to be created, so that we can find the vault account used to connect via WalletConnect.
// Knowing the vault account allows us to find the matching BTC address.
const MAINNET_LOOKUP_ASSETS = [
    'AVAX'
];
const FIREBLOCKS_REQUEST_EXPIRY = 120 * 60; // 2 hours, used only by WalletConnect connections


}),
"../../packages/types/src/gasless.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  GaslessEvents: () => (GaslessEvents),
  GaslessPhase: () => (GaslessPhase)
});
var GaslessEvents = /*#__PURE__*/ function(GaslessEvents) {
    GaslessEvents["SEND_OFFSCREEN_MESSAGE"] = "Gasless: SEND_OFFSCREEN_MESSAGE";
    GaslessEvents["STATE_UPDATE"] = "Gasless: STATE_UPDATE";
    return GaslessEvents;
}({});
var GaslessPhase = /*#__PURE__*/ function(GaslessPhase) {
    GaslessPhase["NOT_READY"] = "not_ready";
    GaslessPhase["NOT_ELIGIBLE"] = "not_eligible";
    GaslessPhase["READY"] = "ready";
    GaslessPhase["FUNDING_IN_PROGRESS"] = "funding_in_progress";
    GaslessPhase["FUNDED"] = "funded";
    GaslessPhase["ERROR"] = "error";
    return GaslessPhase;
}({});


}),
"../../packages/types/src/history.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);



}),
"../../packages/types/src/index.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  ACCOUNTS_STORAGE_KEY: () => (/* reexport safe */ _account__WEBPACK_IMPORTED_MODULE_0__.ACCOUNTS_STORAGE_KEY),
  ACTIONS_STORAGE_KEY: () => (/* reexport safe */ _actions__WEBPACK_IMPORTED_MODULE_1__.ACTIONS_STORAGE_KEY),
  ACTION_HANDLED_BY_MODULE: () => (/* reexport safe */ _util_types__WEBPACK_IMPORTED_MODULE_38__.ACTION_HANDLED_BY_MODULE),
  ANALYTICS_SESSION_KEY: () => (/* reexport safe */ _analytics__WEBPACK_IMPORTED_MODULE_2__.ANALYTICS_SESSION_KEY),
  ANALYTICS_STORAGE_KEY: () => (/* reexport safe */ _analytics__WEBPACK_IMPORTED_MODULE_2__.ANALYTICS_STORAGE_KEY),
  ANALYTICS_UNENCRYPTED_STORAGE_KEY: () => (/* reexport safe */ _analytics__WEBPACK_IMPORTED_MODULE_2__.ANALYTICS_UNENCRYPTED_STORAGE_KEY),
  AVALANCHE_BASE_DERIVATION_PATH: () => (/* reexport safe */ _secrets__WEBPACK_IMPORTED_MODULE_29__.AVALANCHE_BASE_DERIVATION_PATH),
  AccountError: () => (/* reexport safe */ _error__WEBPACK_IMPORTED_MODULE_13__.AccountError),
  AccountType: () => (/* reexport safe */ _account__WEBPACK_IMPORTED_MODULE_0__.AccountType),
  AccountsEvents: () => (/* reexport safe */ _account__WEBPACK_IMPORTED_MODULE_0__.AccountsEvents),
  ActionCompletedEventType: () => (/* reexport safe */ _actions__WEBPACK_IMPORTED_MODULE_1__.ActionCompletedEventType),
  ActionStatus: () => (/* reexport safe */ _actions__WEBPACK_IMPORTED_MODULE_1__.ActionStatus),
  ActionType: () => (/* reexport safe */ _actions__WEBPACK_IMPORTED_MODULE_1__.ActionType),
  ActionsEvent: () => (/* reexport safe */ _actions__WEBPACK_IMPORTED_MODULE_1__.ActionsEvent),
  AlarmsEvents: () => (/* reexport safe */ _lock__WEBPACK_IMPORTED_MODULE_22__.AlarmsEvents),
  Algorithm: () => (/* reexport safe */ _app_check__WEBPACK_IMPORTED_MODULE_3__.Algorithm),
  AnalyticsConsent: () => (/* reexport safe */ _settings__WEBPACK_IMPORTED_MODULE_32__.AnalyticsConsent),
  AnalyticsEvents: () => (/* reexport safe */ _analytics__WEBPACK_IMPORTED_MODULE_2__.AnalyticsEvents),
  ApprovalEvent: () => (/* reexport safe */ _approvals__WEBPACK_IMPORTED_MODULE_4__.ApprovalEvent),
  AuthErrorCode: () => (/* reexport safe */ _seedless__WEBPACK_IMPORTED_MODULE_30__.AuthErrorCode),
  AvalancheChainStrings: () => (/* reexport safe */ _transaction__WEBPACK_IMPORTED_MODULE_42__.AvalancheChainStrings),
  BALANCES_CACHE_KEY: () => (/* reexport safe */ _balance__WEBPACK_IMPORTED_MODULE_5__.BALANCES_CACHE_KEY),
  BRIDGE_STORAGE_KEY: () => (/* reexport safe */ _bridge__WEBPACK_IMPORTED_MODULE_6__.BRIDGE_STORAGE_KEY),
  BTC_ACCESS_ERROR_PREFIX: () => (/* reexport safe */ _fireblocks__WEBPACK_IMPORTED_MODULE_16__.BTC_ACCESS_ERROR_PREFIX),
  BalanceNotificationTypes: () => (/* reexport safe */ _notifications__WEBPACK_IMPORTED_MODULE_43__.BalanceNotificationTypes),
  BalanceServiceEvents: () => (/* reexport safe */ _balance__WEBPACK_IMPORTED_MODULE_5__.BalanceServiceEvents),
  BlockchainId: () => (/* reexport safe */ _analytics__WEBPACK_IMPORTED_MODULE_2__.BlockchainId),
  BridgeEvents: () => (/* reexport safe */ _bridge__WEBPACK_IMPORTED_MODULE_6__.BridgeEvents),
  CONTACTS_STORAGE_KEY: () => (/* reexport safe */ _contacts__WEBPACK_IMPORTED_MODULE_7__.CONTACTS_STORAGE_KEY),
  CORE_DOMAINS: () => (/* reexport safe */ _ui_connection__WEBPACK_IMPORTED_MODULE_35__.CORE_DOMAINS),
  CORE_MOBILE_WALLET_ID: () => (/* reexport safe */ _wallet_connect__WEBPACK_IMPORTED_MODULE_39__.CORE_MOBILE_WALLET_ID),
  CURRENCIES: () => (/* reexport safe */ _settings__WEBPACK_IMPORTED_MODULE_32__.CURRENCIES),
  CURRENCY_EXCHANGE_RATES_REFRESH_INTERVAL: () => (/* reexport safe */ _currency__WEBPACK_IMPORTED_MODULE_8__.CURRENCY_EXCHANGE_RATES_REFRESH_INTERVAL),
  CURRENCY_EXCHANGE_RATES_STORAGE_KEY: () => (/* reexport safe */ _currency__WEBPACK_IMPORTED_MODULE_8__.CURRENCY_EXCHANGE_RATES_STORAGE_KEY),
  CURRENCY_EXCHANGE_RATES_URL: () => (/* reexport safe */ _currency__WEBPACK_IMPORTED_MODULE_8__.CURRENCY_EXCHANGE_RATES_URL),
  ChallengeTypes: () => (/* reexport safe */ _app_check__WEBPACK_IMPORTED_MODULE_3__.ChallengeTypes),
  CommonError: () => (/* reexport safe */ _error__WEBPACK_IMPORTED_MODULE_13__.CommonError),
  ContactsEvents: () => (/* reexport safe */ _contacts__WEBPACK_IMPORTED_MODULE_7__.ContactsEvents),
  ContextContainer: () => (/* reexport safe */ _ui__WEBPACK_IMPORTED_MODULE_36__.ContextContainer),
  CoreApiError: () => (/* reexport safe */ _seedless__WEBPACK_IMPORTED_MODULE_30__.CoreApiError),
  CurrencyServiceEvents: () => (/* reexport safe */ _currency__WEBPACK_IMPORTED_MODULE_8__.CurrencyServiceEvents),
  DAppProviderRequest: () => (/* reexport safe */ _dapp_connection__WEBPACK_IMPORTED_MODULE_9__.DAppProviderRequest),
  DAppRequestHandler: () => (/* reexport safe */ _dapp_connection__WEBPACK_IMPORTED_MODULE_9__.DAppRequestHandler),
  DEFERRED_RESPONSE: () => (/* reexport safe */ _util_types__WEBPACK_IMPORTED_MODULE_38__.DEFERRED_RESPONSE),
  DebankProtocolDetailTypes: () => (/* reexport safe */ _debank__WEBPACK_IMPORTED_MODULE_10__.DebankProtocolDetailTypes),
  DefaultBridgeState: () => (/* reexport safe */ _bridge__WEBPACK_IMPORTED_MODULE_6__.DefaultBridgeState),
  DefiItemType: () => (/* reexport safe */ _defi__WEBPACK_IMPORTED_MODULE_11__.DefiItemType),
  DefiServiceEvents: () => (/* reexport safe */ _defi__WEBPACK_IMPORTED_MODULE_11__.DefiServiceEvents),
  EVM_BASE_DERIVATION_PATH: () => (/* reexport safe */ _secrets__WEBPACK_IMPORTED_MODULE_29__.EVM_BASE_DERIVATION_PATH),
  ExchangeRatesSchema: () => (/* reexport safe */ _currency__WEBPACK_IMPORTED_MODULE_8__.ExchangeRatesSchema),
  ExtensionRequest: () => (/* reexport safe */ _ui_connection__WEBPACK_IMPORTED_MODULE_35__.ExtensionRequest),
  FIDOApiEndpoint: () => (/* reexport safe */ _seedless__WEBPACK_IMPORTED_MODULE_30__.FIDOApiEndpoint),
  FIDOSteps: () => (/* reexport safe */ _seedless__WEBPACK_IMPORTED_MODULE_30__.FIDOSteps),
  FIREBLOCKS_APP_NAME: () => (/* reexport safe */ _wallet_connect__WEBPACK_IMPORTED_MODULE_39__.FIREBLOCKS_APP_NAME),
  FIREBLOCKS_REQUEST_EXPIRY: () => (/* reexport safe */ _fireblocks__WEBPACK_IMPORTED_MODULE_16__.FIREBLOCKS_REQUEST_EXPIRY),
  FeatureFlagEvents: () => (/* reexport safe */ _feature_flags__WEBPACK_IMPORTED_MODULE_14__.FeatureFlagEvents),
  FeatureGates: () => (/* reexport safe */ _feature_flags__WEBPACK_IMPORTED_MODULE_14__.FeatureGates),
  FidoDeviceType: () => (/* reexport safe */ _seedless__WEBPACK_IMPORTED_MODULE_30__.FidoDeviceType),
  FirebaseEvents: () => (/* reexport safe */ _firebase__WEBPACK_IMPORTED_MODULE_15__.FirebaseEvents),
  FireblocksBtcAccessError: () => (/* reexport safe */ _fireblocks__WEBPACK_IMPORTED_MODULE_16__.FireblocksBtcAccessError),
  FireblocksBtcAccessErrorCode: () => (/* reexport safe */ _fireblocks__WEBPACK_IMPORTED_MODULE_16__.FireblocksBtcAccessErrorCode),
  FireblocksErrorCode: () => (/* reexport safe */ _error__WEBPACK_IMPORTED_MODULE_13__.FireblocksErrorCode),
  GaslessEvents: () => (/* reexport safe */ _gasless__WEBPACK_IMPORTED_MODULE_17__.GaslessEvents),
  GaslessPhase: () => (/* reexport safe */ _gasless__WEBPACK_IMPORTED_MODULE_17__.GaslessPhase),
  GetPrivateKeyErrorTypes: () => (/* reexport safe */ _account__WEBPACK_IMPORTED_MODULE_0__.GetPrivateKeyErrorTypes),
  GlacierUnhealthyError: () => (/* reexport safe */ _balance__WEBPACK_IMPORTED_MODULE_5__.GlacierUnhealthyError),
  IMPORTED_ACCOUNTS_WALLET_ID: () => (/* reexport safe */ _account__WEBPACK_IMPORTED_MODULE_0__.IMPORTED_ACCOUNTS_WALLET_ID),
  IMPORT_TYPE_TO_ACCOUNT_TYPE_MAP: () => (/* reexport safe */ _account__WEBPACK_IMPORTED_MODULE_0__.IMPORT_TYPE_TO_ACCOUNT_TYPE_MAP),
  ImportType: () => (/* reexport safe */ _account__WEBPACK_IMPORTED_MODULE_0__.ImportType),
  KeyDerivationVersion: () => (/* reexport safe */ _storage__WEBPACK_IMPORTED_MODULE_33__.KeyDerivationVersion),
  KeyType: () => (/* reexport safe */ _seedless__WEBPACK_IMPORTED_MODULE_30__.KeyType),
  KeystoneEvent: () => (/* reexport safe */ _keystone__WEBPACK_IMPORTED_MODULE_19__.KeystoneEvent),
  KeystoreError: () => (/* reexport safe */ _error__WEBPACK_IMPORTED_MODULE_13__.KeystoreError),
  LEDGER_TX_SIZE_LIMIT_BYTES: () => (/* reexport safe */ _ledger__WEBPACK_IMPORTED_MODULE_21__.LEDGER_TX_SIZE_LIMIT_BYTES),
  LEDGER_VERSION_WARNING_WAS_CLOSED: () => (/* reexport safe */ _ledger__WEBPACK_IMPORTED_MODULE_21__.LEDGER_VERSION_WARNING_WAS_CLOSED),
  LOCK_TIMEOUT: () => (/* reexport safe */ _lock__WEBPACK_IMPORTED_MODULE_22__.LOCK_TIMEOUT),
  LanguageLinks: () => (/* reexport safe */ _settings__WEBPACK_IMPORTED_MODULE_32__.LanguageLinks),
  Languages: () => (/* reexport safe */ _settings__WEBPACK_IMPORTED_MODULE_32__.Languages),
  LedgerError: () => (/* reexport safe */ _error__WEBPACK_IMPORTED_MODULE_13__.LedgerError),
  LedgerEvent: () => (/* reexport safe */ _ledger__WEBPACK_IMPORTED_MODULE_21__.LedgerEvent),
  LockEvents: () => (/* reexport safe */ _lock__WEBPACK_IMPORTED_MODULE_22__.LockEvents),
  MAINNET_LOOKUP_ASSETS: () => (/* reexport safe */ _fireblocks__WEBPACK_IMPORTED_MODULE_16__.MAINNET_LOOKUP_ASSETS),
  MessageType: () => (/* reexport safe */ _messages__WEBPACK_IMPORTED_MODULE_23__.MessageType),
  MfaRequestType: () => (/* reexport safe */ _seedless__WEBPACK_IMPORTED_MODULE_30__.MfaRequestType),
  NAVIGATION_HISTORY_STORAGE_KEY: () => (/* reexport safe */ _navigation_history__WEBPACK_IMPORTED_MODULE_24__.NAVIGATION_HISTORY_STORAGE_KEY),
  NETWORK_LIST_STORAGE_KEY: () => (/* reexport safe */ _network__WEBPACK_IMPORTED_MODULE_26__.NETWORK_LIST_STORAGE_KEY),
  NETWORK_OVERRIDES_STORAGE_KEY: () => (/* reexport safe */ _network__WEBPACK_IMPORTED_MODULE_26__.NETWORK_OVERRIDES_STORAGE_KEY),
  NETWORK_STORAGE_KEY: () => (/* reexport safe */ _network__WEBPACK_IMPORTED_MODULE_26__.NETWORK_STORAGE_KEY),
  NetworkEvents: () => (/* reexport safe */ _network__WEBPACK_IMPORTED_MODULE_26__.NetworkEvents),
  NewsNotificationTypes: () => (/* reexport safe */ _notifications__WEBPACK_IMPORTED_MODULE_43__.NewsNotificationTypes),
  NotificationCategories: () => (/* reexport safe */ _notifications__WEBPACK_IMPORTED_MODULE_43__.NotificationCategories),
  NotificationsEvents: () => (/* reexport safe */ _notifications__WEBPACK_IMPORTED_MODULE_43__.NotificationsEvents),
  ONBOARDING_EVENT_NAMES: () => (/* reexport safe */ _onboarding__WEBPACK_IMPORTED_MODULE_27__.ONBOARDING_EVENT_NAMES),
  ONBOARDING_STORAGE_KEY: () => (/* reexport safe */ _onboarding__WEBPACK_IMPORTED_MODULE_27__.ONBOARDING_STORAGE_KEY),
  OnboardingEvents: () => (/* reexport safe */ _onboarding__WEBPACK_IMPORTED_MODULE_27__.OnboardingEvents),
  OnboardingPhase: () => (/* reexport safe */ _onboarding__WEBPACK_IMPORTED_MODULE_27__.OnboardingPhase),
  OnboardingURLs: () => (/* reexport safe */ _onboarding__WEBPACK_IMPORTED_MODULE_27__.OnboardingURLs),
  PERMISSION_STORAGE_KEY: () => (/* reexport safe */ _permissions__WEBPACK_IMPORTED_MODULE_28__.PERMISSION_STORAGE_KEY),
  PLACEHOLDER_RPC_HEADERS: () => (/* reexport safe */ _network__WEBPACK_IMPORTED_MODULE_26__.PLACEHOLDER_RPC_HEADERS),
  PermissionEvents: () => (/* reexport safe */ _permissions__WEBPACK_IMPORTED_MODULE_28__.PermissionEvents),
  PrivateKeyChain: () => (/* reexport safe */ _account__WEBPACK_IMPORTED_MODULE_0__.PrivateKeyChain),
  RecoveryMethodType: () => (/* reexport safe */ _seedless__WEBPACK_IMPORTED_MODULE_30__.RecoveryMethodType),
  RecoveryMethodTypes: () => (/* reexport safe */ _seedless__WEBPACK_IMPORTED_MODULE_30__.RecoveryMethodTypes),
  RpcErrorCode: () => (/* reexport safe */ _error__WEBPACK_IMPORTED_MODULE_13__.RpcErrorCode),
  SESSION_AUTH_DATA_KEY: () => (/* reexport safe */ _lock__WEBPACK_IMPORTED_MODULE_22__.SESSION_AUTH_DATA_KEY),
  SETTINGS_STORAGE_KEY: () => (/* reexport safe */ _settings__WEBPACK_IMPORTED_MODULE_32__.SETTINGS_STORAGE_KEY),
  SETTINGS_UNENCRYPTED_STORAGE_KEY: () => (/* reexport safe */ _settings__WEBPACK_IMPORTED_MODULE_32__.SETTINGS_UNENCRYPTED_STORAGE_KEY),
  SUPPORTED_PRIMARY_SECRET_TYPES: () => (/* reexport safe */ _wallet__WEBPACK_IMPORTED_MODULE_40__.SUPPORTED_PRIMARY_SECRET_TYPES),
  SecretType: () => (/* reexport safe */ _secrets__WEBPACK_IMPORTED_MODULE_29__.SecretType),
  SecretsError: () => (/* reexport safe */ _error__WEBPACK_IMPORTED_MODULE_13__.SecretsError),
  SeedlessAuthProvider: () => (/* reexport safe */ _wallet__WEBPACK_IMPORTED_MODULE_40__.SeedlessAuthProvider),
  SeedlessError: () => (/* reexport safe */ _error__WEBPACK_IMPORTED_MODULE_13__.SeedlessError),
  SeedlessEvents: () => (/* reexport safe */ _seedless__WEBPACK_IMPORTED_MODULE_30__.SeedlessEvents),
  SeedlessExportAnalytics: () => (/* reexport safe */ _seedless__WEBPACK_IMPORTED_MODULE_30__.SeedlessExportAnalytics),
  SeedphraseImportError: () => (/* reexport safe */ _error__WEBPACK_IMPORTED_MODULE_13__.SeedphraseImportError),
  SendErrorMessage: () => (/* reexport safe */ _send__WEBPACK_IMPORTED_MODULE_31__.SendErrorMessage),
  SettingsEvents: () => (/* reexport safe */ _settings__WEBPACK_IMPORTED_MODULE_32__.SettingsEvents),
  SubscriptionEvents: () => (/* reexport safe */ _notifications__WEBPACK_IMPORTED_MODULE_43__.SubscriptionEvents),
  SwapErrorCode: () => (/* reexport safe */ _error__WEBPACK_IMPORTED_MODULE_13__.SwapErrorCode),
  TESTNET_LOOKUP_ASSETS: () => (/* reexport safe */ _fireblocks__WEBPACK_IMPORTED_MODULE_16__.TESTNET_LOOKUP_ASSETS),
  TOKENS_PRICE_DATA: () => (/* reexport safe */ _tokens__WEBPACK_IMPORTED_MODULE_34__.TOKENS_PRICE_DATA),
  TOTP_ISSUER: () => (/* reexport safe */ _seedless__WEBPACK_IMPORTED_MODULE_30__.TOTP_ISSUER),
  TRANSACTION_POLLING_INTERVAL_MS: () => (/* reexport safe */ _fireblocks__WEBPACK_IMPORTED_MODULE_16__.TRANSACTION_POLLING_INTERVAL_MS),
  TX_SUBMISSION_FAILURE_STATUSES: () => (/* reexport safe */ _fireblocks__WEBPACK_IMPORTED_MODULE_16__.TX_SUBMISSION_FAILURE_STATUSES),
  ThemeVariant: () => (/* reexport safe */ _settings__WEBPACK_IMPORTED_MODULE_32__.ThemeVariant),
  TransactionType: () => (/* reexport safe */ _transaction__WEBPACK_IMPORTED_MODULE_42__.TransactionType),
  TransferEventType: () => (/* reexport safe */ _bridge__WEBPACK_IMPORTED_MODULE_6__.TransferEventType),
  UNIFIED_BRIDGE_DEFAULT_STATE: () => (/* reexport safe */ _unified_bridge__WEBPACK_IMPORTED_MODULE_37__.UNIFIED_BRIDGE_DEFAULT_STATE),
  UNIFIED_BRIDGE_STATE_STORAGE_KEY: () => (/* reexport safe */ _unified_bridge__WEBPACK_IMPORTED_MODULE_37__.UNIFIED_BRIDGE_STATE_STORAGE_KEY),
  UNIFIED_BRIDGE_TRACKED_FLAGS: () => (/* reexport safe */ _unified_bridge__WEBPACK_IMPORTED_MODULE_37__.UNIFIED_BRIDGE_TRACKED_FLAGS),
  UnifiedBridgeError: () => (/* reexport safe */ _error__WEBPACK_IMPORTED_MODULE_13__.UnifiedBridgeError),
  UnifiedBridgeEvent: () => (/* reexport safe */ _unified_bridge__WEBPACK_IMPORTED_MODULE_37__.UnifiedBridgeEvent),
  VMModuleError: () => (/* reexport safe */ _error__WEBPACK_IMPORTED_MODULE_13__.VMModuleError),
  WALLET_STORAGE_ENCRYPTION_KEY: () => (/* reexport safe */ _storage__WEBPACK_IMPORTED_MODULE_33__.WALLET_STORAGE_ENCRYPTION_KEY),
  WALLET_STORAGE_KEY: () => (/* reexport safe */ _wallet__WEBPACK_IMPORTED_MODULE_40__.WALLET_STORAGE_KEY),
  WalletConnectError: () => (/* reexport safe */ _wallet_connect__WEBPACK_IMPORTED_MODULE_39__.WalletConnectError),
  WalletConnectErrorCode: () => (/* reexport safe */ _wallet_connect__WEBPACK_IMPORTED_MODULE_39__.WalletConnectErrorCode),
  WalletConnectEvent: () => (/* reexport safe */ _wallet_connect__WEBPACK_IMPORTED_MODULE_39__.WalletConnectEvent),
  WalletEvents: () => (/* reexport safe */ _wallet__WEBPACK_IMPORTED_MODULE_40__.WalletEvents),
  WalletExtensionType: () => (/* reexport safe */ _web3__WEBPACK_IMPORTED_MODULE_41__.WalletExtensionType),
  Web3Event: () => (/* reexport safe */ _dapp_connection__WEBPACK_IMPORTED_MODULE_9__.Web3Event),
  buildActionForRequest: () => (/* reexport safe */ _actions__WEBPACK_IMPORTED_MODULE_1__.buildActionForRequest),
  getUnconfirmedBalanceInCurrency: () => (/* reexport safe */ _balance__WEBPACK_IMPORTED_MODULE_5__.getUnconfirmedBalanceInCurrency),
  hasUnconfirmedBTCBalance: () => (/* reexport safe */ _balance__WEBPACK_IMPORTED_MODULE_5__.hasUnconfirmedBTCBalance),
  isAvaxWithUnavailableBalance: () => (/* reexport safe */ _balance__WEBPACK_IMPORTED_MODULE_5__.isAvaxWithUnavailableBalance),
  isBatchApprovalAction: () => (/* reexport safe */ _actions__WEBPACK_IMPORTED_MODULE_1__.isBatchApprovalAction),
  isConnectionEvent: () => (/* reexport safe */ _ui_connection__WEBPACK_IMPORTED_MODULE_35__.isConnectionEvent),
  isConnectionResponse: () => (/* reexport safe */ _ui_connection__WEBPACK_IMPORTED_MODULE_35__.isConnectionResponse),
  isNoMatchingKeyError: () => (/* reexport safe */ _wallet_connect__WEBPACK_IMPORTED_MODULE_39__.isNoMatchingKeyError),
  isProposalExpiredError: () => (/* reexport safe */ _wallet_connect__WEBPACK_IMPORTED_MODULE_39__.isProposalExpiredError),
  isSolanaMsgRequest: () => (/* reexport safe */ _wallet__WEBPACK_IMPORTED_MODULE_40__.isSolanaMsgRequest),
  isSolanaRequest: () => (/* reexport safe */ _wallet__WEBPACK_IMPORTED_MODULE_40__.isSolanaRequest),
  isTxParams: () => (/* reexport safe */ _transaction__WEBPACK_IMPORTED_MODULE_42__.isTxParams),
  priceChangeRefreshRate: () => (/* reexport safe */ _tokens__WEBPACK_IMPORTED_MODULE_34__.priceChangeRefreshRate)
});
/* ESM import */var _account__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/types/src/account.ts");
/* ESM import */var _actions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/types/src/actions.ts");
/* ESM import */var _analytics__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/types/src/analytics.ts");
/* ESM import */var _app_check__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../packages/types/src/app-check.ts");
/* ESM import */var _approvals__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../packages/types/src/approvals.ts");
/* ESM import */var _balance__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../packages/types/src/balance.ts");
/* ESM import */var _bridge__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../../packages/types/src/bridge.ts");
/* ESM import */var _contacts__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../../packages/types/src/contacts.ts");
/* ESM import */var _currency__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("../../packages/types/src/currency.ts");
/* ESM import */var _dapp_connection__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("../../packages/types/src/dapp-connection.ts");
/* ESM import */var _debank__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("../../packages/types/src/debank.ts");
/* ESM import */var _defi__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__("../../packages/types/src/defi.ts");
/* ESM import */var _domain_metadata__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__("../../packages/types/src/domain-metadata.ts");
/* ESM import */var _error__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__("../../packages/types/src/error.ts");
/* ESM import */var _feature_flags__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__("../../packages/types/src/feature-flags.ts");
/* ESM import */var _firebase__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__("../../packages/types/src/firebase.ts");
/* ESM import */var _fireblocks__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__("../../packages/types/src/fireblocks.ts");
/* ESM import */var _gasless__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__("../../packages/types/src/gasless.ts");
/* ESM import */var _history__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__("../../packages/types/src/history.ts");
/* ESM import */var _keystone__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__("../../packages/types/src/keystone.ts");
/* ESM import */var _keystore__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__("../../packages/types/src/keystore.ts");
/* ESM import */var _ledger__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__("../../packages/types/src/ledger.ts");
/* ESM import */var _lock__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__("../../packages/types/src/lock.ts");
/* ESM import */var _messages__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__("../../packages/types/src/messages.ts");
/* ESM import */var _navigation_history__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__("../../packages/types/src/navigation-history.ts");
/* ESM import */var _network_fee__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__("../../packages/types/src/network-fee.ts");
/* ESM import */var _network__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__("../../packages/types/src/network.ts");
/* ESM import */var _onboarding__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__("../../packages/types/src/onboarding.ts");
/* ESM import */var _permissions__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__("../../packages/types/src/permissions.ts");
/* ESM import */var _secrets__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__("../../packages/types/src/secrets.ts");
/* ESM import */var _seedless__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__("../../packages/types/src/seedless.ts");
/* ESM import */var _send__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__("../../packages/types/src/send.ts");
/* ESM import */var _settings__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__("../../packages/types/src/settings.ts");
/* ESM import */var _storage__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__("../../packages/types/src/storage.ts");
/* ESM import */var _tokens__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__("../../packages/types/src/tokens.ts");
/* ESM import */var _ui_connection__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__("../../packages/types/src/ui-connection.ts");
/* ESM import */var _ui__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__("../../packages/types/src/ui.ts");
/* ESM import */var _unified_bridge__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__("../../packages/types/src/unified-bridge.ts");
/* ESM import */var _util_types__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__("../../packages/types/src/util-types.ts");
/* ESM import */var _wallet_connect__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__("../../packages/types/src/wallet-connect.ts");
/* ESM import */var _wallet__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__("../../packages/types/src/wallet.ts");
/* ESM import */var _web3__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__("../../packages/types/src/web3.ts");
/* ESM import */var _transaction__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__("../../packages/types/src/transaction.ts");
/* ESM import */var _notifications__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__("../../packages/types/src/notifications.ts");
// export * from './all';














































}),
"../../packages/types/src/keystone.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  KeystoneEvent: () => (KeystoneEvent)
});
var KeystoneEvent = /*#__PURE__*/ function(KeystoneEvent) {
    KeystoneEvent["DEVICE_REQUEST"] = "KeystoneEvent:device_request";
    return KeystoneEvent;
}({});


}),
"../../packages/types/src/keystore.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);



}),
"../../packages/types/src/ledger.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  LEDGER_TX_SIZE_LIMIT_BYTES: () => (LEDGER_TX_SIZE_LIMIT_BYTES),
  LEDGER_VERSION_WARNING_WAS_CLOSED: () => (LEDGER_VERSION_WARNING_WAS_CLOSED),
  LedgerEvent: () => (LedgerEvent)
});
var LedgerEvent = /*#__PURE__*/ function(LedgerEvent) {
    LedgerEvent["TRANSPORT_REQUEST"] = "LedgerEvent:transport_request";
    LedgerEvent["DISCOVER_TRANSPORTS"] = "LedgerEvent:discover_transports";
    LedgerEvent["TRANSPORT_CLOSE_REQUEST"] = "LedgerEvent:transport_close";
    return LedgerEvent;
}({});
const LEDGER_VERSION_WARNING_WAS_CLOSED = 'LEDGER_VERSION_WARNING_WAS_CLOSED';
/**
 * Ledger app will throw an error if the tx to sign is too large.
 * Approximately `8kb` is the current limit.
 */ const LEDGER_TX_SIZE_LIMIT_BYTES = 8192;


}),
"../../packages/types/src/lock.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  AlarmsEvents: () => (AlarmsEvents),
  LOCK_TIMEOUT: () => (LOCK_TIMEOUT),
  LockEvents: () => (LockEvents),
  SESSION_AUTH_DATA_KEY: () => (SESSION_AUTH_DATA_KEY)
});
const SESSION_AUTH_DATA_KEY = 'SESSION_AUTH_DATA_KEY';
const LOCK_TIMEOUT = 1000 * 60 * 60 * 12; // 12 hours
var LockEvents = /*#__PURE__*/ function(LockEvents) {
    LockEvents["LOCK_STATE_CHANGED"] = "LockServiceEvents:Lock";
    return LockEvents;
}({});
var AlarmsEvents = /*#__PURE__*/ function(AlarmsEvents) {
    AlarmsEvents["AUTO_LOCK"] = "auto-lock";
    return AlarmsEvents;
}({});


}),
"../../packages/types/src/messages.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  MessageType: () => (MessageType)
});
/* ESM import */var _dapp_connection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/types/src/dapp-connection.ts");

var MessageType = /*#__PURE__*/ function(MessageType) {
    MessageType[MessageType["SIGN_TYPED_DATA_V1"] = _dapp_connection__WEBPACK_IMPORTED_MODULE_0__.DAppProviderRequest.ETH_SIGN_TYPED_DATA_V1] = "SIGN_TYPED_DATA_V1";
    MessageType[MessageType["SIGN_TYPED_DATA_V3"] = _dapp_connection__WEBPACK_IMPORTED_MODULE_0__.DAppProviderRequest.ETH_SIGN_TYPED_DATA_V3] = "SIGN_TYPED_DATA_V3";
    MessageType[MessageType["SIGN_TYPED_DATA_V4"] = _dapp_connection__WEBPACK_IMPORTED_MODULE_0__.DAppProviderRequest.ETH_SIGN_TYPED_DATA_V4] = "SIGN_TYPED_DATA_V4";
    MessageType[MessageType["SIGN_TYPED_DATA"] = _dapp_connection__WEBPACK_IMPORTED_MODULE_0__.DAppProviderRequest.ETH_SIGN_TYPED_DATA] = "SIGN_TYPED_DATA";
    MessageType[MessageType["PERSONAL_SIGN"] = _dapp_connection__WEBPACK_IMPORTED_MODULE_0__.DAppProviderRequest.PERSONAL_SIGN] = "PERSONAL_SIGN";
    MessageType[MessageType["ETH_SIGN"] = _dapp_connection__WEBPACK_IMPORTED_MODULE_0__.DAppProviderRequest.ETH_SIGN] = "ETH_SIGN";
    MessageType[MessageType["AVALANCHE_SIGN"] = _dapp_connection__WEBPACK_IMPORTED_MODULE_0__.DAppProviderRequest.AVALANCHE_SIGN_MESSAGE] = "AVALANCHE_SIGN";
    return MessageType;
}({});


}),
"../../packages/types/src/navigation-history.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  NAVIGATION_HISTORY_STORAGE_KEY: () => (NAVIGATION_HISTORY_STORAGE_KEY)
});
const NAVIGATION_HISTORY_STORAGE_KEY = 'NAVIGATION_HISTORY';


}),
"../../packages/types/src/network-fee.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);



}),
"../../packages/types/src/network.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  NETWORK_LIST_STORAGE_KEY: () => (NETWORK_LIST_STORAGE_KEY),
  NETWORK_OVERRIDES_STORAGE_KEY: () => (NETWORK_OVERRIDES_STORAGE_KEY),
  NETWORK_STORAGE_KEY: () => (NETWORK_STORAGE_KEY),
  NetworkEvents: () => (NetworkEvents),
  PLACEHOLDER_RPC_HEADERS: () => (PLACEHOLDER_RPC_HEADERS)
});
var NetworkEvents = /*#__PURE__*/ function(NetworkEvents) {
    NetworkEvents["NETWORK_UPDATE_EVENT"] = "network-updated";
    NetworkEvents["DEVELOPER_MODE_CHANGED"] = "developer-mode-changed";
    NetworkEvents["NETWORKS_UPDATED_EVENT"] = "networks-updated";
    return NetworkEvents;
}({});
const NETWORK_STORAGE_KEY = 'NETWORK_STORAGE_KEY';
const NETWORK_LIST_STORAGE_KEY = 'NETWORK_LIST_STORAGE_KEY';
const NETWORK_OVERRIDES_STORAGE_KEY = 'NETWORK_OVERRIDES_STORAGE_KEY';
const PLACEHOLDER_RPC_HEADERS = {
    '': ''
};


}),
"../../packages/types/src/notifications.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  BalanceNotificationTypes: () => (BalanceNotificationTypes),
  NewsNotificationTypes: () => (NewsNotificationTypes),
  NotificationCategories: () => (NotificationCategories),
  NotificationsEvents: () => (NotificationsEvents),
  SubscriptionEvents: () => (SubscriptionEvents)
});
var NotificationCategories = /*#__PURE__*/ function(NotificationCategories) {
    NotificationCategories["BALANCE_CHANGES"] = "BALANCE_CHANGES";
    NotificationCategories["NEWS"] = "NEWS";
    return NotificationCategories;
}({});
var BalanceNotificationTypes = /*#__PURE__*/ function(BalanceNotificationTypes) {
    BalanceNotificationTypes["BALANCE_CHANGES"] = "BALANCE_CHANGES";
    return BalanceNotificationTypes;
}({});
var NewsNotificationTypes = /*#__PURE__*/ function(NewsNotificationTypes) {
    NewsNotificationTypes["PRODUCT_ANNOUNCEMENTS"] = "PRODUCT_ANNOUNCEMENTS";
    NewsNotificationTypes["OFFERS_AND_PROMOTIONS"] = "OFFERS_AND_PROMOTIONS";
    NewsNotificationTypes["MARKET_NEWS"] = "MARKET_NEWS";
    NewsNotificationTypes["PRICE_ALERTS"] = "PRICE_ALERTS";
    return NewsNotificationTypes;
}({});
var SubscriptionEvents = /*#__PURE__*/ function(SubscriptionEvents) {
    SubscriptionEvents["SUBSCRIPTIONS_CHANGED_EVENT"] = "SUBSCRIPTIONS_CHANGED_EVENT";
    return SubscriptionEvents;
}({});
var NotificationsEvents = /*#__PURE__*/ function(NotificationsEvents) {
    NotificationsEvents["CLIENT_REGISTERED"] = "CLIENT_REGISTERED";
    return NotificationsEvents;
}({});


}),
"../../packages/types/src/onboarding.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  ONBOARDING_EVENT_NAMES: () => (ONBOARDING_EVENT_NAMES),
  ONBOARDING_STORAGE_KEY: () => (ONBOARDING_STORAGE_KEY),
  OnboardingEvents: () => (OnboardingEvents),
  OnboardingPhase: () => (OnboardingPhase),
  OnboardingURLs: () => (OnboardingURLs)
});
var OnboardingPhase = /*#__PURE__*/ function(OnboardingPhase) {
    OnboardingPhase["CREATE_WALLET"] = "create_wallet";
    OnboardingPhase["IMPORT_WALLET"] = "import_wallet";
    OnboardingPhase["PASSWORD"] = "password";
    OnboardingPhase["CONFIRM"] = "confirm";
    OnboardingPhase["FINALIZE"] = "finalize";
    OnboardingPhase["RESTART"] = "restart";
    OnboardingPhase["LEDGER"] = "ledger";
    OnboardingPhase["LEDGER_TROUBLE"] = "ledger_trouble";
    OnboardingPhase["ANALYTICS_CONSENT"] = "analytics_consent";
    OnboardingPhase["KEYSTONE"] = "keystone";
    OnboardingPhase["KEYSTONE_TUTORIAL"] = "keystone_tutorial";
    OnboardingPhase["SEEDLESS_GOOGLE"] = "seedless_google";
    OnboardingPhase["SEEDLESS_APPLE"] = "seedless_apple";
    return OnboardingPhase;
}({});
var OnboardingURLs = /*#__PURE__*/ function(OnboardingURLs) {
    OnboardingURLs["ONBOARDING_HOME"] = "/onboarding";
    OnboardingURLs["CREATE_WALLET"] = "/onboarding/create-wallet";
    OnboardingURLs["SEED_PHRASE"] = "/onboarding/seed-phrase";
    OnboardingURLs["KEYSTONE"] = "/onboarding/keystone";
    OnboardingURLs["LEDGER"] = "/onboarding/ledger";
    OnboardingURLs["CREATE_PASSWORD"] = "/onboarding/create-password";
    OnboardingURLs["ANALYTICS_CONSENT"] = "/onboarding/analytics-consent";
    OnboardingURLs["LEDGER_TROUBLE"] = "/onboarding/ledger-trouble";
    OnboardingURLs["SIGN_IN"] = "/onboarding/sign-in";
    OnboardingURLs["RECOVERY_METHODS"] = "/onboarding/recovery-methods";
    OnboardingURLs["RECOVERY_METHODS_LOGIN"] = "/onboarding/recovery-methods-login";
    return OnboardingURLs;
}({});
const ONBOARDING_EVENT_NAMES = {
    ["create_wallet"]: 'OnboardingCreateNewWalletSelected',
    ["import_wallet"]: 'OnboardingImportMnemonicSelected',
    ["ledger"]: 'OnboardingImportLedgerSelected',
    ["keystone"]: 'OnboardingKeystoneSelected',
    ["seedless_google"]: 'OnboardingSeedlessGoogleSelected',
    ["seedless_apple"]: 'OnboardingSeedlessAppleSelected'
};
var OnboardingEvents = /*#__PURE__*/ function(OnboardingEvents) {
    OnboardingEvents["ONBOARDING_UPDATED_EVENT"] = "ONBOARDING_UPDATED_EVENT";
    return OnboardingEvents;
}({});
const ONBOARDING_STORAGE_KEY = 'onboarding';


}),
"../../packages/types/src/permissions.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  PERMISSION_STORAGE_KEY: () => (PERMISSION_STORAGE_KEY),
  PermissionEvents: () => (PermissionEvents)
});
var PermissionEvents = /*#__PURE__*/ function(PermissionEvents) {
    PermissionEvents["PERMISSIONS_STATE_UPDATE"] = "permissions-state-updated";
    return PermissionEvents;
}({});
const PERMISSION_STORAGE_KEY = 'permissions';


}),
"../../packages/types/src/secrets.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  AVALANCHE_BASE_DERIVATION_PATH: () => (AVALANCHE_BASE_DERIVATION_PATH),
  EVM_BASE_DERIVATION_PATH: () => (EVM_BASE_DERIVATION_PATH),
  SecretType: () => (SecretType)
});
var SecretType = /*#__PURE__*/ function(SecretType) {
    // Primary wallet types
    SecretType["Mnemonic"] = "mnemonic";
    SecretType["Ledger"] = "ledger";
    SecretType["LedgerLive"] = "ledger-live";
    SecretType["Keystone"] = "keystone";
    SecretType["Seedless"] = "seedless";
    // Importable wallets types
    SecretType["PrivateKey"] = "private-key";
    SecretType["WalletConnect"] = "wallet-connect";
    SecretType["Fireblocks"] = "fireblocks";
    return SecretType;
}({});
const EVM_BASE_DERIVATION_PATH = "m/44'/60'/0'";
const AVALANCHE_BASE_DERIVATION_PATH = "m/44'/9000'/0'";


}),
"../../packages/types/src/seedless.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  AuthErrorCode: () => (AuthErrorCode),
  CoreApiError: () => (CoreApiError),
  FIDOApiEndpoint: () => (FIDOApiEndpoint),
  FIDOSteps: () => (FIDOSteps),
  FidoDeviceType: () => (FidoDeviceType),
  KeyType: () => (KeyType),
  MfaRequestType: () => (MfaRequestType),
  RecoveryMethodType: () => (RecoveryMethodType),
  RecoveryMethodTypes: () => (RecoveryMethodTypes),
  SeedlessEvents: () => (SeedlessEvents),
  SeedlessExportAnalytics: () => (SeedlessExportAnalytics),
  TOTP_ISSUER: () => (TOTP_ISSUER)
});
var FIDOApiEndpoint = /*#__PURE__*/ function(FIDOApiEndpoint) {
    FIDOApiEndpoint["Register"] = "register";
    FIDOApiEndpoint["Authenticate"] = "authenticate";
    return FIDOApiEndpoint;
}({});
var KeyType = /*#__PURE__*/ function(KeyType) {
    KeyType["Passkey"] = "passkey";
    KeyType["Yubikey"] = "yubikey";
    return KeyType;
}({});
const TOTP_ISSUER = 'Core';
class CoreApiError extends Error {
}
var SeedlessEvents = /*#__PURE__*/ function(SeedlessEvents) {
    SeedlessEvents["TokenExpired"] = "token-expired";
    SeedlessEvents["TokenRefreshed"] = "token-refreshed";
    SeedlessEvents["MfaRequest"] = "mfa-request";
    SeedlessEvents["MfaFailure"] = "mfa-failure";
    SeedlessEvents["MfaClear"] = "mfa-clear";
    SeedlessEvents["MfaMethodsUpdated"] = "mfa-methods-updated";
    SeedlessEvents["MfaChoiceRequest"] = "mfa-choice-request";
    return SeedlessEvents;
}({});
var MfaRequestType = /*#__PURE__*/ function(MfaRequestType) {
    MfaRequestType["Totp"] = "totp";
    MfaRequestType["Fido"] = "fido";
    MfaRequestType["FidoRegister"] = "FidoRegister";
    return MfaRequestType;
}({});
var RecoveryMethodType = /*#__PURE__*/ function(RecoveryMethodType) {
    RecoveryMethodType["Passkey"] = "Passkey";
    RecoveryMethodType["Yubikey"] = "Yubikey";
    RecoveryMethodType["Authenticator"] = "Authenticator";
    return RecoveryMethodType;
}({});
var AuthErrorCode = /*#__PURE__*/ function(AuthErrorCode) {
    AuthErrorCode["InvalidTotpCode"] = "invalid-totp-code";
    AuthErrorCode["TotpVerificationError"] = "totp-verification-error";
    AuthErrorCode["NoMfaDetails"] = "no-mfa-details";
    AuthErrorCode["UnknownError"] = "unknown-error";
    AuthErrorCode["UnsupportedProvider"] = "unsupported-provider";
    AuthErrorCode["FailedToFetchOidcToken"] = "failed-to-fetch-oidc-token";
    AuthErrorCode["MismatchingEmail"] = "mismatching-email";
    AuthErrorCode["MissingUserId"] = "missing-user-id";
    AuthErrorCode["MismatchingUserId"] = "mismatching-user-id";
    AuthErrorCode["UnsupportedMfaMethod"] = "unsupported-mfa-method";
    AuthErrorCode["FidoChallengeNotApproved"] = "fido-challenge-not-approved";
    AuthErrorCode["FidoChallengeFailed"] = "fido-challenge-failed";
    AuthErrorCode["NoMfaMethodsConfigured"] = "no-mfa-methods-configured";
    AuthErrorCode["WrongMfaResponseAttempt"] = "wrong-mfa-response-attempt";
    return AuthErrorCode;
}({});
var FidoDeviceType = /*#__PURE__*/ function(FidoDeviceType) {
    FidoDeviceType["Passkey"] = "Passkey";
    FidoDeviceType["Yubikey"] = "Yubikey";
    return FidoDeviceType;
}({});
const ExportRecoveryPhrasePrefix = 'Seedless.ExportRecoveryPhrase';
var SeedlessExportAnalytics = /*#__PURE__*/ function(SeedlessExportAnalytics) {
    SeedlessExportAnalytics[SeedlessExportAnalytics["MenuItemClicked"] = `${ExportRecoveryPhrasePrefix}.MenuItemClicked`] = "MenuItemClicked";
    SeedlessExportAnalytics[SeedlessExportAnalytics["Resigned"] = `${ExportRecoveryPhrasePrefix}.Resigned`] = "Resigned";
    SeedlessExportAnalytics[SeedlessExportAnalytics["PopupOpened"] = `${ExportRecoveryPhrasePrefix}.PopupOpened`] = "PopupOpened";
    SeedlessExportAnalytics[SeedlessExportAnalytics["InitiationStarted"] = `${ExportRecoveryPhrasePrefix}.InitiationStarted`] = "InitiationStarted";
    SeedlessExportAnalytics[SeedlessExportAnalytics["InitiationSucceeded"] = `${ExportRecoveryPhrasePrefix}.InitiationSucceeded`] = "InitiationSucceeded";
    SeedlessExportAnalytics[SeedlessExportAnalytics["InitiationFailed"] = `${ExportRecoveryPhrasePrefix}.InitiationFailed`] = "InitiationFailed";
    SeedlessExportAnalytics[SeedlessExportAnalytics["CancellationStarted"] = `${ExportRecoveryPhrasePrefix}.CancellationStarted`] = "CancellationStarted";
    SeedlessExportAnalytics[SeedlessExportAnalytics["CancellationSucceeded"] = `${ExportRecoveryPhrasePrefix}.CancellationSucceeded`] = "CancellationSucceeded";
    SeedlessExportAnalytics[SeedlessExportAnalytics["CancellationFailed"] = `${ExportRecoveryPhrasePrefix}.CancellationFailed`] = "CancellationFailed";
    SeedlessExportAnalytics[SeedlessExportAnalytics["DecryptionStarted"] = `${ExportRecoveryPhrasePrefix}.DecryptionStarted`] = "DecryptionStarted";
    SeedlessExportAnalytics[SeedlessExportAnalytics["DecryptionSucceeded"] = `${ExportRecoveryPhrasePrefix}.DecryptionSucceeded`] = "DecryptionSucceeded";
    SeedlessExportAnalytics[SeedlessExportAnalytics["DecryptionFailed"] = `${ExportRecoveryPhrasePrefix}.DecryptionFailed`] = "DecryptionFailed";
    SeedlessExportAnalytics[SeedlessExportAnalytics["PhraseCopied"] = `${ExportRecoveryPhrasePrefix}.PhraseCopied`] = "PhraseCopied";
    return SeedlessExportAnalytics;
}({});
var FIDOSteps = /*#__PURE__*/ function(FIDOSteps) {
    FIDOSteps["NAMING"] = "naming";
    FIDOSteps["REGISTER"] = "register";
    FIDOSteps["LOGIN"] = "login";
    FIDOSteps["ERROR"] = "error";
    return FIDOSteps;
}({});
// When the user wants to login with a FIDO device, we don't get the device exact type (e.g. passkey or yubikey), only we get the tpye it is 'fido"
// so we need to handle them as a unit in the login process
var RecoveryMethodTypes = /*#__PURE__*/ function(RecoveryMethodTypes) {
    RecoveryMethodTypes["PASSKEY"] = "passkey";
    RecoveryMethodTypes["TOTP"] = "totp";
    RecoveryMethodTypes["YUBIKEY"] = "yubikey";
    RecoveryMethodTypes["FIDO"] = "fido";
    RecoveryMethodTypes["UNKNOWN"] = "unknown";
    return RecoveryMethodTypes;
}({});


}),
"../../packages/types/src/send.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  SendErrorMessage: () => (SendErrorMessage)
});
var SendErrorMessage = /*#__PURE__*/ function(SendErrorMessage) {
    SendErrorMessage["AMOUNT_REQUIRED"] = "AMOUNT_REQUIRED";
    SendErrorMessage["AMOUNT_TOO_LOW"] = "AMOUNT_TOO_LOW";
    SendErrorMessage["ADDRESS_REQUIRED"] = "ADDRESS_REQUIRED";
    SendErrorMessage["C_CHAIN_REQUIRED"] = "C_CHAIN_REQUIRED";
    SendErrorMessage["INVALID_ADDRESS"] = "INVALID_ADDRESS";
    SendErrorMessage["INVALID_NETWORK_FEE"] = "INVALID_NETWORK_FEE";
    SendErrorMessage["INSUFFICIENT_BALANCE"] = "INSUFFICIENT_BALANCE";
    SendErrorMessage["INSUFFICIENT_BALANCE_FOR_FEE"] = "INSUFFICIENT_BALANCE_FOR_FEE";
    SendErrorMessage["EXCESSIVE_NETWORK_FEE"] = "EXCESSIVE_NETWORK_FEE";
    SendErrorMessage["TOKEN_REQUIRED"] = "TOKEN_REQUIRED";
    SendErrorMessage["UNSUPPORTED_TOKEN"] = "UNSUPPORTED_TOKEN";
    SendErrorMessage["UNABLE_TO_FETCH_UTXOS"] = "UNABLE_TO_FETCH_UTXOS";
    SendErrorMessage["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
    SendErrorMessage["UNSUPPORTED_BY_LEDGER"] = "UNSUPPORTED_BY_LEDGER";
    SendErrorMessage["SEND_NOT_AVAILABLE"] = "SEND_NOT_AVAILABLE";
    return SendErrorMessage;
}({});


}),
"../../packages/types/src/settings.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  AnalyticsConsent: () => (AnalyticsConsent),
  CURRENCIES: () => (CURRENCIES),
  LanguageLinks: () => (LanguageLinks),
  Languages: () => (Languages),
  SETTINGS_STORAGE_KEY: () => (SETTINGS_STORAGE_KEY),
  SETTINGS_UNENCRYPTED_STORAGE_KEY: () => (SETTINGS_UNENCRYPTED_STORAGE_KEY),
  SettingsEvents: () => (SettingsEvents),
  ThemeVariant: () => (ThemeVariant)
});
var ThemeVariant = /*#__PURE__*/ function(ThemeVariant) {
    ThemeVariant["LIGHT"] = "LIGHT";
    ThemeVariant["DARK"] = "DARK";
    return ThemeVariant;
}({});
var Languages = /*#__PURE__*/ function(Languages) {
    Languages["EN"] = "en";
    Languages["DE"] = "de-DE";
    Languages["ES"] = "es-EM";
    Languages["FR"] = "fr-FR";
    Languages["JA"] = "ja-JP";
    Languages["HI"] = "hi-IN";
    Languages["KO"] = "ko-KR";
    Languages["RU"] = "ru-RU";
    Languages["TR"] = "tr-TR";
    Languages["ZHCN"] = "zh-CN";
    Languages["ZHTW"] = "zh-TW";
    return Languages;
}({});
var LanguageLinks = /*#__PURE__*/ function(LanguageLinks) {
    LanguageLinks["EN"] = "en";
    LanguageLinks["DE"] = "de";
    LanguageLinks["ES"] = "es";
    LanguageLinks["FR"] = "fr";
    LanguageLinks["JA"] = "ja";
    // eslint-disable-next-line @typescript-eslint/no-duplicate-enum-values
    LanguageLinks["HI"] = "en";
    LanguageLinks["KO"] = "ko";
    LanguageLinks["RU"] = "ru";
    LanguageLinks["TR"] = "tr";
    LanguageLinks["ZHCN"] = "zh-CN";
    LanguageLinks["ZHTW"] = "zh-TW";
    return LanguageLinks;
}({});
const SETTINGS_STORAGE_KEY = 'settings';
const SETTINGS_UNENCRYPTED_STORAGE_KEY = 'setting_unencrypted';
var SettingsEvents = /*#__PURE__*/ function(SettingsEvents) {
    SettingsEvents["SETTINGS_UPDATED"] = "SettingsEvents: SETTINGS_UPDATED";
    return SettingsEvents;
}({});
// TODO: bring back the commented currencies when the glacier supports them
var CURRENCIES = /*#__PURE__*/ function(CURRENCIES) {
    CURRENCIES["USD"] = "USD";
    CURRENCIES["EUR"] = "EUR";
    CURRENCIES["GBP"] = "GBP";
    CURRENCIES["AUD"] = "AUD";
    CURRENCIES["CAD"] = "CAD";
    CURRENCIES["CHF"] = "CHF";
    CURRENCIES["HKD"] = "HKD";
    return CURRENCIES;
}({});
var AnalyticsConsent = /*#__PURE__*/ function(AnalyticsConsent) {
    AnalyticsConsent["Pending"] = "pending";
    AnalyticsConsent["Approved"] = "approved";
    AnalyticsConsent["Denied"] = "denied";
    return AnalyticsConsent;
}({});


}),
"../../packages/types/src/storage.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  KeyDerivationVersion: () => (KeyDerivationVersion),
  WALLET_STORAGE_ENCRYPTION_KEY: () => (WALLET_STORAGE_ENCRYPTION_KEY)
});
const WALLET_STORAGE_ENCRYPTION_KEY = 'WALLET_STORAGE_ENCRYPTION_KEY';
var KeyDerivationVersion = /*#__PURE__*/ function(KeyDerivationVersion) {
    KeyDerivationVersion["V1"] = "V1";
    KeyDerivationVersion["V2"] = "V2";
    return KeyDerivationVersion;
}({});


}),
"../../packages/types/src/tokens.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  TOKENS_PRICE_DATA: () => (TOKENS_PRICE_DATA),
  priceChangeRefreshRate: () => (priceChangeRefreshRate)
});
const TOKENS_PRICE_DATA = 'tokens-price-data';
const priceChangeRefreshRate = 1000 * 60 * 60;


}),
"../../packages/types/src/transaction.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  AvalancheChainStrings: () => (AvalancheChainStrings),
  TransactionType: () => (TransactionType),
  isTxParams: () => (isTxParams)
});
var AvalancheChainStrings = /*#__PURE__*/ function(AvalancheChainStrings) {
    AvalancheChainStrings["AVM"] = "X Chain";
    AvalancheChainStrings["PVM"] = "P Chain";
    AvalancheChainStrings["EVM"] = "C Chain";
    return AvalancheChainStrings;
}({});
var TransactionType = /*#__PURE__*/ function(TransactionType) {
    TransactionType["SEND_TOKEN"] = "send_token";
    TransactionType["SEND_NFT"] = "send_nft";
    TransactionType["APPROVE_TOKEN"] = "approve_token";
    TransactionType["APPROVE_NFT"] = "approve_nft";
    TransactionType["APPROVE_NFT_COLLECTION"] = "approve_nft_collection";
    TransactionType["REVOKE_TOKEN_APPROVAL"] = "revoke_token_approval";
    TransactionType["REVOKE_NFT_APPROVAL"] = "revoke_nft_approval";
    TransactionType["REVOKE_NFT_COLLECTION_APPROVAL"] = "revoke_nft_collection_approval";
    TransactionType["CANCEL_TX"] = "cancel_tx";
    TransactionType["DEPLOY_CONTRACT"] = "deploy_contract";
    TransactionType["SWAP"] = "swap";
    TransactionType["ADD_LIQUIDITY"] = "add_liquidity";
    TransactionType["CALL"] = "call";
    return TransactionType;
}({});
function isTxParams(params) {
    return !!params.from;
}


}),
"../../packages/types/src/ui-connection.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  CORE_DOMAINS: () => (CORE_DOMAINS),
  ExtensionRequest: () => (ExtensionRequest),
  isConnectionEvent: () => (isConnectionEvent),
  isConnectionResponse: () => (isConnectionResponse)
});
var ExtensionRequest = /*#__PURE__*/ function(ExtensionRequest) {
    ExtensionRequest["ONBOARDING_GET_STATE"] = "onboarding_getIsOnBoarded";
    ExtensionRequest["ONBOARDING_SUBMIT"] = "onboarding_submit";
    ExtensionRequest["ONBOARDING_INITIAL_WALLET_OPEN"] = "onboarding_initial_wallet_open";
    ExtensionRequest["MNEMONIC_ONBOARDING_SUBMIT"] = "mnemonic_onboarding_submit";
    ExtensionRequest["SEEDLESS_ONBOARDING_SUBMIT"] = "seedless_onboarding_submit";
    ExtensionRequest["KEYSTONE_ONBOARDING_SUBMIT"] = "keystone_onboarding_submit";
    ExtensionRequest["LEDGER_ONBOARDING_SUBMIT"] = "ledger_onboarding_submit";
    ExtensionRequest["NETWORK_SET_ACTIVE"] = "network_setActiveNetwork";
    ExtensionRequest["NETWORK_SET_DEVELOPER_MODE"] = "network_setDeveloperMode";
    ExtensionRequest["NETWORK_ADD_FAVORITE_NETWORK"] = "network_add_favorite_networks";
    ExtensionRequest["NETWORK_REMOVE_FAVORITE_NETWORK"] = "network_remove_favorite_network";
    ExtensionRequest["NETWORK_SAVE_CUSTOM"] = "network_saveCustomNetwork";
    ExtensionRequest["NETWORK_REMOVE_CUSTOM"] = "network_removeCustomNetwork";
    ExtensionRequest["NETWORKS_GET_STATE"] = "networks_get_state";
    ExtensionRequest["NETWORK_UPDATE_DEFAULT"] = "network_update_default";
    ExtensionRequest["ACCOUNT_GET_ACCOUNTS"] = "account_get";
    ExtensionRequest["ACCOUNT_SELECT"] = "account_select";
    ExtensionRequest["ACCOUNT_ADD"] = "account_add";
    ExtensionRequest["ACCOUNT_GET_PRIVATEKEY"] = "account_get_privatekey";
    ExtensionRequest["SECRETS_APPEND_SOLANA_PUBLIC_KEYS"] = "secrets_append_solana_public_keys";
    ExtensionRequest["BALANCES_GET"] = "balances_get";
    ExtensionRequest["BALANCES_START_POLLING"] = "balances_start_polling";
    ExtensionRequest["BALANCES_STOP_POLLING"] = "balances_stop_polling";
    ExtensionRequest["BALANCES_GET_TOTAL_FOR_WALLET"] = "balance_get_total_for_wallet";
    ExtensionRequest["NETWORK_BALANCES_UPDATE"] = "network_balances_update";
    ExtensionRequest["NFT_BALANCES_GET"] = "nft_balances_get";
    ExtensionRequest["NFT_REFRESH_METADATA"] = "nft_refresh_metadata";
    ExtensionRequest["TOKEN_PRICE_GET"] = "token_price_get";
    ExtensionRequest["BALANCE_NATIVE_GET"] = "balance_native_get";
    ExtensionRequest["BRIDGE_GET_CONFIG"] = "bridge_get_config";
    ExtensionRequest["BRIDGE_GET_STATE"] = "bridge_get_state";
    ExtensionRequest["BRIDGE_TRANSFER_ASSET"] = "bridge_transfer_asset";
    ExtensionRequest["BRIDGE_TRANSACTION_CREATE"] = "bridge_transaction_create";
    ExtensionRequest["BRIDGE_TRANSACTION_REMOVE"] = "bridge_transaction_remove";
    ExtensionRequest["BRIDGE_SET_IS_DEV_ENV"] = "bridge_set_is_dev_env";
    ExtensionRequest["BRIDGE_GET_ETH_MAX_TRANSFER_AMOUNT"] = "bridge_get_eth_max_transfer_amount";
    ExtensionRequest["BRIDGE_ESTIMATE_GAS"] = "bridge_estimate_gas";
    ExtensionRequest["WALLET_GET_DETAILS"] = "wallet_getDetails";
    ExtensionRequest["WALLET_UNENCRYPTED_MNEMONIC"] = "wallet_getUnencryptedMnemonic";
    ExtensionRequest["WALLET_GET_BTC_WALLET_POLICY_DETAILS"] = "wallet_getBtcWalletPolicyDetails";
    ExtensionRequest["WALLET_STORE_BTC_WALLET_POLICY_DETAILS"] = "wallet_storeBtcWalletPolicyDetails";
    ExtensionRequest["GET_WALLET_HISTORY"] = "wallet_getHistory";
    ExtensionRequest["LOCK_WALLET"] = "lock_lock";
    ExtensionRequest["UNLOCK_WALLET"] = "lock_unlock";
    ExtensionRequest["LOCK_GET_STATE"] = "lock_getState";
    ExtensionRequest["LOCK_CHANGE_PASSWORD"] = "lock_changePassword";
    ExtensionRequest["ACTION_GET"] = "action_getAction";
    ExtensionRequest["ACTION_UPDATE"] = "action_updateAction";
    ExtensionRequest["ACTION_UPDATE_TX_DATA"] = "action_updateTxData";
    ExtensionRequest["PERMISSIONS_REVOKE_ADDRESS_ACCESS_FOR_DOMAIN"] = "permissions_revokeAddressAccessForDomain";
    ExtensionRequest["PERMISSIONS_GET_PERMISSIONS"] = "permissions_getPermissionsForDomain";
    ExtensionRequest["PERMISSIONS_GET_ALL_PERMISSIONS"] = "permissions_getAllPermissions";
    ExtensionRequest["TRANSACTIONS_GET"] = "transactions_getTransaction";
    ExtensionRequest["TRANSACTIONS_UPDATE"] = "transactions_updateTransaction";
    ExtensionRequest["SEND_VALIDATE"] = "send_validate";
    ExtensionRequest["SEND_SUBMIT"] = "send_submit";
    ExtensionRequest["SETTINGS_GET"] = "settings_get";
    ExtensionRequest["SETTINGS_UPDATE_COLLECTIBLES_VISIBILITY"] = "settings_update_collectibles_visibility";
    ExtensionRequest["SETTINGS_UPDATE_CURRENCY"] = "settings_update_currency";
    ExtensionRequest["SETTINGS_UPDATE_SHOW_NO_BALANCE"] = "settings_update_show_no_balance";
    ExtensionRequest["SETTINGS_UPDATE_THEME"] = "settings_update_theme";
    ExtensionRequest["SETTINGS_UPDATE_TOKENS_VISIBILITY"] = "settings_update_tokens_visibility";
    ExtensionRequest["SETTINGS_ADD_CUSTOM_TOKEN"] = "settings_add_custom_token";
    ExtensionRequest["SETTINGS_GET_TOKEN_DATA"] = "settings_get_token_data";
    ExtensionRequest["SETTINGS_SET_DEFAULT_EXTENSION"] = "settings_set_default_extension";
    ExtensionRequest["SETTINGS_GET_DEFAULT_EXTENSION"] = "settings_get_default_extension";
    ExtensionRequest["SETTINGS_SET_ANALYTICS_CONSENT"] = "settings_set_analytics_consent";
    ExtensionRequest["SETTINGS_SET_LANGUAGE"] = "settings_set_language";
    ExtensionRequest["SETTINGS_SET_CORE_ASSISTANT"] = "settings_set_core_assistant";
    ExtensionRequest["CONTACTS_GET"] = "contacts_get";
    ExtensionRequest["CONTACTS_CREATE"] = "contacts_create";
    ExtensionRequest["CONTACTS_UPDATE"] = "contacts_update";
    ExtensionRequest["CONTACTS_REMOVE"] = "contacts_remove";
    ExtensionRequest["FAVORITES_CREATE"] = "favorites_create";
    ExtensionRequest["FAVORITES_REMOVE"] = "favorites_remove";
    ExtensionRequest["FAVORITES_GET"] = "favorites_get";
    ExtensionRequest["SWAP_GET_RATE"] = "swap_get_rate";
    ExtensionRequest["SWAP_PERFORM"] = "swap_perform";
    ExtensionRequest["NETWORK_FEE_GET"] = "network_fee_get";
    ExtensionRequest["LEDGER_INIT_TRANSPORT"] = "ledger_init_transport";
    ExtensionRequest["LEDGER_HAS_TRANSPORT"] = "ledger_has_transport";
    ExtensionRequest["LEDGER_RESPONSE"] = "ledger_response";
    ExtensionRequest["LEDGER_REMOVE_TRANSPORT"] = "ledger_remove_transport";
    ExtensionRequest["LEDGER_CLOSE_TRANSPORT"] = "ledger_close_transport";
    ExtensionRequest["SHOW_LEDGER_VERSION_WARNING"] = "show_ledger_version_warning";
    ExtensionRequest["LEDGER_VERSION_WARNING_CLOSED"] = "ledger_version_warning_closed";
    ExtensionRequest["LEDGER_MIGRATE_MISSING_PUBKEYS"] = "ledger_migrate_missing_pubkeys";
    ExtensionRequest["KEYSTONE_SUBMIT_SIGNATURE"] = "keystone_submit_signature";
    ExtensionRequest["NAVIGATION_HISTORY_GET"] = "navigation_history_get";
    ExtensionRequest["NAVIGATION_HISTORY_SET"] = "navigation_history_set";
    ExtensionRequest["NAVIGATION_HISTORY_DATA_GET"] = "navigation_history_data_get";
    ExtensionRequest["NAVIGATION_HISTORY_DATA_SET"] = "navigation_history_data_set";
    ExtensionRequest["ANALYTICS_INIT_IDS"] = "analytics_init_ids";
    ExtensionRequest["ANALYTICS_STORE_IDS"] = "analytics_store_ids";
    ExtensionRequest["ANALYTICS_CLEAR_IDS"] = "analytics_clear_ids";
    ExtensionRequest["ANALYTICS_GET_IDS"] = "analytics_get_ids";
    ExtensionRequest["ANALYTICS_CAPTURE_EVENT"] = "analytics_capture_event";
    ExtensionRequest["FEATURE_FLAGS_GET"] = "feature_flags_get";
    ExtensionRequest["RESET_EXTENSION_STATE"] = "reset_extension_state";
    ExtensionRequest["HISTORY_GET"] = "history_get";
    ExtensionRequest["DEFI_GET_PORTFOLIO"] = "defi_get_portfolio";
    ExtensionRequest["CURRENCIES_GET_EXCHANGE_RATES"] = "currencies_get_exchange_rates";
    ExtensionRequest["GET_NETWORK_TOKENS"] = "get_network_tokens";
    ExtensionRequest["WALLET_CONNECT_ESTABLISH_REQUIRED_SESSION"] = "wallet_connect_establish_required_session";
    ExtensionRequest["WALLET_CONNECT_IMPORT_ACCOUNT"] = "wallet_connect_import_account";
    ExtensionRequest["FIREBLOCKS_UPDATE_API_CREDENTIALS"] = "fireblocks_update_api_credentials";
    ExtensionRequest["SEEDLESS_UPDATE_SIGNER_TOKEN"] = "seedless_update_signer_token";
    ExtensionRequest["SEEDLESS_HAS_TOKEN_EXPIRED"] = "seedless_has_token_expired";
    ExtensionRequest["SEEDLESS_INIT_RECOVERY_PHRASE_EXPORT"] = "seedless_init_recovery_phrase_export";
    ExtensionRequest["SEEDLESS_CANCEL_RECOVERY_PHRASE_EXPORT"] = "seedless_cancel_recovery_phrase_export";
    ExtensionRequest["SEEDLESS_GET_RECOVERY_PHRASE_EXPORT_STATE"] = "seedless_get_recovery_phrase_export_state";
    ExtensionRequest["SEEDLESS_COMPLETE_RECOVERY_PHRASE_EXPORT"] = "seedless_complete_recovery_phrase_export";
    ExtensionRequest["SEEDLESS_SUBMIT_MFA_RESPONSE"] = "seedless_submit_mfa_response";
    ExtensionRequest["SEEDLESS_GET_RECOVERY_METHODS"] = "seedless_get_recovery_methods";
    ExtensionRequest["SEEDLESS_INIT_AUTHENTICATOR_CHANGE"] = "seedless_init_authenticator_change";
    ExtensionRequest["SEEDLESS_COMPLETE_AUTHENTICATOR_CHANGE"] = "seedless_complete_authenticator_change";
    ExtensionRequest["SEEDLESS_CHOOSE_MFA_METHOD"] = "seedless_choose_mfa_method";
    ExtensionRequest["SEEDLESS_ADD_FIDO_DEVICE"] = "seedless_add_fido_device";
    ExtensionRequest["SEEDLESS_REMOVE_FIDO_DEVICE"] = "seedless_remove_fido_device";
    ExtensionRequest["SEEDLESS_REMOVE_TOTP"] = "seedless_remove_totp";
    ExtensionRequest["SEEDLESS_DERIVE_MISSING_KEYS"] = "seedless_derive_missing_keys";
    ExtensionRequest["UNIFIED_BRIDGE_GET_FEE"] = "unified_bridge_get_fee";
    ExtensionRequest["UNIFIED_BRIDGE_ESTIMATE_GAS"] = "unified_bridge_estimate_gas";
    ExtensionRequest["UNIFIED_BRIDGE_TRANSFER_ASSET"] = "unified_bridge_transfer_asset";
    ExtensionRequest["UNIFIED_BRIDGE_TRACK_TRANSFER"] = "unified_bridge_track_transfer";
    ExtensionRequest["UNIFIED_BRIDGE_GET_STATE"] = "unified_bridge_get_state";
    ExtensionRequest["UNIFIED_BRIDGE_GET_ASSETS"] = "unified_bridge_get_assets";
    ExtensionRequest["WALLET_IMPORT_SEED_PHRASE"] = "wallet_import_seed_phrase";
    ExtensionRequest["WALLET_IMPORT_LEDGER"] = "wallet_import_ledger";
    ExtensionRequest["BLOCKAID_DAPP_SCAN"] = "blockaid_dapp_scan";
    ExtensionRequest["GASLESS_FETCH_AND_SOLVE_CHALLENGE"] = "gasless_fetch_and_solve_challange";
    ExtensionRequest["GASLESS_FUND_TX"] = "gasless_fund_tx";
    ExtensionRequest["GASLESS_GET_ELIGIBILITY"] = "gasless_get_eligibility";
    ExtensionRequest["GASLESS_SET_HEX_VALUES"] = "gasless_set_hex_values";
    ExtensionRequest["GASLESS_SET_DEFAUlT_STATE_VALUES"] = "gasless_set_default_state_values";
    ExtensionRequest["GASLESS_CREATE_OFFSCREEN"] = "gasless_create_offscreen";
    ExtensionRequest["GASLESS_CLOSE_OFFSCREEN"] = "gasless_close_offscreen";
    ExtensionRequest["FIREBASE_SET_MODEL"] = "firebase_set_model";
    ExtensionRequest["FIREBASE_SEND_MESSAGE"] = "firebase_send_message";
    ExtensionRequest["NOTIFICATION_SUBSCRIBE"] = "notification_subscribe";
    ExtensionRequest["NOTIFICATION_UNSUBSCRIBE"] = "notification_unsubscribe";
    ExtensionRequest["NOTIFICATION_GET_SUBSCRIPTIONS"] = "notification_get_subscriptions";
    return ExtensionRequest;
}({});
function isConnectionEvent(message) {
    return !message.hasOwnProperty('id') && message.hasOwnProperty('name');
}
function isConnectionResponse(message) {
    return message.hasOwnProperty('id') && !message.hasOwnProperty('name') && !message.hasOwnProperty('value');
}
const CORE_DOMAINS = [
    'localhost',
    '127.0.0.1',
    'core-web.pages.dev',
    'core.app',
    'test.core.app',
    'ava-labs.github.io',
    'avacloud.io',
    'avacloud-app.pages.dev',
    'redesign-aa3.pages.dev'
];


}),
"../../packages/types/src/ui.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  ContextContainer: () => (ContextContainer)
});
var ContextContainer = /*#__PURE__*/ function(ContextContainer) {
    ContextContainer["POPUP"] = "/popup.html";
    ContextContainer["CONFIRM"] = "/confirm.html";
    ContextContainer["HOME"] = "/home.html";
    ContextContainer["FULLSCREEN"] = "/fullscreen.html";
    return ContextContainer;
}({});


}),
"../../packages/types/src/unified-bridge.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  UNIFIED_BRIDGE_DEFAULT_STATE: () => (UNIFIED_BRIDGE_DEFAULT_STATE),
  UNIFIED_BRIDGE_STATE_STORAGE_KEY: () => (UNIFIED_BRIDGE_STATE_STORAGE_KEY),
  UNIFIED_BRIDGE_TRACKED_FLAGS: () => (UNIFIED_BRIDGE_TRACKED_FLAGS),
  UnifiedBridgeEvent: () => (UnifiedBridgeEvent)
});
/* ESM import */var _feature_flags__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/types/src/feature-flags.ts");

const UNIFIED_BRIDGE_TRACKED_FLAGS = [
    _feature_flags__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.UNIFIED_BRIDGE_CCTP,
    _feature_flags__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.UNIFIED_BRIDGE_ICTT,
    _feature_flags__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.UNIFIED_BRIDGE_AB_AVA_TO_BTC,
    _feature_flags__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.UNIFIED_BRIDGE_AB_BTC_TO_AVA,
    _feature_flags__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.UNIFIED_BRIDGE_AB_EVM
];
const UNIFIED_BRIDGE_DEFAULT_STATE = {
    pendingTransfers: {}
};
const UNIFIED_BRIDGE_STATE_STORAGE_KEY = 'UNIFIED_BRIDGE_STATE';
var UnifiedBridgeEvent = /*#__PURE__*/ function(UnifiedBridgeEvent) {
    UnifiedBridgeEvent["StateUpdated"] = "UNIFIED_BRIDGE_STATE_UPDATED";
    UnifiedBridgeEvent["TransferStepChange"] = "UNIFIED_BRIDGE_TRASNFER_STEP_CHANGE";
    UnifiedBridgeEvent["AssetsUpdated"] = "UNIFIED_BRIDGE_ASSETS_UPDATED";
    return UnifiedBridgeEvent;
}({});


}),
"../../packages/types/src/util-types.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  ACTION_HANDLED_BY_MODULE: () => (ACTION_HANDLED_BY_MODULE),
  DEFERRED_RESPONSE: () => (DEFERRED_RESPONSE)
});
const ACTION_HANDLED_BY_MODULE = '__handled.via.vm.modules__';
const DEFERRED_RESPONSE = Symbol();


}),
"../../packages/types/src/wallet-connect.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  CORE_MOBILE_WALLET_ID: () => (CORE_MOBILE_WALLET_ID),
  FIREBLOCKS_APP_NAME: () => (FIREBLOCKS_APP_NAME),
  WalletConnectError: () => (WalletConnectError),
  WalletConnectErrorCode: () => (WalletConnectErrorCode),
  WalletConnectEvent: () => (WalletConnectEvent),
  isNoMatchingKeyError: () => (isNoMatchingKeyError),
  isProposalExpiredError: () => (isProposalExpiredError)
});
var WalletConnectEvent = /*#__PURE__*/ function(WalletConnectEvent) {
    WalletConnectEvent["UriGenerated"] = "WalletConnect:uri_generated";
    WalletConnectEvent["SessionPermissionsMismatch"] = "WalletConnect:session_permissions_mismatch";
    return WalletConnectEvent;
}({});
const CORE_MOBILE_WALLET_ID = 'c3de833a-9cb0-4274-bb52-86e402ecfcd3';
const FIREBLOCKS_APP_NAME = 'Fireblocks';
const isProposalExpiredError = (err)=>err instanceof Error && err.message === 'Proposal expired';
const isNoMatchingKeyError = (err)=>err instanceof Error && err.message.includes('No matching key');
var WalletConnectErrorCode = /*#__PURE__*/ function(WalletConnectErrorCode) {
    WalletConnectErrorCode["NoAccountsConnected"] = "no-accounts-connected";
    WalletConnectErrorCode["NoClient"] = "client-not-initialized";
    WalletConnectErrorCode["ClientInitFailed"] = "client-init-failed";
    WalletConnectErrorCode["ProposalExpired"] = "proposal-expired";
    WalletConnectErrorCode["IncorrectAddress"] = "incorrect-address";
    WalletConnectErrorCode["UnknownError"] = "unknown-error";
    WalletConnectErrorCode["UserRejected"] = "user-rejected";
    return WalletConnectErrorCode;
}({});
class WalletConnectError extends Error {
    constructor(message, code, originalError){
        super(message);
        this.code = code;
        this.originalError = originalError;
    }
}


}),
"../../packages/types/src/wallet.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  SUPPORTED_PRIMARY_SECRET_TYPES: () => (SUPPORTED_PRIMARY_SECRET_TYPES),
  SeedlessAuthProvider: () => (SeedlessAuthProvider),
  WALLET_STORAGE_KEY: () => (WALLET_STORAGE_KEY),
  WalletEvents: () => (WalletEvents),
  isSolanaMsgRequest: () => (isSolanaMsgRequest),
  isSolanaRequest: () => (isSolanaRequest)
});
/* ESM import */var _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/@avalabs/vm-module-types/dist/index.js");
/* ESM import */var _secrets__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/types/src/secrets.ts");


const isSolanaRequest = (sigReq)=>'type' in sigReq && (sigReq.type === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.RpcMethod.SOLANA_SIGN_AND_SEND_TRANSACTION || sigReq.type === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.RpcMethod.SOLANA_SIGN_TRANSACTION || sigReq.type === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.RpcMethod.SOLANA_SIGN_MESSAGE);
const isSolanaMsgRequest = (sigReq)=>sigReq.type === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.RpcMethod.SOLANA_SIGN_MESSAGE;
var WalletEvents = /*#__PURE__*/ function(WalletEvents) {
    WalletEvents["WALLET_STATE_UPDATE"] = "wallet-state-updated";
    return WalletEvents;
}({});
const WALLET_STORAGE_KEY = 'wallet';
const SUPPORTED_PRIMARY_SECRET_TYPES = [
    _secrets__WEBPACK_IMPORTED_MODULE_1__.SecretType.Mnemonic,
    _secrets__WEBPACK_IMPORTED_MODULE_1__.SecretType.Keystone,
    _secrets__WEBPACK_IMPORTED_MODULE_1__.SecretType.Ledger,
    _secrets__WEBPACK_IMPORTED_MODULE_1__.SecretType.LedgerLive,
    _secrets__WEBPACK_IMPORTED_MODULE_1__.SecretType.Seedless
];
var SeedlessAuthProvider = /*#__PURE__*/ function(SeedlessAuthProvider) {
    SeedlessAuthProvider["Google"] = "google";
    SeedlessAuthProvider["Apple"] = "apple";
    return SeedlessAuthProvider;
}({});


}),
"../../packages/types/src/web3.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  WalletExtensionType: () => (WalletExtensionType)
});
var WalletExtensionType = /*#__PURE__*/ function(WalletExtensionType) {
    WalletExtensionType["CORE"] = "CORE";
    WalletExtensionType["METAMASK"] = "METAMASK";
    WalletExtensionType["UNKNOWN"] = "UNKNOWN";
    WalletExtensionType["RABBY"] = "RABBY";
    WalletExtensionType["COINBASE"] = "COINBASE";
    WalletExtensionType["PHANTOM"] = "PHANTOM";
    WalletExtensionType["ZERION"] = "ZERION";
    WalletExtensionType["KEPLR"] = "KEPLR";
    return WalletExtensionType;
}({});


}),
"../../packages/ui/src/contexts/AccountManagerProvider.tsx": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  AccountManagerContext: () => (AccountManagerContext),
  AccountManagerProvider: () => (AccountManagerProvider),
  SelectionMode: () => (SelectionMode),
  useAccountManager: () => (useAccountManager)
});
/* ESM import */var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/jsx-dev-runtime.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../packages/common/src/index.ts");
/* ESM import */var _AccountsProvider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../packages/ui/src/contexts/AccountsProvider/index.tsx");
/* ESM import */var _FeatureFlagsProvider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../packages/ui/src/contexts/FeatureFlagsProvider/index.tsx");






const AccountManagerContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({
    exitManageMode () {},
    isManageMode: false,
    isAccountSelectable () {
        return false;
    },
    selectedAccounts: [],
    selectAccount () {},
    deselectAccount () {},
    toggleManageMode () {}
});
var SelectionMode = /*#__PURE__*/ function(SelectionMode) {
    SelectionMode[SelectionMode["None"] = 0] = "None";
    SelectionMode[SelectionMode["Any"] = 1] = "Any";
    SelectionMode[SelectionMode["Consecutive"] = 2] = "Consecutive";
    return SelectionMode;
}({});
const AccountManagerProvider = ({ children })=>{
    const { accounts } = (0,_AccountsProvider__WEBPACK_IMPORTED_MODULE_4__.useAccountsContext)();
    const { featureFlags } = (0,_FeatureFlagsProvider__WEBPACK_IMPORTED_MODULE_5__.useFeatureFlagContext)();
    const [selectedAccounts, setSelectedAccounts] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);
    const [isManageMode, setIsManageMode] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
    const isAccountSelectable = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((account)=>{
        if (!featureFlags[_core_types__WEBPACK_IMPORTED_MODULE_2__.FeatureGates.PRIMARY_ACCOUNT_REMOVAL] || !(0,_core_common__WEBPACK_IMPORTED_MODULE_3__.isPrimaryAccount)(account)) {
            return account.id in accounts.imported;
        }
        const { id: accountId, walletId } = account;
        if (selectedAccounts.includes(accountId)) {
            return true;
        }
        const walletPrimaryAccounts = accounts.primary[walletId];
        if (!walletPrimaryAccounts) {
            return false;
        }
        const allAccountsCount = Object.values(accounts.primary).flat().length;
        if (allAccountsCount - 1 === selectedAccounts.length) {
            return false;
        }
        return walletPrimaryAccounts.slice(walletPrimaryAccounts.indexOf(account) + 1).every(({ id })=>selectedAccounts.includes(id));
        return false;
    }, [
        featureFlags,
        selectedAccounts,
        accounts.primary,
        accounts.imported
    ]);
    const selectAccount = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((accountId)=>{
        setSelectedAccounts((currentSet)=>{
            return [
                ...currentSet,
                accountId
            ];
        });
    }, []);
    const deselectAccount = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((accountId, deselectPrevious = false)=>{
        setSelectedAccounts((currentSet)=>{
            const index = currentSet.indexOf(accountId);
            if (index === -1) {
                return currentSet;
            }
            currentSet.splice(index, deselectPrevious ? currentSet.length - index : 1);
            return Array.from(currentSet);
        });
    }, []);
    const toggleManageMode = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{
        setIsManageMode((wasManageModeEnabled)=>!wasManageModeEnabled);
    }, []);
    const exitManageMode = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{
        setIsManageMode(false);
        setSelectedAccounts([]);
    }, []);
    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{
        setSelectedAccounts([]);
    }, [
        isManageMode
    ]);
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(AccountManagerContext.Provider, {
        value: {
            exitManageMode,
            isAccountSelectable,
            isManageMode,
            selectedAccounts,
            selectAccount,
            deselectAccount,
            toggleManageMode
        },
        children: children
    }, void 0, false, {
        fileName: "/Users/meehow/ava/extension-avalanche/packages/ui/src/contexts/AccountManagerProvider.tsx",
        lineNumber: 127,
        columnNumber: 5
    }, undefined);
};
function useAccountManager() {
    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(AccountManagerContext);
}


}),
"../../packages/ui/src/contexts/AccountsProvider/AccountsProvider.tsx": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  AccountsContextProvider: () => (AccountsContextProvider),
  useAccountsContext: () => (useAccountsContext)
});
/* ESM import */var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/jsx-dev-runtime.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/observable/concat.js");
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/observable/from.js");
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/filter.js");
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/map.js");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../packages/common/src/index.ts");
/* ESM import */var _isAccountsUpdatedEvent__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../packages/ui/src/contexts/AccountsProvider/isAccountsUpdatedEvent.ts");
/* ESM import */var _ConnectionProvider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../packages/ui/src/contexts/ConnectionProvider.tsx");







const AccountsContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({});
function AccountsContextProvider({ children }) {
    const { request, events } = (0,_ConnectionProvider__WEBPACK_IMPORTED_MODULE_5__.useConnectionContext)();
    const [accounts, setAccounts] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({
        active: undefined,
        primary: {},
        imported: {}
    });
    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{
        if (!request || !events) {
            return;
        }
        const subscription = (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.concat)((0,rxjs__WEBPACK_IMPORTED_MODULE_7__.from)(request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.ACCOUNT_GET_ACCOUNTS
        })), events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_8__.filter)(_isAccountsUpdatedEvent__WEBPACK_IMPORTED_MODULE_4__.isAccountsUpdatedEvent), (0,rxjs__WEBPACK_IMPORTED_MODULE_9__.map)((evt)=>{
            return evt.value;
        }))).subscribe((result)=>{
            setAccounts(result);
        });
        return ()=>{
            subscription.unsubscribe();
        };
    }, [
        events,
        request
    ]);
    const allAccounts = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>[
            ...Object.values(accounts.primary).flat(),
            ...Object.values(accounts.imported)
        ], [
        accounts.imported,
        accounts.primary
    ]);
    const getAllAccountsForVM = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((vm)=>allAccounts.filter((acc)=>(0,_core_common__WEBPACK_IMPORTED_MODULE_3__.getAddressByVMType)(acc, vm)), [
        allAccounts
    ]);
    const getAccount = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((address)=>allAccounts.find((acc)=>(0,_core_common__WEBPACK_IMPORTED_MODULE_3__.getAllAddressesForAccount)(acc).map((addy)=>addy?.toLowerCase()).includes(address.toLowerCase())), [
        allAccounts
    ]);
    const getAccountById = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((accountId)=>allAccounts.find((acc)=>acc.id.toLowerCase() === accountId.toLowerCase()), [
        allAccounts
    ]);
    const selectAccount = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((id)=>{
        return request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.ACCOUNT_SELECT,
            params: [
                id
            ]
        });
    }, [
        request
    ]);
    const renameAccount = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((id, name)=>{
        return request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_2__.DAppProviderRequest.ACCOUNT_RENAME,
            params: [
                id,
                name
            ]
        });
    }, [
        request
    ]);
    const addAccount = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((name, importData, walletId)=>request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.ACCOUNT_ADD,
            params: {
                name,
                importData,
                walletId
            }
        }), [
        request
    ]);
    const deleteAccounts = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((ids)=>request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_2__.DAppProviderRequest.ACCOUNTS_DELETE,
            params: [
                ids
            ]
        }), [
        request
    ]);
    const isActiveAccount = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((id)=>{
        return accounts.active?.id === id;
    }, [
        accounts
    ]);
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(AccountsContext.Provider, {
        value: {
            accounts,
            getAccount,
            getAccountById,
            allAccounts,
            getAllAccountsForVM,
            isActiveAccount,
            selectAccount,
            renameAccount,
            addAccount,
            deleteAccounts
        },
        children: children
    }, void 0, false, {
        fileName: "/Users/meehow/ava/extension-avalanche/packages/ui/src/contexts/AccountsProvider/AccountsProvider.tsx",
        lineNumber: 153,
        columnNumber: 5
    }, this);
}
function useAccountsContext() {
    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(AccountsContext);
}


}),
"../../packages/ui/src/contexts/AccountsProvider/index.tsx": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  AccountsContextProvider: () => (/* reexport safe */ _AccountsProvider__WEBPACK_IMPORTED_MODULE_0__.AccountsContextProvider),
  useAccountsContext: () => (/* reexport safe */ _AccountsProvider__WEBPACK_IMPORTED_MODULE_0__.useAccountsContext)
});
/* ESM import */var _AccountsProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/ui/src/contexts/AccountsProvider/AccountsProvider.tsx");



}),
"../../packages/ui/src/contexts/AccountsProvider/isAccountsUpdatedEvent.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isAccountsUpdatedEvent: () => (isAccountsUpdatedEvent)
});
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/types/src/index.ts");

function isAccountsUpdatedEvent(evt) {
    return evt.name === _core_types__WEBPACK_IMPORTED_MODULE_0__.AccountsEvents.ACCOUNTS_UPDATED;
}


}),
"../../packages/ui/src/contexts/AnalyticsProvider/AnalyticsProvider.tsx": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  AnalyticsContextProvider: () => (AnalyticsContextProvider),
  useAnalyticsContext: () => (useAnalyticsContext)
});
/* ESM import */var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/jsx-dev-runtime.js");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/observable/merge.js");
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/observable/from.js");
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/filter.js");
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/first.js");
/* ESM import */var _ConnectionProvider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../packages/ui/src/contexts/ConnectionProvider.tsx");
/* ESM import */var _SettingsProvider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../packages/ui/src/contexts/SettingsProvider/index.tsx");
/* ESM import */var _isAnalyticsStateUpdatedEvent__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../packages/ui/src/contexts/AnalyticsProvider/isAnalyticsStateUpdatedEvent.ts");








const AnalyticsContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_2__.createContext)({});
const windowId = crypto.randomUUID();
function AnalyticsContextProvider({ children }) {
    const { request, events } = (0,_ConnectionProvider__WEBPACK_IMPORTED_MODULE_3__.useConnectionContext)();
    const { analyticsConsent } = (0,_SettingsProvider__WEBPACK_IMPORTED_MODULE_4__.useSettingsContext)();
    const [isInitialized, setIsInitialized] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false);
    const capture = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(async (eventName, properties, /**
       * Sends the request regardless of the analyticsConsent state's value
       * The service will still validate if the setting is properly enabled
       * Useful when you don't want to / can't wait for the changes to be reflected in the state (e.g: when disabling analytics)
       */ forceRequestAttempt, useEncryption = false)=>{
        if (analyticsConsent === _core_types__WEBPACK_IMPORTED_MODULE_1__.AnalyticsConsent.Denied && !forceRequestAttempt) {
            return;
        }
        try {
            await request({
                method: _core_types__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.ANALYTICS_CAPTURE_EVENT,
                params: [
                    {
                        name: eventName,
                        windowId,
                        properties: {
                            ...properties
                        }
                    },
                    useEncryption
                ]
            });
        } catch (err) {
            console.error(err);
        }
    }, [
        analyticsConsent,
        request
    ]);
    /** Same as capture(), but always sets useEncryption param to true */ const captureEncrypted = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(async (eventName, properties, forceRequestAttempt)=>capture(eventName, properties, forceRequestAttempt, true), [
        capture
    ]);
    const initAnalyticsIds = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(async (storeInStorage)=>{
        await request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.ANALYTICS_INIT_IDS,
            params: [
                storeInStorage
            ]
        });
    }, [
        request
    ]);
    const stopDataCollection = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(async ()=>{
        await request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.ANALYTICS_CLEAR_IDS
        });
    }, [
        request
    ]);
    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{
        const subscription = (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.merge)((0,rxjs__WEBPACK_IMPORTED_MODULE_7__.from)(request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.ANALYTICS_GET_IDS
        })).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_8__.filter)((ids)=>!!ids)), events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_8__.filter)(_isAnalyticsStateUpdatedEvent__WEBPACK_IMPORTED_MODULE_5__.isAnalyticsStateUpdatedEvent))).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_9__.first)()).subscribe((ids)=>{
            if (!ids) {
                setIsInitialized(!!ids);
            }
            capture('WindowOpened', {
                path: window.location.pathname
            });
        });
        return ()=>{
            subscription.unsubscribe();
        };
    }, [
        capture,
        events,
        request
    ]);
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(AnalyticsContext.Provider, {
        value: {
            capture,
            captureEncrypted,
            isInitialized,
            initAnalyticsIds,
            stopDataCollection
        },
        children: children
    }, void 0, false, {
        fileName: "/Users/meehow/ava/extension-avalanche/packages/ui/src/contexts/AnalyticsProvider/AnalyticsProvider.tsx",
        lineNumber: 129,
        columnNumber: 5
    }, this);
}
function useAnalyticsContext() {
    return (0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(AnalyticsContext);
}


}),
"../../packages/ui/src/contexts/AnalyticsProvider/index.tsx": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  AnalyticsContextProvider: () => (/* reexport safe */ _AnalyticsProvider__WEBPACK_IMPORTED_MODULE_0__.AnalyticsContextProvider),
  useAnalyticsContext: () => (/* reexport safe */ _AnalyticsProvider__WEBPACK_IMPORTED_MODULE_0__.useAnalyticsContext)
});
/* ESM import */var _AnalyticsProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/ui/src/contexts/AnalyticsProvider/AnalyticsProvider.tsx");



}),
"../../packages/ui/src/contexts/AnalyticsProvider/isAnalyticsStateUpdatedEvent.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isAnalyticsStateUpdatedEvent: () => (isAnalyticsStateUpdatedEvent)
});
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/types/src/index.ts");

function isAnalyticsStateUpdatedEvent(evt) {
    return evt.name === _core_types__WEBPACK_IMPORTED_MODULE_0__.AnalyticsEvents.ANALYTICS_STATE_UPDATED;
}


}),
"../../packages/ui/src/contexts/ApprovalsProvider/ApprovalsProvider.tsx": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  ApprovalsContext: () => (ApprovalsContext),
  ApprovalsContextProvider: () => (ApprovalsContextProvider),
  useApprovalsContext: () => (useApprovalsContext)
});
/* ESM import */var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/jsx-dev-runtime.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/filter.js");
/* ESM import */var _ConnectionProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/ui/src/contexts/ConnectionProvider.tsx");
/* ESM import */var _isApprovalRequest__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../packages/ui/src/contexts/ApprovalsProvider/isApprovalRequest.ts");
/* ESM import */var _isActionsUpdate__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../packages/ui/src/contexts/ApprovalsProvider/isActionsUpdate.ts");






const ApprovalsContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({
    approval: undefined
});
function ApprovalsContextProvider({ children }) {
    const { events, tabId } = (0,_ConnectionProvider__WEBPACK_IMPORTED_MODULE_2__.useConnectionContext)();
    const [approval, setApproval] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();
    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{
        const approvalRequests = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_5__.filter)(_isApprovalRequest__WEBPACK_IMPORTED_MODULE_3__.isApprovalRequest)).subscribe(async (event)=>{
            if (tabId !== event.value.action.tabId) {
                return;
            }
            setApproval(event.value);
        });
        return ()=>{
            approvalRequests.unsubscribe();
        };
    }, [
        events,
        tabId
    ]);
    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{
        const actionsUpdates = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_5__.filter)(_isActionsUpdate__WEBPACK_IMPORTED_MODULE_4__.isActionsUpdate)).subscribe(async (event)=>{
            setApproval((prev)=>{
                if (!prev) {
                    return undefined;
                }
                const updatedAction = event.value[prev.action.actionId];
                // If the action was completed (removed), clean up the state.
                if (!updatedAction) {
                    return undefined;
                }
                // Otherwise it may have been updated -> update state.
                return {
                    ...prev,
                    action: updatedAction
                };
            });
        });
        return ()=>{
            actionsUpdates.unsubscribe();
        };
    }, [
        events
    ]);
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(ApprovalsContext.Provider, {
        value: {
            approval
        },
        children: children
    }, void 0, false, {
        fileName: "/Users/meehow/ava/extension-avalanche/packages/ui/src/contexts/ApprovalsProvider/ApprovalsProvider.tsx",
        lineNumber: 66,
        columnNumber: 5
    }, this);
}
function useApprovalsContext() {
    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ApprovalsContext);
}


}),
"../../packages/ui/src/contexts/ApprovalsProvider/index.tsx": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  ApprovalsContext: () => (/* reexport safe */ _ApprovalsProvider__WEBPACK_IMPORTED_MODULE_0__.ApprovalsContext),
  ApprovalsContextProvider: () => (/* reexport safe */ _ApprovalsProvider__WEBPACK_IMPORTED_MODULE_0__.ApprovalsContextProvider),
  useApprovalsContext: () => (/* reexport safe */ _ApprovalsProvider__WEBPACK_IMPORTED_MODULE_0__.useApprovalsContext)
});
/* ESM import */var _ApprovalsProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/ui/src/contexts/ApprovalsProvider/ApprovalsProvider.tsx");



}),
"../../packages/ui/src/contexts/ApprovalsProvider/isActionsUpdate.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isActionsUpdate: () => (isActionsUpdate)
});
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/types/src/index.ts");

const isActionsUpdate = (ev)=>ev.name === _core_types__WEBPACK_IMPORTED_MODULE_0__.ActionsEvent.ACTION_UPDATED;


}),
"../../packages/ui/src/contexts/ApprovalsProvider/isApprovalRequest.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isApprovalRequest: () => (isApprovalRequest)
});
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/types/src/index.ts");

function isApprovalRequest(evt) {
    return evt?.name === _core_types__WEBPACK_IMPORTED_MODULE_0__.ApprovalEvent.ApprovalRequested;
}


}),
"../../packages/ui/src/contexts/BalancesProvider/BalancesProvider.tsx": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  BalancesProvider: () => (BalancesProvider),
  IPFS_URL: () => (IPFS_URL),
  useBalancesContext: () => (useBalancesContext)
});
/* ESM import */var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/jsx-dev-runtime.js");
/* ESM import */var _avalabs_glacier_sdk__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__("../../node_modules/@avalabs/glacier-sdk/esm/generated/models/Erc721Token.js");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var lodash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/lodash/lodash.js");
/* ESM import */var lodash__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_2__);
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/filter.js");
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/map.js");
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../packages/common/src/index.ts");
/* ESM import */var _AccountsProvider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../packages/ui/src/contexts/AccountsProvider/index.tsx");
/* ESM import */var _NetworkProvider__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../../packages/ui/src/contexts/NetworkProvider/index.tsx");
/* ESM import */var _isBalancesUpdatedEvent__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../../packages/ui/src/contexts/BalancesProvider/isBalancesUpdatedEvent.ts");
/* ESM import */var _ConnectionProvider__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("../../packages/ui/src/contexts/ConnectionProvider.tsx");











const IPFS_URL = 'https://ipfs.io';
var BalanceActionType = /*#__PURE__*/ function(BalanceActionType) {
    BalanceActionType["UPDATE_BALANCES"] = "UPDATE_BALANCES";
    BalanceActionType["SET_LOADING"] = "SET_LOADING";
    BalanceActionType["UPDATE_NFT_METADATA"] = "UPDATE_NFT_METADATA";
    return BalanceActionType;
}(BalanceActionType || {});
const BalancesContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)({
    balances: {
        loading: true
    },
    getTokenPrice () {
        return undefined;
    },
    async refreshNftMetadata () {},
    async updateBalanceOnNetworks () {},
    registerSubscriber () {},
    unregisterSubscriber () {},
    isTokensCached: true,
    totalBalance: undefined,
    getTotalBalance () {
        return undefined;
    }
});
function balancesReducer(state, action) {
    switch(action.type){
        case "SET_LOADING":
            return {
                ...state,
                loading: action.payload
            };
        case "UPDATE_BALANCES":
            {
                if (!Object.keys(action.payload).length) {
                    return {
                        ...state
                    };
                }
                return {
                    ...state,
                    loading: false,
                    cached: action.payload.isBalancesCached,
                    // use deep merge to make sure we keep all accounts in there, even after a partial update
                    tokens: (0,lodash__WEBPACK_IMPORTED_MODULE_2__.merge)({}, state.tokens, action.payload.balances?.tokens),
                    nfts: {
                        ...state.nfts,
                        ...action.payload.balances?.nfts
                    }
                };
            }
        case "UPDATE_NFT_METADATA":
            return {
                ...state,
                nfts: updateMatchingNftMetadata({
                    chainId: action.payload.chainId,
                    address: action.payload.address,
                    tokenId: action.payload.tokenId,
                    newTokenData: action.payload.updates,
                    nfts: state.nfts
                })
            };
        default:
            throw new Error();
    }
}
function BalancesProvider({ children }) {
    const { request, events } = (0,_ConnectionProvider__WEBPACK_IMPORTED_MODULE_8__.useConnectionContext)();
    const { network, favoriteNetworks, getNetwork } = (0,_NetworkProvider__WEBPACK_IMPORTED_MODULE_6__.useNetworkContext)();
    const { accounts: { active: activeAccount }, getAccount } = (0,_AccountsProvider__WEBPACK_IMPORTED_MODULE_5__.useAccountsContext)();
    const [balances, dispatch] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useReducer)(balancesReducer, {
        loading: true,
        cached: true
    });
    const [subscribers, setSubscribers] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)({});
    const polledChainIds = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>favoriteNetworks.map(({ chainId })=>chainId), [
        favoriteNetworks
    ]);
    const registerSubscriber = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((tokenTypes)=>{
        setSubscribers((oldSubscribers)=>tokenTypes.reduce((newSubscribers, tokenType)=>({
                    ...newSubscribers,
                    [tokenType]: (newSubscribers[tokenType] ?? 0) + 1
                }), oldSubscribers));
    }, []);
    const unregisterSubscriber = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((tokenTypes)=>{
        setSubscribers((oldSubscribers)=>tokenTypes.reduce((newSubscribers, tokenType)=>({
                    ...newSubscribers,
                    [tokenType]: Math.max((newSubscribers[tokenType] ?? 0) - 1, 0)
                }), oldSubscribers));
    }, []);
    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{
        const subscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_9__.filter)(_isBalancesUpdatedEvent__WEBPACK_IMPORTED_MODULE_7__.isBalancesUpdatedEvent), (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.map)((evt)=>evt.value)).subscribe((balancesData)=>{
            dispatch({
                type: "UPDATE_BALANCES",
                payload: balancesData
            });
        });
        return ()=>{
            subscription.unsubscribe();
        };
    }, [
        events
    ]);
    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{
        dispatch({
            type: "SET_LOADING",
            payload: true
        });
        request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.BALANCES_GET
        }).then((balancesData)=>{
            dispatch({
                type: "UPDATE_BALANCES",
                payload: balancesData
            });
        });
    }, [
        request
    ]);
    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{
        if (!activeAccount) {
            return;
        }
        const tokenTypes = Object.entries(subscribers).filter(([, subscriberCount])=>subscriberCount > 0).map(([tokenType])=>tokenType);
        if (tokenTypes.length > 0) {
            request({
                method: _core_types__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.BALANCES_START_POLLING,
                params: [
                    activeAccount,
                    polledChainIds,
                    tokenTypes
                ]
            }).then((balancesData)=>{
                dispatch({
                    type: "UPDATE_BALANCES",
                    payload: balancesData
                });
            });
        } else {
            request({
                method: _core_types__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.BALANCES_STOP_POLLING
            });
        }
        return ()=>{
            request({
                method: _core_types__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.BALANCES_STOP_POLLING
            });
        };
    }, [
        request,
        activeAccount,
        network?.chainId,
        polledChainIds,
        subscribers
    ]);
    const updateBalanceOnNetworks = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async (accounts, chainIds)=>{
        if (!network && !chainIds?.length) {
            return;
        }
        const updatedBalances = await request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.NETWORK_BALANCES_UPDATE,
            params: [
                accounts,
                chainIds
            ]
        });
        dispatch({
            type: "UPDATE_BALANCES",
            payload: {
                balances: updatedBalances,
                isBalancesCached: false
            }
        });
    }, [
        network,
        request
    ]);
    const refreshNftMetadata = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async (address, chainId, tokenId)=>{
        const result = await request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.NFT_REFRESH_METADATA,
            params: [
                address,
                chainId,
                tokenId
            ]
        });
        if (result.metadata) {
            dispatch({
                type: "UPDATE_NFT_METADATA",
                payload: {
                    address,
                    chainId,
                    tokenId,
                    updates: result
                }
            });
        }
    }, [
        request
    ]);
    const getTotalBalance = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((addressC)=>{
        const chainIds = [
            network?.chainId,
            ...(0,_core_common__WEBPACK_IMPORTED_MODULE_4__.getDefaultChainIds)(!network?.isTestnet),
            ...favoriteNetworks.map(({ chainId })=>chainId)
        ].filter(_core_common__WEBPACK_IMPORTED_MODULE_4__.isNotNullish);
        const networks = chainIds.map(getNetwork).filter(_core_common__WEBPACK_IMPORTED_MODULE_4__.isNotNullish);
        if (balances.tokens && network?.chainId) {
            return (0,_core_common__WEBPACK_IMPORTED_MODULE_4__.calculateTotalBalance)(getAccount(addressC), networks, balances.tokens);
        }
        return undefined;
    }, [
        getAccount,
        favoriteNetworks,
        getNetwork,
        network?.chainId,
        network?.isTestnet,
        balances.tokens
    ]);
    const getTokenPrice = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((addressOrSymbol, lookupNetwork)=>{
        if (!activeAccount) {
            return;
        }
        const tokenNetwork = lookupNetwork ?? network;
        if (!tokenNetwork) {
            return;
        }
        const addressForChain = (0,_core_common__WEBPACK_IMPORTED_MODULE_4__.getAddressForChain)(tokenNetwork, activeAccount);
        if (!addressForChain) {
            return;
        }
        const token = balances.tokens?.[tokenNetwork.chainId]?.[addressForChain]?.[addressOrSymbol];
        return token?.priceInCurrency;
    }, [
        balances.tokens,
        activeAccount,
        network
    ]);
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(BalancesContext.Provider, {
        value: {
            balances,
            getTokenPrice,
            refreshNftMetadata,
            updateBalanceOnNetworks,
            registerSubscriber,
            unregisterSubscriber,
            isTokensCached: balances.cached ?? true,
            totalBalance: activeAccount ? getTotalBalance(activeAccount.addressC) : undefined,
            getTotalBalance
        },
        children: children
    }, void 0, false, {
        fileName: "/Users/meehow/ava/extension-avalanche/packages/ui/src/contexts/BalancesProvider/BalancesProvider.tsx",
        lineNumber: 358,
        columnNumber: 5
    }, this);
}
function useBalancesContext() {
    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(BalancesContext);
}
const updateMatchingNftMetadata = ({ address, chainId, tokenId, nfts, newTokenData })=>{
    const existingTokenData = nfts?.[chainId]?.[address]?.[tokenId];
    if (!existingTokenData) {
        return nfts;
    }
    const isErc721 = newTokenData.ercType === _avalabs_glacier_sdk__WEBPACK_IMPORTED_MODULE_11__.Erc721Token.ercType.ERC_721;
    const imageProps = newTokenData.metadata.imageUri ? {
        logoUri: (0,_core_common__WEBPACK_IMPORTED_MODULE_4__.ipfsResolverWithFallback)(newTokenData.metadata.imageUri),
        logoSmall: (0,_core_common__WEBPACK_IMPORTED_MODULE_4__.getSmallImageForNFT)(newTokenData.metadata.imageUri)
    } : {};
    return {
        ...nfts,
        [chainId]: {
            ...nfts[chainId],
            [address]: {
                ...nfts[chainId]?.[address],
                [tokenId]: {
                    ...existingTokenData,
                    metadata: {
                        description: newTokenData.metadata.description,
                        lastUpdatedTimestamp: newTokenData.metadata.metadataLastUpdatedTimestamp,
                        properties: isErc721 ? newTokenData.metadata.attributes : newTokenData.metadata.properties
                    },
                    ...imageProps
                }
            }
        }
    };
};


}),
"../../packages/ui/src/contexts/BalancesProvider/index.tsx": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  BalancesProvider: () => (/* reexport safe */ _BalancesProvider__WEBPACK_IMPORTED_MODULE_0__.BalancesProvider),
  IPFS_URL: () => (/* reexport safe */ _BalancesProvider__WEBPACK_IMPORTED_MODULE_0__.IPFS_URL),
  useBalancesContext: () => (/* reexport safe */ _BalancesProvider__WEBPACK_IMPORTED_MODULE_0__.useBalancesContext)
});
/* ESM import */var _BalancesProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/ui/src/contexts/BalancesProvider/BalancesProvider.tsx");



}),
"../../packages/ui/src/contexts/BalancesProvider/isBalancesUpdatedEvent.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isBalancesUpdatedEvent: () => (isBalancesUpdatedEvent)
});
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/types/src/index.ts");

function isBalancesUpdatedEvent(evt) {
    return evt.name === _core_types__WEBPACK_IMPORTED_MODULE_0__.BalanceServiceEvents.UPDATED;
}


}),
"../../packages/ui/src/contexts/BridgeProvider.tsx": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  BridgeProvider: () => (BridgeProvider),
  useBridgeContext: () => (useBridgeContext)
});
/* ESM import */var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/jsx-dev-runtime.js");
/* ESM import */var _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("../../node_modules/@avalabs/core-bridge-sdk/esm/runtime/config.js");
/* ESM import */var _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("../../node_modules/@avalabs/core-bridge-sdk/esm/types/config.js");
/* ESM import */var _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__("../../node_modules/@avalabs/core-bridge-sdk/esm/contexts/BridgeSDKProvider.js");
/* ESM import */var _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__("../../node_modules/@avalabs/core-bridge-sdk/esm/utils/estimateGas.js");
/* ESM import */var _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__("../../node_modules/@avalabs/core-bridge-sdk/esm/lib/transferAssetEVM.js");
/* ESM import */var _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__("../../node_modules/@avalabs/core-bridge-sdk/esm/lib/models.js");
/* ESM import */var _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("../../node_modules/@avalabs/core-chains-sdk/esm/models.js");
/* ESM import */var _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/@avalabs/vm-module-types/dist/index.js");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);
/* ESM import */var react_i18next__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__("../../node_modules/react-i18next/dist/es/useTranslation.js");
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/filter.js");
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/map.js");
/* ESM import */var _AccountsProvider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../packages/ui/src/contexts/AccountsProvider/index.tsx");
/* ESM import */var _ConnectionProvider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../packages/ui/src/contexts/ConnectionProvider.tsx");
/* ESM import */var _NetworkProvider__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../../packages/ui/src/contexts/NetworkProvider/index.tsx");
/* ESM import */var ethers__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__("../../node_modules/ethers/lib.esm/utils/maths.js");
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../../packages/common/src/index.ts");













const bridgeContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)({});
function BridgeProvider({ children }) {
    const { network } = (0,_NetworkProvider__WEBPACK_IMPORTED_MODULE_6__.useNetworkContext)();
    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{
        (0,_avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_8__.setBridgeEnvironment)(network?.chainId === _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_9__.ChainId.AVALANCHE_MAINNET_ID ? _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_10__.Environment.PROD : _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_10__.Environment.TEST);
    }, [
        network
    ]);
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_11__.BridgeSDKProvider, {
        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(InnerBridgeProvider, {
            children: children
        }, void 0, false, {
            fileName: "/Users/meehow/ava/extension-avalanche/packages/ui/src/contexts/BridgeProvider.tsx",
            lineNumber: 72,
            columnNumber: 7
        }, this)
    }, void 0, false, {
        fileName: "/Users/meehow/ava/extension-avalanche/packages/ui/src/contexts/BridgeProvider.tsx",
        lineNumber: 71,
        columnNumber: 5
    }, this);
}
function useBridgeContext() {
    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(bridgeContext);
}
// This component is separate so it has access to useBridgeSDK
function InnerBridgeProvider({ children }) {
    const { t } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_12__.useTranslation)();
    const { request, events } = (0,_ConnectionProvider__WEBPACK_IMPORTED_MODULE_5__.useConnectionContext)();
    const { currentBlockchain, bridgeConfig } = (0,_avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_11__.useBridgeSDK)();
    const { network, avaxProviderC, ethereumProvider } = (0,_NetworkProvider__WEBPACK_IMPORTED_MODULE_6__.useNetworkContext)();
    const { accounts: { active } } = (0,_AccountsProvider__WEBPACK_IMPORTED_MODULE_4__.useAccountsContext)();
    const [bridgeState, setBridgeState] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(_core_types__WEBPACK_IMPORTED_MODULE_2__.DefaultBridgeState);
    // Separate from bridgeState so they can be filtered to the current network
    const [bridgeTransactions, setBridgeTransactions] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)({});
    const [isBridgeDevEnv, setIsDevEnvInternal] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);
    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{
        if (!events) {
            return;
        }
        request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.BRIDGE_GET_STATE
        }).then((txs)=>{
            setBridgeState(txs);
        });
        const subscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_13__.filter)(_core_common__WEBPACK_IMPORTED_MODULE_7__.isBridgeStateUpdateEventListener), (0,rxjs__WEBPACK_IMPORTED_MODULE_14__.map)((evt)=>evt.value)).subscribe((txs)=>{
            setBridgeState(txs);
        });
        return ()=>subscription.unsubscribe();
    }, [
        events,
        request
    ]);
    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{
        if (!network) return;
        const filteredState = (0,_core_common__WEBPACK_IMPORTED_MODULE_7__.filterBridgeStateToNetwork)(bridgeState, network);
        setBridgeTransactions(filteredState.bridgeTransactions);
        setIsDevEnvInternal(filteredState.isDevEnv);
    }, [
        bridgeState,
        network
    ]);
    const createBridgeTransaction = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async (bridgeTransaction)=>{
        await request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.BRIDGE_TRANSACTION_CREATE,
            params: bridgeTransaction
        });
    }, [
        request
    ]);
    const removeBridgeTransaction = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async (txHash)=>{
        await request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.BRIDGE_TRANSACTION_REMOVE,
            params: [
                txHash
            ]
        });
    }, [
        request
    ]);
    const setIsBridgeDevEnv = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((enabled)=>{
        request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.BRIDGE_SET_IS_DEV_ENV,
            params: [
                enabled
            ]
        });
    }, [
        request
    ]);
    const estimateGas = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async (amount, asset)=>{
        const isEvmSourceChain = currentBlockchain === _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_10__.Blockchain.ETHEREUM || _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_10__.Blockchain.AVALANCHE;
        if (!isEvmSourceChain || !active?.addressC || !ethereumProvider || !avaxProviderC || !bridgeConfig.config) {
            return;
        }
        return (0,_avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_15__.estimateGas)(amount, active.addressC, asset, {
            ethereum: ethereumProvider,
            avalanche: avaxProviderC
        }, bridgeConfig.config, currentBlockchain);
    }, [
        currentBlockchain,
        active?.addressC,
        avaxProviderC,
        ethereumProvider,
        bridgeConfig.config
    ]);
    const transferEVMAsset = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async (amount, asset)=>{
        let currentSignature = 1;
        let requiredSignatures = 1;
        if (currentBlockchain !== _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_10__.Blockchain.ETHEREUM && currentBlockchain !== _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_10__.Blockchain.AVALANCHE) {
            throw new Error('Wrong source chain');
        }
        const result = await (0,_avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_16__.transferAssetEVM)({
            currentBlockchain,
            amount,
            account: active?.addressC,
            asset,
            avalancheProvider: avaxProviderC,
            ethereumProvider: ethereumProvider,
            config: bridgeConfig.config,
            onStatusChange: (status)=>{
                if (status === _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_17__.WrapStatus.WAITING_FOR_DEPOSIT_CONFIRMATION) {
                    requiredSignatures = 2;
                }
                if (requiredSignatures > 1 && status === _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_17__.WrapStatus.WAITING_FOR_CONFIRMATION) {
                    currentSignature = 2;
                }
            },
            onTxHashChange: ()=>{},
            signAndSendEVM: (txData)=>{
                const tx = txData;
                return request({
                    method: _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_1__.RpcMethod.ETH_SEND_TRANSACTION,
                    params: [
                        {
                            ...mapNumberishToHex(tx),
                            // erase gasPrice if maxFeePerGas can be used
                            gasPrice: tx.maxFeePerGas ? undefined : tx.gasPrice ? (0,ethers__WEBPACK_IMPORTED_MODULE_18__.toBeHex)(tx.gasPrice) : undefined
                        }
                    ]
                }, {
                    customApprovalScreenTitle: t('Confirm Bridge'),
                    alert: requiredSignatures > currentSignature ? {
                        type: 'info',
                        title: t('This operation requires {{total}} approvals.', {
                            total: requiredSignatures
                        }),
                        notice: t('You will be prompted {{remaining}} more time(s).', {
                            remaining: requiredSignatures - currentSignature
                        })
                    } : undefined
                });
            }
        });
        return {
            hash: result
        };
    }, [
        active?.addressC,
        avaxProviderC,
        bridgeConfig.config,
        currentBlockchain,
        ethereumProvider,
        request,
        t
    ]);
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(bridgeContext.Provider, {
        value: {
            bridgeTransactions,
            estimateGas,
            transferEVMAsset,
            removeBridgeTransaction,
            createBridgeTransaction,
            isBridgeDevEnv,
            setIsBridgeDevEnv,
            bridgeState
        },
        children: children
    }, void 0, false, {
        fileName: "/Users/meehow/ava/extension-avalanche/packages/ui/src/contexts/BridgeProvider.tsx",
        lineNumber: 286,
        columnNumber: 5
    }, this);
}
const mapNumberishToHex = (tx)=>Object.fromEntries(Object.entries(tx).map(([key, value])=>[
            key,
            typeof value === 'number' || typeof value === 'bigint' ? (0,ethers__WEBPACK_IMPORTED_MODULE_18__.toBeHex)(value) : value
        ]));


}),
"../../packages/ui/src/contexts/ConnectionProvider.tsx": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  ConnectionContextProvider: () => (ConnectionContextProvider),
  useConnectionContext: () => (useConnectionContext)
});
/* ESM import */var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/jsx-dev-runtime.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/Subject.js");
/* ESM import */var webextension_polyfill__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/webextension-polyfill/dist/browser-polyfill.js");
/* ESM import */var webextension_polyfill__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(webextension_polyfill__WEBPACK_IMPORTED_MODULE_2__);
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../packages/common/src/index.ts");
/* ESM import */var micro_signals__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/micro-signals/lib/index.js");
/* ESM import */var _utils_connectionResponseMapper__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../packages/ui/src/contexts/utils/connectionResponseMapper.ts");
/* ESM import */var _NetworkProvider__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../../packages/ui/src/contexts/NetworkProvider/index.tsx");








const requestEngineCache = new micro_signals__WEBPACK_IMPORTED_MODULE_4__.ValueCache();
const requestEngineSignal = new micro_signals__WEBPACK_IMPORTED_MODULE_4__.Signal();
const activeRequestEngine = requestEngineSignal.cache(requestEngineCache).filter((value)=>!!value).readOnly();
const eventsHandler = new rxjs__WEBPACK_IMPORTED_MODULE_7__.Subject();
const tabId = Math.floor(Math.random() * 100000000);
const ConnectionContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({});
function ConnectionContextProvider({ children, LoadingComponent }) {
    const [connection, setConnection] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();
    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{
        function getAndSetNewConnection() {
            const newConnection = webextension_polyfill__WEBPACK_IMPORTED_MODULE_2___default().runtime.connect({
                name: _core_common__WEBPACK_IMPORTED_MODULE_3__.EXTENSION_SCRIPT
            });
            newConnection.onDisconnect.addListener(()=>{
                console.log('Reconnecting...');
                getAndSetNewConnection();
            });
            setConnection(newConnection);
            requestEngineSignal.dispatch((0,_utils_connectionResponseMapper__WEBPACK_IMPORTED_MODULE_5__.requestEngine)(newConnection, eventsHandler));
        }
        getAndSetNewConnection();
    }, []);
    const requestHandler = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async function requestHandler(message, context) {
        const activeEngine = await activeRequestEngine.promisify();
        const scope = await _NetworkProvider__WEBPACK_IMPORTED_MODULE_6__.networkChanges.promisify();
        return activeEngine({
            ...message,
            tabId
        }, scope ?? '', {
            ...context,
            tabId
        }).then((results)=>{
            return results.error ? Promise.reject(results.error) : results.result;
        });
    }, []);
    const events = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>eventsHandler.asObservable(), []);
    if (!connection) {
        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(LoadingComponent, {}, void 0, false, {
            fileName: "/Users/meehow/ava/extension-avalanche/packages/ui/src/contexts/ConnectionProvider.tsx",
            lineNumber: 87,
            columnNumber: 12
        }, this);
    }
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(ConnectionContext.Provider, {
        value: {
            connection,
            request: requestHandler,
            events,
            tabId
        },
        children: children
    }, void 0, false, {
        fileName: "/Users/meehow/ava/extension-avalanche/packages/ui/src/contexts/ConnectionProvider.tsx",
        lineNumber: 91,
        columnNumber: 5
    }, this);
}
function useConnectionContext() {
    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ConnectionContext);
}


}),
"../../packages/ui/src/contexts/ContactsProvider/ContactsProvider.tsx": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  ContactsContextProvider: () => (ContactsContextProvider),
  useContactsContext: () => (useContactsContext)
});
/* ESM import */var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/jsx-dev-runtime.js");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/filter.js");
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/map.js");
/* ESM import */var _ConnectionProvider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../packages/ui/src/contexts/ConnectionProvider.tsx");
/* ESM import */var _contactsEventFilters__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../packages/ui/src/contexts/ContactsProvider/contactsEventFilters.ts");






const ContactsContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_2__.createContext)({});
function ContactsContextProvider({ children }) {
    const { request, events } = (0,_ConnectionProvider__WEBPACK_IMPORTED_MODULE_3__.useConnectionContext)();
    const [contacts, setContacts] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)({
        contacts: []
    });
    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{
        let isMounted = true;
        request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.CONTACTS_GET
        }).then((res)=>{
            if (!isMounted) {
                return;
            }
            setContacts(res);
        });
        const subscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_5__.filter)(_contactsEventFilters__WEBPACK_IMPORTED_MODULE_4__.contactsUpdatedEventListener), (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.map)((evt)=>evt.value)).subscribe((val)=>setContacts(val));
        return ()=>{
            subscription.unsubscribe();
            isMounted = false;
        };
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    const getContactById = (contactId)=>{
        return contacts.contacts.filter((c)=>c.id === contactId)[0];
    };
    async function createContact(contact) {
        const contactCopy = {
            ...contact,
            id: crypto.randomUUID()
        };
        await request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.CONTACTS_CREATE,
            params: [
                contactCopy
            ]
        });
    }
    async function updateContact(contact) {
        await request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.CONTACTS_UPDATE,
            params: [
                contact
            ]
        });
    }
    async function removeContact(contact) {
        await request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.CONTACTS_REMOVE,
            params: [
                contact
            ]
        });
    }
    const getContactByAddress = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((lookupAddress)=>contacts.contacts.find(({ address, addressBTC, addressXP })=>[
                address,
                addressBTC,
                addressXP
            ].map((a)=>(a ?? '').toLowerCase()).includes(lookupAddress)), [
        contacts.contacts
    ]);
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(ContactsContext.Provider, {
        value: {
            ...contacts,
            createContact,
            removeContact,
            updateContact,
            getContactById,
            getContactByAddress
        },
        children: children
    }, void 0, false, {
        fileName: "/Users/meehow/ava/extension-avalanche/packages/ui/src/contexts/ContactsProvider/ContactsProvider.tsx",
        lineNumber: 102,
        columnNumber: 5
    }, this);
}
function useContactsContext() {
    return (0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(ContactsContext);
}


}),
"../../packages/ui/src/contexts/ContactsProvider/contactsEventFilters.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  contactsUpdatedEventListener: () => (contactsUpdatedEventListener)
});
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/types/src/index.ts");

function contactsUpdatedEventListener(evt) {
    return evt.name === _core_types__WEBPACK_IMPORTED_MODULE_0__.ContactsEvents.CONTACTS_UPDATED;
}


}),
"../../packages/ui/src/contexts/ContactsProvider/index.tsx": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  ContactsContextProvider: () => (/* reexport safe */ _ContactsProvider__WEBPACK_IMPORTED_MODULE_0__.ContactsContextProvider),
  useContactsContext: () => (/* reexport safe */ _ContactsProvider__WEBPACK_IMPORTED_MODULE_0__.useContactsContext)
});
/* ESM import */var _ContactsProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/ui/src/contexts/ContactsProvider/ContactsProvider.tsx");



}),
"../../packages/ui/src/contexts/CurrenciesProvider/CurrenciesProvider.tsx": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  CurrenciesContextProvider: () => (CurrenciesContextProvider),
  useCurrenciesContext: () => (useCurrenciesContext)
});
/* ESM import */var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/jsx-dev-runtime.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/filter.js");
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/map.js");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var _ConnectionProvider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../packages/ui/src/contexts/ConnectionProvider.tsx");
/* ESM import */var _currencyRatesEventFilters__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../packages/ui/src/contexts/CurrenciesProvider/currencyRatesEventFilters.ts");






const CurrenciesContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({});
function CurrenciesContextProvider({ children }) {
    const { request, events } = (0,_ConnectionProvider__WEBPACK_IMPORTED_MODULE_3__.useConnectionContext)();
    const [rates, setRates] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});
    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{
        request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.CURRENCIES_GET_EXCHANGE_RATES
        }).then((exchangeRates)=>{
            setRates(exchangeRates);
        }).catch(()=>{
        // do nothing, just handle the rejected promise
        });
    }, [
        request
    ]);
    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{
        const subscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_5__.filter)(_currencyRatesEventFilters__WEBPACK_IMPORTED_MODULE_4__.currencyRatesUpdatedEventListener), (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.map)((evt)=>evt.value)).subscribe((newRates)=>{
            setRates(newRates);
        });
        return ()=>subscription.unsubscribe();
    }, [
        events,
        request
    ]);
    const getExchangeRate = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((from, to)=>{
        return rates?.[from.toLowerCase()]?.[to.toLowerCase()] ?? null;
    }, [
        rates
    ]);
    const hasExchangeRate = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((from, to)=>{
        const rate = getExchangeRate(from.toLowerCase(), to.toLowerCase());
        return typeof rate === 'number';
    }, [
        getExchangeRate
    ]);
    const convert = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(({ amount, from, to })=>{
        if (!Number.isFinite(amount) || !hasExchangeRate(from, to)) {
            return null;
        }
        const rate = getExchangeRate(from, to);
        return rate * amount;
    }, [
        hasExchangeRate,
        getExchangeRate
    ]);
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(CurrenciesContext.Provider, {
        value: {
            convert,
            getExchangeRate,
            hasExchangeRate
        },
        children: children
    }, void 0, false, {
        fileName: "/Users/meehow/ava/extension-avalanche/packages/ui/src/contexts/CurrenciesProvider/CurrenciesProvider.tsx",
        lineNumber: 91,
        columnNumber: 5
    }, this);
}
function useCurrenciesContext() {
    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(CurrenciesContext);
}


}),
"../../packages/ui/src/contexts/CurrenciesProvider/currencyRatesEventFilters.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  currencyRatesUpdatedEventListener: () => (currencyRatesUpdatedEventListener)
});
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/types/src/index.ts");

function currencyRatesUpdatedEventListener(evt) {
    return evt.name === _core_types__WEBPACK_IMPORTED_MODULE_0__.CurrencyServiceEvents.RatesUpdated;
}


}),
"../../packages/ui/src/contexts/CurrenciesProvider/index.tsx": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  CurrenciesContextProvider: () => (/* reexport safe */ _CurrenciesProvider__WEBPACK_IMPORTED_MODULE_0__.CurrenciesContextProvider),
  useCurrenciesContext: () => (/* reexport safe */ _CurrenciesProvider__WEBPACK_IMPORTED_MODULE_0__.useCurrenciesContext)
});
/* ESM import */var _CurrenciesProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/ui/src/contexts/CurrenciesProvider/CurrenciesProvider.tsx");



}),
"../../packages/ui/src/contexts/DefiProvider/DefiProvider.tsx": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  DefiContextProvider: () => (DefiContextProvider),
  useDefiContext: () => (useDefiContext)
});
/* ESM import */var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/jsx-dev-runtime.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/filter.js");
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/map.js");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var _AccountsProvider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../packages/ui/src/contexts/AccountsProvider/index.tsx");
/* ESM import */var _ConnectionProvider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../packages/ui/src/contexts/ConnectionProvider.tsx");
/* ESM import */var _defiEventFilters__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../packages/ui/src/contexts/DefiProvider/defiEventFilters.ts");







var DefiProviderActionType = /*#__PURE__*/ function(DefiProviderActionType) {
    DefiProviderActionType["SetLoadingState"] = "SetLoadingState";
    DefiProviderActionType["UpdatePortfolio"] = "UpdatePortfolio";
    return DefiProviderActionType;
}(DefiProviderActionType || {});
const EMPTY_PORTFOLIO = {
    protocols: [],
    totalUsdValue: 0
};
const INITIAL_PORTFOLIO_STATE = {
    hasError: false,
    isLoading: true,
    portfolio: EMPTY_PORTFOLIO
};
const reducer = (state, { type, address, payload })=>{
    switch(type){
        case "SetLoadingState":
            return {
                ...state,
                [address]: {
                    ...state[address] ?? INITIAL_PORTFOLIO_STATE,
                    isLoading: payload
                }
            };
        case "UpdatePortfolio":
            return {
                ...state,
                [address]: payload
            };
        default:
            throw new Error(`DefiProvider: Unknown action type: "${type}"`);
    }
};
const DefiContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({
    ...INITIAL_PORTFOLIO_STATE,
    refresh () {
    // no-op
    }
});
function DefiContextProvider({ children }) {
    const { accounts: { active } } = (0,_AccountsProvider__WEBPACK_IMPORTED_MODULE_3__.useAccountsContext)();
    const { events, request } = (0,_ConnectionProvider__WEBPACK_IMPORTED_MODULE_4__.useConnectionContext)();
    const [state, dispatch] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useReducer)(reducer, {});
    const address = active?.addressC;
    const portfolio = address ? state[address] ?? INITIAL_PORTFOLIO_STATE : INITIAL_PORTFOLIO_STATE;
    const refresh = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async ()=>{
        if (!address) {
            return;
        }
        dispatch({
            type: "SetLoadingState",
            address,
            payload: true
        });
        try {
            const newPortfolioState = await request({
                method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.DEFI_GET_PORTFOLIO,
                params: [
                    address
                ]
            });
            dispatch({
                type: "UpdatePortfolio",
                address,
                payload: {
                    isLoading: false,
                    hasError: false,
                    portfolio: newPortfolioState
                }
            });
        } catch  {
            dispatch({
                type: "UpdatePortfolio",
                address,
                payload: {
                    isLoading: false,
                    hasError: true,
                    portfolio: EMPTY_PORTFOLIO
                }
            });
        }
    }, [
        request,
        address
    ]);
    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{
        const subscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_6__.filter)(_defiEventFilters__WEBPACK_IMPORTED_MODULE_5__.defiPortfolioUpdatedEventListener), (0,rxjs__WEBPACK_IMPORTED_MODULE_7__.map)((evt)=>evt.value)).subscribe(({ address: accountAddress, portfolio: updatedPortfolio })=>{
            dispatch({
                type: "UpdatePortfolio",
                address: accountAddress,
                payload: {
                    isLoading: false,
                    hasError: false,
                    portfolio: updatedPortfolio
                }
            });
        });
        return ()=>subscription.unsubscribe();
    }, [
        events,
        request
    ]);
    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{
        refresh();
    }, [
        request,
        refresh
    ]);
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(DefiContext.Provider, {
        value: {
            ...portfolio,
            refresh
        },
        children: children
    }, void 0, false, {
        fileName: "/Users/meehow/ava/extension-avalanche/packages/ui/src/contexts/DefiProvider/DefiProvider.tsx",
        lineNumber: 168,
        columnNumber: 5
    }, this);
}
function useDefiContext() {
    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(DefiContext);
}


}),
"../../packages/ui/src/contexts/DefiProvider/defiEventFilters.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  defiPortfolioUpdatedEventListener: () => (defiPortfolioUpdatedEventListener)
});
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/types/src/index.ts");

function defiPortfolioUpdatedEventListener(evt) {
    return evt.name === _core_types__WEBPACK_IMPORTED_MODULE_0__.DefiServiceEvents.PortfolioUpdated;
}


}),
"../../packages/ui/src/contexts/DefiProvider/index.tsx": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  DefiContextProvider: () => (/* reexport safe */ _DefiProvider__WEBPACK_IMPORTED_MODULE_0__.DefiContextProvider),
  useDefiContext: () => (/* reexport safe */ _DefiProvider__WEBPACK_IMPORTED_MODULE_0__.useDefiContext)
});
/* ESM import */var _DefiProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/ui/src/contexts/DefiProvider/DefiProvider.tsx");



}),
"../../packages/ui/src/contexts/FeatureFlagsProvider/FeatureFlagsProvider.tsx": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  FeatureFlagsContextProvider: () => (FeatureFlagsContextProvider),
  useFeatureFlagContext: () => (useFeatureFlagContext)
});
/* ESM import */var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/jsx-dev-runtime.js");
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/common/src/index.ts");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var lodash__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../node_modules/lodash/lodash.js");
/* ESM import */var lodash__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_3__);
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_4__);
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/filter.js");
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/map.js");
/* ESM import */var _ConnectionProvider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../packages/ui/src/contexts/ConnectionProvider.tsx");
/* ESM import */var _isFeatureFlagsUpdatedEvent__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../../packages/ui/src/contexts/FeatureFlagsProvider/isFeatureFlagsUpdatedEvent.ts");








const FeatureFlagsContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_4__.createContext)({
    isFlagEnabled: ()=>false
});
function FeatureFlagsContextProvider({ children }) {
    const { events, request } = (0,_ConnectionProvider__WEBPACK_IMPORTED_MODULE_5__.useConnectionContext)();
    const [featureFlags, setFeatureFlags] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(_core_common__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_FLAGS);
    (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(()=>{
        request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.FEATURE_FLAGS_GET
        }).then((res)=>{
            setFeatureFlags(res);
        });
        const subscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_7__.filter)(_isFeatureFlagsUpdatedEvent__WEBPACK_IMPORTED_MODULE_6__.isFeatureFlagsUpdatedEvent), (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.map)((evt)=>evt.value)).subscribe((result)=>{
            setFeatureFlags((prevFlags)=>{
                if ((0,lodash__WEBPACK_IMPORTED_MODULE_3__.isEqual)(prevFlags, result)) {
                    // Prevent re-renders when nothing changed
                    return prevFlags;
                }
                return result;
            });
        });
        return ()=>{
            subscription.unsubscribe();
        };
    }, [
        events,
        request
    ]);
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(FeatureFlagsContext.Provider, {
        value: {
            isFlagEnabled: (flagName)=>featureFlags[flagName],
            featureFlags
        },
        children: children
    }, void 0, false, {
        fileName: "/Users/meehow/ava/extension-avalanche/packages/ui/src/contexts/FeatureFlagsProvider/FeatureFlagsProvider.tsx",
        lineNumber: 48,
        columnNumber: 5
    }, this);
}
function useFeatureFlagContext() {
    return (0,react__WEBPACK_IMPORTED_MODULE_4__.useContext)(FeatureFlagsContext);
}


}),
"../../packages/ui/src/contexts/FeatureFlagsProvider/index.tsx": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  FeatureFlagsContextProvider: () => (/* reexport safe */ _FeatureFlagsProvider__WEBPACK_IMPORTED_MODULE_0__.FeatureFlagsContextProvider),
  useFeatureFlagContext: () => (/* reexport safe */ _FeatureFlagsProvider__WEBPACK_IMPORTED_MODULE_0__.useFeatureFlagContext)
});
/* ESM import */var _FeatureFlagsProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/ui/src/contexts/FeatureFlagsProvider/FeatureFlagsProvider.tsx");



}),
"../../packages/ui/src/contexts/FeatureFlagsProvider/isFeatureFlagsUpdatedEvent.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isFeatureFlagsUpdatedEvent: () => (isFeatureFlagsUpdatedEvent)
});
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/types/src/index.ts");

function isFeatureFlagsUpdatedEvent(evt) {
    return evt.name === _core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureFlagEvents.FEATURE_FLAG_UPDATED;
}


}),
"../../packages/ui/src/contexts/FirebaseProvider.tsx": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  FirebaseContextProvider: () => (FirebaseContextProvider),
  useFirebaseContext: () => (useFirebaseContext)
});
/* ESM import */var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/jsx-dev-runtime.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* ESM import */var _ConnectionProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/ui/src/contexts/ConnectionProvider.tsx");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../packages/types/src/index.ts");




const FirebaseContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({
    getModel: ()=>false
});
function FirebaseContextProvider({ children }) {
    const { request } = (0,_ConnectionProvider__WEBPACK_IMPORTED_MODULE_2__.useConnectionContext)();
    const [prompts, setPrompts] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([
        {
            role: 'model',
            content: `Hey there! I'm Core AI, here to help you manage your assets safely and smoothly. What can I do for you today?`
        }
    ]);
    const setModel = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(({ tools, toolConfig, systemInstruction })=>{
        return request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_3__.ExtensionRequest.FIREBASE_SET_MODEL,
            params: {
                tools,
                toolConfig,
                systemInstruction
            }
        });
    }, [
        request
    ]);
    const sendMessage = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((message, parts)=>{
        return request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_3__.ExtensionRequest.FIREBASE_SEND_MESSAGE,
            params: [
                message,
                parts
            ]
        });
    }, [
        request
    ]);
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(FirebaseContext.Provider, {
        value: {
            setModel,
            sendMessage,
            prompts,
            setPrompts
        },
        children: children
    }, void 0, false, {
        fileName: "/Users/meehow/ava/extension-avalanche/packages/ui/src/contexts/FirebaseProvider.tsx",
        lineNumber: 79,
        columnNumber: 5
    }, this);
}
function useFirebaseContext() {
    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(FirebaseContext);
}


}),
"../../packages/ui/src/contexts/KeystoneProvider.tsx": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  KeystoneContextProvider: () => (KeystoneContextProvider),
  useKeystoneContext: () => (useKeystoneContext)
});
/* ESM import */var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/jsx-dev-runtime.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/filter.js");
/* ESM import */var _ConnectionProvider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../packages/ui/src/contexts/ConnectionProvider.tsx");





const KeystoneContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({});
function KeystoneContextProvider({ children }) {
    const { request, events, tabId } = (0,_ConnectionProvider__WEBPACK_IMPORTED_MODULE_3__.useConnectionContext)();
    const [txRequest, setTxRequest] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();
    /**
   * Listen for send events to a ledger instance
   */ (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{
        const subscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_4__.filter)((evt)=>evt.name === _core_types__WEBPACK_IMPORTED_MODULE_2__.KeystoneEvent.DEVICE_REQUEST)).subscribe(async (res)=>{
            if (res.value.tabId !== tabId) {
                return;
            }
            setTxRequest(res.value);
        });
        return ()=>{
            subscription.unsubscribe();
        };
    }, [
        request,
        events,
        tabId
    ]);
    const submitSignature = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (response)=>request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.KEYSTONE_SUBMIT_SIGNATURE,
            params: [
                response
            ]
        }), [
        request
    ]);
    const resetKeystoneRequest = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{
        setTxRequest(undefined);
    }, []);
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(KeystoneContext.Provider, {
        value: {
            txRequest,
            resetKeystoneRequest,
            submitSignature
        },
        children: children
    }, void 0, false, {
        fileName: "/Users/meehow/ava/extension-avalanche/packages/ui/src/contexts/KeystoneProvider.tsx",
        lineNumber: 60,
        columnNumber: 5
    }, this);
}
function useKeystoneContext() {
    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(KeystoneContext);
}


}),
"../../packages/ui/src/contexts/LedgerProvider/LedgerProvider.tsx": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  LEDGER_VERSION_WITH_EIP_712: () => (LEDGER_VERSION_WITH_EIP_712),
  LedgerAppType: () => (LedgerAppType),
  LedgerContextProvider: () => (LedgerContextProvider),
  REQUIRED_LEDGER_VERSION: () => (REQUIRED_LEDGER_VERSION),
  useLedgerContext: () => (useLedgerContext)
});
/* ESM import */var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/jsx-dev-runtime.js");
/* ESM import */var _avalabs_hw_app_avalanche__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/@avalabs/hw-app-avalanche/esm/index.js");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../packages/common/src/index.ts");
/* ESM import */var _ledgerhq_hw_transport_webusb__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/@ledgerhq/hw-transport-webusb/lib-es/TransportWebUSB.js");
/* ESM import */var ledger_bitcoin__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../node_modules/ledger-bitcoin/build/main/index.js");
/* ESM import */var ledger_bitcoin__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(ledger_bitcoin__WEBPACK_IMPORTED_MODULE_5__);
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_6__);
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/filter.js");
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/observable/of.js");
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/switchMap.js");
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/tap.js");
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/observable/fromEventPattern.js");
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/retryWhen.js");
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/delay.js");
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/map.js");
/* ESM import */var _ledgerhq_hw_app_solana__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../../node_modules/@ledgerhq/hw-app-solana/lib-es/Solana.js");
/* ESM import */var _avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__("../../node_modules/@avalabs/core-wallets-sdk/esm/utils/getLedgerAppInfo.js");
/* ESM import */var _avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__("../../node_modules/@avalabs/core-wallets-sdk/esm/utils/getLedgerExtendedPublicKey.js");
/* ESM import */var _avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__("../../node_modules/@avalabs/core-wallets-sdk/esm/SolanaVM/utils/getSolanaPublicKeyFromLedger.js");
/* ESM import */var _avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__("../../node_modules/@avalabs/core-wallets-sdk/esm/utils/getPubKeyFromTransport.js");
/* ESM import */var _avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__("../../node_modules/@avalabs/core-wallets-sdk/esm/utils/quitLedgerApp.js");
/* ESM import */var _ledgerhq_hw_app_eth__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("../../node_modules/@ledgerhq/hw-app-eth/lib-es/Eth.js");
/* ESM import */var _ledgerDiscoverTransportsEventListener__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("../../packages/ui/src/contexts/LedgerProvider/ledgerDiscoverTransportsEventListener.ts");
/* ESM import */var _ConnectionProvider__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("../../packages/ui/src/contexts/ConnectionProvider.tsx");
/* ESM import */var _utils_getLedgerTransport__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__("../../packages/ui/src/contexts/utils/getLedgerTransport.ts");
/* provided dependency */ var Buffer = __webpack_require__("../../node_modules/buffer/index.js")["Buffer"];















var LedgerAppType = /*#__PURE__*/ function(LedgerAppType) {
    LedgerAppType["AVALANCHE"] = "Avalanche";
    LedgerAppType["BITCOIN"] = "Bitcoin";
    LedgerAppType["ETHEREUM"] = "Ethereum";
    LedgerAppType["SOLANA"] = "Solana";
    LedgerAppType["UNKNOWN"] = "UNKNOWN";
    return LedgerAppType;
}({});
const REQUIRED_LEDGER_VERSION = '0.7.3';
const LEDGER_VERSION_WITH_EIP_712 = '0.8.0';
/**
 * Run this here since each new window will have a different id
 * this is used to track the transport and close on window close
 */ const LEDGER_INSTANCE_UUID = crypto.randomUUID();
const LedgerContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_6__.createContext)({});
function LedgerContextProvider({ children }) {
    const [initialized, setInialized] = (0,react__WEBPACK_IMPORTED_MODULE_6__.useState)(false);
    const [wasTransportAttempted, setWasTransportAttempted] = (0,react__WEBPACK_IMPORTED_MODULE_6__.useState)(false);
    const [app, setApp] = (0,react__WEBPACK_IMPORTED_MODULE_6__.useState)();
    const [appType, setAppType] = (0,react__WEBPACK_IMPORTED_MODULE_6__.useState)("UNKNOWN");
    const { request, events } = (0,_ConnectionProvider__WEBPACK_IMPORTED_MODULE_10__.useConnectionContext)();
    const transportRef = (0,react__WEBPACK_IMPORTED_MODULE_6__.useRef)(null);
    const [avaxAppVersion, setAvaxAppVersion] = (0,react__WEBPACK_IMPORTED_MODULE_6__.useState)(null);
    const [masterFingerprint, setMasterFingerprint] = (0,react__WEBPACK_IMPORTED_MODULE_6__.useState)();
    const [ledgerVersionWarningClosed, setLedgerVersionWarningClosed] = (0,react__WEBPACK_IMPORTED_MODULE_6__.useState)();
    /**
   * Listen for send events to a ledger instance
   */ (0,react__WEBPACK_IMPORTED_MODULE_6__.useEffect)(()=>{
        const subscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_12__.filter)((evt)=>evt.name === _core_types__WEBPACK_IMPORTED_MODULE_2__.LedgerEvent.TRANSPORT_REQUEST), (0,rxjs__WEBPACK_IMPORTED_MODULE_12__.filter)((evt)=>evt.value.connectionUUID === LEDGER_INSTANCE_UUID)).subscribe(async (res)=>{
            if (res.value.method === 'SEND') {
                try {
                    const { cla, ins, p1, p2, data, statusList } = res.value.params;
                    const result = await transportRef.current?.send(cla, ins, p1, p2, Buffer.from(data), statusList);
                    request({
                        method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.LEDGER_RESPONSE,
                        params: [
                            {
                                requestId: res.value.requestId,
                                method: res.value.method,
                                result
                            }
                        ]
                    });
                } catch (e) {
                    request({
                        method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.LEDGER_RESPONSE,
                        params: [
                            {
                                requestId: res.value.requestId,
                                method: res.value.method,
                                error: e?.['statusCode'] ? e['statusCode'] : e.message
                            }
                        ]
                    });
                }
            }
        });
        return ()=>{
            subscription.unsubscribe();
        };
    }, [
        request,
        events,
        transportRef
    ]);
    /**
   * Create instance for a given UUID
   */ (0,react__WEBPACK_IMPORTED_MODULE_6__.useEffect)(()=>{
        const subscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_12__.filter)(_ledgerDiscoverTransportsEventListener__WEBPACK_IMPORTED_MODULE_9__.ledgerDiscoverTransportsEventListener)).subscribe(()=>{
            if (initialized) {
                request({
                    method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.LEDGER_INIT_TRANSPORT,
                    params: [
                        LEDGER_INSTANCE_UUID
                    ]
                });
            }
        });
        return ()=>{
            subscription.unsubscribe();
        };
    }, [
        events,
        initialized,
        request
    ]);
    /**
   * Remove an instance by UUID when a window is about to unload
   */ (0,react__WEBPACK_IMPORTED_MODULE_6__.useEffect)(()=>{
        const handler = ()=>{
            request({
                method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.LEDGER_REMOVE_TRANSPORT,
                params: [
                    LEDGER_INSTANCE_UUID
                ]
            });
        };
        window.addEventListener('beforeunload', handler);
        return ()=>{
            window.removeEventListener('beforeunload', handler);
        };
    }, [
        request
    ]);
    const initLedgerApp = (0,react__WEBPACK_IMPORTED_MODULE_6__.useCallback)(async (transport)=>{
        if (!transport) {
            throw new Error('Ledger not connected');
        }
        // first try to get the avalanche App instance
        const avaxAppInstance = new _avalabs_hw_app_avalanche__WEBPACK_IMPORTED_MODULE_1__["default"](transport);
        if (avaxAppInstance) {
            // double check it's really the avalanche app
            // other apps also initialize with AppAvax
            const [config, appVersionError] = await (0,_core_common__WEBPACK_IMPORTED_MODULE_3__.resolve)(avaxAppInstance.getAppInfo());
            if (!appVersionError) {
                if (config.appName === "Avalanche") {
                    setAvaxAppVersion(config.appVersion);
                    setApp(avaxAppInstance);
                    setAppType("Avalanche");
                    return avaxAppInstance;
                } else if (config.appName === "Ethereum") {
                    const ethAppInstance = new _ledgerhq_hw_app_eth__WEBPACK_IMPORTED_MODULE_8__["default"](transport);
                    setApp(ethAppInstance);
                    setAppType("Ethereum");
                    return ethAppInstance;
                }
            }
        }
        // check if btc app is selected
        const btcAppInstance = new ledger_bitcoin__WEBPACK_IMPORTED_MODULE_5__.AppClient(transport);
        if (btcAppInstance) {
            const appInfo = await (0,_avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_13__.getLedgerAppInfo)(transport);
            if ("Bitcoin" === appInfo.applicationName) {
                setApp(btcAppInstance);
                setAppType("Bitcoin");
                return btcAppInstance;
            }
        }
        const solanaAppInstance = new _ledgerhq_hw_app_solana__WEBPACK_IMPORTED_MODULE_7__["default"](transport);
        if (solanaAppInstance) {
            const appInfo = await (0,_avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_13__.getLedgerAppInfo)(transport);
            if ("Solana" === appInfo.applicationName) {
                setApp(solanaAppInstance);
                setAppType("Solana");
                return solanaAppInstance;
            }
        }
        throw new Error('No compatible ledger app found');
    }, []);
    (0,react__WEBPACK_IMPORTED_MODULE_6__.useEffect)(()=>{
        const subscription = (0,rxjs__WEBPACK_IMPORTED_MODULE_14__.of)([
            initialized
        ]).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_12__.filter)(([isInitialized])=>!!isInitialized), (0,rxjs__WEBPACK_IMPORTED_MODULE_15__.switchMap)(()=>request({
                method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.LEDGER_CLOSE_TRANSPORT,
                params: []
            })), (0,rxjs__WEBPACK_IMPORTED_MODULE_15__.switchMap)(()=>(0,_utils_getLedgerTransport__WEBPACK_IMPORTED_MODULE_11__.getLedgerTransport)()), (0,rxjs__WEBPACK_IMPORTED_MODULE_15__.switchMap)((transport)=>{
            transportRef.current = transport;
            return initLedgerApp(transport);
        }), (0,rxjs__WEBPACK_IMPORTED_MODULE_16__.tap)(()=>{
            setWasTransportAttempted(true);
        }), (0,rxjs__WEBPACK_IMPORTED_MODULE_15__.switchMap)(()=>(0,rxjs__WEBPACK_IMPORTED_MODULE_17__.fromEventPattern)((handler)=>{
                transportRef.current?.on('disconnect', handler);
            }, (handler)=>{
                transportRef.current?.off('disconnect', handler);
            }).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_16__.tap)(()=>{
                setApp(undefined);
                setAppType("UNKNOWN");
                throw new Error('Ledger device disconnected');
            }))), (0,rxjs__WEBPACK_IMPORTED_MODULE_18__.retryWhen)((errors)=>{
            setWasTransportAttempted(true);
            return errors.pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_19__.delay)(2000));
        })).subscribe();
        return ()=>{
            subscription.unsubscribe();
        };
    }, [
        initialized,
        initLedgerApp,
        request
    ]);
    /**
   * Get the extended public key for the given path (m/44'/60'/0' by default)
   * @returns Promise<extended public key>
   */ const getExtendedPublicKey = (0,react__WEBPACK_IMPORTED_MODULE_6__.useCallback)(async (path)=>{
        if (!transportRef.current) {
            throw new Error('no device detected');
        }
        const [pubKey, pubKeyError] = await (0,_core_common__WEBPACK_IMPORTED_MODULE_3__.resolve)((0,_avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_20__.getLedgerExtendedPublicKey)(transportRef.current, false, path));
        if (pubKeyError) {
            throw new Error(pubKeyError);
        }
        return pubKey;
    }, []);
    const getPublicKey = (0,react__WEBPACK_IMPORTED_MODULE_6__.useCallback)(async (accountIndex, pathType, vm)=>{
        if (!transportRef.current) {
            throw new Error('no device detected');
        }
        if (vm === 'SVM') {
            return (0,_avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_21__.getSolanaPublicKeyFromLedger)(accountIndex, transportRef.current);
        }
        return (0,_avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_22__.getPubKeyFromTransport)(transportRef.current, accountIndex, pathType, vm);
    }, []);
    /**
   * When the user plugs-in/connects their ledger for the first time a
   * device selection needs to be performed before we can do anything with
   * the device. So for those cases this function forces that popup to open.
   *
   * This cannot be opened on the popup (confirm) or popout (extension click)
   * view. This can only be performed on a tab view so the user will need to be
   * put into that state first.
   *
   * @returns The transport object
   */ const popDeviceSelection = (0,react__WEBPACK_IMPORTED_MODULE_6__.useCallback)(async ()=>{
        if (app) {
            return true;
        }
        const [usbTransport] = await (0,_core_common__WEBPACK_IMPORTED_MODULE_3__.resolve)(_ledgerhq_hw_transport_webusb__WEBPACK_IMPORTED_MODULE_4__["default"].request());
        if (usbTransport) {
            return true;
        }
        throw Error('Ledger device selection failed');
    }, [
        app
    ]);
    const initLedgerTransport = (0,react__WEBPACK_IMPORTED_MODULE_6__.useCallback)(async ()=>{
        if (initialized) {
            return;
        }
        await request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.LEDGER_INIT_TRANSPORT,
            params: [
                LEDGER_INSTANCE_UUID
            ]
        });
        setInialized(true);
    }, [
        initialized,
        request
    ]);
    const closeCurrentApp = (0,react__WEBPACK_IMPORTED_MODULE_6__.useCallback)(async ()=>{
        if (transportRef.current) {
            // send get app version first as a workaround for BTC bug: https://github.com/LedgerHQ/app-bitcoin-new/issues/63
            await (0,_avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_13__.getLedgerAppInfo)(transportRef.current);
            // quit the app: https://developers.ledger.com/docs/transport/open-close-info-on-apps/#quit-application
            await (0,_avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_23__.quitLedgerApp)(transportRef.current);
        }
    }, [
        transportRef
    ]);
    (0,react__WEBPACK_IMPORTED_MODULE_6__.useEffect)(()=>{
        const subscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_12__.filter)((evt)=>evt.name === _core_types__WEBPACK_IMPORTED_MODULE_2__.LedgerEvent.TRANSPORT_CLOSE_REQUEST), (0,rxjs__WEBPACK_IMPORTED_MODULE_12__.filter)(()=>// check if there if the window is claiming interface index 2. We should close the window
            // which would clean up the claimed interfaces, thereby releasing it to the new window
            // In windows where this interface wasnt claimed the values here will be false
            Boolean(app) && Boolean(transportRef.current?.deviceModel?.id))).subscribe(()=>{
            window.close();
        });
        return ()=>{
            subscription.unsubscribe();
        };
    });
    (0,react__WEBPACK_IMPORTED_MODULE_6__.useEffect)(()=>{
        request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.SHOW_LEDGER_VERSION_WARNING
        }).then((result)=>{
            setLedgerVersionWarningClosed(result);
        });
        const subscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_12__.filter)(_core_common__WEBPACK_IMPORTED_MODULE_3__.isLockStateChangedEvent), (0,rxjs__WEBPACK_IMPORTED_MODULE_24__.map)((evt)=>evt.value)).subscribe((locked)=>{
            if (locked) {
                // No need to requery ExtensionRequest.SHOW_LEDGER_VERSION_WARNING
                // because it will always be false when locked because the session
                // storage is emptied on lock.
                setLedgerVersionWarningClosed(false);
            }
        });
        return ()=>{
            subscription.unsubscribe();
        };
    }, [
        events,
        request
    ]);
    const getMasterFingerprint = (0,react__WEBPACK_IMPORTED_MODULE_6__.useCallback)(async ()=>{
        if (!(app instanceof ledger_bitcoin__WEBPACK_IMPORTED_MODULE_5__.AppClient)) {
            throw new Error('wrong app');
        }
        return app.getMasterFingerprint();
    }, [
        app
    ]);
    const getBtcExtendedPublicKey = (0,react__WEBPACK_IMPORTED_MODULE_6__.useCallback)(async (path)=>{
        if (!(app instanceof ledger_bitcoin__WEBPACK_IMPORTED_MODULE_5__.AppClient)) {
            throw new Error('wrong app');
        }
        return app.getExtendedPubkey(path, true);
    }, [
        app
    ]);
    const registerBtcWalletPolicy = (0,react__WEBPACK_IMPORTED_MODULE_6__.useCallback)(async (xpub, fingerprint, derivationpath, name)=>{
        if (!(app instanceof ledger_bitcoin__WEBPACK_IMPORTED_MODULE_5__.AppClient)) {
            throw new Error('wrong app');
        }
        const template = new ledger_bitcoin__WEBPACK_IMPORTED_MODULE_5__.DefaultWalletPolicy(`wpkh(@0/**)`, `[${fingerprint}/${derivationpath}]${xpub}`);
        const walletPolicy = new ledger_bitcoin__WEBPACK_IMPORTED_MODULE_5__.WalletPolicy(name, `wpkh(@0/**)`, template.keys);
        return app.registerWallet(walletPolicy);
    }, [
        app
    ]);
    const updateLedgerVersionWarningClosed = (0,react__WEBPACK_IMPORTED_MODULE_6__.useCallback)(async ()=>{
        const result = await request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.LEDGER_VERSION_WARNING_CLOSED
        });
        setLedgerVersionWarningClosed(result);
    }, [
        request
    ]);
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(LedgerContext.Provider, {
        value: {
            popDeviceSelection,
            getExtendedPublicKey,
            initLedgerTransport,
            hasLedgerTransport: !!app,
            wasTransportAttempted,
            appType,
            getPublicKey,
            avaxAppVersion,
            masterFingerprint,
            setMasterFingerprint,
            getMasterFingerprint,
            getBtcExtendedPublicKey,
            registerBtcWalletPolicy,
            updateLedgerVersionWarningClosed,
            ledgerVersionWarningClosed,
            closeCurrentApp
        },
        children: children
    }, void 0, false, {
        fileName: "/Users/meehow/ava/extension-avalanche/packages/ui/src/contexts/LedgerProvider/LedgerProvider.tsx",
        lineNumber: 487,
        columnNumber: 5
    }, this);
}
function useLedgerContext() {
    return (0,react__WEBPACK_IMPORTED_MODULE_6__.useContext)(LedgerContext);
}


}),
"../../packages/ui/src/contexts/LedgerProvider/index.tsx": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  LEDGER_VERSION_WITH_EIP_712: () => (/* reexport safe */ _LedgerProvider__WEBPACK_IMPORTED_MODULE_0__.LEDGER_VERSION_WITH_EIP_712),
  LedgerAppType: () => (/* reexport safe */ _LedgerProvider__WEBPACK_IMPORTED_MODULE_0__.LedgerAppType),
  LedgerContextProvider: () => (/* reexport safe */ _LedgerProvider__WEBPACK_IMPORTED_MODULE_0__.LedgerContextProvider),
  REQUIRED_LEDGER_VERSION: () => (/* reexport safe */ _LedgerProvider__WEBPACK_IMPORTED_MODULE_0__.REQUIRED_LEDGER_VERSION),
  useLedgerContext: () => (/* reexport safe */ _LedgerProvider__WEBPACK_IMPORTED_MODULE_0__.useLedgerContext)
});
/* ESM import */var _LedgerProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/ui/src/contexts/LedgerProvider/LedgerProvider.tsx");



}),
"../../packages/ui/src/contexts/LedgerProvider/ledgerDiscoverTransportsEventListener.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  ledgerDiscoverTransportsEventListener: () => (ledgerDiscoverTransportsEventListener)
});
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/types/src/index.ts");

function ledgerDiscoverTransportsEventListener(evt) {
    return evt.name === _core_types__WEBPACK_IMPORTED_MODULE_0__.LedgerEvent.DISCOVER_TRANSPORTS;
}


}),
"../../packages/ui/src/contexts/NetworkFeeProvider/NetworkFeeProvider.tsx": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  NetworkFeeContextProvider: () => (NetworkFeeContextProvider),
  useNetworkFeeContext: () => (useNetworkFeeContext)
});
/* ESM import */var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/jsx-dev-runtime.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../packages/common/src/index.ts");
/* ESM import */var _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/@avalabs/vm-module-types/dist/index.js");
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/filter.js");
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/map.js");
/* ESM import */var _FeatureFlagsProvider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../packages/ui/src/contexts/FeatureFlagsProvider/index.tsx");
/* ESM import */var _NetworkProvider__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../../packages/ui/src/contexts/NetworkProvider/index.tsx");
/* ESM import */var _gaslessChallangeUpdateListener__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../../packages/ui/src/contexts/NetworkFeeProvider/gaslessChallangeUpdateListener.ts");
/* ESM import */var _ConnectionProvider__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("../../packages/ui/src/contexts/ConnectionProvider.tsx");











const NetworkFeeContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({
    networkFee: null,
    async getNetworkFee () {
        return null;
    },
    async fetchAndSolveGaslessChallange () {
        return null;
    },
    async gaslessFundTx () {
        return undefined;
    },
    isGaslessOn: false,
    setIsGaslessOn () {
        return null;
    },
    fundTxHex: '',
    async setGaslessDefaultValues () {
        return null;
    },
    gaslessPhase: _core_types__WEBPACK_IMPORTED_MODULE_2__.GaslessPhase.NOT_READY,
    async setGaslessEligibility () {
        return;
    },
    isGaslessEligible: false
});
function NetworkFeeContextProvider({ children }) {
    const { request, events } = (0,_ConnectionProvider__WEBPACK_IMPORTED_MODULE_8__.useConnectionContext)();
    const { network } = (0,_NetworkProvider__WEBPACK_IMPORTED_MODULE_6__.useNetworkContext)();
    const [fee, setFee] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);
    const [iteration, setIteration] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);
    const [challengeHex, setChallengeHex] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');
    const [solutionHex, setSolutionHex] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');
    const [isGaslessOn, setIsGaslessOn] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
    const [fundTxHex, setFundTxHex] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');
    const { featureFlags } = (0,_FeatureFlagsProvider__WEBPACK_IMPORTED_MODULE_5__.useFeatureFlagContext)();
    const [gaslessPhase, setGaslessPhase] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(_core_types__WEBPACK_IMPORTED_MODULE_2__.GaslessPhase.NOT_READY);
    const [isGaslessEligible, setIsGaslessEligible] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
    const getNetworkFee = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (caipId)=>request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.NETWORK_FEE_GET,
            params: [
                caipId
            ]
        }), [
        request
    ]);
    const setGaslessEligibility = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (chainId, fromAddress, nonce)=>{
        if (gaslessPhase === _core_types__WEBPACK_IMPORTED_MODULE_2__.GaslessPhase.READY) {
            return;
        }
        if (!featureFlags[_core_types__WEBPACK_IMPORTED_MODULE_2__.FeatureGates.GASLESS]) {
            setIsGaslessEligible(false);
            return;
        }
        try {
            const result = await request({
                method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.GASLESS_GET_ELIGIBILITY,
                params: [
                    chainId,
                    fromAddress?.toString(),
                    nonce ?? undefined
                ]
            });
            if (result) {
                setIsGaslessEligible(true);
                return;
            }
            setIsGaslessEligible(false);
        } catch (e) {
            console.error(e);
            setIsGaslessEligible(false);
        }
    }, [
        featureFlags,
        gaslessPhase,
        request
    ]);
    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{
        if (!network?.chainId) {
            return;
        }
        let timer;
        let isMounted = true;
        getNetworkFee((0,_core_common__WEBPACK_IMPORTED_MODULE_3__.chainIdToCaip)(network.chainId)).then((networkFee)=>{
            if (isMounted && networkFee) {
                setFee(networkFee);
            }
        }).catch((err)=>{
            console.warn('Failed to determine the network fee:', err);
        }).finally(()=>{
            timer = setTimeout(()=>setIteration((i)=>i + 1), 30000);
        });
        return ()=>{
            isMounted = false;
            clearTimeout(timer);
        };
    }, [
        getNetworkFee,
        iteration,
        network?.chainId
    ]);
    const fetchAndSolveGaslessChallange = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async ()=>request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.GASLESS_FETCH_AND_SOLVE_CHALLENGE
        }), [
        request
    ]);
    const gaslessFundTx = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (signingData)=>{
        if (!signingData || signingData.type !== _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_4__.RpcMethod.ETH_SEND_TRANSACTION) {
            setIsGaslessOn(false);
            setGaslessPhase(_core_types__WEBPACK_IMPORTED_MODULE_2__.GaslessPhase.ERROR);
            return undefined;
        }
        setGaslessPhase(_core_types__WEBPACK_IMPORTED_MODULE_2__.GaslessPhase.FUNDING_IN_PROGRESS);
        return request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.GASLESS_FUND_TX,
            params: [
                signingData.data,
                challengeHex,
                solutionHex,
                signingData.account
            ]
        });
    }, [
        challengeHex,
        request,
        solutionHex
    ]);
    const setGaslessDefaultValues = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async ()=>{
        setGaslessPhase(_core_types__WEBPACK_IMPORTED_MODULE_2__.GaslessPhase.NOT_READY);
        setIsGaslessEligible(false);
        setIsGaslessOn(false);
        return request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.GASLESS_SET_DEFAUlT_STATE_VALUES
        });
    }, [
        request
    ]);
    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{
        const gaslessEventSubscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_9__.filter)(_gaslessChallangeUpdateListener__WEBPACK_IMPORTED_MODULE_7__.gaslessChallangeUpdateEventListener), (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.map)((evt)=>evt.value)).subscribe(async (values)=>{
            setSolutionHex(values.solutionHex);
            setChallengeHex(values.challengeHex);
            setFundTxHex(values.fundTxHex);
            if (values.challengeHex && values.solutionHex && !values.isFundInProgress && !values.fundTxDoNotRetryError) {
                setGaslessPhase(_core_types__WEBPACK_IMPORTED_MODULE_2__.GaslessPhase.READY);
            }
            if (values.isFundInProgress === true) {
                setGaslessPhase(_core_types__WEBPACK_IMPORTED_MODULE_2__.GaslessPhase.FUNDING_IN_PROGRESS);
            }
            if (values.fundTxHex) {
                setIsGaslessOn(false);
                setGaslessPhase(_core_types__WEBPACK_IMPORTED_MODULE_2__.GaslessPhase.FUNDED);
            }
            if (values.fundTxDoNotRetryError) {
                setIsGaslessOn(false);
                setGaslessPhase(_core_types__WEBPACK_IMPORTED_MODULE_2__.GaslessPhase.ERROR);
            }
        });
        return ()=>{
            gaslessEventSubscription.unsubscribe();
        };
    }, [
        events,
        getNetworkFee
    ]);
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(NetworkFeeContext.Provider, {
        value: {
            networkFee: fee,
            getNetworkFee,
            fetchAndSolveGaslessChallange,
            gaslessFundTx,
            setGaslessEligibility,
            isGaslessOn,
            setIsGaslessOn,
            fundTxHex,
            setGaslessDefaultValues,
            gaslessPhase,
            isGaslessEligible
        },
        children: children
    }, void 0, false, {
        fileName: "/Users/meehow/ava/extension-avalanche/packages/ui/src/contexts/NetworkFeeProvider/NetworkFeeProvider.tsx",
        lineNumber: 235,
        columnNumber: 5
    }, this);
}
function useNetworkFeeContext() {
    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(NetworkFeeContext);
}


}),
"../../packages/ui/src/contexts/NetworkFeeProvider/gaslessChallangeUpdateListener.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  gaslessChallangeUpdateEventListener: () => (gaslessChallangeUpdateEventListener)
});
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/types/src/index.ts");

function gaslessChallangeUpdateEventListener(evt) {
    return evt.name === _core_types__WEBPACK_IMPORTED_MODULE_0__.GaslessEvents.STATE_UPDATE;
}


}),
"../../packages/ui/src/contexts/NetworkFeeProvider/index.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  NetworkFeeContextProvider: () => (/* reexport safe */ _NetworkFeeProvider__WEBPACK_IMPORTED_MODULE_0__.NetworkFeeContextProvider),
  useNetworkFeeContext: () => (/* reexport safe */ _NetworkFeeProvider__WEBPACK_IMPORTED_MODULE_0__.useNetworkFeeContext)
});
/* ESM import */var _NetworkFeeProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/ui/src/contexts/NetworkFeeProvider/NetworkFeeProvider.tsx");



}),
"../../packages/ui/src/contexts/NetworkProvider/NetworkProvider.tsx": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  NetworkContextProvider: () => (NetworkContextProvider),
  useNetworkContext: () => (useNetworkContext)
});
/* ESM import */var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/jsx-dev-runtime.js");
/* ESM import */var _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("../../node_modules/@avalabs/core-chains-sdk/esm/models.js");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/common/src/index.ts");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/filter.js");
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/map.js");
/* ESM import */var _AnalyticsProvider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../packages/ui/src/contexts/AnalyticsProvider/index.tsx");
/* ESM import */var _ConnectionProvider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../packages/ui/src/contexts/ConnectionProvider.tsx");
/* ESM import */var _networkChanges__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../../packages/ui/src/contexts/NetworkProvider/networkChanges.ts");
/* ESM import */var _networksUpdatedEventListener__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../../packages/ui/src/contexts/NetworkProvider/networksUpdatedEventListener.ts");
/* ESM import */var _isNetworkUpdatedEvent__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("../../packages/ui/src/contexts/NetworkProvider/isNetworkUpdatedEvent.ts");











const NetworkContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)({
    network: undefined,
    setNetwork () {},
    networks: [],
    setDeveloperMode () {},
    async saveCustomNetwork () {},
    async updateDefaultNetwork () {},
    async removeCustomNetwork () {},
    isDeveloperMode: false,
    favoriteNetworks: [],
    addFavoriteNetwork () {},
    removeFavoriteNetwork () {},
    isFavoriteNetwork: ()=>false,
    customNetworks: [],
    isCustomNetwork: ()=>false,
    isChainIdExist: ()=>false,
    getNetwork: ()=>undefined,
    avaxProviderC: undefined,
    ethereumProvider: undefined,
    bitcoinProvider: undefined
});
/**
 * Network is being saved to chrome storage so we can share it across all contexts. With that when the
 * user changes the network we write that to storage, storage then fires an event and all contexts receive that
 * event. Thus updating all instances of the network provider and everything stays in sync.
 */ function NetworkContextProvider({ children }) {
    const [network, setNetwork] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)();
    const [networks, setNetworks] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)([]);
    const [customNetworks, setCustomNetworks] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)([]);
    const [favoriteNetworks, setFavoriteNetworks] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)([]);
    const { request, events } = (0,_ConnectionProvider__WEBPACK_IMPORTED_MODULE_5__.useConnectionContext)();
    const { capture } = (0,_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_4__.useAnalyticsContext)();
    const getFavoriteNetworks = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>networks.filter((networkItem)=>favoriteNetworks.includes(networkItem.chainId)).filter((n)=>{
            return !network?.isTestnet && !n.isTestnet || network?.isTestnet && n.isTestnet;
        }), [
        favoriteNetworks,
        network,
        networks
    ]);
    const getCustomNetworks = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>networks.filter((networkItem)=>customNetworks.includes(networkItem.chainId)), [
        customNetworks,
        networks
    ]);
    const isChainIdExist = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((lookupChainId)=>(networks ?? []).some(({ chainId })=>chainId === lookupChainId), [
        networks
    ]);
    const isCustomNetwork = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((chainId)=>customNetworks.includes(chainId), [
        customNetworks
    ]);
    const getNetwork = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((lookupChainId)=>{
        return networks.find(({ chainId, caipId })=>chainId === lookupChainId || caipId === lookupChainId);
    }, [
        networks
    ]);
    const [bitcoinProvider, setBitcoinProvider] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)();
    const [ethereumProvider, setEthereumProvider] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)();
    const [avaxProviderC, setAvaxProviderC] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)();
    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{
        if (!network) {
            setBitcoinProvider(undefined);
            setEthereumProvider(undefined);
            setAvaxProviderC(undefined);
            return;
        }
        let isMounted = true;
        const avaxNetworkC = getNetwork(network.isTestnet ? _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_9__.ChainId.AVALANCHE_TESTNET_ID : _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_9__.ChainId.AVALANCHE_MAINNET_ID);
        const ethNetwork = getNetwork(network.isTestnet ? _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_9__.ChainId.ETHEREUM_TEST_SEPOLIA : _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_9__.ChainId.ETHEREUM_HOMESTEAD);
        const btcNetwork = getNetwork(network.isTestnet ? _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_9__.ChainId.BITCOIN_TESTNET : _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_9__.ChainId.BITCOIN);
        function updateIfMounted(setter) {
            return (p)=>{
                if (isMounted) {
                    setter(p);
                }
            };
        }
        if (avaxNetworkC) {
            (0,_core_common__WEBPACK_IMPORTED_MODULE_2__.getProviderForNetwork)(avaxNetworkC).then(updateIfMounted(setAvaxProviderC));
        }
        if (ethNetwork) {
            (0,_core_common__WEBPACK_IMPORTED_MODULE_2__.getProviderForNetwork)(ethNetwork).then(updateIfMounted(setEthereumProvider));
        }
        if (btcNetwork) {
            (0,_core_common__WEBPACK_IMPORTED_MODULE_2__.getProviderForNetwork)(btcNetwork).then(updateIfMounted(setBitcoinProvider));
        }
        return ()=>{
            isMounted = false;
        };
    }, [
        getNetwork,
        network
    ]);
    const getNetworkState = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(()=>{
        return request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.NETWORKS_GET_STATE
        }).then((result)=>{
            (0,_core_common__WEBPACK_IMPORTED_MODULE_2__.updateIfDifferent)(setNetworks, result.networks);
            (0,_core_common__WEBPACK_IMPORTED_MODULE_2__.updateIfDifferent)(setNetwork, result.activeNetwork);
            _networkChanges__WEBPACK_IMPORTED_MODULE_6__.networkChanged.dispatch(result.activeNetwork?.caipId);
            (0,_core_common__WEBPACK_IMPORTED_MODULE_2__.updateIfDifferent)(setFavoriteNetworks, result.favoriteNetworks);
            (0,_core_common__WEBPACK_IMPORTED_MODULE_2__.updateIfDifferent)(setCustomNetworks, result.customNetworks);
        });
    }, [
        request
    ]);
    const removeCustomNetwork = async (chainId)=>{
        return request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.NETWORK_REMOVE_CUSTOM,
            params: [
                chainId
            ]
        }).then(getNetworkState);
    };
    const saveCustomNetwork = async (customNetwork)=>{
        return request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.NETWORK_SAVE_CUSTOM,
            params: [
                customNetwork
            ]
        }).then(getNetworkState);
    };
    const updateDefaultNetwork = async (networkOverrides)=>{
        return request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.NETWORK_UPDATE_DEFAULT,
            params: {
                network: networkOverrides
            }
        }).then(getNetworkState);
    };
    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{
        getNetworkState();
        const activeNetworkSubscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_10__.filter)(_isNetworkUpdatedEvent__WEBPACK_IMPORTED_MODULE_8__.isNetworkUpdatedEvent), (0,rxjs__WEBPACK_IMPORTED_MODULE_11__.map)((evt)=>evt.value)).subscribe(async (newNetwork)=>{
            if (!newNetwork) {
                return;
            }
            getNetworkState();
            setNetwork(newNetwork);
            _networkChanges__WEBPACK_IMPORTED_MODULE_6__.networkChanged.dispatch(newNetwork.caipId);
        });
        const networksSubscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_10__.filter)(_networksUpdatedEventListener__WEBPACK_IMPORTED_MODULE_7__.networksUpdatedEventListener), (0,rxjs__WEBPACK_IMPORTED_MODULE_11__.map)((evt)=>evt.value)).subscribe(async (result)=>{
            (0,_core_common__WEBPACK_IMPORTED_MODULE_2__.updateIfDifferent)(setNetworks, result.networks);
            (0,_core_common__WEBPACK_IMPORTED_MODULE_2__.updateIfDifferent)(setFavoriteNetworks, result.favoriteNetworks);
            setNetwork((currentNetwork)=>{
                const newNetwork = result.activeNetwork ?? currentNetwork; // do not delete currently set network
                _networkChanges__WEBPACK_IMPORTED_MODULE_6__.networkChanged.dispatch(newNetwork?.caipId);
                return newNetwork;
            });
            setCustomNetworks(Object.values(result.customNetworks).map(({ chainId })=>chainId));
        });
        return ()=>{
            activeNetworkSubscription.unsubscribe();
            networksSubscription.unsubscribe();
        };
    }, [
        events,
        getNetworkState
    ]);
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(NetworkContext.Provider, {
        value: {
            network,
            setNetwork: (newNetwork)=>request({
                    method: _core_types__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.NETWORK_SET_ACTIVE,
                    params: [
                        (0,_core_common__WEBPACK_IMPORTED_MODULE_2__.getNetworkCaipId)(newNetwork)
                    ]
                }),
            networks,
            setDeveloperMode: (status)=>request({
                    method: _core_types__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.NETWORK_SET_DEVELOPER_MODE,
                    params: [
                        status
                    ]
                }),
            saveCustomNetwork,
            updateDefaultNetwork,
            removeCustomNetwork,
            isDeveloperMode: !!network?.isTestnet,
            favoriteNetworks: getFavoriteNetworks,
            addFavoriteNetwork: (chainId)=>{
                request({
                    method: _core_types__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.NETWORK_ADD_FAVORITE_NETWORK,
                    params: [
                        chainId
                    ]
                }).then((result)=>{
                    setFavoriteNetworks(result);
                    capture('NetworkFavoriteAdded', {
                        networkChainId: chainId,
                        isCustom: isCustomNetwork(chainId)
                    });
                });
            },
            removeFavoriteNetwork: async (chainId)=>{
                await request({
                    method: _core_types__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.NETWORK_REMOVE_FAVORITE_NETWORK,
                    params: [
                        chainId
                    ]
                }).then((result)=>{
                    setFavoriteNetworks(result);
                    capture('NetworkFavoriteRemoved', {
                        networkChainId: chainId,
                        isCustom: isCustomNetwork(chainId)
                    });
                });
            },
            isFavoriteNetwork: (chainId)=>favoriteNetworks.includes(chainId),
            customNetworks: getCustomNetworks,
            isCustomNetwork,
            isChainIdExist,
            getNetwork,
            avaxProviderC,
            bitcoinProvider,
            ethereumProvider
        },
        children: children
    }, void 0, false, {
        fileName: "/Users/meehow/ava/extension-avalanche/packages/ui/src/contexts/NetworkProvider/NetworkProvider.tsx",
        lineNumber: 279,
        columnNumber: 5
    }, this);
}
function useNetworkContext() {
    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(NetworkContext);
}


}),
"../../packages/ui/src/contexts/NetworkProvider/index.tsx": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  NetworkContextProvider: () => (/* reexport safe */ _NetworkProvider__WEBPACK_IMPORTED_MODULE_0__.NetworkContextProvider),
  isNetworkUpdatedEvent: () => (/* reexport safe */ _isNetworkUpdatedEvent__WEBPACK_IMPORTED_MODULE_3__.isNetworkUpdatedEvent),
  networkChanged: () => (/* reexport safe */ _networkChanges__WEBPACK_IMPORTED_MODULE_1__.networkChanged),
  networkChanges: () => (/* reexport safe */ _networkChanges__WEBPACK_IMPORTED_MODULE_1__.networkChanges),
  networksUpdatedEventListener: () => (/* reexport safe */ _networksUpdatedEventListener__WEBPACK_IMPORTED_MODULE_2__.networksUpdatedEventListener),
  useNetworkContext: () => (/* reexport safe */ _NetworkProvider__WEBPACK_IMPORTED_MODULE_0__.useNetworkContext)
});
/* ESM import */var _NetworkProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/ui/src/contexts/NetworkProvider/NetworkProvider.tsx");
/* ESM import */var _networkChanges__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/ui/src/contexts/NetworkProvider/networkChanges.ts");
/* ESM import */var _networksUpdatedEventListener__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/ui/src/contexts/NetworkProvider/networksUpdatedEventListener.ts");
/* ESM import */var _isNetworkUpdatedEvent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../packages/ui/src/contexts/NetworkProvider/isNetworkUpdatedEvent.ts");






}),
"../../packages/ui/src/contexts/NetworkProvider/isNetworkUpdatedEvent.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isNetworkUpdatedEvent: () => (isNetworkUpdatedEvent)
});
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/types/src/index.ts");

function isNetworkUpdatedEvent(evt) {
    return evt.name === _core_types__WEBPACK_IMPORTED_MODULE_0__.NetworkEvents.NETWORK_UPDATE_EVENT;
}


}),
"../../packages/ui/src/contexts/NetworkProvider/networkChanges.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  networkChanged: () => (networkChanged),
  networkChanges: () => (networkChanges)
});
/* ESM import */var micro_signals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/micro-signals/lib/index.js");

const networkChanged = new micro_signals__WEBPACK_IMPORTED_MODULE_0__.Signal();
const networkChanges = networkChanged.cache(new micro_signals__WEBPACK_IMPORTED_MODULE_0__.ValueCache());
// Dispatch immediately so there is at least one item in the signal stream.
networkChanged.dispatch('');



}),
"../../packages/ui/src/contexts/NetworkProvider/networksUpdatedEventListener.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  networksUpdatedEventListener: () => (networksUpdatedEventListener)
});
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/types/src/index.ts");

function networksUpdatedEventListener(evt) {
    return evt.name === _core_types__WEBPACK_IMPORTED_MODULE_0__.NetworkEvents.NETWORKS_UPDATED_EVENT;
}


}),
"../../packages/ui/src/contexts/NotificationsProvider.tsx": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  NotificationsContextProvider: () => (NotificationsContextProvider),
  useNotificationsContext: () => (useNotificationsContext)
});
/* ESM import */var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/jsx-dev-runtime.js");
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/common/src/index.ts");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/filter.js");
/* ESM import */var _ConnectionProvider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../packages/ui/src/contexts/ConnectionProvider.tsx");
/* ESM import */var _isSubscriptionsChangedEvent__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../packages/ui/src/contexts/isSubscriptionsChangedEvent.ts");







const NotificationsContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)({
    subscriptions: {
        [_core_types__WEBPACK_IMPORTED_MODULE_2__.BalanceNotificationTypes.BALANCE_CHANGES]: false,
        [_core_types__WEBPACK_IMPORTED_MODULE_2__.NewsNotificationTypes.PRODUCT_ANNOUNCEMENTS]: false,
        [_core_types__WEBPACK_IMPORTED_MODULE_2__.NewsNotificationTypes.OFFERS_AND_PROMOTIONS]: false,
        [_core_types__WEBPACK_IMPORTED_MODULE_2__.NewsNotificationTypes.MARKET_NEWS]: false,
        [_core_types__WEBPACK_IMPORTED_MODULE_2__.NewsNotificationTypes.PRICE_ALERTS]: false
    },
    async syncSubscriptions () {},
    async subscribe () {},
    async unsubscribe () {}
});
function NotificationsContextProvider({ children }) {
    const { request, events } = (0,_ConnectionProvider__WEBPACK_IMPORTED_MODULE_4__.useConnectionContext)();
    const [subscriptions, setSubscriptions] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)({
        [_core_types__WEBPACK_IMPORTED_MODULE_2__.BalanceNotificationTypes.BALANCE_CHANGES]: true,
        [_core_types__WEBPACK_IMPORTED_MODULE_2__.NewsNotificationTypes.PRODUCT_ANNOUNCEMENTS]: true,
        [_core_types__WEBPACK_IMPORTED_MODULE_2__.NewsNotificationTypes.OFFERS_AND_PROMOTIONS]: true,
        [_core_types__WEBPACK_IMPORTED_MODULE_2__.NewsNotificationTypes.MARKET_NEWS]: true,
        [_core_types__WEBPACK_IMPORTED_MODULE_2__.NewsNotificationTypes.PRICE_ALERTS]: true
    });
    const syncSubscriptions = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async ()=>{
        try {
            const result = await request({
                method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.NOTIFICATION_GET_SUBSCRIPTIONS,
                params: []
            });
            setSubscriptions(result);
        } catch (err) {
            _core_common__WEBPACK_IMPORTED_MODULE_1__.Monitoring.sentryCaptureException(err, _core_common__WEBPACK_IMPORTED_MODULE_1__.Monitoring.SentryExceptionTypes.NOTIFICATIONS);
        }
    }, [
        request
    ]);
    const subscribe = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async (notificationType)=>{
        await request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.NOTIFICATION_SUBSCRIBE,
            params: notificationType
        }).catch((err)=>{
            _core_common__WEBPACK_IMPORTED_MODULE_1__.Monitoring.sentryCaptureException(err, _core_common__WEBPACK_IMPORTED_MODULE_1__.Monitoring.SentryExceptionTypes.NOTIFICATIONS);
        }).finally(()=>syncSubscriptions());
    }, [
        request,
        syncSubscriptions
    ]);
    const unsubscribe = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async (notificationType)=>{
        await request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.NOTIFICATION_UNSUBSCRIBE,
            params: notificationType
        }).catch((err)=>{
            _core_common__WEBPACK_IMPORTED_MODULE_1__.Monitoring.sentryCaptureException(err, _core_common__WEBPACK_IMPORTED_MODULE_1__.Monitoring.SentryExceptionTypes.NOTIFICATIONS);
        }).finally(()=>syncSubscriptions());
    }, [
        request,
        syncSubscriptions
    ]);
    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{
        syncSubscriptions();
    }, [
        syncSubscriptions
    ]);
    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{
        const notificationChangesSubscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_6__.filter)(_isSubscriptionsChangedEvent__WEBPACK_IMPORTED_MODULE_5__.isSubscriptionsChangedEvent)).subscribe(()=>{
            syncSubscriptions();
        });
        return ()=>{
            notificationChangesSubscription.unsubscribe();
        };
    }, [
        events,
        syncSubscriptions
    ]);
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(NotificationsContext.Provider, {
        value: {
            subscriptions,
            syncSubscriptions,
            subscribe,
            unsubscribe
        },
        children: children
    }, void 0, false, {
        fileName: "/Users/meehow/ava/extension-avalanche/packages/ui/src/contexts/NotificationsProvider.tsx",
        lineNumber: 121,
        columnNumber: 5
    }, this);
}
function useNotificationsContext() {
    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(NotificationsContext);
}


}),
"../../packages/ui/src/contexts/OnboardingProvider/OnboardingProvider.tsx": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  OnboardingContextProvider: () => (OnboardingContextProvider),
  useOnboardingContext: () => (useOnboardingContext)
});
/* ESM import */var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/jsx-dev-runtime.js");
/* ESM import */var _avalabs_types__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__("../../node_modules/@avalabs/types/esm/coreAccounts.js");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/common/src/index.ts");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);
/* ESM import */var react_i18next__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("../../node_modules/react-i18next/dist/es/useTranslation.js");
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/observable/concat.js");
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/observable/from.js");
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/filter.js");
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/map.js");
/* ESM import */var webextension_polyfill__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/webextension-polyfill/dist/browser-polyfill.js");
/* ESM import */var webextension_polyfill__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(webextension_polyfill__WEBPACK_IMPORTED_MODULE_4__);
/* ESM import */var _AnalyticsProvider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../packages/ui/src/contexts/AnalyticsProvider/index.tsx");
/* ESM import */var _ConnectionProvider__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../../packages/ui/src/contexts/ConnectionProvider.tsx");
/* ESM import */var _listeners__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../../packages/ui/src/contexts/OnboardingProvider/listeners.ts");
/* ESM import */var _hooks__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("../../packages/ui/src/hooks/index.ts");












const OnboardingContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)({});
function OnboardingContextProvider({ children, LoadingComponent, OnboardingScreen, onError }) {
    const { request, events } = (0,_ConnectionProvider__WEBPACK_IMPORTED_MODULE_6__.useConnectionContext)();
    const isHome = (0,_hooks__WEBPACK_IMPORTED_MODULE_8__.useIsSpecificContextContainer)(_core_types__WEBPACK_IMPORTED_MODULE_1__.ContextContainer.HOME);
    const [onboardingState, setOnboardingState] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)();
    const [nextPhase, setNextPhase] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)();
    const [mnemonic, setMnemonic] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)('');
    const [xpub, setXpub] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)('');
    const [xpubXP, setXpubXP] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)('');
    const [password, setPassword] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)('');
    const [newsletterEmail, setNewsletterEmail] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)('');
    const [isNewsletterEnabled, setIsNewsletterEnabled] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);
    const [walletName, setWalletName] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)();
    const [analyticsConsent, setAnalyticsConsent] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(undefined);
    const [submitInProgress, setSubmitInProgress] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);
    const [publicKeys, setPublicKeys] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)();
    const [masterFingerprint, setMasterFingerprint] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)('');
    const [authProvider, setAuthProvider] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)();
    const [userId, setUserId] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)();
    const { t } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_9__.useTranslation)();
    const [oidcToken, setOidcToken] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)('');
    const [seedlessSignerToken, setSeedlessSignerToken] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(undefined);
    const [onboardingPhase, setOnboardingPhase] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);
    const [walletType, setWalletType] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)();
    const [isSeedlessMfaRequired, setIsSeedlessMfaRequired] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);
    const [numberOfAccountsToCreate, setNumberOfAccountsToCreate] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(0);
    const [onboardingWalletType, setOnboardingWalletType] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(undefined);
    const { capture } = (0,_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_5__.useAnalyticsContext)();
    const resetStates = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(()=>{
        setMnemonic('');
        setXpub('');
        setXpubXP('');
        setPublicKeys(undefined);
        setPassword('');
        setAnalyticsConsent(undefined);
        setMasterFingerprint('');
        setOidcToken('');
        setSeedlessSignerToken(undefined);
        setWalletType(undefined);
        setUserId(undefined);
        setWalletName(undefined);
        setIsSeedlessMfaRequired(false);
        setOnboardingWalletType(undefined);
        setIsNewsletterEnabled(false);
        setNewsletterEmail('');
        setNumberOfAccountsToCreate(0);
    }, []);
    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{
        if (nextPhase === _core_types__WEBPACK_IMPORTED_MODULE_1__.OnboardingPhase.RESTART) {
            resetStates();
        }
    }, [
        nextPhase,
        resetStates
    ]);
    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{
        const walletTypeSelectingPhases = [
            _core_types__WEBPACK_IMPORTED_MODULE_1__.OnboardingPhase.CREATE_WALLET,
            _core_types__WEBPACK_IMPORTED_MODULE_1__.OnboardingPhase.IMPORT_WALLET,
            _core_types__WEBPACK_IMPORTED_MODULE_1__.OnboardingPhase.LEDGER,
            _core_types__WEBPACK_IMPORTED_MODULE_1__.OnboardingPhase.KEYSTONE,
            _core_types__WEBPACK_IMPORTED_MODULE_1__.OnboardingPhase.SEEDLESS_GOOGLE,
            _core_types__WEBPACK_IMPORTED_MODULE_1__.OnboardingPhase.SEEDLESS_APPLE
        ];
        if (onboardingPhase && walletTypeSelectingPhases.includes(onboardingPhase)) {
            setWalletType(onboardingPhase);
        }
    }, [
        onboardingPhase
    ]);
    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{
        if (!request || !events) {
            return;
        }
        (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.concat)((0,rxjs__WEBPACK_IMPORTED_MODULE_11__.from)(request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.ONBOARDING_GET_STATE
        })), events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_12__.filter)(_listeners__WEBPACK_IMPORTED_MODULE_7__.onboardingUpdatedEventListener), (0,rxjs__WEBPACK_IMPORTED_MODULE_13__.map)((evt)=>evt.value))).subscribe((result)=>{
            setOnboardingState(result);
        });
    }, [
        request,
        events
    ]);
    /**
   * If they are on the popup.html file then force onboarding to a tab. These files are created
   * in the rsbuild config and we decipher the environment by the .html file.
   */ (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{
        if (!isHome && onboardingState && !onboardingState.isOnBoarded) {
            webextension_polyfill__WEBPACK_IMPORTED_MODULE_4___default().tabs.create({
                url: '/home.html'
            });
            window.close();
        }
    }, [
        isHome,
        onboardingState
    ]);
    const setPasswordAndNames = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((pass, newWalletName)=>{
        setPassword(pass);
        setWalletName(newWalletName);
    }, []);
    const submitMnemonic = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(()=>{
        return request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.MNEMONIC_ONBOARDING_SUBMIT,
            params: [
                {
                    mnemonic,
                    password,
                    analyticsConsent: !!analyticsConsent,
                    walletName: walletName
                }
            ]
        });
    }, [
        analyticsConsent,
        mnemonic,
        password,
        request,
        walletName
    ]);
    const submitSeedless = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(()=>{
        if (!seedlessSignerToken || !userId || !authProvider) {
            throw new Error('Seedless wallet initialization failed');
        }
        return request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.SEEDLESS_ONBOARDING_SUBMIT,
            params: [
                {
                    seedlessSignerToken,
                    userId,
                    authProvider,
                    password,
                    analyticsConsent: !!analyticsConsent,
                    walletName: walletName
                }
            ]
        });
    }, [
        analyticsConsent,
        authProvider,
        password,
        request,
        seedlessSignerToken,
        userId,
        walletName
    ]);
    const submitLedger = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(()=>{
        return request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.LEDGER_ONBOARDING_SUBMIT,
            params: [
                {
                    xpub,
                    xpubXP,
                    pubKeys: publicKeys,
                    password,
                    analyticsConsent: !!analyticsConsent,
                    walletName: walletName,
                    numberOfAccountsToCreate
                }
            ]
        });
    }, [
        analyticsConsent,
        numberOfAccountsToCreate,
        password,
        publicKeys,
        request,
        walletName,
        xpub,
        xpubXP
    ]);
    const submitKeystone = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(()=>{
        return request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.KEYSTONE_ONBOARDING_SUBMIT,
            params: [
                {
                    masterFingerprint,
                    xpub,
                    password,
                    analyticsConsent: !!analyticsConsent,
                    walletName: walletName
                }
            ]
        });
    }, [
        analyticsConsent,
        masterFingerprint,
        password,
        request,
        walletName,
        xpub
    ]);
    const submit = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((postSubmitHandler)=>{
        if (submitInProgress) {
            return;
        }
        if (!mnemonic && !xpub && !password) {
            return;
        }
        let handler = undefined;
        if (!handler && onboardingWalletType === _avalabs_types__WEBPACK_IMPORTED_MODULE_14__.WalletType.Mnemonic) {
            handler = submitMnemonic;
        }
        if (!handler && onboardingWalletType === _avalabs_types__WEBPACK_IMPORTED_MODULE_14__.WalletType.Seedless) {
            handler = submitSeedless;
        }
        if (!handler && onboardingWalletType === _avalabs_types__WEBPACK_IMPORTED_MODULE_14__.WalletType.Keystone) {
            handler = submitKeystone;
        }
        if (!handler && onboardingWalletType === _avalabs_types__WEBPACK_IMPORTED_MODULE_14__.WalletType.Ledger) {
            handler = submitLedger;
        }
        if (!handler) {
            return;
        }
        setSubmitInProgress(true);
        handler().then(async ()=>{
            capture('OnboardingSubmitSucceeded', {
                walletType
            });
            if (isNewsletterEnabled) {
                try {
                    await (0,_core_common__WEBPACK_IMPORTED_MODULE_2__.signUpForNewsletter)({
                        email: newsletterEmail
                    });
                    capture('NewsletterSignupSuccess');
                } catch (ex) {
                    const rawMessage = ex.message ? String(ex.message) : 'Failed to sign up for newsletter';
                    const sanitizedMessage = rawMessage.replace(new RegExp(newsletterEmail, 'g'), '<user-email>');
                    _core_common__WEBPACK_IMPORTED_MODULE_2__.Monitoring.sentryCaptureException(new Error(sanitizedMessage), _core_common__WEBPACK_IMPORTED_MODULE_2__.Monitoring.SentryExceptionTypes.ONBOARDING);
                    capture('NewsletterSignupFailure');
                }
            }
            resetStates();
            postSubmitHandler();
        }).catch(()=>{
            capture('OnboardingSubmitFailed', {
                walletType
            });
            setNextPhase(_core_types__WEBPACK_IMPORTED_MODULE_1__.OnboardingPhase.PASSWORD);
            onError(t('Something went wrong. Please try again.'));
            setAnalyticsConsent(undefined);
        }).finally(()=>{
            setSubmitInProgress(false);
        });
    }, [
        capture,
        isNewsletterEnabled,
        mnemonic,
        newsletterEmail,
        onboardingWalletType,
        password,
        resetStates,
        submitInProgress,
        submitKeystone,
        submitLedger,
        submitMnemonic,
        submitSeedless,
        t,
        walletType,
        xpub,
        onError
    ]);
    if (!onboardingState) {
        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(LoadingComponent, {}, void 0, false, {
            fileName: "/Users/meehow/ava/extension-avalanche/packages/ui/src/contexts/OnboardingProvider/OnboardingProvider.tsx",
            lineNumber: 404,
            columnNumber: 12
        }, this);
    }
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(OnboardingContext.Provider, {
        value: {
            onboardingState,
            nextPhase,
            newsletterEmail,
            isNewsletterEnabled,
            setIsNewsletterEnabled,
            submitInProgress,
            setNextPhase,
            setNewsletterEmail,
            setMnemonic,
            setXpub,
            setXpubXP,
            setPasswordAndNames,
            submit,
            setAnalyticsConsent,
            analyticsConsent,
            setPublicKeys,
            publicKeys,
            setMasterFingerprint,
            mnemonic,
            onboardingPhase,
            setOnboardingPhase,
            setOidcToken,
            oidcToken,
            setSeedlessSignerToken,
            setAuthProvider,
            setUserId,
            resetStates,
            isSeedlessMfaRequired,
            setIsSeedlessMfaRequired,
            setOnboardingWalletType,
            onboardingWalletType,
            numberOfAccountsToCreate,
            setNumberOfAccountsToCreate
        },
        children: isHome ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react__WEBPACK_IMPORTED_MODULE_3__.Suspense, {
            fallback: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(LoadingComponent, {}, void 0, false, {
                fileName: "/Users/meehow/ava/extension-avalanche/packages/ui/src/contexts/OnboardingProvider/OnboardingProvider.tsx",
                lineNumber: 451,
                columnNumber: 29
            }, void 0),
            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(OnboardingScreen, {}, void 0, false, {
                fileName: "/Users/meehow/ava/extension-avalanche/packages/ui/src/contexts/OnboardingProvider/OnboardingProvider.tsx",
                lineNumber: 452,
                columnNumber: 11
            }, this)
        }, void 0, false, {
            fileName: "/Users/meehow/ava/extension-avalanche/packages/ui/src/contexts/OnboardingProvider/OnboardingProvider.tsx",
            lineNumber: 451,
            columnNumber: 9
        }, this) : children
    }, void 0, false, {
        fileName: "/Users/meehow/ava/extension-avalanche/packages/ui/src/contexts/OnboardingProvider/OnboardingProvider.tsx",
        lineNumber: 408,
        columnNumber: 5
    }, this);
}
function useOnboardingContext() {
    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(OnboardingContext);
}


}),
"../../packages/ui/src/contexts/OnboardingProvider/index.tsx": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  OnboardingContextProvider: () => (/* reexport safe */ _OnboardingProvider__WEBPACK_IMPORTED_MODULE_0__.OnboardingContextProvider),
  useOnboardingContext: () => (/* reexport safe */ _OnboardingProvider__WEBPACK_IMPORTED_MODULE_0__.useOnboardingContext)
});
/* ESM import */var _OnboardingProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/ui/src/contexts/OnboardingProvider/OnboardingProvider.tsx");



}),
"../../packages/ui/src/contexts/OnboardingProvider/listeners.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  onboardingUpdatedEventListener: () => (onboardingUpdatedEventListener)
});
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/types/src/index.ts");

function onboardingUpdatedEventListener(evt) {
    return evt.name === _core_types__WEBPACK_IMPORTED_MODULE_0__.OnboardingEvents.ONBOARDING_UPDATED_EVENT;
}


}),
"../../packages/ui/src/contexts/PermissionsProvider/PermissionsProvider.tsx": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  PermissionContextProvider: () => (PermissionContextProvider),
  usePermissionContext: () => (usePermissionContext)
});
/* ESM import */var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/jsx-dev-runtime.js");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var lodash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/lodash/lodash.js");
/* ESM import */var lodash__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_2__);
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/filter.js");
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/map.js");
/* ESM import */var _ConnectionProvider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../packages/ui/src/contexts/ConnectionProvider.tsx");
/* ESM import */var _permissionsEventFilters__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../packages/ui/src/contexts/PermissionsProvider/permissionsEventFilters.ts");







const PermissionContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)({});
function PermissionContextProvider({ children }) {
    const { request, events } = (0,_ConnectionProvider__WEBPACK_IMPORTED_MODULE_4__.useConnectionContext)();
    const [permissionState, setPermissionState] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)({});
    const revokeAddressPermisson = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((domain, addresses)=>request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.PERMISSIONS_REVOKE_ADDRESS_ACCESS_FOR_DOMAIN,
            params: [
                domain,
                addresses
            ]
        }), [
        request
    ]);
    const isDomainConnectedToAccount = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((domain, addresses)=>{
        if (!domain || !addresses?.length) {
            return false;
        }
        const domainData = permissionState[domain];
        if (!domainData?.accounts) {
            return false;
        }
        return addresses.map(lodash__WEBPACK_IMPORTED_MODULE_2__.toLower).some((addr)=>Object.keys(domainData.accounts).map(lodash__WEBPACK_IMPORTED_MODULE_2__.toLower).includes(addr));
    }, [
        permissionState
    ]);
    // listen for permissions changes
    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{
        let isCancelled = false;
        request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.PERMISSIONS_GET_ALL_PERMISSIONS
        }).then((result)=>{
            return result;
        }).then((permissions)=>{
            if (isCancelled) {
                return;
            }
            setPermissionState(permissions);
        });
        const subscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_6__.filter)(_permissionsEventFilters__WEBPACK_IMPORTED_MODULE_5__.permissionsUpdatedEventListener), (0,rxjs__WEBPACK_IMPORTED_MODULE_7__.map)((evt)=>evt.value)).subscribe((permissions)=>{
            setPermissionState(permissions);
        });
        return ()=>{
            subscription.unsubscribe();
            isCancelled = true;
        };
    }, [
        events,
        request
    ]);
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(PermissionContext.Provider, {
        value: {
            permissions: permissionState,
            revokeAddressPermisson,
            isDomainConnectedToAccount
        },
        children: children
    }, void 0, false, {
        fileName: "/Users/meehow/ava/extension-avalanche/packages/ui/src/contexts/PermissionsProvider/PermissionsProvider.tsx",
        lineNumber: 96,
        columnNumber: 5
    }, this);
}
function usePermissionContext() {
    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(PermissionContext);
}


}),
"../../packages/ui/src/contexts/PermissionsProvider/index.tsx": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  PermissionContextProvider: () => (/* reexport safe */ _PermissionsProvider__WEBPACK_IMPORTED_MODULE_0__.PermissionContextProvider),
  usePermissionContext: () => (/* reexport safe */ _PermissionsProvider__WEBPACK_IMPORTED_MODULE_0__.usePermissionContext)
});
/* ESM import */var _PermissionsProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/ui/src/contexts/PermissionsProvider/PermissionsProvider.tsx");



}),
"../../packages/ui/src/contexts/PermissionsProvider/permissionsEventFilters.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  permissionsUpdatedEventListener: () => (permissionsUpdatedEventListener)
});
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/types/src/index.ts");

function permissionsUpdatedEventListener(evt) {
    return evt.name === _core_types__WEBPACK_IMPORTED_MODULE_0__.PermissionEvents.PERMISSIONS_STATE_UPDATE;
}


}),
"../../packages/ui/src/contexts/SeedlessMfaManagementProvider.tsx": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  SeedlessMfaManagementContext: () => (SeedlessMfaManagementContext),
  SeedlessMfaManagementProvider: () => (SeedlessMfaManagementProvider),
  useSeedlessMfaManager: () => (useSeedlessMfaManager)
});
/* ESM import */var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/jsx-dev-runtime.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/filter.js");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../packages/common/src/index.ts");
/* ESM import */var _ConnectionProvider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../packages/ui/src/contexts/ConnectionProvider.tsx");
/* ESM import */var _FeatureFlagsProvider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../packages/ui/src/contexts/FeatureFlagsProvider/index.tsx");
/* ESM import */var _WalletProvider__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../../packages/ui/src/contexts/WalletProvider.tsx");








const SeedlessMfaManagementContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({
    initAuthenticatorChange () {
        throw 'Not ready';
    },
    completeAuthenticatorChange () {
        throw 'Not ready';
    },
    addFidoDevice () {
        throw 'Not ready';
    },
    removeFidoDevice () {
        throw 'Not ready';
    },
    removeTotp () {
        throw 'Not ready';
    },
    isLoadingRecoveryMethods: false,
    recoveryMethods: [],
    isMfaSetupPromptVisible: false,
    hasMfaConfigured: false,
    hasTotpConfigured: false,
    hasFidoConfigured: false
});
const SeedlessMfaManagementProvider = ({ children })=>{
    const { events, request } = (0,_ConnectionProvider__WEBPACK_IMPORTED_MODULE_4__.useConnectionContext)();
    const { walletDetails } = (0,_WalletProvider__WEBPACK_IMPORTED_MODULE_6__.useWalletContext)();
    const { featureFlags } = (0,_FeatureFlagsProvider__WEBPACK_IMPORTED_MODULE_5__.useFeatureFlagContext)();
    const areMfaSettingsAvailable = featureFlags[_core_types__WEBPACK_IMPORTED_MODULE_2__.FeatureGates.SEEEDLESS_MFA_SETTINGS];
    const [isLoadingRecoveryMethods, setIsLoadingRecoveryMethods] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
    const [hasLoadedRecoveryMethods, setHasLoadedRecoveryMethods] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
    const [recoveryMethods, setRecoveryMethods] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);
    const isMfaSetupPromptVisible = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{
        return areMfaSettingsAvailable && hasLoadedRecoveryMethods && walletDetails?.type === _core_types__WEBPACK_IMPORTED_MODULE_2__.SecretType.Seedless && recoveryMethods.length === 0;
    }, [
        areMfaSettingsAvailable,
        hasLoadedRecoveryMethods,
        walletDetails?.type,
        recoveryMethods
    ]);
    const loadRecoveryMethods = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async ()=>{
        setIsLoadingRecoveryMethods(true);
        try {
            const methods = await (0,_core_common__WEBPACK_IMPORTED_MODULE_3__.incrementalPromiseResolve)(()=>request({
                    method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.SEEDLESS_GET_RECOVERY_METHODS
                }), // CubeSigner SDK attempts to refresh the session token whenever possible,
            // but sometimes a race condition happens and the request may temporarily fail
            // with a 403 Forbidden. In that case, we retry.
            (err)=>err === 'Forbidden');
            setRecoveryMethods(methods);
            setHasLoadedRecoveryMethods(true);
        } catch  {
            setRecoveryMethods([]);
            setHasLoadedRecoveryMethods(false);
        } finally{
            setIsLoadingRecoveryMethods(false);
        }
    }, [
        request
    ]);
    const initAuthenticatorChange = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.SEEDLESS_INIT_AUTHENTICATOR_CHANGE
        }), [
        request
    ]);
    const completeAuthenticatorChange = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((totpId, code)=>request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.SEEDLESS_COMPLETE_AUTHENTICATOR_CHANGE,
            params: [
                totpId,
                code
            ]
        }), [
        request
    ]);
    const addFidoDevice = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((name, keyType)=>request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.SEEDLESS_ADD_FIDO_DEVICE,
            params: [
                name,
                keyType
            ]
        }), [
        request
    ]);
    const removeFidoDevice = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((id)=>request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.SEEDLESS_REMOVE_FIDO_DEVICE,
            params: [
                id
            ]
        }), [
        request
    ]);
    const removeTotp = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.SEEDLESS_REMOVE_TOTP
        }), [
        request
    ]);
    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{
        if (walletDetails?.type !== _core_types__WEBPACK_IMPORTED_MODULE_2__.SecretType.Seedless) {
            return;
        }
        loadRecoveryMethods();
        const eventsSubscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_7__.filter)(_core_common__WEBPACK_IMPORTED_MODULE_3__.isSeedlessMfaMethodsUpdatedEvent)).subscribe(async (event)=>{
            setRecoveryMethods(event.value);
        });
        return ()=>{
            eventsSubscription.unsubscribe();
        };
    }, [
        events,
        loadRecoveryMethods,
        walletDetails?.type
    ]);
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(SeedlessMfaManagementContext.Provider, {
        value: {
            addFidoDevice,
            removeFidoDevice,
            removeTotp,
            completeAuthenticatorChange,
            initAuthenticatorChange,
            isLoadingRecoveryMethods,
            isMfaSetupPromptVisible,
            recoveryMethods,
            hasMfaConfigured: recoveryMethods.length > 0,
            hasTotpConfigured: recoveryMethods.some(({ type })=>type === _core_types__WEBPACK_IMPORTED_MODULE_2__.MfaRequestType.Totp),
            hasFidoConfigured: recoveryMethods.some(({ type })=>type === _core_types__WEBPACK_IMPORTED_MODULE_2__.MfaRequestType.Fido)
        },
        children: children
    }, void 0, false, {
        fileName: "/Users/meehow/ava/extension-avalanche/packages/ui/src/contexts/SeedlessMfaManagementProvider.tsx",
        lineNumber: 195,
        columnNumber: 5
    }, undefined);
};
function useSeedlessMfaManager() {
    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(SeedlessMfaManagementContext);
}


}),
"../../packages/ui/src/contexts/SettingsProvider/SettingsProvider.tsx": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  SettingsContextProvider: () => (SettingsContextProvider),
  useSettingsContext: () => (useSettingsContext)
});
/* ESM import */var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/jsx-dev-runtime.js");
/* ESM import */var _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/@avalabs/vm-module-types/dist/index.js");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../packages/common/src/index.ts");
/* ESM import */var i18next__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/i18next/dist/esm/i18next.js");
/* ESM import */var lodash__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../node_modules/lodash/lodash.js");
/* ESM import */var lodash__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_5__);
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_6__);
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/filter.js");
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/map.js");
/* ESM import */var _ConnectionProvider__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../../packages/ui/src/contexts/ConnectionProvider.tsx");
/* ESM import */var _utils_getCurrencyFormatter__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("../../packages/ui/src/contexts/utils/getCurrencyFormatter.ts");
/* ESM import */var _isSettingsUpdatedEvent__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("../../packages/ui/src/contexts/SettingsProvider/isSettingsUpdatedEvent.ts");
/* ESM import */var _models__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("../../packages/ui/src/contexts/SettingsProvider/models.ts");












const SettingsContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_6__.createContext)({});
function SettingsContextProvider({ children }) {
    const { request, events } = (0,_ConnectionProvider__WEBPACK_IMPORTED_MODULE_7__.useConnectionContext)();
    const [settings, setSettings] = (0,react__WEBPACK_IMPORTED_MODULE_6__.useState)();
    const [isSettingsOpen, setIsSettingsOpen] = (0,react__WEBPACK_IMPORTED_MODULE_6__.useState)(false);
    const [settingsActivePage, setSettingsActivePage] = (0,react__WEBPACK_IMPORTED_MODULE_6__.useState)(_models__WEBPACK_IMPORTED_MODULE_10__.SettingsPages.MAIN_PAGE);
    (0,react__WEBPACK_IMPORTED_MODULE_6__.useEffect)(()=>{
        (0,i18next__WEBPACK_IMPORTED_MODULE_4__.changeLanguage)(settings?.language);
    }, [
        settings?.language
    ]);
    (0,react__WEBPACK_IMPORTED_MODULE_6__.useEffect)(()=>{
        request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.SETTINGS_GET
        }).then((res)=>{
            setSettings(res);
        });
        const subscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_11__.filter)(_isSettingsUpdatedEvent__WEBPACK_IMPORTED_MODULE_9__.isSettingsUpdatedEvent), (0,rxjs__WEBPACK_IMPORTED_MODULE_12__.map)((evt)=>evt.value)).subscribe((newSettings)=>{
            (0,_core_common__WEBPACK_IMPORTED_MODULE_3__.updateIfDifferent)(setSettings, newSettings);
        });
        return ()=>subscription.unsubscribe();
    }, [
        events,
        request
    ]);
    const currencyFormatter = (0,react__WEBPACK_IMPORTED_MODULE_6__.useMemo)(()=>(0,_utils_getCurrencyFormatter__WEBPACK_IMPORTED_MODULE_8__.getCurrencyFormatter)(settings?.currency ?? 'USD'), [
        settings?.currency
    ]);
    function lockWallet() {
        setIsSettingsOpen(false);
        return request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.LOCK_WALLET
        });
    }
    function updateCurrencySetting(currency) {
        return request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.SETTINGS_UPDATE_CURRENCY,
            params: [
                currency
            ]
        });
    }
    function toggleShowTokensWithoutBalanceSetting() {
        return request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.SETTINGS_UPDATE_SHOW_NO_BALANCE,
            params: [
                !settings?.showTokensWithoutBalances
            ]
        });
    }
    async function toggleTokenVisibility(token) {
        if (token.type !== _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.ERC20 && token.type !== _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.SPL) {
            return;
        }
        const key = token.address;
        const tokensVisibility = settings?.tokensVisibility ?? {};
        return request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.SETTINGS_UPDATE_TOKENS_VISIBILITY,
            params: [
                {
                    ...tokensVisibility,
                    [key]: !getTokenVisibility(token)
                }
            ]
        });
    }
    const getTokenVisibility = (0,react__WEBPACK_IMPORTED_MODULE_6__.useCallback)((token)=>{
        const key = token.type === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.NATIVE ? token.symbol : token.address;
        const tokensVisibility = settings?.tokensVisibility ?? {};
        // If the token is flagged as malicious, only show it if the user specifcially enabled it.
        return (0,_core_common__WEBPACK_IMPORTED_MODULE_3__.isTokenMalicious)(token) ? tokensVisibility[key] : tokensVisibility[key] || tokensVisibility[key] === undefined;
    }, [
        settings?.tokensVisibility
    ]);
    async function toggleCollectibleVisibility(nft) {
        const key = `${nft.address}-${nft.tokenId}`;
        const visibility = settings?.collectiblesVisibility ?? {};
        // We used to (wrongly) index by address only.
        const isHidden = (visibility[key] ?? visibility[nft.address]) === false;
        // If token is now hidde, just remove it from the dictionary,
        // otherwise set it to false.
        const updatedVisibility = isHidden ? (0,lodash__WEBPACK_IMPORTED_MODULE_5__.omit)(visibility, [
            nft.address,
            key
        ]) : (0,lodash__WEBPACK_IMPORTED_MODULE_5__.set)(visibility, key, false);
        return request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.SETTINGS_UPDATE_COLLECTIBLES_VISIBILITY,
            params: [
                updatedVisibility
            ]
        });
    }
    const getCollectibleVisibility = (0,react__WEBPACK_IMPORTED_MODULE_6__.useCallback)((nft)=>{
        const key = `${nft.address}-${nft.tokenId}`;
        const visibility = settings?.collectiblesVisibility ?? {};
        // We used to index by address only.
        return (visibility[key] ?? visibility[nft.address]) !== false;
    }, [
        settings?.collectiblesVisibility
    ]);
    function updateTheme(theme) {
        return request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.SETTINGS_UPDATE_THEME,
            params: [
                theme
            ]
        });
    }
    function setAnalyticsConsent(consent) {
        return request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.SETTINGS_SET_ANALYTICS_CONSENT,
            params: [
                consent
            ]
        });
    }
    function setLanguage(lang) {
        return request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.SETTINGS_SET_LANGUAGE,
            params: [
                lang
            ]
        });
    }
    function setCoreAssistant(state) {
        return request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.SETTINGS_SET_CORE_ASSISTANT,
            params: [
                state
            ]
        });
    }
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(SettingsContext.Provider, {
        value: {
            ...settings,
            nextGenTheme: 'system',
            lockWallet,
            updateCurrencySetting,
            toggleShowTokensWithoutBalanceSetting,
            getTokenVisibility,
            toggleTokenVisibility,
            getCollectibleVisibility,
            toggleCollectibleVisibility,
            updateTheme,
            currencyFormatter,
            setAnalyticsConsent,
            setLanguage,
            isSettingsOpen,
            setIsSettingsOpen,
            settingsActivePage,
            setSettingsActivePage,
            setCoreAssistant
        },
        children: children
    }, void 0, false, {
        fileName: "/Users/meehow/ava/extension-avalanche/packages/ui/src/contexts/SettingsProvider/SettingsProvider.tsx",
        lineNumber: 212,
        columnNumber: 5
    }, this);
}
function useSettingsContext() {
    return (0,react__WEBPACK_IMPORTED_MODULE_6__.useContext)(SettingsContext);
}


}),
"../../packages/ui/src/contexts/SettingsProvider/index.tsx": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  SettingsContextProvider: () => (/* reexport safe */ _SettingsProvider__WEBPACK_IMPORTED_MODULE_0__.SettingsContextProvider),
  SettingsPages: () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_1__.SettingsPages),
  useSettingsContext: () => (/* reexport safe */ _SettingsProvider__WEBPACK_IMPORTED_MODULE_0__.useSettingsContext)
});
/* ESM import */var _SettingsProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/ui/src/contexts/SettingsProvider/SettingsProvider.tsx");
/* ESM import */var _models__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/ui/src/contexts/SettingsProvider/models.ts");




}),
"../../packages/ui/src/contexts/SettingsProvider/isSettingsUpdatedEvent.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isSettingsUpdatedEvent: () => (isSettingsUpdatedEvent)
});
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/types/src/index.ts");

function isSettingsUpdatedEvent(evt) {
    return evt.name === _core_types__WEBPACK_IMPORTED_MODULE_0__.SettingsEvents.SETTINGS_UPDATED;
}


}),
"../../packages/ui/src/contexts/SettingsProvider/models.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  SettingsPages: () => (SettingsPages)
});
var SettingsPages = /*#__PURE__*/ function(SettingsPages) {
    SettingsPages["ADD_CONTACT"] = "ADD_CONTACT";
    SettingsPages["CHANGE_PASSWORD"] = "CHANGE_PASSWORD";
    SettingsPages["CONTACT_LIST"] = "CONTACT_LIST";
    SettingsPages["CONTACT_PROFILE"] = "CONTACT_PROFILE";
    SettingsPages["CURRENCIES"] = "CURRENCIES";
    SettingsPages["MAIN_PAGE"] = "MAIN_PAGE";
    SettingsPages["RECOVERY_PHRASE"] = "RECOVERY_PHRASE";
    SettingsPages["SECURITY_AND_PRIVACY"] = "SECURITY_AND_PRIVACY";
    SettingsPages["CONNECTED_SITES"] = "CONNECTED_SITES";
    SettingsPages["LEDGER"] = "LEDGER";
    SettingsPages["LEGAL"] = "LEGAL";
    SettingsPages["ADVANCED"] = "ADVANCED";
    SettingsPages["LANGUAGE"] = "LANGUAGE";
    SettingsPages["FEEDBACK"] = "FEEDBACK";
    SettingsPages["EXPORT_RECOVERY_PHRASE"] = "EXPORT_RECOVERY_PHRASE";
    SettingsPages["RECOVERY_METHODS"] = "RECOVERY_METHODS";
    SettingsPages["NOTIFICATIONS"] = "NOTIFICATIONS";
    return SettingsPages;
}({});


}),
"../../packages/ui/src/contexts/SwapProvider/SwapProvider.tsx": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  SwapContext: () => (SwapContext),
  SwapContextProvider: () => (SwapContextProvider),
  useSwapContext: () => (useSwapContext)
});
/* ESM import */var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/jsx-dev-runtime.js");
/* ESM import */var _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/@avalabs/vm-module-types/dist/index.js");
/* ESM import */var _paraswap_sdk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/@paraswap/sdk/dist/sdk.esm.js");
/* ESM import */var big_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../node_modules/big.js/big.mjs");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_4__);
/* ESM import */var react_i18next__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__("../../node_modules/react-i18next/dist/es/useTranslation.js");
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js");
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/debounceTime.js");
/* ESM import */var webextension_polyfill__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../node_modules/webextension-polyfill/dist/browser-polyfill.js");
/* ESM import */var webextension_polyfill__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(webextension_polyfill__WEBPACK_IMPORTED_MODULE_5__);
/* ESM import */var _hooks_useTokensWithBalances__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../../packages/ui/src/hooks/useTokensWithBalances.ts");
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../../packages/common/src/index.ts");
/* ESM import */var _AccountsProvider__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("../../packages/ui/src/contexts/AccountsProvider/index.tsx");
/* ESM import */var _AnalyticsProvider__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("../../packages/ui/src/contexts/AnalyticsProvider/index.tsx");
/* ESM import */var _NetworkProvider__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("../../packages/ui/src/contexts/NetworkProvider/index.tsx");
/* ESM import */var _WalletProvider__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__("../../packages/ui/src/contexts/WalletProvider.tsx");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var _models__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__("../../packages/ui/src/contexts/SwapProvider/models.ts");
/* ESM import */var _swap_utils__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__("../../packages/ui/src/contexts/SwapProvider/swap-utils.ts");
/* ESM import */var _useEvmSwap__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__("../../packages/ui/src/contexts/SwapProvider/useEvmSwap.tsx");
/* ESM import */var _useSolanaSwap__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__("../../packages/ui/src/contexts/SwapProvider/useSolanaSwap.tsx");



















const SwapContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_4__.createContext)({});
function SwapContextProvider({ children, removeToast, showErrorToast, showPendingToast, showToastWithLink }) {
    const { network: activeNetwork } = (0,_NetworkProvider__WEBPACK_IMPORTED_MODULE_10__.useNetworkContext)();
    const { accounts: { active: activeAccount } } = (0,_AccountsProvider__WEBPACK_IMPORTED_MODULE_8__.useAccountsContext)();
    const { captureEncrypted } = (0,_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_9__.useAnalyticsContext)();
    const { walletDetails } = (0,_WalletProvider__WEBPACK_IMPORTED_MODULE_11__.useWalletContext)();
    const { t } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_17__.useTranslation)();
    const tokens = (0,_hooks_useTokensWithBalances__WEBPACK_IMPORTED_MODULE_6__.useTokensWithBalances)({
        forceShowTokensWithoutBalances: true,
        disallowedAssets: _models__WEBPACK_IMPORTED_MODULE_13__.DISALLOWED_SWAP_ASSETS
    });
    const [quote, setQuote] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(null);
    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)({
        message: ''
    });
    const [destAmount, setDestAmount] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)('');
    const [isSwapLoading, setIsSwapLoading] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(false);
    const findSymbol = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((symbolOrAddress)=>{
        const tokenInfo = tokens.find((token)=>token.type === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.NATIVE ? token.symbol === symbolOrAddress : token.address === symbolOrAddress);
        return tokenInfo?.symbol ?? symbolOrAddress;
    }, [
        tokens
    ]);
    const swapFormValuesStream = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(()=>{
        return new rxjs__WEBPACK_IMPORTED_MODULE_18__.BehaviorSubject({});
    }, []);
    const notifyOnSwapResult = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(async ({ isSuccessful, pendingToastId, txHash, chainId, userAddress, srcToken, destToken, srcAmount, destAmount: resultDestAmount, srcDecimals, destDecimals })=>{
        captureEncrypted(isSuccessful ? 'SwapSuccessful' : 'SwapFailed', {
            address: userAddress,
            txHash: txHash,
            chainId
        });
        const srcAsset = findSymbol(srcToken);
        const destAsset = findSymbol(destToken);
        const srcAssetAmount = new big_js__WEBPACK_IMPORTED_MODULE_3__["default"](srcAmount).div(10 ** srcDecimals).toString();
        const destAssetAmount = new big_js__WEBPACK_IMPORTED_MODULE_3__["default"](resultDestAmount).div(10 ** destDecimals).toString();
        const notificationText = isSuccessful ? t('Swap transaction succeeded! 🎉') : t('Swap transaction failed! ❌');
        removeToast(pendingToastId);
        if (isSuccessful) {
            showToastWithLink({
                title: notificationText,
                url: (0,_core_common__WEBPACK_IMPORTED_MODULE_7__.getExplorerAddressByNetwork)(activeNetwork, txHash),
                label: t('View in Explorer')
            });
        } else {
            showErrorToast(notificationText);
        }
        webextension_polyfill__WEBPACK_IMPORTED_MODULE_5___default().notifications.create({
            type: 'basic',
            title: notificationText,
            iconUrl: '../../../../images/icon-192.png',
            priority: 2,
            message: isSuccessful ? t('Successfully swapped {{srcAmount}} {{srcToken}} to {{destAmount}} {{destToken}}', {
                srcAmount: srcAssetAmount,
                destAmount: destAssetAmount,
                srcToken: srcAsset,
                destToken: destAsset
            }) : t('Could not swap {{srcAmount}} {{srcToken}} to {{destAmount}} {{destToken}}', {
                srcToken: srcAsset,
                destToken: destAsset,
                srcAmount: srcAssetAmount,
                destAmount: destAssetAmount
            })
        });
    }, [
        activeNetwork,
        captureEncrypted,
        findSymbol,
        t,
        showToastWithLink,
        removeToast,
        showErrorToast
    ]);
    const { getRate: getEvmRate, swap: evmSwap } = (0,_useEvmSwap__WEBPACK_IMPORTED_MODULE_15__.useEvmSwap)({
        account: activeAccount,
        network: activeNetwork,
        walletDetails: walletDetails
    }, {
        onTransactionReceipt: notifyOnSwapResult,
        showPendingToast
    });
    const { getRate: getSvmRate, swap: svmSwap } = (0,_useSolanaSwap__WEBPACK_IMPORTED_MODULE_16__.useSolanaSwap)({
        network: activeNetwork,
        account: activeAccount
    }, {
        onTransactionReceipt: notifyOnSwapResult,
        showPendingToast
    });
    const swap = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(async (params)=>{
        if ((0,_core_common__WEBPACK_IMPORTED_MODULE_7__.isSolanaNetwork)(activeNetwork)) {
            if (!(0,_models__WEBPACK_IMPORTED_MODULE_13__.isJupiterSwapParams)(params)) {
                throw (0,_swap_utils__WEBPACK_IMPORTED_MODULE_14__.swapError)(_core_types__WEBPACK_IMPORTED_MODULE_12__.SwapErrorCode.InvalidParams);
            }
            return svmSwap(params);
        }
        if (!(0,_models__WEBPACK_IMPORTED_MODULE_13__.isParaswapSwapParams)(params)) {
            throw (0,_swap_utils__WEBPACK_IMPORTED_MODULE_14__.swapError)(_core_types__WEBPACK_IMPORTED_MODULE_12__.SwapErrorCode.InvalidParams);
        }
        return evmSwap(params);
    }, [
        activeNetwork,
        evmSwap,
        svmSwap
    ]);
    const getRate = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(async (params)=>{
        if ((0,_core_common__WEBPACK_IMPORTED_MODULE_7__.isSolanaNetwork)(activeNetwork)) {
            return getSvmRate(params);
        }
        return getEvmRate(params);
    }, [
        activeNetwork,
        getEvmRate,
        getSvmRate
    ]);
    (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(()=>{
        const subscription = swapFormValuesStream.pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_19__.debounceTime)(500)).subscribe(({ amount, toTokenAddress, fromTokenAddress, toTokenDecimals, fromTokenDecimals, destinationInputField, fromTokenBalance, slippageTolerance })=>{
            if (amount && toTokenAddress && fromTokenAddress && fromTokenDecimals && toTokenDecimals) {
                const amountString = amount.toString();
                if (amountString === '0') {
                    setQuote(null);
                    setError({
                        message: t('Please enter an amount')
                    });
                    setDestAmount('');
                    setIsSwapLoading(false);
                    return;
                }
                const swapSide = destinationInputField === 'to' ? _paraswap_sdk__WEBPACK_IMPORTED_MODULE_2__.SwapSide.SELL : _paraswap_sdk__WEBPACK_IMPORTED_MODULE_2__.SwapSide.BUY;
                setIsSwapLoading(true);
                getRate({
                    srcToken: fromTokenAddress,
                    srcDecimals: fromTokenDecimals,
                    destToken: toTokenAddress,
                    destDecimals: toTokenDecimals,
                    srcAmount: amountString,
                    swapSide,
                    fromTokenBalance,
                    slippageTolerance
                }).then((result)=>{
                    if (result.error) {
                        setError(result.error);
                        setQuote(null);
                    } else {
                        setQuote(result.quote);
                        setError({
                            message: ''
                        });
                    }
                    if (typeof result.destAmount === 'string') {
                        setDestAmount(result.destAmount);
                    }
                }).catch((err)=>{
                    // If somehow the error was not caught by the adapter,
                    // log the error & show a generic error message.
                    _core_common__WEBPACK_IMPORTED_MODULE_7__.Monitoring.sentryCaptureException(err, _core_common__WEBPACK_IMPORTED_MODULE_7__.Monitoring.SentryExceptionTypes.SWAP);
                    setQuote(null);
                    setError({
                        message: t('An unknown error occurred')
                    });
                }).finally(()=>{
                    setIsSwapLoading(false);
                });
            } else {
                setDestAmount('');
                setQuote(null);
            }
        });
        return ()=>{
            subscription.unsubscribe();
        };
    }, [
        getRate,
        swapFormValuesStream,
        setIsSwapLoading,
        setError,
        t
    ]);
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(SwapContext.Provider, {
        value: {
            getRate,
            swap,
            error,
            setError,
            isSwapLoading,
            setIsSwapLoading,
            quote,
            setQuote,
            swapFormValuesStream,
            destAmount,
            setDestAmount
        },
        children: children
    }, void 0, false, {
        fileName: "/Users/meehow/ava/extension-avalanche/packages/ui/src/contexts/SwapProvider/SwapProvider.tsx",
        lineNumber: 321,
        columnNumber: 5
    }, this);
}
function useSwapContext() {
    return (0,react__WEBPACK_IMPORTED_MODULE_4__.useContext)(SwapContext);
}


}),
"../../packages/ui/src/contexts/SwapProvider/constants.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  JUPITER_PARTNER_ADDRESS: () => (JUPITER_PARTNER_ADDRESS),
  JUPITER_PARTNER_FEE_BPS: () => (JUPITER_PARTNER_FEE_BPS),
  NATIVE_TOKEN_ADDRESS: () => (NATIVE_TOKEN_ADDRESS),
  PARASWAP_PARTNER_ADDRESS: () => (PARASWAP_PARTNER_ADDRESS),
  PARASWAP_PARTNER_FEE_BPS: () => (PARASWAP_PARTNER_FEE_BPS),
  SOL_MINT: () => (SOL_MINT)
});
/**
 * The address where ParaSwap will send collected partner fees.
 */ const PARASWAP_PARTNER_ADDRESS = '0xcEA3b9415F269B5686403909d781959570f32CF0';
/**
 * The fee percentage that Core gathers on ParaSwap swaps.
 *
 * An integer representing the basis points (BPS) of the fee percentage.
 *
 * @example 85 -> 0.85%
 */ const PARASWAP_PARTNER_FEE_BPS = 85;
/**
 * The address ParaSwap uses for EVM native tokens.
 */ const NATIVE_TOKEN_ADDRESS = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee';
/**
 * The address Jupiter uses for Solana native tokens.
 */ const SOL_MINT = 'So11111111111111111111111111111111111111112';
/**
 * The address where Jupiter will send collected partner fees.
 */ const JUPITER_PARTNER_ADDRESS = 'CjKCcretczioDRkSSfu6qogF6aTkSeKMNVFB1UWXkR4U';
/**
 * The fee percentage that Core gathers on Jupiter swaps.
 * An integer representing the basis points (BPS) of the fee percentage.
 *
 * @example 85 -> 0.85%
 */ const JUPITER_PARTNER_FEE_BPS = 85;


}),
"../../packages/ui/src/contexts/SwapProvider/index.tsx": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  DISALLOWED_SWAP_ASSETS: () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_1__.DISALLOWED_SWAP_ASSETS),
  JUPITER_PARTNER_ADDRESS: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_2__.JUPITER_PARTNER_ADDRESS),
  JUPITER_PARTNER_FEE_BPS: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_2__.JUPITER_PARTNER_FEE_BPS),
  NATIVE_TOKEN_ADDRESS: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_2__.NATIVE_TOKEN_ADDRESS),
  PARASWAP_PARTNER_ADDRESS: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_2__.PARASWAP_PARTNER_ADDRESS),
  PARASWAP_PARTNER_FEE_BPS: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_2__.PARASWAP_PARTNER_FEE_BPS),
  PARASWAP_RETRYABLE_ERRORS: () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_1__.PARASWAP_RETRYABLE_ERRORS),
  SOL_MINT: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_2__.SOL_MINT),
  SwapContext: () => (/* reexport safe */ _SwapProvider__WEBPACK_IMPORTED_MODULE_0__.SwapContext),
  SwapContextProvider: () => (/* reexport safe */ _SwapProvider__WEBPACK_IMPORTED_MODULE_0__.SwapContextProvider),
  hasParaswapError: () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_1__.hasParaswapError),
  isAPIError: () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_1__.isAPIError),
  isJupiterQuote: () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_1__.isJupiterQuote),
  isJupiterSwapParams: () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_1__.isJupiterSwapParams),
  isParaswapQuote: () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_1__.isParaswapQuote),
  isParaswapSwapParams: () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_1__.isParaswapSwapParams),
  useSwapContext: () => (/* reexport safe */ _SwapProvider__WEBPACK_IMPORTED_MODULE_0__.useSwapContext)
});
/* ESM import */var _SwapProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/ui/src/contexts/SwapProvider/SwapProvider.tsx");
/* ESM import */var _models__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/ui/src/contexts/SwapProvider/models.ts");
/* ESM import */var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/ui/src/contexts/SwapProvider/constants.ts");





}),
"../../packages/ui/src/contexts/SwapProvider/models.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  DISALLOWED_SWAP_ASSETS: () => (DISALLOWED_SWAP_ASSETS),
  PARASWAP_RETRYABLE_ERRORS: () => (PARASWAP_RETRYABLE_ERRORS),
  hasParaswapError: () => (hasParaswapError),
  isAPIError: () => (isAPIError),
  isJupiterQuote: () => (isJupiterQuote),
  isJupiterSwapParams: () => (isJupiterSwapParams),
  isParaswapQuote: () => (isParaswapQuote),
  isParaswapSwapParams: () => (isParaswapSwapParams)
});
/**
 * Paraswap API errors after which it may be useful to retry the request.
 *
 * @see https://app.swaggerhub.com/apis/paraswapv5/api/1.0#/PriceErrorMessage
 */ const PARASWAP_RETRYABLE_ERRORS = [
    'Price Timeout',
    'An error has occurred, please try again later or contact our support'
];
const hasParaswapError = (response)=>{
    return typeof response.error === 'string';
};
const isJupiterSwapParams = (swapParams)=>{
    return isJupiterQuote(swapParams.quote);
};
const isParaswapSwapParams = (swapParams)=>{
    return isParaswapQuote(swapParams.quote);
};
const isJupiterQuote = (quote)=>{
    return 'inputMint' in quote;
};
const isParaswapQuote = (quote)=>{
    return 'srcAmount' in quote && 'destAmount' in quote && 'srcToken' in quote && 'destToken' in quote;
};
function isAPIError(rate) {
    return typeof rate.message === 'string';
}
const DISALLOWED_SWAP_ASSETS = [
    // ETH is disabled in Swaps per issue CP-8409
    'ETH'
];


}),
"../../packages/ui/src/contexts/SwapProvider/schemas.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  JUPITER_QUOTE_SCHEMA: () => (JUPITER_QUOTE_SCHEMA),
  JUPITER_TX_SCHEMA: () => (JUPITER_TX_SCHEMA)
});
/* ESM import */var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/zod/lib/index.mjs");

const JUPITER_QUOTE_SCHEMA = zod__WEBPACK_IMPORTED_MODULE_0__["default"].object({
    inputMint: zod__WEBPACK_IMPORTED_MODULE_0__["default"].string(),
    inAmount: zod__WEBPACK_IMPORTED_MODULE_0__["default"].string(),
    outputMint: zod__WEBPACK_IMPORTED_MODULE_0__["default"].string(),
    outAmount: zod__WEBPACK_IMPORTED_MODULE_0__["default"].string(),
    otherAmountThreshold: zod__WEBPACK_IMPORTED_MODULE_0__["default"].string(),
    swapMode: zod__WEBPACK_IMPORTED_MODULE_0__["default"].string(),
    slippageBps: zod__WEBPACK_IMPORTED_MODULE_0__["default"].number(),
    platformFee: zod__WEBPACK_IMPORTED_MODULE_0__["default"].object({
        amount: zod__WEBPACK_IMPORTED_MODULE_0__["default"].string(),
        feeBps: zod__WEBPACK_IMPORTED_MODULE_0__["default"].number()
    }).nullable(),
    priceImpactPct: zod__WEBPACK_IMPORTED_MODULE_0__["default"].string(),
    routePlan: zod__WEBPACK_IMPORTED_MODULE_0__["default"].array(zod__WEBPACK_IMPORTED_MODULE_0__["default"].any()),
    contextSlot: zod__WEBPACK_IMPORTED_MODULE_0__["default"].number(),
    timeTaken: zod__WEBPACK_IMPORTED_MODULE_0__["default"].number()
});
const JUPITER_TX_SCHEMA = zod__WEBPACK_IMPORTED_MODULE_0__["default"].object({
    swapTransaction: zod__WEBPACK_IMPORTED_MODULE_0__["default"].string().base64(),
    simulationError: zod__WEBPACK_IMPORTED_MODULE_0__["default"].any().nullable()
});


}),
"../../packages/ui/src/contexts/SwapProvider/swap-utils.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  buildApprovalTx: () => (buildApprovalTx),
  checkForErrorsInBuildTxResult: () => (checkForErrorsInBuildTxResult),
  checkForErrorsInGetRateResult: () => (checkForErrorsInGetRateResult),
  ensureAllowance: () => (ensureAllowance),
  getFeeAccountInfo: () => (getFeeAccountInfo),
  getJupiterFeeAccount: () => (getJupiterFeeAccount),
  getPartnerFeeParams: () => (getPartnerFeeParams),
  hasEnoughAllowance: () => (hasEnoughAllowance),
  paraswapErrorToSwapError: () => (paraswapErrorToSwapError),
  swapError: () => (swapError),
  validateJupiterParams: () => (validateJupiterParams),
  validateParaswapParams: () => (validateParaswapParams)
});
/* ESM import */var _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/@avalabs/vm-module-types/dist/index.js");
/* ESM import */var _openzeppelin_contracts_build_contracts_ERC20_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/@openzeppelin/contracts/build/contracts/ERC20.json");
/* ESM import */var _solana_program_token__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("../../node_modules/@solana-program/token/dist/src/index.mjs");
/* ESM import */var _solana_kit__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("../../node_modules/@solana/addresses/dist/index.browser.mjs");
/* ESM import */var eth_rpc_errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/eth-rpc-errors/dist/index.js");
/* ESM import */var ethers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("../../node_modules/ethers/lib.esm/contract/contract.js");
/* ESM import */var i18next__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../node_modules/i18next/dist/esm/i18next.js");
/* ESM import */var _models__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../packages/ui/src/contexts/SwapProvider/models.ts");
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../packages/common/src/index.ts");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var _constants__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../../packages/ui/src/contexts/SwapProvider/constants.ts");












function validateParaswapParams(params) {
    const { srcToken, destToken, srcDecimals, destDecimals, quote, slippage } = params;
    if (!quote) {
        throw swapError(_core_types__WEBPACK_IMPORTED_MODULE_6__.SwapErrorCode.MissingParams, new Error('Missing parameter: quote'));
    }
    if (!srcToken) {
        throw swapError(_core_types__WEBPACK_IMPORTED_MODULE_6__.SwapErrorCode.MissingParams, new Error('Missing parameter: srcToken'));
    }
    if (!destToken) {
        throw swapError(_core_types__WEBPACK_IMPORTED_MODULE_6__.SwapErrorCode.MissingParams, new Error('Missing parameter: destToken'));
    }
    if (!quote.srcAmount) {
        throw swapError(_core_types__WEBPACK_IMPORTED_MODULE_6__.SwapErrorCode.MissingParams, new Error('Missing parameter: srcAmount'));
    }
    if (!srcDecimals) {
        throw swapError(_core_types__WEBPACK_IMPORTED_MODULE_6__.SwapErrorCode.MissingParams, new Error('Missing parameter: srcDecimals'));
    }
    if (!destDecimals) {
        throw swapError(_core_types__WEBPACK_IMPORTED_MODULE_6__.SwapErrorCode.MissingParams, new Error('Missing parameter: destDecimals'));
    }
    if (!quote.destAmount) {
        throw swapError(_core_types__WEBPACK_IMPORTED_MODULE_6__.SwapErrorCode.MissingParams, new Error('Missing parameter: destAmount'));
    }
    if (!slippage) {
        throw swapError(_core_types__WEBPACK_IMPORTED_MODULE_6__.SwapErrorCode.MissingParams, new Error('Missing parameter: slippage'));
    }
    return {
        srcToken,
        srcAmount: quote.srcAmount,
        destToken,
        destAmount: quote.destAmount,
        srcDecimals,
        destDecimals,
        quote,
        slippage
    };
}
function validateJupiterParams(params) {
    const { srcToken, destToken, srcDecimals, destDecimals, quote, slippage } = params;
    if (!quote) {
        throw swapError(_core_types__WEBPACK_IMPORTED_MODULE_6__.SwapErrorCode.MissingParams, new Error('Missing parameter: quote'));
    }
    if (!(0,_models__WEBPACK_IMPORTED_MODULE_4__.isJupiterQuote)(quote)) {
        throw swapError(_core_types__WEBPACK_IMPORTED_MODULE_6__.SwapErrorCode.InvalidParams, new Error('Invalid parameter: quote'));
    }
    if (!srcToken) {
        throw swapError(_core_types__WEBPACK_IMPORTED_MODULE_6__.SwapErrorCode.MissingParams, new Error('Missing parameter: srcToken'));
    }
    if (!destToken) {
        throw swapError(_core_types__WEBPACK_IMPORTED_MODULE_6__.SwapErrorCode.MissingParams, new Error('Missing parameter: destToken'));
    }
    if (!srcDecimals) {
        throw swapError(_core_types__WEBPACK_IMPORTED_MODULE_6__.SwapErrorCode.MissingParams, new Error('Missing parameter: srcDecimals'));
    }
    if (!destDecimals) {
        throw swapError(_core_types__WEBPACK_IMPORTED_MODULE_6__.SwapErrorCode.MissingParams, new Error('Missing parameter: destDecimals'));
    }
    if (!slippage) {
        throw swapError(_core_types__WEBPACK_IMPORTED_MODULE_6__.SwapErrorCode.MissingParams, new Error('Missing parameter: slippage'));
    }
    const isSelling = quote.swapMode === 'ExactIn';
    return {
        srcToken,
        srcAmount: isSelling ? quote.outAmount : quote.inAmount,
        destToken,
        destAmount: isSelling ? quote.inAmount : quote.outAmount,
        srcDecimals,
        destDecimals,
        quote,
        slippage
    };
}
async function buildApprovalTx({ userAddress, spenderAddress, tokenAddress, amount, provider }) {
    const contract = new ethers__WEBPACK_IMPORTED_MODULE_8__.Contract(tokenAddress, _openzeppelin_contracts_build_contracts_ERC20_json__WEBPACK_IMPORTED_MODULE_1__.abi, provider);
    const { data } = await contract.approve.populateTransaction(spenderAddress, amount);
    const chainId = `0x${provider._network.chainId.toString(16)}`;
    const tx = {
        from: userAddress,
        to: tokenAddress,
        chainId,
        data
    };
    const [approvalGasLimit, approvalGasLimitError] = await (0,_core_common__WEBPACK_IMPORTED_MODULE_5__.resolve)(provider.estimateGas(tx));
    if (approvalGasLimitError) {
        throw swapError(_core_types__WEBPACK_IMPORTED_MODULE_6__.CommonError.UnableToEstimateGas, approvalGasLimitError);
    }
    return {
        ...tx,
        gas: `0x${approvalGasLimit.toString(16)}`
    };
}
async function hasEnoughAllowance({ tokenAddress, provider, userAddress, spenderAddress, requiredAmount }) {
    const contract = new ethers__WEBPACK_IMPORTED_MODULE_8__.Contract(tokenAddress, _openzeppelin_contracts_build_contracts_ERC20_json__WEBPACK_IMPORTED_MODULE_1__.abi, provider);
    if (!contract.allowance) {
        throw swapError(_core_types__WEBPACK_IMPORTED_MODULE_6__.SwapErrorCode.MissingContractMethod, new Error(`Contract Error: allowance method is not available`));
    }
    const [allowance, allowanceError] = await (0,_core_common__WEBPACK_IMPORTED_MODULE_5__.resolve)(contract.allowance(userAddress, spenderAddress));
    if (allowanceError) {
        throw swapError(_core_types__WEBPACK_IMPORTED_MODULE_6__.SwapErrorCode.CannotFetchAllowance, allowanceError);
    }
    return allowance >= requiredAmount;
}
async function ensureAllowance({ provider, tokenAddress, userAddress, spenderAddress, amount, request }) {
    const allowanceCoversAmount = await hasEnoughAllowance({
        tokenAddress,
        provider,
        userAddress,
        spenderAddress,
        requiredAmount: amount
    });
    if (allowanceCoversAmount) {
        return;
    }
    const tx = await buildApprovalTx({
        amount,
        provider,
        spenderAddress,
        tokenAddress,
        userAddress
    });
    const [, signError] = await (0,_core_common__WEBPACK_IMPORTED_MODULE_5__.resolve)(request({
        method: _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.RpcMethod.ETH_SEND_TRANSACTION,
        params: [
            tx
        ]
    }));
    if ((0,_core_common__WEBPACK_IMPORTED_MODULE_5__.isUserRejectionError)(signError)) {
        throw signError;
    } else if (signError) {
        throw swapError(_core_types__WEBPACK_IMPORTED_MODULE_6__.CommonError.UnableToSign, signError);
    }
}
const normalizeError = (err)=>{
    if ((0,_core_common__WEBPACK_IMPORTED_MODULE_5__.isWrappedError)(err)) {
        return err;
    }
    if (err instanceof Error) {
        return err;
    }
    if (typeof err === 'string') {
        return new Error(err);
    }
    return new Error(err?.message ?? 'Unknown error');
};
const swapError = (errorCode, originalError)=>{
    if ((0,_core_common__WEBPACK_IMPORTED_MODULE_5__.isWrappedError)(originalError)) {
        return originalError;
    }
    return eth_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.ethErrors.rpc.internal({
        data: {
            reason: errorCode,
            originalError: originalError ? normalizeError(originalError) : new Error('Unknown swap error')
        }
    });
};
const paraswapErrorToSwapError = (error)=>{
    if (!error.message) {
        return {
            message: (0,i18next__WEBPACK_IMPORTED_MODULE_3__.t)('Unknown error occurred, '),
            hasTryAgain: true
        };
    }
    switch(error.message){
        case 'ESTIMATED_LOSS_GREATER_THAN_MAX_IMPACT':
            return {
                message: (0,i18next__WEBPACK_IMPORTED_MODULE_3__.t)('Slippage tolerance exceeded, increase the slippage and try again.'),
                hasTryAgain: false
            };
        case 'No routes found with enough liquidity':
            return {
                message: (0,i18next__WEBPACK_IMPORTED_MODULE_3__.t)('No routes found with enough liquidity.'),
                hasTryAgain: false
            };
        case 'Internal Error while computing the price':
            return {
                message: (0,i18next__WEBPACK_IMPORTED_MODULE_3__.t)('An error occurred while computing the price.'),
                hasTryAgain: false
            };
    }
    if (/is too small to proceed/.test(error.message)) {
        return {
            message: (0,i18next__WEBPACK_IMPORTED_MODULE_3__.t)('Amount is too small to proceed.'),
            hasTryAgain: false
        };
    }
    return {
        message: (0,i18next__WEBPACK_IMPORTED_MODULE_3__.t)('Unknown error occurred, '),
        hasTryAgain: true
    };
};
function checkForErrorsInGetRateResult(response) {
    const isFetchError = response instanceof TypeError;
    const isParaswapError = !isFetchError && (0,_models__WEBPACK_IMPORTED_MODULE_4__.hasParaswapError)(response);
    if (isFetchError || isParaswapError) {
        // If there is an error, we may want to retry the request if a network issue
        // or some of the documented Paraswap API errors occurred.
        const isNetworkIssue = isFetchError && response.message === 'Failed to fetch';
        const shouldBeRetried = isNetworkIssue || isParaswapError && _models__WEBPACK_IMPORTED_MODULE_4__.PARASWAP_RETRYABLE_ERRORS.includes(response.error);
        if (shouldBeRetried) {
            return true;
        // If an error occurred, but there is no point in retrying a request,
        // we need to propagate the error so we're able to show an appropriate
        // message in the UI.
        } else if (isFetchError) {
            throw swapError(_core_types__WEBPACK_IMPORTED_MODULE_6__.CommonError.NetworkError, response);
        } else {
            throw swapError(_core_types__WEBPACK_IMPORTED_MODULE_6__.CommonError.Unknown, new Error(response.error));
        }
    }
    return false;
}
function checkForErrorsInBuildTxResult(result) {
    return (0,_core_common__WEBPACK_IMPORTED_MODULE_5__.isWrappedError)(result) && typeof result.data.originalError === 'object' && result.data.originalError && 'message' in result.data.originalError && result.data.originalError.message === 'Server too busy' || // paraswap returns responses like this: {error: 'Not enough 0x4f60a160d8c2dddaafe16fcc57566db84d674…}
    // when they are too slow to detect the approval
    result.error || result instanceof Error;
}
/**
 * Responsible for adding the needed parameters to a swap transaction
 * in ParaSwap so that Core can gather fees from the swap.
 *
 * Should only be enabled if the feature flag is enabled. Otherwise no fees should be collected.
 *
 * @see https://ava-labs.atlassian.net/browse/CP-10050
 *
 * @param {boolean} featureFlagEnabled - Whether the feature flag is enabled or not.
 *
 * @returns The necessary parameters for Core to gather fees from the swap.
 */ const getPartnerFeeParams = (featureFlagEnabled)=>{
    if (!featureFlagEnabled) {
        return {
            isDirectFeeTransfer: false,
            partnerAddress: undefined,
            partnerFeeBps: undefined
        };
    }
    return {
        partnerAddress: _constants__WEBPACK_IMPORTED_MODULE_7__.PARASWAP_PARTNER_ADDRESS,
        partnerFeeBps: _constants__WEBPACK_IMPORTED_MODULE_7__.PARASWAP_PARTNER_FEE_BPS,
        isDirectFeeTransfer: true
    };
};
const getJupiterFeeAccount = async (isFlagEnabled, quote, provider, onFeeAccountNotInitialized)=>{
    if (!isFlagEnabled) {
        return;
    }
    // The `mints` array will hold token mints in which it would be possible for us to collect the fees,
    // with the preferred tokens being at the beginning of the array.
    let mints;
    /**
   * The fees are always collected either the input or output token
   * (e.g. we can't choose SOL if user is swapping USDC -> JUP).
   */ if (quote.swapMode === 'ExactIn') {
        /*
     * With `swapMode` being "ExactOut", we can choose which of the tokens to use for fees.
     * SOL is always preferred, so we check if it's a part of the swap and if it is,
     * we try to collect fees on that token.
     */ if (quote.outputMint === _constants__WEBPACK_IMPORTED_MODULE_7__.SOL_MINT) {
            mints = [
                _constants__WEBPACK_IMPORTED_MODULE_7__.SOL_MINT,
                quote.inputMint
            ];
        } else if (quote.inputMint === _constants__WEBPACK_IMPORTED_MODULE_7__.SOL_MINT) {
            mints = [
                _constants__WEBPACK_IMPORTED_MODULE_7__.SOL_MINT,
                quote.outputMint
            ];
        } else {
            mints = [
                quote.inputMint,
                quote.outputMint
            ];
        }
    } else if (quote.swapMode === 'ExactOut') {
        // With `swapMode` being "ExactOut", we can only collect fees on the input token.
        mints = [
            quote.inputMint
        ];
    }
    if (!mints) {
        return;
    }
    const [primaryFeeToken, secondaryFeeToken] = mints;
    const { feeAccount, isInitialized } = await getFeeAccountInfo(provider, primaryFeeToken);
    if (isInitialized) {
        return feeAccount;
    } else {
        // Capture the primary fee account not being initialized.
        onFeeAccountNotInitialized(primaryFeeToken);
    }
    // If we can't collect fees on the other token either, return early.
    if (!secondaryFeeToken) {
        return;
    }
    // If we can use the other token to collect fees, let's try that:
    const { feeAccount: secondaryFeeAccount, isInitialized: isSecondaryFeeAccountInitialized } = await getFeeAccountInfo(provider, secondaryFeeToken);
    if (isSecondaryFeeAccountInitialized) {
        return secondaryFeeAccount;
    }
    // Capture the secondary fee account not being initialized either.
    onFeeAccountNotInitialized(secondaryFeeToken);
};
const getFeeAccountInfo = async (provider, feeAccountAddress)=>{
    const [feeAccount] = await (0,_solana_program_token__WEBPACK_IMPORTED_MODULE_9__.findAssociatedTokenPda)({
        mint: (0,_solana_kit__WEBPACK_IMPORTED_MODULE_10__.address)(feeAccountAddress),
        owner: (0,_solana_kit__WEBPACK_IMPORTED_MODULE_10__.address)(_constants__WEBPACK_IMPORTED_MODULE_7__.JUPITER_PARTNER_ADDRESS),
        tokenProgram: _solana_program_token__WEBPACK_IMPORTED_MODULE_9__.TOKEN_PROGRAM_ADDRESS
    });
    const feeAccountInfo = await provider.getAccountInfo(feeAccount, {
        encoding: 'base64'
    }).send();
    return {
        feeAccount,
        isInitialized: Boolean(feeAccountInfo.value)
    };
};


}),
"../../packages/ui/src/contexts/SwapProvider/useEvmSwap.tsx": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useEvmSwap: () => (useEvmSwap)
});
/* ESM import */var _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__("../../node_modules/@avalabs/core-chains-sdk/esm/models.js");
/* ESM import */var _avalabs_core_utils_sdk__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__("../../node_modules/@avalabs/core-utils-sdk/esm/promiseResolver.js");
/* ESM import */var _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/@avalabs/vm-module-types/dist/index.js");
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/common/src/index.ts");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var _paraswap_sdk__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../node_modules/@paraswap/sdk/dist/sdk.esm.js");
/* ESM import */var big_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/big.js/big.mjs");
/* ESM import */var bn_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../node_modules/bn.js/lib/bn.js");
/* ESM import */var bn_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(bn_js__WEBPACK_IMPORTED_MODULE_5__);
/* ESM import */var joi__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../../node_modules/joi/dist/joi-browser.min.js");
/* ESM import */var joi__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(joi__WEBPACK_IMPORTED_MODULE_6__);
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_7__);
/* ESM import */var react_i18next__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__("../../node_modules/react-i18next/dist/es/useTranslation.js");
/* ESM import */var _ConnectionProvider__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("../../packages/ui/src/contexts/ConnectionProvider.tsx");
/* ESM import */var _FeatureFlagsProvider__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("../../packages/ui/src/contexts/FeatureFlagsProvider/index.tsx");
/* ESM import */var _constants__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("../../packages/ui/src/contexts/SwapProvider/constants.ts");
/* ESM import */var _models__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__("../../packages/ui/src/contexts/SwapProvider/models.ts");
/* ESM import */var _swap_utils__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__("../../packages/ui/src/contexts/SwapProvider/swap-utils.ts");
















const useEvmSwap = ({ account, network, walletDetails }, { onTransactionReceipt, showPendingToast })=>{
    const { request } = (0,_ConnectionProvider__WEBPACK_IMPORTED_MODULE_8__.useConnectionContext)();
    const { isFlagEnabled } = (0,_FeatureFlagsProvider__WEBPACK_IMPORTED_MODULE_9__.useFeatureFlagContext)();
    const { t } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_13__.useTranslation)();
    const [rpcProvider, setRpcProvider] = (0,react__WEBPACK_IMPORTED_MODULE_7__.useState)();
    (0,react__WEBPACK_IMPORTED_MODULE_7__.useEffect)(()=>{
        let isMounted = true;
        if (network) {
            (0,_core_common__WEBPACK_IMPORTED_MODULE_1__.getProviderForNetwork)(network).then((prov)=>{
                if (isMounted) {
                    setRpcProvider(prov);
                }
            }).catch(()=>{
                if (isMounted) {
                    setRpcProvider(undefined);
                }
            });
        }
        return ()=>{
            isMounted = false;
        };
    }, [
        network
    ]);
    const paraswap = (0,react__WEBPACK_IMPORTED_MODULE_7__.useMemo)(()=>{
        const chainId = network?.chainId;
        return isParaswapSupportedChain(chainId) ? (0,_paraswap_sdk__WEBPACK_IMPORTED_MODULE_3__.constructPartialSDK)({
            chainId: chainId,
            fetcher: (0,_paraswap_sdk__WEBPACK_IMPORTED_MODULE_3__.constructFetchFetcher)(fetch)
        }, _paraswap_sdk__WEBPACK_IMPORTED_MODULE_3__.constructGetRate, _paraswap_sdk__WEBPACK_IMPORTED_MODULE_3__.constructGetBalances, _paraswap_sdk__WEBPACK_IMPORTED_MODULE_3__.constructBuildTx, _paraswap_sdk__WEBPACK_IMPORTED_MODULE_3__.constructGetSpender) : null;
    }, [
        network?.chainId
    ]);
    const getRate = (0,react__WEBPACK_IMPORTED_MODULE_7__.useCallback)(async ({ srcToken, destToken, srcDecimals, destDecimals, srcAmount, swapSide, fromTokenBalance })=>{
        if (!network || network.isTestnet) {
            throw (0,_swap_utils__WEBPACK_IMPORTED_MODULE_12__.swapError)(_core_types__WEBPACK_IMPORTED_MODULE_2__.CommonError.UnknownNetwork);
        }
        if (!account || !account.addressC) {
            throw (0,_swap_utils__WEBPACK_IMPORTED_MODULE_12__.swapError)(_core_types__WEBPACK_IMPORTED_MODULE_2__.CommonError.NoActiveAccount);
        }
        if (!isFlagEnabled(_core_types__WEBPACK_IMPORTED_MODULE_2__.FeatureGates.SWAP)) {
            throw (0,_swap_utils__WEBPACK_IMPORTED_MODULE_12__.swapError)(_core_types__WEBPACK_IMPORTED_MODULE_2__.SwapErrorCode.FeatureDisabled);
        }
        (0,_core_common__WEBPACK_IMPORTED_MODULE_1__.assertPresent)(paraswap, _core_types__WEBPACK_IMPORTED_MODULE_2__.SwapErrorCode.ClientNotInitialized);
        const isFromTokenNative = network.networkToken.symbol === srcToken;
        const isDestTokenNative = network.networkToken.symbol === destToken;
        const optimalRates = async ()=>{
            return await paraswap.getRate({
                srcToken: isFromTokenNative ? _constants__WEBPACK_IMPORTED_MODULE_10__.NATIVE_TOKEN_ADDRESS : srcToken,
                destToken: isDestTokenNative ? _constants__WEBPACK_IMPORTED_MODULE_10__.NATIVE_TOKEN_ADDRESS : destToken,
                amount: srcAmount,
                side: swapSide || _paraswap_sdk__WEBPACK_IMPORTED_MODULE_3__.SwapSide.SELL,
                srcDecimals: isFromTokenNative ? 18 : srcDecimals,
                destDecimals: isDestTokenNative ? 18 : destDecimals,
                userAddress: account.addressC
            });
        };
        try {
            const result = await (0,_core_common__WEBPACK_IMPORTED_MODULE_1__.incrementalPromiseResolve)(()=>optimalRates(), _swap_utils__WEBPACK_IMPORTED_MODULE_12__.checkForErrorsInGetRateResult);
            /**
         * This can be an error, the bacground tries 10x but if the
         * server is still "busy" it sends the error
         */ if ((0,_models__WEBPACK_IMPORTED_MODULE_11__.isAPIError)(result)) {
                return {
                    error: {
                        message: t('paraswap error message while get rate: {{message}}', {
                            message: result.message
                        })
                    },
                    quote: null
                };
            }
            const resultAmount = swapSide === _paraswap_sdk__WEBPACK_IMPORTED_MODULE_3__.SwapSide.SELL ? result.destAmount : result.srcAmount;
            // Make sure user has enough balance to cover the amount returned by Paraswap
            if (fromTokenBalance) {
                const hasEnough = swapSide === _paraswap_sdk__WEBPACK_IMPORTED_MODULE_3__.SwapSide.BUY ? fromTokenBalance >= BigInt(resultAmount ?? '') : fromTokenBalance >= BigInt(srcAmount ?? '');
                if (!hasEnough) {
                    return {
                        quote: null,
                        destAmount: resultAmount,
                        error: {
                            message: t('Insufficient balance.')
                        }
                    };
                }
            }
            return {
                quote: result,
                destAmount: resultAmount
            };
        } catch (error) {
            return {
                quote: null,
                error: (0,_swap_utils__WEBPACK_IMPORTED_MODULE_12__.paraswapErrorToSwapError)(error)
            };
        }
    }, [
        account,
        network,
        isFlagEnabled,
        paraswap,
        t
    ]);
    const buildTx = (0,react__WEBPACK_IMPORTED_MODULE_7__.useCallback)(async ({ srcToken, destToken, srcAmount, destAmount, srcDecimals, destDecimals, priceRoute, userAddress, ignoreChecks, isNativeTokenSwap })=>{
        (0,_core_common__WEBPACK_IMPORTED_MODULE_1__.assertPresent)(network, _core_types__WEBPACK_IMPORTED_MODULE_2__.CommonError.NoActiveNetwork);
        (0,_core_common__WEBPACK_IMPORTED_MODULE_1__.assertPresent)(paraswap, _core_types__WEBPACK_IMPORTED_MODULE_2__.SwapErrorCode.ClientNotInitialized);
        if (!isFlagEnabled(_core_types__WEBPACK_IMPORTED_MODULE_2__.FeatureGates.SWAP)) {
            throw (0,_swap_utils__WEBPACK_IMPORTED_MODULE_12__.swapError)(_core_types__WEBPACK_IMPORTED_MODULE_2__.SwapErrorCode.FeatureDisabled);
        }
        const responseSchema = joi__WEBPACK_IMPORTED_MODULE_6___default().object({
            to: joi__WEBPACK_IMPORTED_MODULE_6___default().string().required(),
            from: joi__WEBPACK_IMPORTED_MODULE_6___default().string().required(),
            value: joi__WEBPACK_IMPORTED_MODULE_6___default().string().required(),
            data: joi__WEBPACK_IMPORTED_MODULE_6___default().string().required(),
            chainId: joi__WEBPACK_IMPORTED_MODULE_6___default().number().required(),
            gas: joi__WEBPACK_IMPORTED_MODULE_6___default().string().optional(),
            gasPrice: joi__WEBPACK_IMPORTED_MODULE_6___default().string().optional()
        }).unknown();
        const transactionParamsOrError = await paraswap.buildTx({
            srcToken,
            srcDecimals,
            srcAmount,
            destToken,
            destDecimals,
            destAmount,
            priceRoute,
            userAddress,
            partner: 'Avalanche',
            ...(0,_swap_utils__WEBPACK_IMPORTED_MODULE_12__.getPartnerFeeParams)(isFlagEnabled(_core_types__WEBPACK_IMPORTED_MODULE_2__.FeatureGates.SWAP_FEES))
        }, {
            ignoreChecks
        }).catch((0,_core_common__WEBPACK_IMPORTED_MODULE_1__.wrapError)((0,_swap_utils__WEBPACK_IMPORTED_MODULE_12__.swapError)(_core_types__WEBPACK_IMPORTED_MODULE_2__.CommonError.NetworkError)));
        const validationResult = responseSchema.validate(transactionParamsOrError);
        if (validationResult.error) {
            if ((0,_models__WEBPACK_IMPORTED_MODULE_11__.isAPIError)(transactionParamsOrError)) {
                throw (0,_swap_utils__WEBPACK_IMPORTED_MODULE_12__.swapError)(_core_types__WEBPACK_IMPORTED_MODULE_2__.SwapErrorCode.ApiError, new Error(transactionParamsOrError.message));
            }
            throw (0,_swap_utils__WEBPACK_IMPORTED_MODULE_12__.swapError)(_core_types__WEBPACK_IMPORTED_MODULE_2__.SwapErrorCode.UnexpectedApiResponse, validationResult.error);
        }
        const txPayload = validationResult.value;
        return {
            chainId: `0x${network.chainId.toString(16)}`,
            gas: txPayload.gas ? '0x' + Number(txPayload.gas).toString(16) : undefined,
            data: txPayload.data,
            to: txPayload.to,
            from: userAddress,
            value: isNativeTokenSwap ? `0x${new bn_js__WEBPACK_IMPORTED_MODULE_5__.BN(srcAmount).toString('hex')}` : undefined
        };
    }, [
        isFlagEnabled,
        paraswap,
        network
    ]);
    const getSwapTxProps = (0,react__WEBPACK_IMPORTED_MODULE_7__.useCallback)(async ({ srcToken, destToken, srcAmount, slippage, nativeToken, priceRoute })=>{
        (0,_core_common__WEBPACK_IMPORTED_MODULE_1__.assertPresent)(paraswap, _core_types__WEBPACK_IMPORTED_MODULE_2__.SwapErrorCode.ClientNotInitialized);
        (0,_core_common__WEBPACK_IMPORTED_MODULE_1__.assertPresent)(network, _core_types__WEBPACK_IMPORTED_MODULE_2__.CommonError.NoActiveNetwork);
        const minAmount = new big_js__WEBPACK_IMPORTED_MODULE_4__["default"](priceRoute.destAmount).times(1 - slippage / 100).toFixed(0);
        const maxAmount = new big_js__WEBPACK_IMPORTED_MODULE_4__["default"](srcAmount).times(1 + slippage / 100).toFixed(0);
        const sourceAmount = priceRoute.side === _paraswap_sdk__WEBPACK_IMPORTED_MODULE_3__.SwapSide.SELL ? srcAmount : maxAmount;
        const destinationAmount = priceRoute.side === _paraswap_sdk__WEBPACK_IMPORTED_MODULE_3__.SwapSide.SELL ? minAmount : priceRoute.destAmount;
        return {
            srcTokenAddress: srcToken === nativeToken ? _constants__WEBPACK_IMPORTED_MODULE_10__.NATIVE_TOKEN_ADDRESS : srcToken,
            destTokenAddress: destToken === nativeToken ? _constants__WEBPACK_IMPORTED_MODULE_10__.NATIVE_TOKEN_ADDRESS : destToken,
            spender: await paraswap.getSpender(),
            sourceAmount,
            destinationAmount
        };
    }, [
        paraswap,
        network
    ]);
    /**
   * Used to perform a batch swap operation (approval + transfer) in a single click for the user.
   * Some notes:
   *
   *  - Requires a feature flag to be enabled.
   *  - When transferring AVAX, it performs the usual eth_sendTransaction request.
   *  - If the allowance covers the transfer amount, it performs the usual eth_sendTransaction request
   */ const oneClickSwap = (0,react__WEBPACK_IMPORTED_MODULE_7__.useCallback)(async (params)=>{
        if (!isFlagEnabled(_core_types__WEBPACK_IMPORTED_MODULE_2__.FeatureGates.ONE_CLICK_SWAP)) {
            throw (0,_swap_utils__WEBPACK_IMPORTED_MODULE_12__.swapError)(_core_types__WEBPACK_IMPORTED_MODULE_2__.SwapErrorCode.FeatureDisabled);
        }
        (0,_core_common__WEBPACK_IMPORTED_MODULE_1__.assertPresent)(network, _core_types__WEBPACK_IMPORTED_MODULE_2__.CommonError.NoActiveNetwork);
        (0,_core_common__WEBPACK_IMPORTED_MODULE_1__.assertPresent)(account, _core_types__WEBPACK_IMPORTED_MODULE_2__.CommonError.NoActiveAccount);
        (0,_core_common__WEBPACK_IMPORTED_MODULE_1__.assertPresent)(rpcProvider, _core_types__WEBPACK_IMPORTED_MODULE_2__.CommonError.Unknown);
        (0,_core_common__WEBPACK_IMPORTED_MODULE_1__.assert)(!network.isTestnet, _core_types__WEBPACK_IMPORTED_MODULE_2__.CommonError.UnknownNetwork);
        const { srcToken, destToken, srcAmount, srcDecimals, destDecimals, destAmount, quote, slippage } = (0,_swap_utils__WEBPACK_IMPORTED_MODULE_12__.validateParaswapParams)(params);
        const userAddress = account.addressC;
        const { srcTokenAddress, destTokenAddress, destinationAmount, sourceAmount, spender } = await getSwapTxProps({
            srcToken,
            destToken,
            srcAmount,
            slippage,
            nativeToken: network.networkToken.symbol,
            priceRoute: quote
        });
        const batch = [];
        const isNativeTokenSwap = srcToken === network.networkToken.symbol;
        // no need to approve AVAX
        if (!isNativeTokenSwap) {
            const allowanceCoversAmount = await (0,_swap_utils__WEBPACK_IMPORTED_MODULE_12__.hasEnoughAllowance)({
                tokenAddress: srcTokenAddress,
                provider: rpcProvider,
                userAddress,
                spenderAddress: spender,
                requiredAmount: BigInt(sourceAmount)
            });
            if (!allowanceCoversAmount) {
                const approvalTx = await (0,_swap_utils__WEBPACK_IMPORTED_MODULE_12__.buildApprovalTx)({
                    userAddress,
                    spenderAddress: spender,
                    tokenAddress: srcTokenAddress,
                    amount: BigInt(sourceAmount),
                    provider: rpcProvider
                });
                batch.push(approvalTx);
            }
        }
        const ignoreChecks = batch.length > 0; // Only ignore checks if we have an approval transaction in the batch
        const swapTx = await buildTx({
            network: network.chainId.toString(),
            srcToken: srcTokenAddress,
            destToken: destTokenAddress,
            srcAmount: sourceAmount,
            destAmount: destinationAmount,
            priceRoute: quote,
            userAddress,
            srcDecimals: network.networkToken.symbol === srcToken ? 18 : srcDecimals,
            destDecimals: network.networkToken.symbol === destToken ? 18 : destDecimals,
            ignoreChecks,
            isNativeTokenSwap
        });
        batch.push(swapTx);
        let swapTxHash;
        if (batch.length > 1) {
            const [txHashes, batchSignError] = await (0,_avalabs_core_utils_sdk__WEBPACK_IMPORTED_MODULE_14__.resolve)(request({
                method: _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.RpcMethod.ETH_SEND_TRANSACTION_BATCH,
                params: batch
            }, {
                customApprovalScreenTitle: t('Confirm Swap'),
                customApprovalButtonText: t('Swap')
            }));
            if ((0,_core_common__WEBPACK_IMPORTED_MODULE_1__.isUserRejectionError)(batchSignError)) {
                throw batchSignError;
            } else if (batchSignError || !txHashes) {
                throw (0,_swap_utils__WEBPACK_IMPORTED_MODULE_12__.swapError)(_core_types__WEBPACK_IMPORTED_MODULE_2__.CommonError.UnableToSign, batchSignError);
            }
            swapTxHash = txHashes[txHashes.length - 1];
        } else {
            const [txHash, signError] = await (0,_avalabs_core_utils_sdk__WEBPACK_IMPORTED_MODULE_14__.resolve)(request({
                method: _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.RpcMethod.ETH_SEND_TRANSACTION,
                params: [
                    batch[0]
                ]
            }));
            if ((0,_core_common__WEBPACK_IMPORTED_MODULE_1__.isUserRejectionError)(signError)) {
                throw signError;
            } else if (signError || !txHash) {
                throw (0,_swap_utils__WEBPACK_IMPORTED_MODULE_12__.swapError)(_core_types__WEBPACK_IMPORTED_MODULE_2__.CommonError.UnableToSign, signError);
            }
            swapTxHash = txHash;
        }
        const pendingToastId = showPendingToast();
        rpcProvider.waitForTransaction(swapTxHash).then((receipt)=>{
            const isSuccessful = Boolean(receipt && receipt.status === 1);
            onTransactionReceipt({
                isSuccessful,
                pendingToastId,
                txHash: swapTxHash,
                chainId: network.chainId,
                userAddress,
                srcToken,
                destToken,
                srcAmount,
                destAmount,
                srcDecimals,
                destDecimals
            });
        });
    }, [
        isFlagEnabled,
        network,
        account,
        rpcProvider,
        getSwapTxProps,
        buildTx,
        request,
        t,
        onTransactionReceipt,
        showPendingToast
    ]);
    const regularSwap = (0,react__WEBPACK_IMPORTED_MODULE_7__.useCallback)(async (params)=>{
        (0,_core_common__WEBPACK_IMPORTED_MODULE_1__.assertPresent)(network, _core_types__WEBPACK_IMPORTED_MODULE_2__.CommonError.NoActiveNetwork);
        (0,_core_common__WEBPACK_IMPORTED_MODULE_1__.assertPresent)(account, _core_types__WEBPACK_IMPORTED_MODULE_2__.CommonError.NoActiveAccount);
        (0,_core_common__WEBPACK_IMPORTED_MODULE_1__.assertPresent)(rpcProvider, _core_types__WEBPACK_IMPORTED_MODULE_2__.CommonError.Unknown);
        (0,_core_common__WEBPACK_IMPORTED_MODULE_1__.assert)(!network.isTestnet, _core_types__WEBPACK_IMPORTED_MODULE_2__.CommonError.UnknownNetwork);
        const { srcToken, destToken, srcAmount, destAmount, srcDecimals, destDecimals, quote, slippage } = (0,_swap_utils__WEBPACK_IMPORTED_MODULE_12__.validateParaswapParams)(params);
        const userAddress = account.addressC;
        const { srcTokenAddress, destTokenAddress, destinationAmount, sourceAmount, spender } = await getSwapTxProps({
            srcToken,
            destToken,
            srcAmount,
            slippage,
            nativeToken: network.networkToken.symbol,
            priceRoute: quote
        });
        // no need to approve AVAX
        const isNativeTokenSwap = srcToken === network.networkToken.symbol;
        if (!isNativeTokenSwap) {
            await (0,_swap_utils__WEBPACK_IMPORTED_MODULE_12__.ensureAllowance)({
                amount: BigInt(sourceAmount),
                provider: rpcProvider,
                request,
                spenderAddress: spender,
                tokenAddress: srcTokenAddress,
                userAddress
            });
        }
        const [swapTx, txBuildDataError] = await (0,_avalabs_core_utils_sdk__WEBPACK_IMPORTED_MODULE_14__.resolve)((0,_core_common__WEBPACK_IMPORTED_MODULE_1__.incrementalPromiseResolve)(()=>buildTx({
                network: network.chainId.toString(),
                srcToken: srcTokenAddress,
                destToken: destTokenAddress,
                srcAmount: sourceAmount,
                destAmount: destinationAmount,
                priceRoute: quote,
                userAddress,
                isNativeTokenSwap,
                srcDecimals: network.networkToken.symbol === srcToken ? 18 : srcDecimals,
                destDecimals: network.networkToken.symbol === destToken ? 18 : destDecimals
            }), _swap_utils__WEBPACK_IMPORTED_MODULE_12__.checkForErrorsInBuildTxResult, 0, 10));
        if (txBuildDataError || !swapTx) {
            throw (0,_swap_utils__WEBPACK_IMPORTED_MODULE_12__.swapError)(_core_types__WEBPACK_IMPORTED_MODULE_2__.SwapErrorCode.CannotBuildTx, txBuildDataError);
        }
        const [swapTxHash, signError] = await (0,_avalabs_core_utils_sdk__WEBPACK_IMPORTED_MODULE_14__.resolve)(request({
            method: _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.RpcMethod.ETH_SEND_TRANSACTION,
            params: [
                swapTx
            ]
        }, {
            customApprovalScreenTitle: t('Confirm Swap'),
            customApprovalButtonText: t('Swap')
        }));
        if ((0,_core_common__WEBPACK_IMPORTED_MODULE_1__.isUserRejectionError)(signError)) {
            throw signError;
        } else if (signError || !swapTxHash) {
            throw (0,_swap_utils__WEBPACK_IMPORTED_MODULE_12__.swapError)(_core_types__WEBPACK_IMPORTED_MODULE_2__.CommonError.UnableToSign, signError);
        }
        const pendingToastId = showPendingToast();
        rpcProvider.waitForTransaction(swapTxHash).then((receipt)=>{
            const isSuccessful = Boolean(receipt && receipt.status === 1);
            onTransactionReceipt({
                isSuccessful,
                pendingToastId,
                txHash: swapTxHash,
                chainId: network.chainId,
                userAddress,
                srcToken,
                destToken,
                srcAmount,
                destAmount,
                srcDecimals,
                destDecimals
            });
        });
    }, [
        network,
        account,
        rpcProvider,
        getSwapTxProps,
        request,
        buildTx,
        t,
        onTransactionReceipt,
        showPendingToast
    ]);
    const swap = (0,react__WEBPACK_IMPORTED_MODULE_7__.useCallback)(async (params)=>{
        if (!isFlagEnabled(_core_types__WEBPACK_IMPORTED_MODULE_2__.FeatureGates.SWAP)) {
            throw (0,_swap_utils__WEBPACK_IMPORTED_MODULE_12__.swapError)(_core_types__WEBPACK_IMPORTED_MODULE_2__.SwapErrorCode.FeatureDisabled);
        }
        const isOneClickSwapEnabled = isFlagEnabled(_core_types__WEBPACK_IMPORTED_MODULE_2__.FeatureGates.ONE_CLICK_SWAP);
        const isOneClickSwapSupported = walletDetails?.type === _core_types__WEBPACK_IMPORTED_MODULE_2__.SecretType.Mnemonic || walletDetails?.type === _core_types__WEBPACK_IMPORTED_MODULE_2__.SecretType.Seedless || walletDetails?.type === _core_types__WEBPACK_IMPORTED_MODULE_2__.SecretType.PrivateKey;
        if (isOneClickSwapEnabled && isOneClickSwapSupported) {
            return oneClickSwap(params);
        }
        return regularSwap(params);
    }, [
        regularSwap,
        oneClickSwap,
        isFlagEnabled,
        walletDetails?.type
    ]);
    return {
        getRate,
        swap
    };
};
const isParaswapSupportedChain = (chainId)=>chainId === _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_15__.ChainId.AVALANCHE_MAINNET_ID || chainId === _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_15__.ChainId.ETHEREUM_HOMESTEAD;


}),
"../../packages/ui/src/contexts/SwapProvider/useSolanaSwap.tsx": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useSolanaSwap: () => (useSolanaSwap)
});
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var _paraswap_sdk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/@paraswap/sdk/dist/sdk.esm.js");
/* ESM import */var _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/@avalabs/vm-module-types/dist/index.js");
/* ESM import */var _solana_kit__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__("../../node_modules/@solana/keys/dist/index.browser.mjs");
/* ESM import */var _avalabs_core_utils_sdk__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__("../../node_modules/@avalabs/core-utils-sdk/esm/wait.js");
/* ESM import */var _avalabs_core_utils_sdk__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__("../../node_modules/@avalabs/core-utils-sdk/esm/promiseResolver.js");
/* ESM import */var react_i18next__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__("../../node_modules/react-i18next/dist/es/useTranslation.js");
/* ESM import */var _avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__("../../node_modules/@avalabs/core-wallets-sdk/esm/SolanaVM/utils/solanaProvider.js");
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../packages/common/src/index.ts");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var _AnalyticsProvider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../packages/ui/src/contexts/AnalyticsProvider/index.tsx");
/* ESM import */var _ConnectionProvider__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../../packages/ui/src/contexts/ConnectionProvider.tsx");
/* ESM import */var _FeatureFlagsProvider__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../../packages/ui/src/contexts/FeatureFlagsProvider/index.tsx");
/* ESM import */var _constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("../../packages/ui/src/contexts/SwapProvider/constants.ts");
/* ESM import */var _swap_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("../../packages/ui/src/contexts/SwapProvider/swap-utils.ts");
/* ESM import */var _schemas__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("../../packages/ui/src/contexts/SwapProvider/schemas.ts");



















const useSolanaSwap = ({ account, network }, { onTransactionReceipt, showPendingToast })=>{
    const { t } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_11__.useTranslation)();
    const { request } = (0,_ConnectionProvider__WEBPACK_IMPORTED_MODULE_6__.useConnectionContext)();
    const { capture } = (0,_AnalyticsProvider__WEBPACK_IMPORTED_MODULE_5__.useAnalyticsContext)();
    const { isFlagEnabled } = (0,_FeatureFlagsProvider__WEBPACK_IMPORTED_MODULE_7__.useFeatureFlagContext)();
    const waitForTransaction = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (txHash)=>{
        (0,_core_common__WEBPACK_IMPORTED_MODULE_3__.assertPresent)(network, _core_types__WEBPACK_IMPORTED_MODULE_4__.CommonError.NoActiveNetwork);
        const provider = await (0,_core_common__WEBPACK_IMPORTED_MODULE_3__.getProviderForNetwork)(network);
        if (!(0,_avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_12__.isSolanaProvider)(provider)) {
            throw (0,_swap_utils__WEBPACK_IMPORTED_MODULE_9__.swapError)(_core_types__WEBPACK_IMPORTED_MODULE_4__.CommonError.MismatchingProvider);
        }
        const tx = await provider.getTransaction((0,_solana_kit__WEBPACK_IMPORTED_MODULE_13__.signature)(txHash), {
            encoding: 'jsonParsed',
            commitment: 'confirmed',
            maxSupportedTransactionVersion: 0
        }).send();
        if (!tx) {
            await (0,_avalabs_core_utils_sdk__WEBPACK_IMPORTED_MODULE_14__.wait)(500);
            return waitForTransaction(txHash);
        }
        if (tx.meta?.err) {
            return {
                success: false,
                error: tx.meta.err
            };
        }
        return {
            success: true,
            error: null
        };
    }, [
        network
    ]);
    const getRate = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ({ srcToken, destToken, swapSide, srcAmount, slippageTolerance, fromTokenBalance })=>{
        (0,_core_common__WEBPACK_IMPORTED_MODULE_3__.assertPresent)(network, _core_types__WEBPACK_IMPORTED_MODULE_4__.CommonError.NoActiveNetwork);
        (0,_core_common__WEBPACK_IMPORTED_MODULE_3__.assert)(!network.isTestnet, _core_types__WEBPACK_IMPORTED_MODULE_4__.CommonError.UnknownNetwork);
        if (!isFlagEnabled(_core_types__WEBPACK_IMPORTED_MODULE_4__.FeatureGates.SWAP_SOLANA) || !isFlagEnabled(_core_types__WEBPACK_IMPORTED_MODULE_4__.FeatureGates.SWAP)) {
            throw (0,_swap_utils__WEBPACK_IMPORTED_MODULE_9__.swapError)(_core_types__WEBPACK_IMPORTED_MODULE_4__.SwapErrorCode.FeatureDisabled);
        }
        const isSelling = swapSide === _paraswap_sdk__WEBPACK_IMPORTED_MODULE_1__.SwapSide.SELL;
        const inputMint = srcToken === network.networkToken.symbol ? _constants__WEBPACK_IMPORTED_MODULE_8__.SOL_MINT : srcToken;
        const outputMint = destToken === network.networkToken.symbol ? _constants__WEBPACK_IMPORTED_MODULE_8__.SOL_MINT : destToken;
        const swapMode = isSelling ? 'ExactIn' : 'ExactOut';
        const amount = String(srcAmount);
        // In the UI, slippage is provided as %. We need to convert it into basis points for Jupiter:
        const slippageBps = Number(slippageTolerance) * 100;
        if (Number.isNaN(slippageBps)) {
            return {
                quote: null,
                error: {
                    message: t('Invalid slippage tolerance')
                }
            };
        }
        const feeParams = isFlagEnabled(_core_types__WEBPACK_IMPORTED_MODULE_4__.FeatureGates.SWAP_FEES_JUPITER) ? {
            platformFeeBps: _constants__WEBPACK_IMPORTED_MODULE_8__.JUPITER_PARTNER_FEE_BPS.toString()
        } : undefined;
        const params = new URLSearchParams({
            inputMint,
            outputMint,
            swapMode,
            amount,
            slippageBps: Math.round(slippageBps).toString(),
            ...feeParams
        });
        try {
            const data = await (0,_core_common__WEBPACK_IMPORTED_MODULE_3__.fetchAndVerify)([
                getUrl('quote', params)
            ], _schemas__WEBPACK_IMPORTED_MODULE_10__.JUPITER_QUOTE_SCHEMA).catch((error)=>{
                console.error('Unable to get swap quote from Jupiter', error);
                throw (0,_swap_utils__WEBPACK_IMPORTED_MODULE_9__.swapError)(_core_types__WEBPACK_IMPORTED_MODULE_4__.SwapErrorCode.UnexpectedApiResponse);
            });
            if (typeof fromTokenBalance === 'bigint' && fromTokenBalance < BigInt(data.inAmount)) {
                return {
                    quote: null,
                    error: {
                        message: t('Insufficient balance')
                    },
                    destAmount: undefined
                };
            }
            return {
                quote: data,
                error: undefined,
                destAmount: isSelling ? data.outAmount : data.inAmount
            };
        } catch (error) {
            console.error('Unable to get swap quote from Jupiter', error);
            return {
                quote: null,
                error: {
                    message: t('Failed to fetch the swap quote')
                },
                destAmount: undefined
            };
        }
    }, [
        network,
        t,
        isFlagEnabled
    ]);
    const swap = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (params)=>{
        (0,_core_common__WEBPACK_IMPORTED_MODULE_3__.assertPresent)(account, _core_types__WEBPACK_IMPORTED_MODULE_4__.CommonError.NoActiveAccount);
        (0,_core_common__WEBPACK_IMPORTED_MODULE_3__.assertPresent)(network, _core_types__WEBPACK_IMPORTED_MODULE_4__.CommonError.NoActiveNetwork);
        if (!isFlagEnabled(_core_types__WEBPACK_IMPORTED_MODULE_4__.FeatureGates.SWAP_SOLANA) || !isFlagEnabled(_core_types__WEBPACK_IMPORTED_MODULE_4__.FeatureGates.SWAP)) {
            throw (0,_swap_utils__WEBPACK_IMPORTED_MODULE_9__.swapError)(_core_types__WEBPACK_IMPORTED_MODULE_4__.SwapErrorCode.FeatureDisabled);
        }
        const userPublicKey = account.addressSVM;
        (0,_core_common__WEBPACK_IMPORTED_MODULE_3__.assertPresent)(userPublicKey, _core_types__WEBPACK_IMPORTED_MODULE_4__.AccountError.SVMAddressNotFound);
        const { srcToken, destToken, srcAmount, destAmount, srcDecimals, destDecimals, quote } = (0,_swap_utils__WEBPACK_IMPORTED_MODULE_9__.validateJupiterParams)(params);
        const provider = await (0,_core_common__WEBPACK_IMPORTED_MODULE_3__.getProviderForNetwork)(network);
        if (!(0,_avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_12__.isSolanaProvider)(provider)) {
            throw (0,_swap_utils__WEBPACK_IMPORTED_MODULE_9__.swapError)(_core_types__WEBPACK_IMPORTED_MODULE_4__.CommonError.MismatchingProvider);
        }
        const feeAccount = await (0,_swap_utils__WEBPACK_IMPORTED_MODULE_9__.getJupiterFeeAccount)(isFlagEnabled(_core_types__WEBPACK_IMPORTED_MODULE_4__.FeatureGates.SWAP_FEES_JUPITER), quote, provider, (mint)=>capture('SolanaSwapFeeAccountNotInitialized', {
                mint
            }));
        const [txResponse, buildTxError] = await (0,_avalabs_core_utils_sdk__WEBPACK_IMPORTED_MODULE_15__.resolve)((0,_core_common__WEBPACK_IMPORTED_MODULE_3__.fetchAndVerify)([
            getUrl('swap'),
            {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    quoteResponse: quote,
                    userPublicKey,
                    dynamicComputeUnitLimit: true,
                    feeAccount
                })
            }
        ], _schemas__WEBPACK_IMPORTED_MODULE_10__.JUPITER_TX_SCHEMA));
        if (!txResponse || buildTxError) {
            throw (0,_swap_utils__WEBPACK_IMPORTED_MODULE_9__.swapError)(_core_types__WEBPACK_IMPORTED_MODULE_4__.SwapErrorCode.CannotBuildTx, buildTxError);
        }
        // The /swap endpoint may return errors, as it attempts to simulate the transaction too.
        if (txResponse.simulationError) {
            throw (0,_swap_utils__WEBPACK_IMPORTED_MODULE_9__.swapError)(_core_types__WEBPACK_IMPORTED_MODULE_4__.SwapErrorCode.TransactionError, txResponse.simulationError);
        }
        const [txHash, signError] = await (0,_avalabs_core_utils_sdk__WEBPACK_IMPORTED_MODULE_15__.resolve)(request({
            method: _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_2__.RpcMethod.SOLANA_SIGN_AND_SEND_TRANSACTION,
            params: [
                {
                    account: userPublicKey,
                    serializedTx: txResponse.swapTransaction
                }
            ]
        }));
        if ((0,_core_common__WEBPACK_IMPORTED_MODULE_3__.isUserRejectionError)(signError)) {
            throw signError;
        } else if (signError || !txHash) {
            throw (0,_swap_utils__WEBPACK_IMPORTED_MODULE_9__.swapError)(_core_types__WEBPACK_IMPORTED_MODULE_4__.CommonError.UnableToSign, signError);
        }
        const pendingToastId = showPendingToast();
        waitForTransaction(txHash).then(({ success, error })=>{
            if (error) {
                console.error(error);
            }
            onTransactionReceipt({
                isSuccessful: success,
                pendingToastId,
                userAddress: userPublicKey,
                txHash: txHash,
                chainId: network.chainId,
                srcToken,
                destToken,
                srcAmount,
                destAmount,
                srcDecimals,
                destDecimals
            });
        });
    }, [
        account,
        network,
        request,
        capture,
        onTransactionReceipt,
        waitForTransaction,
        showPendingToast,
        isFlagEnabled
    ]);
    return {
        getRate,
        swap
    };
};
const JUPITER_BASE_URL = 'https://lite-api.jup.ag/swap/v1';
const getUrl = (path, queryParams)=>{
    const queryString = queryParams && queryParams?.size > 0 ? `?${queryParams.toString()}` : '';
    return `${JUPITER_BASE_URL}/${path}${queryString}`;
};


}),
"../../packages/ui/src/contexts/UnifiedBridgeProvider.tsx": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  UnifiedBridgeProvider: () => (UnifiedBridgeProvider),
  useUnifiedBridgeContext: () => (useUnifiedBridgeContext)
});
/* ESM import */var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/jsx-dev-runtime.js");
/* ESM import */var _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/@avalabs/bridge-unified/dist/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/filter.js");
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/map.js");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/@avalabs/vm-module-types/dist/index.js");
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../packages/common/src/index.ts");
/* ESM import */var react_i18next__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("../../node_modules/react-i18next/dist/es/useTranslation.js");
/* ESM import */var _AccountsProvider__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../../packages/ui/src/contexts/AccountsProvider/index.tsx");
/* ESM import */var _ConnectionProvider__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../../packages/ui/src/contexts/ConnectionProvider.tsx");
/* ESM import */var _FeatureFlagsProvider__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("../../packages/ui/src/contexts/FeatureFlagsProvider/index.tsx");
/* ESM import */var _NetworkProvider__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("../../packages/ui/src/contexts/NetworkProvider/index.tsx");












const DEFAULT_STATE = {
    state: _core_types__WEBPACK_IMPORTED_MODULE_3__.UNIFIED_BRIDGE_DEFAULT_STATE,
    estimateTransferGas () {
        throw new Error('Bridge not ready');
    },
    getAssetIdentifierOnTargetChain () {
        return undefined;
    },
    getErrorMessage () {
        return '';
    },
    supportsAsset () {
        return false;
    },
    analyzeTx () {
        return {
            isBridgeTx: false
        };
    },
    transferAsset () {
        throw new Error('Bridge not ready');
    },
    getFee () {
        throw new Error('Bridge not ready');
    },
    getMinimumTransferAmount () {
        throw new Error('Bridge not ready');
    },
    transferableAssets: [],
    availableChainIds: [],
    isReady: false
};
const UnifiedBridgeContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_2__.createContext)(DEFAULT_STATE);
function UnifiedBridgeProvider({ children }) {
    const { t } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_10__.useTranslation)();
    const { accounts: { active: activeAccount } } = (0,_AccountsProvider__WEBPACK_IMPORTED_MODULE_6__.useAccountsContext)();
    const { network: activeNetwork, getNetwork, bitcoinProvider } = (0,_NetworkProvider__WEBPACK_IMPORTED_MODULE_9__.useNetworkContext)();
    const { events, request } = (0,_ConnectionProvider__WEBPACK_IMPORTED_MODULE_7__.useConnectionContext)();
    const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(_core_types__WEBPACK_IMPORTED_MODULE_3__.UNIFIED_BRIDGE_DEFAULT_STATE);
    const [isBridgeDevEnv, setIsBridgeDevEnv] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false);
    const { featureFlags } = (0,_FeatureFlagsProvider__WEBPACK_IMPORTED_MODULE_8__.useFeatureFlagContext)();
    const enabledBridgeTypes = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>(0,_core_common__WEBPACK_IMPORTED_MODULE_5__.getEnabledBridgeTypes)(featureFlags), [
        featureFlags
    ]);
    const environment = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{
        if (typeof activeNetwork?.isTestnet !== 'boolean') {
            return null;
        }
        return isBridgeDevEnv ? _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_1__.Environment.DEV : activeNetwork.isTestnet ? _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_1__.Environment.TEST : _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_1__.Environment.PROD;
    }, [
        activeNetwork?.isTestnet,
        isBridgeDevEnv
    ]);
    const [activeBridgeTypes, setActiveBridgeTypes] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)();
    const evmSigner = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>({
            sign: async ({ from, data, to, value }, _, { currentSignature, requiredSignatures })=>{
                (0,_core_common__WEBPACK_IMPORTED_MODULE_5__.assert)(to, _core_types__WEBPACK_IMPORTED_MODULE_3__.UnifiedBridgeError.InvalidTxPayload);
                (0,_core_common__WEBPACK_IMPORTED_MODULE_5__.assert)(from, _core_types__WEBPACK_IMPORTED_MODULE_3__.UnifiedBridgeError.InvalidTxPayload);
                (0,_core_common__WEBPACK_IMPORTED_MODULE_5__.assert)(data, _core_types__WEBPACK_IMPORTED_MODULE_3__.UnifiedBridgeError.InvalidTxPayload);
                try {
                    const result = await request({
                        method: _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_4__.RpcMethod.ETH_SEND_TRANSACTION,
                        params: [
                            {
                                from,
                                to,
                                data,
                                value: typeof value === 'bigint' ? `0x${value.toString(16)}` : undefined
                            }
                        ]
                    }, {
                        customApprovalScreenTitle: t('Confirm Bridge'),
                        alert: requiredSignatures > currentSignature ? {
                            type: 'info',
                            title: t('This operation requires {{total}} approvals.', {
                                total: requiredSignatures
                            }),
                            notice: t('You will be prompted {{remaining}} more time(s).', {
                                remaining: requiredSignatures - currentSignature
                            })
                        } : undefined
                    });
                    return result;
                } catch (err) {
                    console.error(err);
                    throw err;
                }
            }
        }), [
        request,
        t
    ]);
    const btcSigner = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>({
            sign: async ({ inputs, outputs }, _, { requiredSignatures, currentSignature })=>{
                try {
                    const result = await request({
                        method: _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_4__.RpcMethod.BITCOIN_SIGN_TRANSACTION,
                        params: {
                            inputs,
                            outputs
                        }
                    }, {
                        customApprovalScreenTitle: t('Confirm Bridge'),
                        alert: requiredSignatures > currentSignature ? {
                            type: 'info',
                            title: t('This operation requires {{total}} approvals.', {
                                total: requiredSignatures
                            }),
                            notice: t('You will be prompted {{remaining}} more time(s).', {
                                remaining: requiredSignatures - currentSignature
                            })
                        } : undefined
                    });
                    return result;
                } catch (err) {
                    console.error(err);
                    throw err;
                }
            }
        }), [
        request,
        t
    ]);
    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{
        if (!events || !request) {
            return;
        }
        if (!activeNetwork?.isTestnet) {
            setIsBridgeDevEnv(false);
            return;
        }
        request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_3__.ExtensionRequest.BRIDGE_GET_STATE
        }).then((bridgeState)=>{
            setIsBridgeDevEnv(bridgeState.isDevEnv);
        });
        const subscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_11__.filter)(_core_common__WEBPACK_IMPORTED_MODULE_5__.isBridgeStateUpdateEventListener), (0,rxjs__WEBPACK_IMPORTED_MODULE_12__.map)((evt)=>evt.value)).subscribe((bridgeState)=>{
            setIsBridgeDevEnv(bridgeState.isDevEnv);
        });
        return ()=>subscription.unsubscribe();
    }, [
        events,
        request,
        activeNetwork?.isTestnet
    ]);
    const getInitializerForBridgeType = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((type, bitcoinFunctions)=>{
        switch(type){
            case _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_1__.BridgeType.CCTP:
            case _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_1__.BridgeType.ICTT_ERC20_ERC20:
            case _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_1__.BridgeType.AVALANCHE_EVM:
                return {
                    type,
                    signer: evmSigner
                };
            case _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_1__.BridgeType.AVALANCHE_AVA_BTC:
                return {
                    type,
                    signer: evmSigner,
                    bitcoinFunctions
                };
            case _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_1__.BridgeType.AVALANCHE_BTC_AVA:
                return {
                    type,
                    signer: btcSigner,
                    bitcoinFunctions
                };
        }
    }, [
        evmSigner,
        btcSigner
    ]);
    const bridgeInitializers = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{
        if (!bitcoinProvider) {
            return null;
        }
        return enabledBridgeTypes.map((type)=>getInitializerForBridgeType(type, bitcoinProvider));
    }, [
        enabledBridgeTypes,
        getInitializerForBridgeType,
        bitcoinProvider
    ]);
    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{
        if (!environment || !bridgeInitializers) {
            return;
        }
        let isMounted = true;
        (0,_avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_1__.getEnabledBridgeServices)(environment, bridgeInitializers).then((bridges)=>{
            if (isMounted) setActiveBridgeTypes(bridges);
        }).catch((err)=>{
            console.log('Unable to initialize bridge services', err);
            if (isMounted) setActiveBridgeTypes(undefined);
        });
        return ()=>{
            isMounted = false;
        };
    }, [
        environment,
        bridgeInitializers
    ]);
    // Memoize the core instance of Unified Bridge based on the current
    // network environment & feature flags configuration
    const core = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{
        if (!environment || !activeBridgeTypes) {
            return null;
        }
        return (0,_avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_1__.createUnifiedBridgeService)({
            environment,
            enabledBridgeServices: activeBridgeTypes
        });
    }, [
        environment,
        activeBridgeTypes
    ]);
    const availableChainIds = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>Object.keys(core?.getAssets() ?? {}), [
        core
    ]);
    const buildChain = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((chainId)=>{
        const network = getNetwork(chainId);
        (0,_core_common__WEBPACK_IMPORTED_MODULE_5__.assert)(network, _core_types__WEBPACK_IMPORTED_MODULE_3__.CommonError.UnknownNetwork);
        return {
            chainId: network.caipId,
            chainName: network.chainName,
            rpcUrl: network.rpcUrl,
            networkToken: {
                ...network.networkToken,
                type: _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_1__.TokenType.NATIVE
            },
            utilityAddresses: {
                multicall: network.utilityAddresses?.multicall
            }
        };
    }, [
        getNetwork
    ]);
    const transferableAssets = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{
        if (!activeNetwork || !core) {
            return [];
        }
        return core.getAssets()[activeNetwork.caipId] ?? [];
    }, [
        activeNetwork,
        core
    ]);
    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{
        request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_3__.ExtensionRequest.UNIFIED_BRIDGE_GET_STATE
        }).then((currState)=>{
            setState(currState);
        });
        const stateUpdateSubscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_11__.filter)(_core_common__WEBPACK_IMPORTED_MODULE_5__.isUnifiedBridgeStateUpdate), (0,rxjs__WEBPACK_IMPORTED_MODULE_12__.map)((evt)=>evt.value)).subscribe((currState)=>{
            setState(currState);
        });
        return ()=>{
            stateUpdateSubscription.unsubscribe();
        };
    }, [
        events,
        request
    ]);
    const supportsAsset = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((lookupAddressOrSymbol, targetChainId)=>{
        if (!activeNetwork || !core) {
            return false;
        }
        const sourceAssets = core?.getAssets()[activeNetwork.caipId] ?? [];
        const asset = sourceAssets.find((token)=>{
            return token.type === _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_1__.TokenType.NATIVE ? token.symbol === lookupAddressOrSymbol : token.address === lookupAddressOrSymbol;
        });
        if (!asset) {
            return false;
        }
        return targetChainId in asset.destinations;
    }, [
        core,
        activeNetwork
    ]);
    const getAsset = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((symbol, chainId)=>{
        const chainAssets = core?.getAssets()[chainId] ?? [];
        const asset = chainAssets.find(({ symbol: assetSymbol })=>assetSymbol === symbol);
        return asset;
    }, [
        core
    ]);
    const getAddresses = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((account, sourceChain, targetChain)=>{
        const isFromBitcoin = (0,_core_common__WEBPACK_IMPORTED_MODULE_5__.isBitcoinCaipId)(sourceChain.chainId);
        const isToBitcoin = (0,_core_common__WEBPACK_IMPORTED_MODULE_5__.isBitcoinCaipId)(targetChain.chainId);
        if (isFromBitcoin || isToBitcoin) {
            (0,_core_common__WEBPACK_IMPORTED_MODULE_5__.assert)(account.addressBTC, _core_types__WEBPACK_IMPORTED_MODULE_3__.UnifiedBridgeError.NonBitcoinAccount);
            return {
                fromAddress: isFromBitcoin ? account.addressBTC : account.addressC,
                toAddress: isFromBitcoin ? account.addressC : account.addressBTC
            };
        }
        return {
            fromAddress: account.addressC,
            toAddress: account.addressC
        };
    }, []);
    const buildParams = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(async (targetChainId)=>{
        (0,_core_common__WEBPACK_IMPORTED_MODULE_5__.assert)(activeAccount, _core_types__WEBPACK_IMPORTED_MODULE_3__.CommonError.NoActiveAccount);
        (0,_core_common__WEBPACK_IMPORTED_MODULE_5__.assert)(activeNetwork, _core_types__WEBPACK_IMPORTED_MODULE_3__.CommonError.NoActiveNetwork);
        (0,_core_common__WEBPACK_IMPORTED_MODULE_5__.assert)(activeAccount, _core_types__WEBPACK_IMPORTED_MODULE_3__.CommonError.NoActiveAccount);
        const sourceChain = buildChain(activeNetwork.caipId);
        const targetChain = buildChain(targetChainId);
        const provider = await (0,_core_common__WEBPACK_IMPORTED_MODULE_5__.getProviderForNetwork)(activeNetwork);
        const { fromAddress, toAddress } = getAddresses(activeAccount, sourceChain, targetChain);
        return {
            sourceChain,
            sourceChainId: activeNetwork.caipId,
            targetChain,
            provider,
            fromAddress,
            toAddress
        };
    }, [
        activeAccount,
        activeNetwork,
        buildChain,
        getAddresses
    ]);
    const getFee = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(async (symbol, amount, targetChainId)=>{
        (0,_core_common__WEBPACK_IMPORTED_MODULE_5__.assert)(core, _core_types__WEBPACK_IMPORTED_MODULE_3__.CommonError.Unknown);
        (0,_core_common__WEBPACK_IMPORTED_MODULE_5__.assert)(activeNetwork, _core_types__WEBPACK_IMPORTED_MODULE_3__.CommonError.NoActiveNetwork);
        const asset = getAsset(symbol, activeNetwork.caipId);
        (0,_core_common__WEBPACK_IMPORTED_MODULE_5__.assert)(asset, _core_types__WEBPACK_IMPORTED_MODULE_3__.UnifiedBridgeError.UnknownAsset);
        const feeMap = (0,_core_common__WEBPACK_IMPORTED_MODULE_5__.lowerCaseKeys)(await core.getFees({
            asset,
            amount,
            targetChain: buildChain(targetChainId),
            sourceChain: buildChain(activeNetwork.caipId)
        }));
        // We currently operate on the assumption that the fee is paid in the
        // same token as is bridged.
        // Although sometimes it may be paid on the source chain (as is the case for CCTP),
        // and sometimes it may be paid on the target chain (i.e. Avalanche Bridge), the
        // result for the end users is that the received amount on the target chain is lowered
        // by the fee amount.
        const feeChainId = Object.keys(feeMap)[0]; // ID of the chain where the fee is paid
        (0,_core_common__WEBPACK_IMPORTED_MODULE_5__.assert)(feeChainId, _core_types__WEBPACK_IMPORTED_MODULE_3__.UnifiedBridgeError.InvalidFee);
        const feeChain = feeMap[feeChainId];
        (0,_core_common__WEBPACK_IMPORTED_MODULE_5__.assert)(feeChain, _core_types__WEBPACK_IMPORTED_MODULE_3__.UnifiedBridgeError.InvalidFee);
        const feeAssetId = Object.keys(feeChain)[0]; // address or "NATIVE"
        (0,_core_common__WEBPACK_IMPORTED_MODULE_5__.assert)(feeAssetId, _core_types__WEBPACK_IMPORTED_MODULE_3__.UnifiedBridgeError.InvalidFee);
        return feeChain[feeAssetId] ?? 0n;
    }, [
        activeNetwork,
        core,
        buildChain,
        getAsset
    ]);
    const estimateTransferGas = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(async (symbol, amount, targetChainId)=>{
        (0,_core_common__WEBPACK_IMPORTED_MODULE_5__.assert)(core, _core_types__WEBPACK_IMPORTED_MODULE_3__.CommonError.Unknown);
        (0,_core_common__WEBPACK_IMPORTED_MODULE_5__.assert)(activeNetwork, _core_types__WEBPACK_IMPORTED_MODULE_3__.CommonError.NoActiveNetwork);
        const asset = getAsset(symbol, activeNetwork.caipId);
        (0,_core_common__WEBPACK_IMPORTED_MODULE_5__.assert)(asset, _core_types__WEBPACK_IMPORTED_MODULE_3__.UnifiedBridgeError.UnknownAsset);
        const { fromAddress, sourceChain, targetChain } = await buildParams(targetChainId);
        const gasLimit = await core.estimateGas({
            asset,
            fromAddress,
            amount,
            sourceChain,
            targetChain
        });
        return gasLimit;
    }, [
        activeNetwork,
        core,
        buildParams,
        getAsset
    ]);
    const getAssetIdentifierOnTargetChain = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((symbol, targetChainId)=>{
        if (!symbol || !targetChainId) {
            return;
        }
        const asset = getAsset(symbol, targetChainId);
        if (!asset) {
            return;
        }
        return asset.type === _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_1__.TokenType.NATIVE ? asset.symbol : asset.address;
    }, [
        getAsset
    ]);
    const trackBridgeTransfer = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(async (bridgeTransfer)=>{
        return request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_3__.ExtensionRequest.UNIFIED_BRIDGE_TRACK_TRANSFER,
            params: [
                bridgeTransfer
            ]
        });
    }, [
        request
    ]);
    const transferAsset = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(async (symbol, amount, targetChainId, gasSettings)=>{
        (0,_core_common__WEBPACK_IMPORTED_MODULE_5__.assert)(core, _core_types__WEBPACK_IMPORTED_MODULE_3__.CommonError.Unknown);
        (0,_core_common__WEBPACK_IMPORTED_MODULE_5__.assert)(activeNetwork, _core_types__WEBPACK_IMPORTED_MODULE_3__.CommonError.NoActiveNetwork);
        const asset = getAsset(symbol, activeNetwork.caipId);
        (0,_core_common__WEBPACK_IMPORTED_MODULE_5__.assert)(asset, _core_types__WEBPACK_IMPORTED_MODULE_3__.UnifiedBridgeError.UnknownAsset);
        const { fromAddress, toAddress, sourceChain, targetChain } = await buildParams(targetChainId);
        try {
            const bridgeTransfer = await core.transferAsset({
                asset,
                fromAddress,
                toAddress,
                amount,
                sourceChain,
                targetChain,
                gasSettings
            });
            await trackBridgeTransfer(bridgeTransfer);
            return bridgeTransfer.sourceTxHash;
        } catch (err) {
            console.error(err);
            throw err;
        }
    }, [
        getAsset,
        activeNetwork,
        buildParams,
        core,
        trackBridgeTransfer
    ]);
    const getErrorMessage = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((errorCode)=>{
        switch(errorCode){
            case _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.BRIDGE_NOT_AVAILABLE:
                return t('Bridge not available');
            case _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.INITIALIZATION_FAILED:
                return t('Bridge initialization failed');
            case _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.INVALID_PARAMS:
                return t('Invalid transfer parameters');
            case _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.TIMEOUT:
                return t('The transaction timed out');
            case _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.TRANSACTION_REVERTED:
                return t('The transaction has been reverted');
        }
    }, [
        t
    ]);
    const analyzeTx = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((txInfo)=>{
        (0,_core_common__WEBPACK_IMPORTED_MODULE_5__.assert)(core, _core_types__WEBPACK_IMPORTED_MODULE_3__.CommonError.Unknown);
        return core.analyzeTx(txInfo);
    }, [
        core
    ]);
    const getMinimumTransferAmount = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(async (asset, amount, targetChainId)=>{
        (0,_core_common__WEBPACK_IMPORTED_MODULE_5__.assert)(core, _core_types__WEBPACK_IMPORTED_MODULE_3__.CommonError.Unknown);
        (0,_core_common__WEBPACK_IMPORTED_MODULE_5__.assert)(activeNetwork, _core_types__WEBPACK_IMPORTED_MODULE_3__.CommonError.NoActiveNetwork);
        return core.getMinimumTransferAmount({
            asset,
            amount,
            sourceChain: buildChain(activeNetwork.caipId),
            targetChain: buildChain(targetChainId)
        });
    }, [
        core,
        buildChain,
        activeNetwork
    ]);
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(UnifiedBridgeContext.Provider, {
        value: {
            availableChainIds,
            estimateTransferGas,
            getErrorMessage,
            isReady: !!core,
            state,
            analyzeTx,
            getAssetIdentifierOnTargetChain,
            getMinimumTransferAmount,
            getFee,
            supportsAsset,
            transferAsset,
            transferableAssets
        },
        children: children
    }, void 0, false, {
        fileName: "/Users/meehow/ava/extension-avalanche/packages/ui/src/contexts/UnifiedBridgeProvider.tsx",
        lineNumber: 712,
        columnNumber: 5
    }, this);
}
function useUnifiedBridgeContext() {
    return (0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(UnifiedBridgeContext);
}


}),
"../../packages/ui/src/contexts/WalletConnectContextProvider/WalletConnectContextProvider.tsx": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  WalletConnectContextProvider: () => (WalletConnectContextProvider),
  useWalletConnectContext: () => (useWalletConnectContext)
});
/* ESM import */var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/jsx-dev-runtime.js");
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/filter.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var _models__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../packages/ui/src/contexts/WalletConnectContextProvider/models.ts");
/* ESM import */var _importReducer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../packages/ui/src/contexts/WalletConnectContextProvider/importReducer.ts");
/* ESM import */var _ConnectionProvider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../packages/ui/src/contexts/ConnectionProvider.tsx");
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../../packages/common/src/index.ts");








const WalletConnectContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({
    importState: {
        status: _models__WEBPACK_IMPORTED_MODULE_3__.AccountImportStatus.NotInitiated
    },
    initiateImport () {
        return;
    },
    reset () {
        return;
    }
});
const WalletConnectContextProvider = ({ children })=>{
    const { events, request, tabId } = (0,_ConnectionProvider__WEBPACK_IMPORTED_MODULE_5__.useConnectionContext)();
    const [importState, dispatch] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useReducer)(_importReducer__WEBPACK_IMPORTED_MODULE_4__.importReducer, {
        status: _models__WEBPACK_IMPORTED_MODULE_3__.AccountImportStatus.NotInitiated
    });
    const reset = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{
        dispatch({
            status: _models__WEBPACK_IMPORTED_MODULE_3__.AccountImportStatus.NotInitiated
        });
    }, []);
    const initiateImport = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((reconnectionAddress, onConnected)=>{
        const qrCodeSubscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_7__.filter)(_core_common__WEBPACK_IMPORTED_MODULE_6__.isUriGeneratedEvent)).subscribe(async ({ value })=>{
            if (value.tabId !== tabId) {
                return;
            }
            dispatch({
                status: _models__WEBPACK_IMPORTED_MODULE_3__.AccountImportStatus.AwaitingApproval,
                payload: {
                    uri: value.uri
                }
            });
        });
        dispatch({
            status: _models__WEBPACK_IMPORTED_MODULE_3__.AccountImportStatus.Initiated
        });
        request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.WALLET_CONNECT_IMPORT_ACCOUNT,
            params: [
                reconnectionAddress
            ]
        }).then((result)=>{
            onConnected?.(result);
            dispatch({
                status: _models__WEBPACK_IMPORTED_MODULE_3__.AccountImportStatus.Successful
            });
        }).catch((err)=>{
            dispatch({
                status: _models__WEBPACK_IMPORTED_MODULE_3__.AccountImportStatus.Failed,
                payload: {
                    error: err
                }
            });
        }).finally(()=>{
            qrCodeSubscription.unsubscribe();
        });
    }, [
        request,
        events,
        tabId
    ]);
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(WalletConnectContext.Provider, {
        value: {
            importState,
            reset,
            initiateImport
        },
        children: children
    }, void 0, false, {
        fileName: "/Users/meehow/ava/extension-avalanche/packages/ui/src/contexts/WalletConnectContextProvider/WalletConnectContextProvider.tsx",
        lineNumber: 91,
        columnNumber: 5
    }, undefined);
};
function useWalletConnectContext() {
    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(WalletConnectContext);
}


}),
"../../packages/ui/src/contexts/WalletConnectContextProvider/importReducer.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  importReducer: () => (importReducer)
});
/* ESM import */var _models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/ui/src/contexts/WalletConnectContextProvider/models.ts");

const importReducer = (state, action)=>{
    const { status, payload } = action;
    switch(status){
        case _models__WEBPACK_IMPORTED_MODULE_0__.AccountImportStatus.NotInitiated:
            return {
                status
            };
        case _models__WEBPACK_IMPORTED_MODULE_0__.AccountImportStatus.Initiated:
            return {
                status
            };
        case _models__WEBPACK_IMPORTED_MODULE_0__.AccountImportStatus.AwaitingApproval:
            return {
                status,
                ...payload
            };
        case _models__WEBPACK_IMPORTED_MODULE_0__.AccountImportStatus.Successful:
            return {
                ...state,
                status
            };
        case _models__WEBPACK_IMPORTED_MODULE_0__.AccountImportStatus.Failed:
            return {
                ...state,
                status,
                ...payload
            };
        default:
            throw new Error(`WalletConnectContextProvider: Unknown connection status: "${_models__WEBPACK_IMPORTED_MODULE_0__.AccountImportStatus[status]}"`);
    }
};


}),
"../../packages/ui/src/contexts/WalletConnectContextProvider/index.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  AccountImportStatus: () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_1__.AccountImportStatus),
  WalletConnectContextProvider: () => (/* reexport safe */ _WalletConnectContextProvider__WEBPACK_IMPORTED_MODULE_0__.WalletConnectContextProvider),
  useWalletConnectContext: () => (/* reexport safe */ _WalletConnectContextProvider__WEBPACK_IMPORTED_MODULE_0__.useWalletConnectContext)
});
/* ESM import */var _WalletConnectContextProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/ui/src/contexts/WalletConnectContextProvider/WalletConnectContextProvider.tsx");
/* ESM import */var _models__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/ui/src/contexts/WalletConnectContextProvider/models.ts");




}),
"../../packages/ui/src/contexts/WalletConnectContextProvider/models.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  AccountImportStatus: () => (AccountImportStatus)
});
var AccountImportStatus = /*#__PURE__*/ function(AccountImportStatus) {
    AccountImportStatus[AccountImportStatus["NotInitiated"] = 0] = "NotInitiated";
    AccountImportStatus[AccountImportStatus["Initiated"] = 1] = "Initiated";
    AccountImportStatus[AccountImportStatus["AwaitingApproval"] = 2] = "AwaitingApproval";
    AccountImportStatus[AccountImportStatus["Successful"] = 3] = "Successful";
    AccountImportStatus[AccountImportStatus["Failed"] = 4] = "Failed";
    return AccountImportStatus;
}({});


}),
"../../packages/ui/src/contexts/WalletProvider.tsx": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  WalletContextProvider: () => (WalletContextProvider),
  useWalletContext: () => (useWalletContext)
});
/* ESM import */var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/jsx-dev-runtime.js");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);
/* ESM import */var react_router_dom__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("../../node_modules/react-router/esm/react-router.js");
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/filter.js");
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/map.js");
/* ESM import */var _AccountsProvider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../packages/ui/src/contexts/AccountsProvider/index.tsx");
/* ESM import */var _ConnectionProvider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../packages/ui/src/contexts/ConnectionProvider.tsx");
/* ESM import */var _LedgerProvider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../packages/ui/src/contexts/LedgerProvider/index.tsx");
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../../packages/common/src/index.ts");









const WalletContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_2__.createContext)({
    wallets: []
});
function WalletContextProvider({ children, LockedComponent }) {
    const { initLedgerTransport } = (0,_LedgerProvider__WEBPACK_IMPORTED_MODULE_5__.useLedgerContext)();
    const { request, events } = (0,_ConnectionProvider__WEBPACK_IMPORTED_MODULE_4__.useConnectionContext)();
    const [isWalletLocked, setIsWalletLocked] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(true);
    const [isWalletLoading, setIsWalletLoading] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(true);
    const [walletDetails, setWalletDetails] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)();
    const { accounts: { active: activeAccount } } = (0,_AccountsProvider__WEBPACK_IMPORTED_MODULE_3__.useAccountsContext)();
    const [wallets, setWallets] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)([]);
    const getWallet = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((walletId)=>wallets.find(({ id })=>walletId === id), [
        wallets
    ]);
    const isLedgerWallet = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{
        return walletDetails?.type === _core_types__WEBPACK_IMPORTED_MODULE_1__.SecretType.Ledger || walletDetails?.type === _core_types__WEBPACK_IMPORTED_MODULE_1__.SecretType.LedgerLive;
    }, [
        walletDetails
    ]);
    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{
        if (activeAccount?.type === _core_types__WEBPACK_IMPORTED_MODULE_1__.AccountType.PRIMARY) {
            setWalletDetails(wallets.find((w)=>w.id === activeAccount.walletId));
        } else {
            setWalletDetails(undefined);
        }
    }, [
        activeAccount,
        wallets
    ]);
    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{
        if (isWalletLocked) {
            setWallets([]);
            setWalletDetails(undefined);
        } else {
            request({
                method: _core_types__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.WALLET_GET_DETAILS
            }).then((_wallets)=>{
                setWallets(_wallets);
            });
        }
    }, [
        isWalletLocked,
        request
    ]);
    // listen for wallet creation
    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{
        if (!request || !events) {
            return;
        }
        setIsWalletLoading(true);
        request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.LOCK_GET_STATE
        }).then((locked)=>{
            setIsWalletLocked(locked);
            setIsWalletLoading(false);
        });
        const lockSubscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_7__.filter)(_core_common__WEBPACK_IMPORTED_MODULE_6__.isLockStateChangedEvent), (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.map)((evt)=>evt.value)).subscribe((locked)=>{
            setIsWalletLocked(locked);
        });
        const walletSubscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_7__.filter)(_core_common__WEBPACK_IMPORTED_MODULE_6__.isWalletStateUpdateEvent), (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.map)((evt)=>evt.value)).subscribe((_wallets)=>{
            setWallets(_wallets);
        });
        return ()=>{
            walletSubscription.unsubscribe();
            lockSubscription.unsubscribe();
        };
    }, [
        events,
        request
    ]);
    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{
        if (!isWalletLocked && isLedgerWallet) {
            initLedgerTransport();
        }
    }, [
        initLedgerTransport,
        isWalletLocked,
        isLedgerWallet
    ]);
    const unlockWallet = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((password)=>{
        return request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.UNLOCK_WALLET,
            params: [
                password
            ]
        });
    }, [
        request
    ]);
    const changeWalletPassword = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((newPassword, oldPassword)=>{
        return request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.LOCK_CHANGE_PASSWORD,
            params: [
                newPassword,
                oldPassword
            ]
        });
    }, [
        request
    ]);
    const getUnencryptedMnemonic = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((password)=>{
        return request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.WALLET_UNENCRYPTED_MNEMONIC,
            params: [
                password
            ]
        });
    }, [
        request
    ]);
    const getTransactionHistory = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(()=>{
        return request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.HISTORY_GET
        });
    }, [
        request
    ]);
    const renameWallet = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((id, name)=>{
        return request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_1__.DAppProviderRequest.WALLET_RENAME,
            params: [
                id,
                name
            ]
        });
    }, [
        request
    ]);
    // We do not require extension to be unlocked for wallet selection
    const routeMatch = (0,react_router_dom__WEBPACK_IMPORTED_MODULE_9__.useRouteMatch)('/approve/select-wallet');
    const allowWalletSelection = routeMatch?.isExact;
    if (!isWalletLoading && isWalletLocked && !allowWalletSelection) {
        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(LockedComponent, {
            unlockWallet: unlockWallet
        }, void 0, false, {
            fileName: "/Users/meehow/ava/extension-avalanche/packages/ui/src/contexts/WalletProvider.tsx",
            lineNumber: 206,
            columnNumber: 12
        }, this);
    }
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(WalletContext.Provider, {
        value: {
            getWallet,
            isWalletLoading,
            isWalletLocked,
            isLedgerWallet,
            walletDetails,
            wallets,
            changeWalletPassword,
            getUnencryptedMnemonic,
            getTransactionHistory,
            renameWallet
        },
        children: children
    }, void 0, false, {
        fileName: "/Users/meehow/ava/extension-avalanche/packages/ui/src/contexts/WalletProvider.tsx",
        lineNumber: 210,
        columnNumber: 5
    }, this);
}
function useWalletContext() {
    return (0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(WalletContext);
}


}),
"../../packages/ui/src/contexts/WalletTotalBalanceProvider.tsx": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  WalletTotalBalanceContext: () => (WalletTotalBalanceContext),
  WalletTotalBalanceProvider: () => (WalletTotalBalanceProvider),
  useWalletTotalBalanceContext: () => (useWalletTotalBalanceContext)
});
/* ESM import */var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/jsx-dev-runtime.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* ESM import */var lodash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/lodash/lodash.js");
/* ESM import */var lodash__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_2__);
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var _AccountsProvider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../packages/ui/src/contexts/AccountsProvider/index.tsx");
/* ESM import */var _WalletProvider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../packages/ui/src/contexts/WalletProvider.tsx");
/* ESM import */var _ConnectionProvider__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../../packages/ui/src/contexts/ConnectionProvider.tsx");







const WalletTotalBalanceContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({
    walletBalances: {},
    fetchBalanceForWallet: ()=>Promise.resolve()
});
const WalletTotalBalanceProvider = ({ children })=>{
    const { accounts: { imported } } = (0,_AccountsProvider__WEBPACK_IMPORTED_MODULE_4__.useAccountsContext)();
    const { wallets } = (0,_WalletProvider__WEBPACK_IMPORTED_MODULE_5__.useWalletContext)();
    const { request } = (0,_ConnectionProvider__WEBPACK_IMPORTED_MODULE_6__.useConnectionContext)();
    const hasImportedAccounts = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>Object.keys(imported).length > 0, [
        imported
    ]);
    const [walletBalances, setWalletBalances] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});
    const fetchBalanceForWallet = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (walletId)=>{
        setWalletBalances((prevState)=>({
                ...prevState,
                [walletId]: {
                    ...prevState[walletId],
                    hasErrorOccurred: false,
                    isLoading: true
                }
            }));
        request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_3__.ExtensionRequest.BALANCES_GET_TOTAL_FOR_WALLET,
            params: {
                walletId
            }
        }).then((walletBalanceInfo)=>{
            setWalletBalances((prevState)=>({
                    ...prevState,
                    [walletId]: {
                        ...walletBalanceInfo,
                        hasErrorOccurred: false,
                        isLoading: false
                    }
                }));
        }).catch((err)=>{
            console.log('Error while fetching total balance for wallet', err);
            setWalletBalances((prevState)=>({
                    ...prevState,
                    [walletId]: {
                        ...prevState[walletId],
                        hasErrorOccurred: true,
                        isLoading: false
                    }
                }));
        });
    }, [
        request
    ]);
    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{
        let isMounted = true;
        const fetchWalletBalancesSequentially = async (walletIds)=>{
            for (const walletId of walletIds){
                await fetchBalanceForWallet(walletId);
                if (!isMounted) {
                    return;
                }
            }
        };
        const walletIds = [
            ...wallets.map(({ id })=>id),
            hasImportedAccounts ? _core_types__WEBPACK_IMPORTED_MODULE_3__.IMPORTED_ACCOUNTS_WALLET_ID : undefined
        ].filter(lodash__WEBPACK_IMPORTED_MODULE_2__.isString);
        fetchWalletBalancesSequentially(walletIds);
        return ()=>{
            isMounted = false;
        };
    }, [
        wallets,
        hasImportedAccounts,
        fetchBalanceForWallet
    ]);
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(WalletTotalBalanceContext.Provider, {
        value: {
            walletBalances,
            fetchBalanceForWallet
        },
        children: children
    }, void 0, false, {
        fileName: "/Users/meehow/ava/extension-avalanche/packages/ui/src/contexts/WalletTotalBalanceProvider.tsx",
        lineNumber: 123,
        columnNumber: 5
    }, undefined);
};
function useWalletTotalBalanceContext() {
    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(WalletTotalBalanceContext);
}


}),
"../../packages/ui/src/contexts/index.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  AccountImportStatus: () => (/* reexport safe */ _WalletConnectContextProvider__WEBPACK_IMPORTED_MODULE_23__.AccountImportStatus),
  AccountManagerContext: () => (/* reexport safe */ _AccountManagerProvider__WEBPACK_IMPORTED_MODULE_26__.AccountManagerContext),
  AccountManagerProvider: () => (/* reexport safe */ _AccountManagerProvider__WEBPACK_IMPORTED_MODULE_26__.AccountManagerProvider),
  AccountsContextProvider: () => (/* reexport safe */ _AccountsProvider__WEBPACK_IMPORTED_MODULE_0__.AccountsContextProvider),
  AnalyticsContextProvider: () => (/* reexport safe */ _AnalyticsProvider__WEBPACK_IMPORTED_MODULE_1__.AnalyticsContextProvider),
  ApprovalsContext: () => (/* reexport safe */ _ApprovalsProvider__WEBPACK_IMPORTED_MODULE_2__.ApprovalsContext),
  ApprovalsContextProvider: () => (/* reexport safe */ _ApprovalsProvider__WEBPACK_IMPORTED_MODULE_2__.ApprovalsContextProvider),
  BalancesProvider: () => (/* reexport safe */ _BalancesProvider__WEBPACK_IMPORTED_MODULE_3__.BalancesProvider),
  BridgeProvider: () => (/* reexport safe */ _BridgeProvider__WEBPACK_IMPORTED_MODULE_4__.BridgeProvider),
  ConnectionContextProvider: () => (/* reexport safe */ _ConnectionProvider__WEBPACK_IMPORTED_MODULE_5__.ConnectionContextProvider),
  ContactsContextProvider: () => (/* reexport safe */ _ContactsProvider__WEBPACK_IMPORTED_MODULE_6__.ContactsContextProvider),
  CurrenciesContextProvider: () => (/* reexport safe */ _CurrenciesProvider__WEBPACK_IMPORTED_MODULE_7__.CurrenciesContextProvider),
  DISALLOWED_SWAP_ASSETS: () => (/* reexport safe */ _SwapProvider__WEBPACK_IMPORTED_MODULE_20__.DISALLOWED_SWAP_ASSETS),
  DefiContextProvider: () => (/* reexport safe */ _DefiProvider__WEBPACK_IMPORTED_MODULE_8__.DefiContextProvider),
  FeatureFlagsContextProvider: () => (/* reexport safe */ _FeatureFlagsProvider__WEBPACK_IMPORTED_MODULE_9__.FeatureFlagsContextProvider),
  FirebaseContextProvider: () => (/* reexport safe */ _FirebaseProvider__WEBPACK_IMPORTED_MODULE_10__.FirebaseContextProvider),
  IPFS_URL: () => (/* reexport safe */ _BalancesProvider__WEBPACK_IMPORTED_MODULE_3__.IPFS_URL),
  JUPITER_PARTNER_ADDRESS: () => (/* reexport safe */ _SwapProvider__WEBPACK_IMPORTED_MODULE_20__.JUPITER_PARTNER_ADDRESS),
  JUPITER_PARTNER_FEE_BPS: () => (/* reexport safe */ _SwapProvider__WEBPACK_IMPORTED_MODULE_20__.JUPITER_PARTNER_FEE_BPS),
  KeystoneContextProvider: () => (/* reexport safe */ _KeystoneProvider__WEBPACK_IMPORTED_MODULE_11__.KeystoneContextProvider),
  LEDGER_VERSION_WITH_EIP_712: () => (/* reexport safe */ _LedgerProvider__WEBPACK_IMPORTED_MODULE_12__.LEDGER_VERSION_WITH_EIP_712),
  LedgerAppType: () => (/* reexport safe */ _LedgerProvider__WEBPACK_IMPORTED_MODULE_12__.LedgerAppType),
  LedgerContextProvider: () => (/* reexport safe */ _LedgerProvider__WEBPACK_IMPORTED_MODULE_12__.LedgerContextProvider),
  NATIVE_TOKEN_ADDRESS: () => (/* reexport safe */ _SwapProvider__WEBPACK_IMPORTED_MODULE_20__.NATIVE_TOKEN_ADDRESS),
  NetworkContextProvider: () => (/* reexport safe */ _NetworkProvider__WEBPACK_IMPORTED_MODULE_14__.NetworkContextProvider),
  NetworkFeeContextProvider: () => (/* reexport safe */ _NetworkFeeProvider__WEBPACK_IMPORTED_MODULE_13__.NetworkFeeContextProvider),
  NotificationsContextProvider: () => (/* reexport safe */ _NotificationsProvider__WEBPACK_IMPORTED_MODULE_15__.NotificationsContextProvider),
  OnboardingContextProvider: () => (/* reexport safe */ _OnboardingProvider__WEBPACK_IMPORTED_MODULE_16__.OnboardingContextProvider),
  PARASWAP_PARTNER_ADDRESS: () => (/* reexport safe */ _SwapProvider__WEBPACK_IMPORTED_MODULE_20__.PARASWAP_PARTNER_ADDRESS),
  PARASWAP_PARTNER_FEE_BPS: () => (/* reexport safe */ _SwapProvider__WEBPACK_IMPORTED_MODULE_20__.PARASWAP_PARTNER_FEE_BPS),
  PARASWAP_RETRYABLE_ERRORS: () => (/* reexport safe */ _SwapProvider__WEBPACK_IMPORTED_MODULE_20__.PARASWAP_RETRYABLE_ERRORS),
  PermissionContextProvider: () => (/* reexport safe */ _PermissionsProvider__WEBPACK_IMPORTED_MODULE_17__.PermissionContextProvider),
  REQUIRED_LEDGER_VERSION: () => (/* reexport safe */ _LedgerProvider__WEBPACK_IMPORTED_MODULE_12__.REQUIRED_LEDGER_VERSION),
  SOL_MINT: () => (/* reexport safe */ _SwapProvider__WEBPACK_IMPORTED_MODULE_20__.SOL_MINT),
  SeedlessMfaManagementContext: () => (/* reexport safe */ _SeedlessMfaManagementProvider__WEBPACK_IMPORTED_MODULE_18__.SeedlessMfaManagementContext),
  SeedlessMfaManagementProvider: () => (/* reexport safe */ _SeedlessMfaManagementProvider__WEBPACK_IMPORTED_MODULE_18__.SeedlessMfaManagementProvider),
  SelectionMode: () => (/* reexport safe */ _AccountManagerProvider__WEBPACK_IMPORTED_MODULE_26__.SelectionMode),
  SettingsContextProvider: () => (/* reexport safe */ _SettingsProvider__WEBPACK_IMPORTED_MODULE_19__.SettingsContextProvider),
  SettingsPages: () => (/* reexport safe */ _SettingsProvider__WEBPACK_IMPORTED_MODULE_19__.SettingsPages),
  SwapContext: () => (/* reexport safe */ _SwapProvider__WEBPACK_IMPORTED_MODULE_20__.SwapContext),
  SwapContextProvider: () => (/* reexport safe */ _SwapProvider__WEBPACK_IMPORTED_MODULE_20__.SwapContextProvider),
  UnifiedBridgeProvider: () => (/* reexport safe */ _UnifiedBridgeProvider__WEBPACK_IMPORTED_MODULE_21__.UnifiedBridgeProvider),
  WalletConnectContextProvider: () => (/* reexport safe */ _WalletConnectContextProvider__WEBPACK_IMPORTED_MODULE_23__.WalletConnectContextProvider),
  WalletContextProvider: () => (/* reexport safe */ _WalletProvider__WEBPACK_IMPORTED_MODULE_24__.WalletContextProvider),
  WalletTotalBalanceContext: () => (/* reexport safe */ _WalletTotalBalanceProvider__WEBPACK_IMPORTED_MODULE_25__.WalletTotalBalanceContext),
  WalletTotalBalanceProvider: () => (/* reexport safe */ _WalletTotalBalanceProvider__WEBPACK_IMPORTED_MODULE_25__.WalletTotalBalanceProvider),
  getCurrencyFormatter: () => (/* reexport safe */ _utils_getCurrencyFormatter__WEBPACK_IMPORTED_MODULE_22__.getCurrencyFormatter),
  hasParaswapError: () => (/* reexport safe */ _SwapProvider__WEBPACK_IMPORTED_MODULE_20__.hasParaswapError),
  isAPIError: () => (/* reexport safe */ _SwapProvider__WEBPACK_IMPORTED_MODULE_20__.isAPIError),
  isJupiterQuote: () => (/* reexport safe */ _SwapProvider__WEBPACK_IMPORTED_MODULE_20__.isJupiterQuote),
  isJupiterSwapParams: () => (/* reexport safe */ _SwapProvider__WEBPACK_IMPORTED_MODULE_20__.isJupiterSwapParams),
  isNetworkUpdatedEvent: () => (/* reexport safe */ _NetworkProvider__WEBPACK_IMPORTED_MODULE_14__.isNetworkUpdatedEvent),
  isParaswapQuote: () => (/* reexport safe */ _SwapProvider__WEBPACK_IMPORTED_MODULE_20__.isParaswapQuote),
  isParaswapSwapParams: () => (/* reexport safe */ _SwapProvider__WEBPACK_IMPORTED_MODULE_20__.isParaswapSwapParams),
  networkChanged: () => (/* reexport safe */ _NetworkProvider__WEBPACK_IMPORTED_MODULE_14__.networkChanged),
  networkChanges: () => (/* reexport safe */ _NetworkProvider__WEBPACK_IMPORTED_MODULE_14__.networkChanges),
  networksUpdatedEventListener: () => (/* reexport safe */ _NetworkProvider__WEBPACK_IMPORTED_MODULE_14__.networksUpdatedEventListener),
  useAccountManager: () => (/* reexport safe */ _AccountManagerProvider__WEBPACK_IMPORTED_MODULE_26__.useAccountManager),
  useAccountsContext: () => (/* reexport safe */ _AccountsProvider__WEBPACK_IMPORTED_MODULE_0__.useAccountsContext),
  useAnalyticsContext: () => (/* reexport safe */ _AnalyticsProvider__WEBPACK_IMPORTED_MODULE_1__.useAnalyticsContext),
  useApprovalsContext: () => (/* reexport safe */ _ApprovalsProvider__WEBPACK_IMPORTED_MODULE_2__.useApprovalsContext),
  useBalancesContext: () => (/* reexport safe */ _BalancesProvider__WEBPACK_IMPORTED_MODULE_3__.useBalancesContext),
  useBridgeContext: () => (/* reexport safe */ _BridgeProvider__WEBPACK_IMPORTED_MODULE_4__.useBridgeContext),
  useConnectionContext: () => (/* reexport safe */ _ConnectionProvider__WEBPACK_IMPORTED_MODULE_5__.useConnectionContext),
  useContactsContext: () => (/* reexport safe */ _ContactsProvider__WEBPACK_IMPORTED_MODULE_6__.useContactsContext),
  useCurrenciesContext: () => (/* reexport safe */ _CurrenciesProvider__WEBPACK_IMPORTED_MODULE_7__.useCurrenciesContext),
  useDefiContext: () => (/* reexport safe */ _DefiProvider__WEBPACK_IMPORTED_MODULE_8__.useDefiContext),
  useFeatureFlagContext: () => (/* reexport safe */ _FeatureFlagsProvider__WEBPACK_IMPORTED_MODULE_9__.useFeatureFlagContext),
  useFirebaseContext: () => (/* reexport safe */ _FirebaseProvider__WEBPACK_IMPORTED_MODULE_10__.useFirebaseContext),
  useKeystoneContext: () => (/* reexport safe */ _KeystoneProvider__WEBPACK_IMPORTED_MODULE_11__.useKeystoneContext),
  useLedgerContext: () => (/* reexport safe */ _LedgerProvider__WEBPACK_IMPORTED_MODULE_12__.useLedgerContext),
  useNetworkContext: () => (/* reexport safe */ _NetworkProvider__WEBPACK_IMPORTED_MODULE_14__.useNetworkContext),
  useNetworkFeeContext: () => (/* reexport safe */ _NetworkFeeProvider__WEBPACK_IMPORTED_MODULE_13__.useNetworkFeeContext),
  useNotificationsContext: () => (/* reexport safe */ _NotificationsProvider__WEBPACK_IMPORTED_MODULE_15__.useNotificationsContext),
  useOnboardingContext: () => (/* reexport safe */ _OnboardingProvider__WEBPACK_IMPORTED_MODULE_16__.useOnboardingContext),
  usePermissionContext: () => (/* reexport safe */ _PermissionsProvider__WEBPACK_IMPORTED_MODULE_17__.usePermissionContext),
  useSeedlessMfaManager: () => (/* reexport safe */ _SeedlessMfaManagementProvider__WEBPACK_IMPORTED_MODULE_18__.useSeedlessMfaManager),
  useSettingsContext: () => (/* reexport safe */ _SettingsProvider__WEBPACK_IMPORTED_MODULE_19__.useSettingsContext),
  useSwapContext: () => (/* reexport safe */ _SwapProvider__WEBPACK_IMPORTED_MODULE_20__.useSwapContext),
  useUnifiedBridgeContext: () => (/* reexport safe */ _UnifiedBridgeProvider__WEBPACK_IMPORTED_MODULE_21__.useUnifiedBridgeContext),
  useWalletConnectContext: () => (/* reexport safe */ _WalletConnectContextProvider__WEBPACK_IMPORTED_MODULE_23__.useWalletConnectContext),
  useWalletContext: () => (/* reexport safe */ _WalletProvider__WEBPACK_IMPORTED_MODULE_24__.useWalletContext),
  useWalletTotalBalanceContext: () => (/* reexport safe */ _WalletTotalBalanceProvider__WEBPACK_IMPORTED_MODULE_25__.useWalletTotalBalanceContext)
});
/* ESM import */var _AccountsProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/ui/src/contexts/AccountsProvider/index.tsx");
/* ESM import */var _AnalyticsProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/ui/src/contexts/AnalyticsProvider/index.tsx");
/* ESM import */var _ApprovalsProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/ui/src/contexts/ApprovalsProvider/index.tsx");
/* ESM import */var _BalancesProvider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../packages/ui/src/contexts/BalancesProvider/index.tsx");
/* ESM import */var _BridgeProvider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../packages/ui/src/contexts/BridgeProvider.tsx");
/* ESM import */var _ConnectionProvider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../packages/ui/src/contexts/ConnectionProvider.tsx");
/* ESM import */var _ContactsProvider__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../../packages/ui/src/contexts/ContactsProvider/index.tsx");
/* ESM import */var _CurrenciesProvider__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../../packages/ui/src/contexts/CurrenciesProvider/index.tsx");
/* ESM import */var _DefiProvider__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("../../packages/ui/src/contexts/DefiProvider/index.tsx");
/* ESM import */var _FeatureFlagsProvider__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("../../packages/ui/src/contexts/FeatureFlagsProvider/index.tsx");
/* ESM import */var _FirebaseProvider__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("../../packages/ui/src/contexts/FirebaseProvider.tsx");
/* ESM import */var _KeystoneProvider__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__("../../packages/ui/src/contexts/KeystoneProvider.tsx");
/* ESM import */var _LedgerProvider__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__("../../packages/ui/src/contexts/LedgerProvider/index.tsx");
/* ESM import */var _NetworkFeeProvider__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__("../../packages/ui/src/contexts/NetworkFeeProvider/index.ts");
/* ESM import */var _NetworkProvider__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__("../../packages/ui/src/contexts/NetworkProvider/index.tsx");
/* ESM import */var _NotificationsProvider__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__("../../packages/ui/src/contexts/NotificationsProvider.tsx");
/* ESM import */var _OnboardingProvider__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__("../../packages/ui/src/contexts/OnboardingProvider/index.tsx");
/* ESM import */var _PermissionsProvider__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__("../../packages/ui/src/contexts/PermissionsProvider/index.tsx");
/* ESM import */var _SeedlessMfaManagementProvider__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__("../../packages/ui/src/contexts/SeedlessMfaManagementProvider.tsx");
/* ESM import */var _SettingsProvider__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__("../../packages/ui/src/contexts/SettingsProvider/index.tsx");
/* ESM import */var _SwapProvider__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__("../../packages/ui/src/contexts/SwapProvider/index.tsx");
/* ESM import */var _UnifiedBridgeProvider__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__("../../packages/ui/src/contexts/UnifiedBridgeProvider.tsx");
/* ESM import */var _utils_getCurrencyFormatter__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__("../../packages/ui/src/contexts/utils/getCurrencyFormatter.ts");
/* ESM import */var _WalletConnectContextProvider__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__("../../packages/ui/src/contexts/WalletConnectContextProvider/index.ts");
/* ESM import */var _WalletProvider__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__("../../packages/ui/src/contexts/WalletProvider.tsx");
/* ESM import */var _WalletTotalBalanceProvider__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__("../../packages/ui/src/contexts/WalletTotalBalanceProvider.tsx");
/* ESM import */var _AccountManagerProvider__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__("../../packages/ui/src/contexts/AccountManagerProvider.tsx");





























}),
"../../packages/ui/src/contexts/isSubscriptionsChangedEvent.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isSubscriptionsChangedEvent: () => (isSubscriptionsChangedEvent)
});
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/types/src/index.ts");

function isSubscriptionsChangedEvent(evt) {
    return evt.name === _core_types__WEBPACK_IMPORTED_MODULE_0__.SubscriptionEvents.SUBSCRIPTIONS_CHANGED_EVENT;
}


}),
"../../packages/ui/src/contexts/utils/connectionResponseMapper.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  connectionRequest: () => (connectionRequest),
  connectionResponseHandler: () => (connectionResponseHandler),
  requestEngine: () => (requestEngine)
});
/* ESM import */var _core_messaging_src_serialization_deserialize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/messaging/src/serialization/deserialize.ts");
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/common/src/index.ts");
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/Subject.js");
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/firstValueFrom.js");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var _core_messaging__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../packages/messaging/src/index.ts");





const responseMap = new Map();
const sessionId = crypto.randomUUID();
function connectionRequest(request) {
    const responseHandler = new rxjs__WEBPACK_IMPORTED_MODULE_4__.Subject();
    responseMap.set(request.id, responseHandler);
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.firstValueFrom)(responseHandler);
}
function connectionResponseHandler(eventHandler) {
    return (message)=>{
        const deserializedMessage = (0,_core_messaging_src_serialization_deserialize__WEBPACK_IMPORTED_MODULE_0__.deserializeFromJSON)(message);
        if (deserializedMessage && (0,_core_types__WEBPACK_IMPORTED_MODULE_2__.isConnectionEvent)(deserializedMessage)) {
            if (!eventHandler) return;
            eventHandler.next(deserializedMessage);
        } else if (deserializedMessage && (0,_core_types__WEBPACK_IMPORTED_MODULE_2__.isConnectionResponse)(deserializedMessage)) {
            const responseHandler = responseMap.get(deserializedMessage.id);
            responseHandler?.next(deserializedMessage);
            responseMap.delete(deserializedMessage.id);
        }
    };
}
function requestEngine(connection, eventHandler) {
    const connectionResponseHandlerInstance = connectionResponseHandler(eventHandler);
    connection.onMessage.addListener(connectionResponseHandlerInstance);
    connection.onDisconnect.addListener(function onRequestEngineDisconnect() {
        connection.onMessage.removeListener(connectionResponseHandlerInstance);
        connection.onDisconnect.removeListener(onRequestEngineDisconnect);
    });
    return async (request, scope, context)=>{
        const id = `${request.method}-${Math.floor(Math.random() * 10000000)}`;
        const requestWithId = {
            id,
            jsonrpc: '2.0',
            method: 'provider_request',
            params: {
                sessionId,
                scope,
                request: {
                    id,
                    params: [],
                    ...request
                }
            },
            context
        };
        const response = connectionRequest(requestWithId);
        if ((0,_core_common__WEBPACK_IMPORTED_MODULE_1__.isDevelopment)()) {
            (0,_core_common__WEBPACK_IMPORTED_MODULE_1__.requestLog)(`Extension Request  (${requestWithId.params.request.method})`, requestWithId);
        }
        connection.postMessage((0,_core_messaging__WEBPACK_IMPORTED_MODULE_3__.serializeToJSON)(requestWithId));
        response.then((res)=>{
            if ((0,_core_common__WEBPACK_IMPORTED_MODULE_1__.isDevelopment)()) {
                (0,_core_common__WEBPACK_IMPORTED_MODULE_1__.responseLog)(`Extension Response (${res.method})`, res);
            }
            return res;
        });
        return response;
    };
}


}),
"../../packages/ui/src/contexts/utils/getCurrencyFormatter.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getCurrencyFormatter: () => (getCurrencyFormatter)
});
const getCurrencyFormatter = (currency = 'USD')=>{
    /**
   * For performance reasons we want to instantiate this as little as possible
   */ const formatter = new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: currency,
        currencyDisplay: 'narrowSymbol',
        maximumFractionDigits: 6
    });
    return (amount)=>{
        const minAmount = 0.001;
        const isTooSmall = amount < minAmount && amount > 0 ? true : false;
        const prefixString = isTooSmall ? '<' : '';
        const transformedAmount = isTooSmall ? minAmount : modifyFractionNumber(amount);
        const parts = formatter.formatToParts(transformedAmount);
        /**
     *  This formats the currency to return
     *  <symbol><amount>
     *  ex. $10.00, €10.00
     * if the (ie. CHF) matches the the it returns
     * <amount><symbol>
     * ex. 10 CHF
     */ if (parts[0]?.value === currency) {
            const flatArray = parts.map((x)=>x.value);
            flatArray.push(` ${flatArray.shift() || ''}`);
            return flatArray.join('').trim();
        }
        return `${prefixString}${formatter.format(transformedAmount)}`;
    };
};
const modifyFractionNumber = (amount)=>{
    const [integer, fraction] = parseScientificNotation(amount.toString());
    if (!fraction) {
        return amount;
    }
    const maxFractionLengt = Number(integer) === 0 ? 3 : 2; // Only show 3 decimals we're below $1 (or other currency)
    const lastNonZeroFractionIndex = maxFractionLengt - (fraction?.split('').reverse().findIndex((value)=>value !== '0') || 0);
    return parseFloat(`${integer}.${fraction?.slice(0, lastNonZeroFractionIndex)}`);
};
const parseScientificNotation = (amount)=>{
    // When the number is extremely small or big we don't want to take care of it at the moment
    if (amount.toString().includes('e') && amount.toString().includes('-')) {
        return [
            '0',
            '001'
        ];
    }
    if (amount.toString().includes('e') && amount.toString().includes('+')) {
        return [
            'Infinity',
            'Infinity'
        ];
    }
    return amount.toString().split('.');
};


}),
"../../packages/ui/src/contexts/utils/getLedgerTransport.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getLedgerTransport: () => (getLedgerTransport)
});
/* ESM import */var _ledgerhq_hw_transport_webusb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/@ledgerhq/hw-transport-webusb/lib-es/TransportWebUSB.js");
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/common/src/index.ts");



async function getLedgerTransport() {
    const [usbTransport, error] = await (0,_core_common__WEBPACK_IMPORTED_MODULE_1__.resolve)(_ledgerhq_hw_transport_webusb__WEBPACK_IMPORTED_MODULE_0__["default"].openConnected());
    if (usbTransport) {
        return usbTransport;
    }
    if (error) {
        _core_common__WEBPACK_IMPORTED_MODULE_1__.Monitoring.sentryCaptureException(error, _core_common__WEBPACK_IMPORTED_MODULE_1__.Monitoring.SentryExceptionTypes.LEDGER);
        console.error('Unable to open ledger transport', error);
    }
    return null;
}


}),
"../../packages/ui/src/hooks/index.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  AuthStep: () => (/* reexport safe */ _useSeedlessAuth__WEBPACK_IMPORTED_MODULE_37__.AuthStep),
  ExportErrorCode: () => (/* reexport safe */ _useSeedlessMnemonicExport__WEBPACK_IMPORTED_MODULE_39__.ExportErrorCode),
  ExportState: () => (/* reexport safe */ _useSeedlessMnemonicExport__WEBPACK_IMPORTED_MODULE_39__.ExportState),
  FunctionNames: () => (/* reexport safe */ _useIsFunctionAvailable__WEBPACK_IMPORTED_MODULE_18__.FunctionNames),
  useAnalyticsConsentCallbacks: () => (/* reexport safe */ _useAnalyticsConsentCallbacks__WEBPACK_IMPORTED_MODULE_0__.useAnalyticsConsentCallbacks),
  useAppDimensions: () => (/* reexport safe */ _useAppDimensions__WEBPACK_IMPORTED_MODULE_1__.useAppDimensions),
  useAppTypeFromParams: () => (/* reexport safe */ _useAppTypeFromParams__WEBPACK_IMPORTED_MODULE_69__.useAppTypeFromParams),
  useApprovalHelpers: () => (/* reexport safe */ _useApprovalHelpers__WEBPACK_IMPORTED_MODULE_2__.useApprovalHelpers),
  useApproveAction: () => (/* reexport safe */ _useApproveAction__WEBPACK_IMPORTED_MODULE_3__.useApproveAction),
  useBalanceTotalInCurrency: () => (/* reexport safe */ _useBalanceTotalInCurrency__WEBPACK_IMPORTED_MODULE_4__.useBalanceTotalInCurrency),
  useBridge: () => (/* reexport safe */ _useBridge__WEBPACK_IMPORTED_MODULE_59__.useBridge),
  useBridgeAmounts: () => (/* reexport safe */ _useBridgeAmounts__WEBPACK_IMPORTED_MODULE_60__.useBridgeAmounts),
  useBridgeNetworkPrice: () => (/* reexport safe */ _useBridgeNetworkPrice__WEBPACK_IMPORTED_MODULE_61__.useBridgeNetworkPrice),
  useBridgeTransferStatus: () => (/* reexport safe */ _useBridgeTransferStatus__WEBPACK_IMPORTED_MODULE_62__.useBridgeTransferStatus),
  useBridgeTxHandling: () => (/* reexport safe */ _useBridgeTxHandling__WEBPACK_IMPORTED_MODULE_63__.useBridgeTxHandling),
  useCameraPermissions: () => (/* reexport safe */ _useCameraPermissions__WEBPACK_IMPORTED_MODULE_5__.useCameraPermissions),
  useCoinGeckoId: () => (/* reexport safe */ _useCoinGeckoId__WEBPACK_IMPORTED_MODULE_6__.useCoinGeckoId),
  useContactIdFromParams: () => (/* reexport safe */ _useContactIdFromParams__WEBPACK_IMPORTED_MODULE_7__.useContactIdFromParams),
  useConvertedCurrencyFormatter: () => (/* reexport safe */ _useConvertedCurrencyFormatter__WEBPACK_IMPORTED_MODULE_68__.useConvertedCurrencyFormatter),
  useDAppScan: () => (/* reexport safe */ _useDAppScan__WEBPACK_IMPORTED_MODULE_8__.useDAppScan),
  useDismissedBanners: () => (/* reexport safe */ _useDismissedBanners__WEBPACK_IMPORTED_MODULE_9__.useDismissedBanners),
  useDisplaytokenlist: () => (/* reexport safe */ _useDisplayTokenList__WEBPACK_IMPORTED_MODULE_10__.useDisplaytokenlist),
  useErrorMessage: () => (/* reexport safe */ _useErrorMessage__WEBPACK_IMPORTED_MODULE_11__.useErrorMessage),
  useFidoErrorMessage: () => (/* reexport safe */ _useFidoErrorMessage__WEBPACK_IMPORTED_MODULE_12__.useFidoErrorMessage),
  useGetAvaxBalance: () => (/* reexport safe */ _useGetAvaxBalance__WEBPACK_IMPORTED_MODULE_13__.useGetAvaxBalance),
  useGetRequestId: () => (/* reexport safe */ _useGetRequestId__WEBPACK_IMPORTED_MODULE_14__.useGetRequestId),
  useGetSolBalance: () => (/* reexport safe */ _useGetSolBalance__WEBPACK_IMPORTED_MODULE_15__.useGetSolBalance),
  useGoBack: () => (/* reexport safe */ _useGoBack__WEBPACK_IMPORTED_MODULE_16__.useGoBack),
  useHasEnoughForGas: () => (/* reexport safe */ _useHasEnoughtForGas__WEBPACK_IMPORTED_MODULE_64__.useHasEnoughForGas),
  useImportLedger: () => (/* reexport safe */ _useImportLedger__WEBPACK_IMPORTED_MODULE_58__.useImportLedger),
  useImportSeedphrase: () => (/* reexport safe */ _useImportSeedphrase__WEBPACK_IMPORTED_MODULE_57__.useImportSeedphrase),
  useInterval: () => (/* reexport safe */ _useInterval__WEBPACK_IMPORTED_MODULE_17__.useInterval),
  useIsFunctionAvailable: () => (/* reexport safe */ _useIsFunctionAvailable__WEBPACK_IMPORTED_MODULE_18__.useIsFunctionAvailable),
  useIsIncorrectDevice: () => (/* reexport safe */ _useIsIncorrectDevice__WEBPACK_IMPORTED_MODULE_70__.useIsIncorrectDevice),
  useIsMainnet: () => (/* reexport safe */ _useIsMainnet__WEBPACK_IMPORTED_MODULE_19__.useIsMainnet),
  useIsSolanaEnabled: () => (/* reexport safe */ _useIsSolanaEnabled__WEBPACK_IMPORTED_MODULE_20__.useIsSolanaEnabled),
  useIsSpecificContextContainer: () => (/* reexport safe */ _useIsSpecificContextContainer__WEBPACK_IMPORTED_MODULE_21__.useIsSpecificContextContainer),
  useIsUsingFireblocksAccount: () => (/* reexport safe */ _useIsUsingFireblocksAccount__WEBPACK_IMPORTED_MODULE_22__.useIsUsingFireblocksAccount),
  useIsUsingKeystoneWallet: () => (/* reexport safe */ _useIsUsingKeystoneWallet__WEBPACK_IMPORTED_MODULE_23__.useIsUsingKeystoneWallet),
  useIsUsingLedgerWallet: () => (/* reexport safe */ _useIsUsingLedgerWallet__WEBPACK_IMPORTED_MODULE_24__.useIsUsingLedgerWallet),
  useIsUsingSeedlessAccount: () => (/* reexport safe */ _useIsUsingSeedlessAccount__WEBPACK_IMPORTED_MODULE_25__.useIsUsingSeedlessAccount),
  useIsUsingWalletConnectAccount: () => (/* reexport safe */ _useIsUsingWalletConnectAccount__WEBPACK_IMPORTED_MODULE_26__.useIsUsingWalletConnectAccount),
  useJsonFileReader: () => (/* reexport safe */ _useJsonFileReader__WEBPACK_IMPORTED_MODULE_56__.useJsonFileReader),
  useKeyboardShortcuts: () => (/* reexport safe */ _useKeyboardShortcuts__WEBPACK_IMPORTED_MODULE_27__.useKeyboardShortcuts),
  useKeystoreFileImport: () => (/* reexport safe */ _useKeystoreFileImport__WEBPACK_IMPORTED_MODULE_55__.useKeystoreFileImport),
  useLanguage: () => (/* reexport safe */ _useLanguages__WEBPACK_IMPORTED_MODULE_28__.useLanguage),
  useLiveBalance: () => (/* reexport safe */ _useLiveBalance__WEBPACK_IMPORTED_MODULE_29__.useLiveBalance),
  useLocalStorage: () => (/* reexport safe */ _useLocalStorage__WEBPACK_IMPORTED_MODULE_30__.useLocalStorage),
  useLogoUriForBridgeTransaction: () => (/* reexport safe */ _useLogoUriForBridgeTransaction__WEBPACK_IMPORTED_MODULE_65__.useLogoUriForBridgeTransaction),
  useNativeTokenPrice: () => (/* reexport safe */ _useTokenPrice__WEBPACK_IMPORTED_MODULE_45__.useNativeTokenPrice),
  useNfts: () => (/* reexport safe */ _useNfts__WEBPACK_IMPORTED_MODULE_31__.useNfts),
  useOnline: () => (/* reexport safe */ _useOnline__WEBPACK_IMPORTED_MODULE_32__.useOnline),
  usePageHistory: () => (/* reexport safe */ _usePageHistory__WEBPACK_IMPORTED_MODULE_33__.usePageHistory),
  usePendingBridgeTransactions: () => (/* reexport safe */ _usePendingBridgeTransactions__WEBPACK_IMPORTED_MODULE_66__.usePendingBridgeTransactions),
  usePersistedTabs: () => (/* reexport safe */ _usePersistedTabs__WEBPACK_IMPORTED_MODULE_34__.usePersistedTabs),
  usePreferredColorScheme: () => (/* reexport safe */ _usePreferredColorScheme__WEBPACK_IMPORTED_MODULE_35__.usePreferredColorScheme),
  usePrivateKeyExport: () => (/* reexport safe */ _usePrivateKeyExport__WEBPACK_IMPORTED_MODULE_54__.usePrivateKeyExport),
  usePrivateKeyImport: () => (/* reexport safe */ _usePrivateKeyImport__WEBPACK_IMPORTED_MODULE_53__.usePrivateKeyImport),
  useQueryParams: () => (/* reexport safe */ _useQueryParams__WEBPACK_IMPORTED_MODULE_36__.useQueryParams),
  useRegisterBtcWalletPolicy: () => (/* reexport safe */ _useRegisterBtcWalletPolicy__WEBPACK_IMPORTED_MODULE_71__.useRegisterBtcWalletPolicy),
  useSeedlessActions: () => (/* reexport safe */ _useSeedlessActions__WEBPACK_IMPORTED_MODULE_73__.useSeedlessActions),
  useSeedlessAuth: () => (/* reexport safe */ _useSeedlessAuth__WEBPACK_IMPORTED_MODULE_37__.useSeedlessAuth),
  useSeedlessAuthPromptState: () => (/* reexport safe */ _useSeedlessAuthPromptState__WEBPACK_IMPORTED_MODULE_38__.useSeedlessAuthPromptState),
  useSeedlessMnemonicExport: () => (/* reexport safe */ _useSeedlessMnemonicExport__WEBPACK_IMPORTED_MODULE_39__.useSeedlessMnemonicExport),
  useSendAnalyticsData: () => (/* reexport safe */ _useSendAnalyticsData__WEBPACK_IMPORTED_MODULE_40__.useSendAnalyticsData),
  useSetSendDataInParams: () => (/* reexport safe */ _useSetSendDataInParams__WEBPACK_IMPORTED_MODULE_41__.useSetSendDataInParams),
  useSolanaAddressInfo: () => (/* reexport safe */ _useSolanaAddressInfo__WEBPACK_IMPORTED_MODULE_42__.useSolanaAddressInfo),
  useSolanaPublicKeys: () => (/* reexport safe */ _useSolanaPublicKeys__WEBPACK_IMPORTED_MODULE_72__.useSolanaPublicKeys),
  useSyncBridgeConfig: () => (/* reexport safe */ _useSyncBridgeConfig__WEBPACK_IMPORTED_MODULE_67__.useSyncBridgeConfig),
  useTabFromParams: () => (/* reexport safe */ _useTabFromParams__WEBPACK_IMPORTED_MODULE_43__.useTabFromParams),
  useTokenFromParams: () => (/* reexport safe */ _useTokenFromParams__WEBPACK_IMPORTED_MODULE_44__.useTokenFromParams),
  useTokenPriceMissing: () => (/* reexport safe */ _useTokenPriceIsMissing__WEBPACK_IMPORTED_MODULE_46__.useTokenPriceMissing),
  useTokensWithBalances: () => (/* reexport safe */ _useTokensWithBalances__WEBPACK_IMPORTED_MODULE_47__.useTokensWithBalances),
  useTotpErrorMessage: () => (/* reexport safe */ _useTotpErrorMessage__WEBPACK_IMPORTED_MODULE_48__.useTotpErrorMessage),
  useWalletName: () => (/* reexport safe */ _useWalletName__WEBPACK_IMPORTED_MODULE_51__.useWalletName),
  useWalletTotalBalance: () => (/* reexport safe */ _useWalletTotalBalance__WEBPACK_IMPORTED_MODULE_52__.useWalletTotalBalance),
  useWillSwitchToPrimaryAccount: () => (/* reexport safe */ _useWillSwitchToPrimaryAccount__WEBPACK_IMPORTED_MODULE_49__.useWillSwitchToPrimaryAccount),
  useWindowGetsClosedOrHidden: () => (/* reexport safe */ _useWindowGetsClosedOrHidden__WEBPACK_IMPORTED_MODULE_50__.useWindowGetsClosedOrHidden)
});
/* ESM import */var _useAnalyticsConsentCallbacks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/ui/src/hooks/useAnalyticsConsentCallbacks.ts");
/* ESM import */var _useAppDimensions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/ui/src/hooks/useAppDimensions.ts");
/* ESM import */var _useApprovalHelpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/ui/src/hooks/useApprovalHelpers.ts");
/* ESM import */var _useApproveAction__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../packages/ui/src/hooks/useApproveAction.ts");
/* ESM import */var _useBalanceTotalInCurrency__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../packages/ui/src/hooks/useBalanceTotalInCurrency.ts");
/* ESM import */var _useCameraPermissions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../packages/ui/src/hooks/useCameraPermissions.ts");
/* ESM import */var _useCoinGeckoId__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../../packages/ui/src/hooks/useCoinGeckoId.ts");
/* ESM import */var _useContactIdFromParams__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../../packages/ui/src/hooks/useContactIdFromParams.ts");
/* ESM import */var _useDAppScan__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("../../packages/ui/src/hooks/useDAppScan.ts");
/* ESM import */var _useDismissedBanners__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("../../packages/ui/src/hooks/useDismissedBanners.ts");
/* ESM import */var _useDisplayTokenList__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("../../packages/ui/src/hooks/useDisplayTokenList.ts");
/* ESM import */var _useErrorMessage__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__("../../packages/ui/src/hooks/useErrorMessage.ts");
/* ESM import */var _useFidoErrorMessage__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__("../../packages/ui/src/hooks/useFidoErrorMessage.ts");
/* ESM import */var _useGetAvaxBalance__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__("../../packages/ui/src/hooks/useGetAvaxBalance.ts");
/* ESM import */var _useGetRequestId__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__("../../packages/ui/src/hooks/useGetRequestId.ts");
/* ESM import */var _useGetSolBalance__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__("../../packages/ui/src/hooks/useGetSolBalance.ts");
/* ESM import */var _useGoBack__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__("../../packages/ui/src/hooks/useGoBack.ts");
/* ESM import */var _useInterval__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__("../../packages/ui/src/hooks/useInterval.ts");
/* ESM import */var _useIsFunctionAvailable__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__("../../packages/ui/src/hooks/useIsFunctionAvailable.ts");
/* ESM import */var _useIsMainnet__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__("../../packages/ui/src/hooks/useIsMainnet.ts");
/* ESM import */var _useIsSolanaEnabled__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__("../../packages/ui/src/hooks/useIsSolanaEnabled.ts");
/* ESM import */var _useIsSpecificContextContainer__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__("../../packages/ui/src/hooks/useIsSpecificContextContainer.ts");
/* ESM import */var _useIsUsingFireblocksAccount__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__("../../packages/ui/src/hooks/useIsUsingFireblocksAccount.ts");
/* ESM import */var _useIsUsingKeystoneWallet__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__("../../packages/ui/src/hooks/useIsUsingKeystoneWallet.ts");
/* ESM import */var _useIsUsingLedgerWallet__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__("../../packages/ui/src/hooks/useIsUsingLedgerWallet.ts");
/* ESM import */var _useIsUsingSeedlessAccount__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__("../../packages/ui/src/hooks/useIsUsingSeedlessAccount.ts");
/* ESM import */var _useIsUsingWalletConnectAccount__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__("../../packages/ui/src/hooks/useIsUsingWalletConnectAccount.ts");
/* ESM import */var _useKeyboardShortcuts__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__("../../packages/ui/src/hooks/useKeyboardShortcuts.ts");
/* ESM import */var _useLanguages__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__("../../packages/ui/src/hooks/useLanguages.ts");
/* ESM import */var _useLiveBalance__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__("../../packages/ui/src/hooks/useLiveBalance.ts");
/* ESM import */var _useLocalStorage__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__("../../packages/ui/src/hooks/useLocalStorage.ts");
/* ESM import */var _useNfts__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__("../../packages/ui/src/hooks/useNfts.ts");
/* ESM import */var _useOnline__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__("../../packages/ui/src/hooks/useOnline.ts");
/* ESM import */var _usePageHistory__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__("../../packages/ui/src/hooks/usePageHistory.ts");
/* ESM import */var _usePersistedTabs__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__("../../packages/ui/src/hooks/usePersistedTabs.ts");
/* ESM import */var _usePreferredColorScheme__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__("../../packages/ui/src/hooks/usePreferredColorScheme.ts");
/* ESM import */var _useQueryParams__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__("../../packages/ui/src/hooks/useQueryParams.ts");
/* ESM import */var _useSeedlessAuth__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__("../../packages/ui/src/hooks/useSeedlessAuth.ts");
/* ESM import */var _useSeedlessAuthPromptState__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__("../../packages/ui/src/hooks/useSeedlessAuthPromptState.ts");
/* ESM import */var _useSeedlessMnemonicExport__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__("../../packages/ui/src/hooks/useSeedlessMnemonicExport.ts");
/* ESM import */var _useSendAnalyticsData__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__("../../packages/ui/src/hooks/useSendAnalyticsData.ts");
/* ESM import */var _useSetSendDataInParams__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__("../../packages/ui/src/hooks/useSetSendDataInParams.ts");
/* ESM import */var _useSolanaAddressInfo__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__("../../packages/ui/src/hooks/useSolanaAddressInfo.ts");
/* ESM import */var _useTabFromParams__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__("../../packages/ui/src/hooks/useTabFromParams.ts");
/* ESM import */var _useTokenFromParams__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__("../../packages/ui/src/hooks/useTokenFromParams.ts");
/* ESM import */var _useTokenPrice__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__("../../packages/ui/src/hooks/useTokenPrice.ts");
/* ESM import */var _useTokenPriceIsMissing__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__("../../packages/ui/src/hooks/useTokenPriceIsMissing.ts");
/* ESM import */var _useTokensWithBalances__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__("../../packages/ui/src/hooks/useTokensWithBalances.ts");
/* ESM import */var _useTotpErrorMessage__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__("../../packages/ui/src/hooks/useTotpErrorMessage.ts");
/* ESM import */var _useWillSwitchToPrimaryAccount__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__("../../packages/ui/src/hooks/useWillSwitchToPrimaryAccount.ts");
/* ESM import */var _useWindowGetsClosedOrHidden__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__("../../packages/ui/src/hooks/useWindowGetsClosedOrHidden.ts");
/* ESM import */var _useWalletName__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__("../../packages/ui/src/hooks/useWalletName.ts");
/* ESM import */var _useWalletTotalBalance__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__("../../packages/ui/src/hooks/useWalletTotalBalance.ts");
/* ESM import */var _usePrivateKeyImport__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__("../../packages/ui/src/hooks/usePrivateKeyImport.ts");
/* ESM import */var _usePrivateKeyExport__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__("../../packages/ui/src/hooks/usePrivateKeyExport.ts");
/* ESM import */var _useKeystoreFileImport__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__("../../packages/ui/src/hooks/useKeystoreFileImport.ts");
/* ESM import */var _useJsonFileReader__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__("../../packages/ui/src/hooks/useJsonFileReader.ts");
/* ESM import */var _useImportSeedphrase__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__("../../packages/ui/src/hooks/useImportSeedphrase.ts");
/* ESM import */var _useImportLedger__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__("../../packages/ui/src/hooks/useImportLedger.ts");
/* ESM import */var _useBridge__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__("../../packages/ui/src/hooks/useBridge.ts");
/* ESM import */var _useBridgeAmounts__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__("../../packages/ui/src/hooks/useBridgeAmounts.ts");
/* ESM import */var _useBridgeNetworkPrice__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__("../../packages/ui/src/hooks/useBridgeNetworkPrice.ts");
/* ESM import */var _useBridgeTransferStatus__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__("../../packages/ui/src/hooks/useBridgeTransferStatus.ts");
/* ESM import */var _useBridgeTxHandling__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__("../../packages/ui/src/hooks/useBridgeTxHandling.ts");
/* ESM import */var _useHasEnoughtForGas__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__("../../packages/ui/src/hooks/useHasEnoughtForGas.ts");
/* ESM import */var _useLogoUriForBridgeTransaction__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__("../../packages/ui/src/hooks/useLogoUriForBridgeTransaction.ts");
/* ESM import */var _usePendingBridgeTransactions__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__("../../packages/ui/src/hooks/usePendingBridgeTransactions.ts");
/* ESM import */var _useSyncBridgeConfig__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__("../../packages/ui/src/hooks/useSyncBridgeConfig.ts");
/* ESM import */var _useConvertedCurrencyFormatter__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__("../../packages/ui/src/hooks/useConvertedCurrencyFormatter.ts");
/* ESM import */var _useAppTypeFromParams__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__("../../packages/ui/src/hooks/useAppTypeFromParams.ts");
/* ESM import */var _useIsIncorrectDevice__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__("../../packages/ui/src/hooks/useIsIncorrectDevice.ts");
/* ESM import */var _useRegisterBtcWalletPolicy__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__("../../packages/ui/src/hooks/useRegisterBtcWalletPolicy.ts");
/* ESM import */var _useSolanaPublicKeys__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__("../../packages/ui/src/hooks/useSolanaPublicKeys.ts");
/* ESM import */var _useSeedlessActions__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__("../../packages/ui/src/hooks/useSeedlessActions.ts");













































































}),
"../../packages/ui/src/hooks/useAnalyticsConsentCallbacks.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useAnalyticsConsentCallbacks: () => (useAnalyticsConsentCallbacks)
});
/* ESM import */var _contexts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/ui/src/contexts/index.ts");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);


const useAnalyticsConsentCallbacks = (origin)=>{
    const { setAnalyticsConsent } = (0,_contexts__WEBPACK_IMPORTED_MODULE_0__.useSettingsContext)();
    const { capture, captureEncrypted, isInitialized, initAnalyticsIds, stopDataCollection } = (0,_contexts__WEBPACK_IMPORTED_MODULE_0__.useAnalyticsContext)();
    const { allAccounts } = (0,_contexts__WEBPACK_IMPORTED_MODULE_0__.useAccountsContext)();
    const [isApproving, setIsApproving] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
    const [isRejecting, setIsRejecting] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
    const onApproval = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async ()=>{
        try {
            setIsApproving(true);
            const addresses = allAccounts.flatMap((acc)=>[
                    acc.addressC,
                    acc.addressBTC,
                    acc.addressAVM,
                    acc.addressPVM,
                    acc.addressCoreEth
                ]);
            await setAnalyticsConsent(true);
            // Do not override existing analytics IDs
            if (!isInitialized) {
                await initAnalyticsIds(true);
            }
            captureEncrypted('AnalyticsEnabled', {
                origin,
                addresses
            }, true);
        } finally{
            setIsApproving(false);
        }
    }, [
        allAccounts,
        captureEncrypted,
        initAnalyticsIds,
        isInitialized,
        origin,
        setAnalyticsConsent
    ]);
    const onRejection = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async ()=>{
        try {
            setIsRejecting(true);
            await capture('AnalyticsDisabled', {
                origin
            }); // Will only be reported if analytics was previously enabled.
            await setAnalyticsConsent(false);
            await stopDataCollection();
        } finally{
            setIsRejecting(false);
        }
    }, [
        capture,
        origin,
        setAnalyticsConsent,
        stopDataCollection
    ]);
    return {
        isApproving,
        isRejecting,
        onApproval,
        onRejection
    };
};


}),
"../../packages/ui/src/hooks/useAppDimensions.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useAppDimensions: () => (useAppDimensions)
});
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var _useIsSpecificContextContainer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/ui/src/hooks/useIsSpecificContextContainer.ts");


function useAppDimensions() {
    const isConfirm = (0,_useIsSpecificContextContainer__WEBPACK_IMPORTED_MODULE_1__.useIsSpecificContextContainer)(_core_types__WEBPACK_IMPORTED_MODULE_0__.ContextContainer.CONFIRM);
    const isMiniMode = (0,_useIsSpecificContextContainer__WEBPACK_IMPORTED_MODULE_1__.useIsSpecificContextContainer)(_core_types__WEBPACK_IMPORTED_MODULE_0__.ContextContainer.POPUP);
    const isFullscreen = (0,_useIsSpecificContextContainer__WEBPACK_IMPORTED_MODULE_1__.useIsSpecificContextContainer)(_core_types__WEBPACK_IMPORTED_MODULE_0__.ContextContainer.FULLSCREEN);
    if (isMiniMode) {
        return {
            height: '600px',
            width: '375px'
        };
    } else if (isConfirm) {
        return {
            height: '640px',
            width: '375px'
        };
    } else if (isFullscreen) {
        return {
            height: '100%',
            width: '100%'
        };
    }
    return {
        height: '',
        width: ''
    };
}


}),
"../../packages/ui/src/hooks/useAppTypeFromParams.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useAppTypeFromParams: () => (useAppTypeFromParams)
});
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var react_router_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/react-router/esm/react-router.js");
/* ESM import */var xss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/xss/lib/index.js");
/* ESM import */var xss__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(xss__WEBPACK_IMPORTED_MODULE_1__);



const useAppTypeFromParams = ()=>{
    const { search } = (0,react_router_dom__WEBPACK_IMPORTED_MODULE_2__.useLocation)();
    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{
        const { app } = Object.fromEntries(new URLSearchParams(search).entries());
        return xss__WEBPACK_IMPORTED_MODULE_1___default()(app);
    }, [
        search
    ]);
};


}),
"../../packages/ui/src/hooks/useApprovalHelpers.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useApprovalHelpers: () => (useApprovalHelpers)
});
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var _useIsUsingLedgerWallet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/ui/src/hooks/useIsUsingLedgerWallet.ts");
/* ESM import */var _useIsUsingKeystoneWallet__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/ui/src/hooks/useIsUsingKeystoneWallet.ts");
/* ESM import */var _useIsUsingWalletConnectAccount__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../packages/ui/src/hooks/useIsUsingWalletConnectAccount.ts");
/* ESM import */var _useIsUsingFireblocksAccount__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../packages/ui/src/hooks/useIsUsingFireblocksAccount.ts");





function useApprovalHelpers({ onApprove, onReject }) {
    const isUsingLedgerWallet = (0,_useIsUsingLedgerWallet__WEBPACK_IMPORTED_MODULE_1__.useIsUsingLedgerWallet)();
    const isUsingKeystoneWallet = (0,_useIsUsingKeystoneWallet__WEBPACK_IMPORTED_MODULE_2__.useIsUsingKeystoneWallet)();
    const isUsingWalletConnectAccount = (0,_useIsUsingWalletConnectAccount__WEBPACK_IMPORTED_MODULE_3__.useIsUsingWalletConnectAccount)();
    const isUsingFireblocksAccount = (0,_useIsUsingFireblocksAccount__WEBPACK_IMPORTED_MODULE_4__.useIsUsingFireblocksAccount)();
    const isTwoStepApproval = isUsingWalletConnectAccount || isUsingFireblocksAccount;
    const isUsingExternalSigner = isUsingLedgerWallet || isUsingKeystoneWallet || isUsingWalletConnectAccount || isUsingFireblocksAccount;
    const [isReadyToSign, setIsReadyToSign] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!isTwoStepApproval);
    const [isApprovalOverlayVisible, setIsApprovalOverlayVisible] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
    const handleApproval = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{
        setIsApprovalOverlayVisible(isUsingExternalSigner);
        // If it's a two-step approval, do not call `onApprove` yet.
        // Instead, just toggle the isReadyToSign flag so that it's
        // called on a 2nd click.
        if (isTwoStepApproval && !isReadyToSign) {
            setIsReadyToSign(true);
            return;
        }
        // This has to be awaited, otherwise the overlay would disappear immediately.
        await onApprove();
        setIsApprovalOverlayVisible(false);
    }, [
        isUsingExternalSigner,
        isTwoStepApproval,
        isReadyToSign,
        onApprove
    ]);
    const handleRejection = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{
        setIsApprovalOverlayVisible(false);
        if (isTwoStepApproval) {
            setIsReadyToSign(false);
        }
        await onReject();
    }, [
        isTwoStepApproval,
        onReject
    ]);
    return {
        isApprovalOverlayVisible,
        handleApproval,
        handleRejection
    };
}


}),
"../../packages/ui/src/hooks/useApproveAction.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useApproveAction: () => (useApproveAction)
});
/* ESM import */var _contexts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/ui/src/contexts/index.ts");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var _useIsSpecificContextContainer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/ui/src/hooks/useIsSpecificContextContainer.ts");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../packages/common/src/index.ts");
/* ESM import */var _useWindowGetsClosedOrHidden__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../packages/ui/src/hooks/useWindowGetsClosedOrHidden.ts");






function useApproveAction(actionId, isBatchApproval = false) {
    const { request } = (0,_contexts__WEBPACK_IMPORTED_MODULE_0__.useConnectionContext)();
    const isConfirmPopup = (0,_useIsSpecificContextContainer__WEBPACK_IMPORTED_MODULE_2__.useIsSpecificContextContainer)(_core_types__WEBPACK_IMPORTED_MODULE_1__.ContextContainer.CONFIRM);
    const { approval } = (0,_contexts__WEBPACK_IMPORTED_MODULE_0__.useApprovalsContext)();
    const [action, setAction] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)();
    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)('');
    const updateAction = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async (params, shouldWaitForResponse)=>{
        // We need to update the status a bit faster for smoother UX.
        // use function to avoid `action` as a dependency and thus infinite loops
        setAction((prevActionData)=>{
            if (!prevActionData) {
                return;
            }
            // For MultiTxAction, we don't allow any updates besides the status.
            if ((0,_core_types__WEBPACK_IMPORTED_MODULE_1__.isBatchApprovalAction)(prevActionData)) {
                return {
                    ...prevActionData,
                    status: params.status
                };
            }
            return {
                ...prevActionData,
                status: params.status,
                displayData: {
                    ...prevActionData.displayData,
                    ...params.displayData
                },
                signingData: (0,_core_common__WEBPACK_IMPORTED_MODULE_4__.getUpdatedSigningData)(prevActionData.signingData, params.signingData)
            };
        });
        const shouldCloseAfterUpdate = isConfirmPopup && params.status !== _core_types__WEBPACK_IMPORTED_MODULE_1__.ActionStatus.PENDING;
        return request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.ACTION_UPDATE,
            params: [
                params,
                shouldWaitForResponse
            ]
        }).finally(()=>{
            if (shouldCloseAfterUpdate) {
                globalThis.close();
            }
        });
    }, [
        request,
        isConfirmPopup
    ]);
    const cancelHandler = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async ()=>updateAction({
            status: _core_types__WEBPACK_IMPORTED_MODULE_1__.ActionStatus.ERROR_USER_CANCELED,
            id: actionId
        }), [
        actionId,
        updateAction
    ]);
    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{
        if (isConfirmPopup) {
            request({
                method: _core_types__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.ACTION_GET,
                params: [
                    actionId
                ]
            }).then((a)=>{
                if (isBatchApproval && !(0,_core_types__WEBPACK_IMPORTED_MODULE_1__.isBatchApprovalAction)(a)) {
                    setError('Expected a batch approval action');
                } else if (!isBatchApproval && (0,_core_types__WEBPACK_IMPORTED_MODULE_1__.isBatchApprovalAction)(a)) {
                    setError('Expected a single approval action');
                } else {
                    setAction(a);
                }
            });
        } else if (approval?.action.actionId === actionId) {
            setAction(approval.action);
        }
    }, [
        actionId,
        request,
        approval,
        isConfirmPopup,
        isBatchApproval
    ]);
    (0,_useWindowGetsClosedOrHidden__WEBPACK_IMPORTED_MODULE_5__.useWindowGetsClosedOrHidden)(cancelHandler);
    return {
        action,
        updateAction,
        error,
        cancelHandler
    };
}


}),
"../../packages/ui/src/hooks/useBalanceTotalInCurrency.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useBalanceTotalInCurrency: () => (useBalanceTotalInCurrency)
});
/* ESM import */var _contexts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/ui/src/contexts/index.ts");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);


function useBalanceTotalInCurrency(account) {
    const { getTotalBalance } = (0,_contexts__WEBPACK_IMPORTED_MODULE_0__.useBalancesContext)();
    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{
        if (!account?.addressC) {
            return null;
        }
        return getTotalBalance(account.addressC);
    }, [
        account?.addressC,
        getTotalBalance
    ]);
}


}),
"../../packages/ui/src/hooks/useBridge.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useBridge: () => (useBridge)
});
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/@avalabs/bridge-unified/dist/index.js");
/* ESM import */var _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/@avalabs/vm-module-types/dist/index.js");
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../packages/common/src/index.ts");
/* ESM import */var _contexts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../packages/ui/src/contexts/index.ts");
/* ESM import */var _useTokensWithBalances__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../packages/ui/src/hooks/useTokensWithBalances.ts");






function useBridge() {
    const { network, getNetwork } = (0,_contexts__WEBPACK_IMPORTED_MODULE_4__.useNetworkContext)();
    const { capture } = (0,_contexts__WEBPACK_IMPORTED_MODULE_4__.useAnalyticsContext)();
    const { availableChainIds, estimateTransferGas, getFee, isReady, transferableAssets, transferAsset, getMinimumTransferAmount } = (0,_contexts__WEBPACK_IMPORTED_MODULE_4__.useUnifiedBridgeContext)();
    const [amount, setAmount] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
    const [asset, setAsset] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
    const firstTargetChainId = Object.keys(asset?.destinations ?? {})[0] ?? '';
    const [targetChain, setTargetChain] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(firstTargetChainId ? getNetwork(firstTargetChainId) : undefined);
    const [receiveAmount, setReceiveAmount] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
    const [maximum, setMaximum] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
    const [minimum, setMinimum] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
    const [bridgeFee, setBridgeFee] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
    const balances = (0,_useTokensWithBalances__WEBPACK_IMPORTED_MODULE_5__.useTokensWithBalances)({
        network,
        forceShowTokensWithoutBalances: true
    });
    const bridgableTokens = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{
        const nonNFTs = balances.filter((t)=>!(0,_core_common__WEBPACK_IMPORTED_MODULE_3__.isNFT)(t));
        return nonNFTs.filter((t)=>(0,_core_common__WEBPACK_IMPORTED_MODULE_3__.findMatchingBridgeAsset)(transferableAssets, t));
    }, [
        balances,
        transferableAssets
    ]);
    const sourceBalance = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{
        if (!asset) {
            return;
        }
        return bridgableTokens.find((token)=>{
            if (asset.type === _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_1__.TokenType.NATIVE && token.type === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.NATIVE) {
                return asset.symbol.toLowerCase() === token.symbol.toLowerCase();
            }
            if (asset.type === _avalabs_bridge_unified__WEBPACK_IMPORTED_MODULE_1__.TokenType.ERC20 && token.type === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_2__.TokenType.ERC20) {
                return asset.address?.toLowerCase() === token.address.toLowerCase();
            }
            return false;
        });
    }, [
        asset,
        bridgableTokens
    ]);
    const possibleTargetChains = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{
        return Object.keys(asset?.destinations ?? {});
    }, [
        asset?.destinations
    ]);
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        setMaximum(sourceBalance?.balance);
    }, [
        sourceBalance?.balance
    ]);
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        let isMounted = true;
        if (asset && amount && targetChain) {
            getFee(asset.symbol, amount, targetChain.caipId).then((fee)=>{
                if (!isMounted) {
                    return;
                }
                setBridgeFee(fee);
                setReceiveAmount(amount - fee);
            });
            getMinimumTransferAmount(asset, amount, targetChain.caipId).then((min)=>{
                if (!isMounted) {
                    return;
                }
                setMinimum(min);
            });
        } else {
            setMinimum(undefined);
            setBridgeFee(undefined);
            setReceiveAmount(undefined);
        }
        return ()=>{
            isMounted = false;
        };
    }, [
        amount,
        asset,
        getFee,
        targetChain,
        getMinimumTransferAmount
    ]);
    const estimateGas = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{
        if (!asset?.symbol || !amount || !targetChain?.caipId) {
            return 0n;
        }
        return estimateTransferGas(asset.symbol, amount, targetChain?.caipId);
    }, [
        estimateTransferGas,
        targetChain?.caipId,
        asset?.symbol,
        amount
    ]);
    const transfer = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (options)=>{
        if (!amount) {
            throw new Error('No amount chosen');
        }
        if (!asset) {
            throw new Error('No asset chosen');
        }
        if (!network?.caipId) {
            throw new Error('No source chain chosen');
        }
        if (!targetChain?.caipId) {
            throw new Error('No target chain chosen');
        }
        capture('unifedBridgeTransferStarted', {
            bridgeType: options.bridgeType,
            sourceBlockchain: network.caipId,
            targetBlockchain: targetChain.caipId
        });
        const hash = await transferAsset(asset.symbol, amount, targetChain?.caipId, options.gasSettings);
        return hash;
    }, [
        amount,
        asset,
        targetChain?.caipId,
        transferAsset,
        capture,
        network?.caipId
    ]);
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        if (targetChain && possibleTargetChains.includes(targetChain.caipId)) {
            return;
        }
        if (possibleTargetChains[0]) {
            const foundChain = getNetwork(possibleTargetChains[0]);
            if (foundChain) {
                setTargetChain(foundChain);
            }
        }
    }, [
        getNetwork,
        targetChain,
        possibleTargetChains
    ]);
    return {
        amount,
        setAmount,
        bridgableTokens: bridgableTokens,
        availableChainIds,
        bridgeFee,
        estimateGas,
        isReady,
        minimum,
        maximum,
        receiveAmount,
        asset,
        setAsset,
        sourceBalance,
        targetChain,
        setTargetChain,
        possibleTargetChains,
        transferableAssets,
        transfer
    };
}


}),
"../../packages/ui/src/hooks/useBridgeAmounts.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useBridgeAmounts: () => (useBridgeAmounts)
});
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/common/src/index.ts");


const useBridgeAmounts = (bridgeTx)=>{
    const sourceNetworkFee = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{
        if (typeof bridgeTx?.sourceNetworkFee === 'undefined') {
            return;
        }
        if ((0,_core_common__WEBPACK_IMPORTED_MODULE_1__.isUnifiedBridgeTransfer)(bridgeTx)) {
            return (0,_core_common__WEBPACK_IMPORTED_MODULE_1__.bigintToBig)(bridgeTx.sourceNetworkFee, bridgeTx.sourceChain.networkToken.decimals);
        }
        return bridgeTx.sourceNetworkFee;
    }, [
        bridgeTx
    ]);
    const targetNetworkFee = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{
        if (typeof bridgeTx?.targetNetworkFee === 'undefined') {
            return;
        }
        if ((0,_core_common__WEBPACK_IMPORTED_MODULE_1__.isUnifiedBridgeTransfer)(bridgeTx)) {
            return (0,_core_common__WEBPACK_IMPORTED_MODULE_1__.bigintToBig)(bridgeTx.targetNetworkFee, bridgeTx.targetChain.networkToken.decimals);
        }
        return bridgeTx.targetNetworkFee;
    }, [
        bridgeTx
    ]);
    return {
        amount: (0,_core_common__WEBPACK_IMPORTED_MODULE_1__.isUnifiedBridgeTransfer)(bridgeTx) ? (0,_core_common__WEBPACK_IMPORTED_MODULE_1__.bigintToBig)(bridgeTx.amount, bridgeTx.asset.decimals) : bridgeTx?.amount,
        sourceNetworkFee,
        targetNetworkFee
    };
};


}),
"../../packages/ui/src/hooks/useBridgeNetworkPrice.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useBridgeNetworkPrice: () => (useBridgeNetworkPrice)
});
/* ESM import */var _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../node_modules/@avalabs/core-bridge-sdk/esm/hooks/usePriceForChain.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/common/src/index.ts");
/* ESM import */var _contexts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/ui/src/contexts/index.ts");




const useBridgeNetworkPrice = (chain)=>{
    const { networks } = (0,_contexts__WEBPACK_IMPORTED_MODULE_2__.useNetworkContext)();
    const blockchain = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{
        // Standardize input to Blockchain type
        if (!chain) {
            return undefined;
        }
        if (typeof chain === 'object') {
            const network = networks.find(({ chainId })=>chainId === (0,_core_common__WEBPACK_IMPORTED_MODULE_1__.caipToChainId)(chain.chainId));
            if (!network) {
                return undefined;
            }
            return (0,_core_common__WEBPACK_IMPORTED_MODULE_1__.networkToBlockchain)(network);
        }
        return chain;
    }, [
        chain,
        networks
    ]);
    return (0,_avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_3__.usePriceForChain)(blockchain);
};


}),
"../../packages/ui/src/hooks/useBridgeTransferStatus.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useBridgeTransferStatus: () => (useBridgeTransferStatus)
});
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/common/src/index.ts");

const useBridgeTransferStatus = (bridgeTx)=>{
    if (!bridgeTx) {
        return {
            isComplete: false,
            sourceCurrentConfirmations: 0,
            targetCurrentConfirmations: 0,
            sourceRequiredConfirmations: 0,
            targetRequiredConfirmations: 0
        };
    }
    if ((0,_core_common__WEBPACK_IMPORTED_MODULE_0__.isUnifiedBridgeTransfer)(bridgeTx)) {
        return {
            isComplete: Boolean(bridgeTx.completedAt),
            // cap the current confirmations so we don't go over
            sourceCurrentConfirmations: Math.min(bridgeTx.sourceConfirmationCount, bridgeTx.sourceRequiredConfirmationCount),
            targetCurrentConfirmations: Math.min(bridgeTx.targetConfirmationCount, bridgeTx.targetRequiredConfirmationCount),
            // with Unified Bridge, the SDK provides info about the target confirmations
            sourceRequiredConfirmations: bridgeTx.sourceRequiredConfirmationCount,
            targetRequiredConfirmations: bridgeTx.targetRequiredConfirmationCount
        };
    }
    return {
        isComplete: bridgeTx.complete,
        // cap the current confirmations so we don't go over
        sourceCurrentConfirmations: Math.min(bridgeTx.confirmationCount, bridgeTx.requiredConfirmationCount),
        // with Legacy Bridge, the count is either 0 if tx has not completed yet, or 1 if it has
        targetCurrentConfirmations: bridgeTx.complete ? 1 : 0,
        sourceRequiredConfirmations: bridgeTx.requiredConfirmationCount,
        targetRequiredConfirmations: 1
    };
};


}),
"../../packages/ui/src/hooks/useBridgeTxHandling.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useBridgeTxHandling: () => (useBridgeTxHandling)
});
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/common/src/index.ts");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);


const useBridgeTxHandling = ({ transfer, onInitiated, onSuccess, onFailure, onRejected })=>{
    const [isPending, setIsPending] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
    const onTransfer = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (options)=>{
        setIsPending(true);
        try {
            onInitiated();
            const { isApproved, hasError, result: txHash, error: txError } = await (0,_core_common__WEBPACK_IMPORTED_MODULE_0__.handleTxOutcome)(transfer(options));
            if (isApproved) {
                if (hasError) {
                    onFailure(txError);
                } else {
                    onSuccess(txHash);
                }
            } else {
                onRejected();
            }
        } finally{
            setIsPending(false);
        }
    }, [
        onInitiated,
        onRejected,
        onFailure,
        onSuccess,
        transfer
    ]);
    return {
        onTransfer,
        isPending
    };
};


}),
"../../packages/ui/src/hooks/useCameraPermissions.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useCameraPermissions: () => (useCameraPermissions)
});
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);

function useCameraPermissions() {
    const [observer, setObserver] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
    const [permissions, setPermissions] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
    const getPermissions = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{
        const permissionsObserver = await navigator.permissions.query({
            name: 'camera'
        });
        permissionsObserver.onchange = ()=>setPermissions(permissionsObserver.state);
        setPermissions(permissionsObserver.state);
        setObserver(permissionsObserver);
    }, []);
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        getPermissions();
    }, [
        getPermissions
    ]);
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        const savedObserver = observer;
        return ()=>{
            if (savedObserver) {
                savedObserver.onchange = null;
            }
        };
    }, [
        observer
    ]);
    return {
        permissions,
        refreshPermissions: getPermissions
    };
}


}),
"../../packages/ui/src/hooks/useCoinGeckoId.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useCoinGeckoId: () => (useCoinGeckoId)
});
/* ESM import */var _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/@avalabs/core-bridge-sdk/esm/contexts/TokenInfoProvider.js");

// This is a copy from https://github.com/ava-labs/core-web-properties/blob/develop/packages/web/src/hooks/bridge/useCoingeckoId.ts
const KNOWN_IDS = {
    BTC: 'bitcoin',
    AVAX: 'avalanche-2',
    ETH: 'ethereum'
};
const useCoinGeckoId = (tokenSymbol)=>{
    const tokenInfoData = (0,_avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_0__.useTokenInfoContext)();
    return tokenSymbol && (KNOWN_IDS[tokenSymbol] || tokenInfoData?.[tokenSymbol]?.coingeckoId);
};


}),
"../../packages/ui/src/hooks/useContactIdFromParams.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useContactIdFromParams: () => (useContactIdFromParams)
});
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var react_router_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/react-router/esm/react-router.js");
/* ESM import */var xss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/xss/lib/index.js");
/* ESM import */var xss__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(xss__WEBPACK_IMPORTED_MODULE_1__);



const useContactIdFromParams = ()=>{
    const { search } = (0,react_router_dom__WEBPACK_IMPORTED_MODULE_2__.useLocation)();
    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{
        const { contactId } = Object.fromEntries(new URLSearchParams(search).entries());
        return {
            contactId: xss__WEBPACK_IMPORTED_MODULE_1___default()(contactId)
        };
    }, [
        search
    ]);
};


}),
"../../packages/ui/src/hooks/useConvertedCurrencyFormatter.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useConvertedCurrencyFormatter: () => (useConvertedCurrencyFormatter)
});
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var _contexts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/ui/src/contexts/index.ts");


const useConvertedCurrencyFormatter = (sourceCurrency = 'USD')=>{
    const { convert, hasExchangeRate } = (0,_contexts__WEBPACK_IMPORTED_MODULE_1__.useCurrenciesContext)();
    const { currency: targetCurrency, currencyFormatter } = (0,_contexts__WEBPACK_IMPORTED_MODULE_1__.useSettingsContext)();
    const fallbackFormatter = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>(0,_contexts__WEBPACK_IMPORTED_MODULE_1__.getCurrencyFormatter)(sourceCurrency), [
        sourceCurrency
    ]);
    const canConvert = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>hasExchangeRate(sourceCurrency, targetCurrency), [
        sourceCurrency,
        targetCurrency,
        hasExchangeRate
    ]);
    const needsConversion = canConvert && targetCurrency !== sourceCurrency;
    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{
        if (!needsConversion) {
            return fallbackFormatter;
        }
        return (value)=>{
            const converted = convert({
                amount: value,
                from: sourceCurrency,
                to: targetCurrency
            });
            return currencyFormatter(converted);
        };
    }, [
        convert,
        currencyFormatter,
        fallbackFormatter,
        needsConversion,
        sourceCurrency,
        targetCurrency
    ]);
};


}),
"../../packages/ui/src/hooks/useDAppScan.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useDAppScan: () => (useDAppScan)
});
/* ESM import */var _avalabs_core_utils_sdk__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/@avalabs/core-utils-sdk/esm/promiseResolver.js");
/* ESM import */var _blockaid_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../node_modules/@blockaid/client/index.mjs");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* ESM import */var _contexts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/ui/src/contexts/index.ts");





function useDAppScan() {
    const { featureFlags } = (0,_contexts__WEBPACK_IMPORTED_MODULE_2__.useFeatureFlagContext)();
    const dAppScanning = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (dAppURL)=>{
        if (!featureFlags[_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.BLOCKAID_DAPP_SCAN]) {
            return undefined;
        }
        const baseURL = "https://proxy-api-dev.avax.network" + '/proxy/blockaid/';
        const blockaid = new _blockaid_client__WEBPACK_IMPORTED_MODULE_3__["default"]({
            baseURL,
            apiKey: 'key'
        });
        const [response, error] = await (0,_avalabs_core_utils_sdk__WEBPACK_IMPORTED_MODULE_4__.resolve)(blockaid.site.scan({
            url: dAppURL
        }));
        if (response === null || error) {
            throw new Error('There is an error during requesting the dApp data');
        }
        if (response.status === 'miss') {
            return {
                status: response.status
            };
        }
        return {
            status: response.status,
            url: response.url || dAppURL,
            isMalicious: response.is_malicious
        };
    }, [
        featureFlags
    ]);
    return dAppScanning;
}


}),
"../../packages/ui/src/hooks/useDismissedBanners.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useDismissedBanners: () => (useDismissedBanners)
});
/* ESM import */var _useLocalStorage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/ui/src/hooks/useLocalStorage.ts");

const DISMISSED_BANNERS_STORAGE_KEY = 'dismissed-banners';
const useDismissedBanners = ()=>{
    const { get, set } = (0,_useLocalStorage__WEBPACK_IMPORTED_MODULE_0__.useLocalStorage)();
    return {
        async isDismissed (bannerId) {
            const dismissedBanners = await get(DISMISSED_BANNERS_STORAGE_KEY);
            return dismissedBanners && Array.isArray(dismissedBanners) ? dismissedBanners.includes(bannerId) : false;
        },
        async dismiss (bannerId) {
            const alreadyDismissedBanners = await get(DISMISSED_BANNERS_STORAGE_KEY);
            const newDismissedBanners = alreadyDismissedBanners ? [
                ...alreadyDismissedBanners,
                bannerId
            ] : [
                bannerId
            ];
            return set(DISMISSED_BANNERS_STORAGE_KEY, newDismissedBanners);
        }
    };
};


}),
"../../packages/ui/src/hooks/useDisplayTokenList.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useDisplaytokenlist: () => (useDisplaytokenlist)
});
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/common/src/index.ts");
/* ESM import */var big_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/big.js/big.mjs");
/* ESM import */var lodash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/lodash/lodash.js");
/* ESM import */var lodash__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_2__);
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);




const useDisplaytokenlist = ({ tokensList, searchQuery })=>{
    const displayTokenList = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>{
        const initialList = (tokensList ?? []).filter((token)=>searchQuery.length ? token.name.toLowerCase().includes(searchQuery.toLowerCase()) || token.symbol.toLowerCase().includes(searchQuery.toLowerCase()) : true).map((token)=>{
            return {
                name: token.name,
                symbol: token.symbol,
                displayValue: token.balanceDisplayValue ?? '',
                token,
                decimals: (0,_core_common__WEBPACK_IMPORTED_MODULE_0__.isNFT)(token) ? 0 : token.decimals
            };
        });
        const [tokensWithBalance, tokensWithoutBalance] = (0,lodash__WEBPACK_IMPORTED_MODULE_2__.partition)(initialList, (token)=>{
            const balance = (0,_core_common__WEBPACK_IMPORTED_MODULE_0__.normalizeBalance)(token.token.balance, token.decimals);
            return balance ? balance.gt(new big_js__WEBPACK_IMPORTED_MODULE_1__["default"](0)) : false;
        });
        // Sorting specification per: https://ava-labs.atlassian.net/browse/CP-7768
        // First part of the list should be tokens with a balance sorted by balance (descending)
        // Second part of the list should be all no balance assets in order alphabetically
        return [
            ...tokensWithBalance.sort((tokenOne, tokenTwo)=>{
                const firstBalance = (0,_core_common__WEBPACK_IMPORTED_MODULE_0__.normalizeBalance)(tokenOne.token.balance, tokenOne.decimals) ?? new big_js__WEBPACK_IMPORTED_MODULE_1__["default"](0);
                const secondBalance = (0,_core_common__WEBPACK_IMPORTED_MODULE_0__.normalizeBalance)(tokenTwo.token.balance, tokenTwo.decimals) ?? new big_js__WEBPACK_IMPORTED_MODULE_1__["default"](0);
                const comparison = firstBalance.cmp(secondBalance);
                if (comparison) {
                    return comparison * -1;
                }
                return tokenOne.name.localeCompare(tokenTwo.name);
            }),
            ...tokensWithoutBalance.sort((tokenOne, tokenTwo)=>{
                return tokenOne.name.localeCompare(tokenTwo.name);
            })
        ];
    }, [
        tokensList,
        searchQuery
    ]);
    return displayTokenList;
};


}),
"../../packages/ui/src/hooks/useErrorMessage.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useErrorMessage: () => (useErrorMessage)
});
/* ESM import */var eth_rpc_errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/eth-rpc-errors/dist/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* ESM import */var react_i18next__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/react-i18next/dist/es/useTranslation.js");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../packages/common/src/index.ts");





const useErrorMessage = ()=>{
    const { t } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_4__.useTranslation)();
    const fireblocksErrors = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{
        const fireblocksHint = t('Please refer to Active Transfers list in your Fireblocks Console for a detailed explanation.');
        return {
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.FireblocksErrorCode.Blocked]: {
                title: t('Transaction has been blocked'),
                hint: fireblocksHint
            },
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.FireblocksErrorCode.Failed]: {
                title: t('Transaction has failed'),
                hint: fireblocksHint
            },
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.FireblocksErrorCode.Rejected]: {
                title: t('Transaction has been rejected'),
                hint: fireblocksHint
            },
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.FireblocksErrorCode.Cancelled]: {
                title: t('Transaction has been cancelled'),
                hint: fireblocksHint
            },
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.FireblocksErrorCode.Timeout]: {
                title: t('Transaction timed out'),
                hint: fireblocksHint
            },
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.FireblocksErrorCode.Unknown]: {
                title: t('Unknown transaction error'),
                hint: t('Please try again later or contact support.')
            }
        };
    }, [
        t
    ]);
    // These messages will serve as generic fallbacks in case data.reason
    // is not specified in the returned error.
    const standardRpcErrors = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>({
            [eth_rpc_errors__WEBPACK_IMPORTED_MODULE_0__.errorCodes.rpc.internal]: {
                title: t('Internal error')
            },
            [eth_rpc_errors__WEBPACK_IMPORTED_MODULE_0__.errorCodes.rpc.transactionRejected]: {
                title: t('Transaction rejected')
            },
            [eth_rpc_errors__WEBPACK_IMPORTED_MODULE_0__.errorCodes.rpc.invalidRequest]: {
                title: t('Invalid request')
            },
            [eth_rpc_errors__WEBPACK_IMPORTED_MODULE_0__.errorCodes.rpc.invalidParams]: {
                title: t('Invalid params')
            },
            [eth_rpc_errors__WEBPACK_IMPORTED_MODULE_0__.errorCodes.rpc.limitExceeded]: {
                title: t('Limit exceeded')
            },
            [eth_rpc_errors__WEBPACK_IMPORTED_MODULE_0__.errorCodes.rpc.resourceUnavailable]: {
                title: t('Resource unavailable')
            },
            [eth_rpc_errors__WEBPACK_IMPORTED_MODULE_0__.errorCodes.provider.disconnected]: {
                title: t('Disconnected')
            },
            [eth_rpc_errors__WEBPACK_IMPORTED_MODULE_0__.errorCodes.provider.unauthorized]: {
                title: t('Unauthorized')
            },
            [eth_rpc_errors__WEBPACK_IMPORTED_MODULE_0__.errorCodes.provider.userRejectedRequest]: {
                title: t('User rejected the request')
            }
        }), [
        t
    ]);
    const unifiedBridgeErrors = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>({
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.UnifiedBridgeError.AmountLessThanFee]: {
                title: t('Amount is too low'),
                hint: t('The amount cannot be lower than the bridging fee')
            },
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.UnifiedBridgeError.InvalidTxPayload]: {
                title: t('Invalid transaction data')
            },
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.UnifiedBridgeError.InvalidFee]: {
                title: t('The bridging fee is unknown')
            },
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.UnifiedBridgeError.UnknownAsset]: {
                title: t('This asset cannot be bridged')
            },
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.UnifiedBridgeError.UnsupportedNetwork]: {
                title: t('Unsupported network')
            },
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.UnifiedBridgeError.NonBitcoinAccount]: {
                title: t('Unsupported account'),
                hint: t(`The active account does not support Bitcoin.`)
            }
        }), [
        t
    ]);
    const swapErrors = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>({
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.SwapErrorCode.ClientNotInitialized]: {
                title: t('Swap client is not initialized'),
                hint: t('Please try switching to a different network.')
            },
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.SwapErrorCode.ApiError]: {
                title: t('There was an error contacting our pricing provider.'),
                hint: t('Please try again later.')
            },
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.SwapErrorCode.CannotBuildTx]: {
                title: t('Pricing provider did not respond with a valid transaction.'),
                hint: t('Please try again later.')
            },
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.SwapErrorCode.CannotFetchAllowance]: {
                title: t('There was an error fetching your spend approvals.'),
                hint: t('Try swapping a different token or try again later.')
            },
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.SwapErrorCode.MissingContractMethod]: {
                title: t('This token contract is missing a required method.'),
                hint: t('Try swapping a different token.')
            },
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.SwapErrorCode.MissingParams]: {
                title: t('Some of the required parameters are missing.'),
                hint: t('Our team was made aware of this issue. Feel free to contact us for further information.')
            },
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.SwapErrorCode.UnexpectedApiResponse]: {
                title: t('Unexpected response from our pricing provider.'),
                hint: t('Please try again later.')
            },
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.SwapErrorCode.UnknownSpender]: {
                title: t('Unexpected response from our pricing provider.'),
                hint: t('Please try again later.')
            },
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.SwapErrorCode.InvalidParams]: {
                title: t('Some of the required parameters are invalid.'),
                hint: t('Our team was made aware of this issue. Feel free to contact us for further information.')
            },
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.SwapErrorCode.FeatureDisabled]: {
                title: t('Feature is disabled'),
                hint: t('Please try again later.')
            },
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.SwapErrorCode.TransactionError]: {
                title: t('This transaction would likely fail'),
                hint: t('Please try again later or choose a different token pair.')
            }
        }), [
        t
    ]);
    const commonErrors = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>({
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.CommonError.Unknown]: {
                title: t('Unknown error')
            },
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.CommonError.UserRejected]: {
                title: t('User declined the transaction')
            },
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.CommonError.UnsupportedTokenType]: {
                title: t('Unsupported token type'),
                hint: t('Sending this type of token is not supported by Core')
            },
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.CommonError.NetworkError]: {
                title: t('Network error'),
                hint: t('Please check your connection and try again.')
            },
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.CommonError.NoActiveAccount]: {
                title: t('No account is active'),
                hint: t('Please try again')
            },
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.CommonError.NoActiveNetwork]: {
                title: t('No active network'),
                hint: t('Please try again')
            },
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.CommonError.UnknownNetwork]: {
                title: t('Unknown network')
            },
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.CommonError.UnknownNetworkFee]: {
                title: t('Unknown network fee')
            },
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.CommonError.RequestTimeout]: {
                title: t('Request timed out'),
                hint: t('This is taking longer than expected. Please try again later.')
            },
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.CommonError.ModuleManagerNotSet]: {
                title: t('Internal error occurred.')
            },
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.CommonError.MigrationFailed]: {
                title: t('Storage update failed')
            },
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.CommonError.UnableToSign]: {
                title: t('Unable to sign or broadcast transaction')
            },
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.CommonError.UnableToEstimateGas]: {
                title: t('Unable to estimate gas')
            },
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.CommonError.MismatchingProvider]: {
                title: t('Mismatching provider'),
                hint: t('Core has entered an unexpected state. Please restart the browser if the issue persists.')
            }
        }), [
        t
    ]);
    const secretErrors = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>({
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.SecretsError.MissingExtendedPublicKey]: {
                title: t('Extended public key not found')
            },
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.SecretsError.NoAccountIndex]: {
                title: t('No account index was provided')
            },
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.SecretsError.PublicKeyNotFound]: {
                title: t('Public key not found')
            },
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.SecretsError.SecretsNotFound]: {
                title: t('Wallet secrets not found for the requested ID')
            },
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.SecretsError.WalletAlreadyExists]: {
                title: t('This wallet is already imported')
            },
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.SecretsError.DerivationPathMissing]: {
                title: t('Attempted to use an unknown derivation path')
            },
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.SecretsError.DerivationPathTooShort]: {
                title: t('Error while deriving address'),
                hint: t('Requested derivation path is too short')
            },
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.SecretsError.UnsupportedSecretType]: {
                title: t('Error while deriving address'),
                hint: t('Unsupporetd secret type')
            },
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.SecretsError.UnsupportedCurve]: {
                title: t('Error while deriving address'),
                hint: t('Unsupported elliptic curve')
            },
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.SecretsError.UnknownDerivationPathFormat]: {
                title: t('Error while deriving address'),
                hint: t('Unsupported derivation path format')
            }
        }), [
        t
    ]);
    const rpcErrors = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>({
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.RpcErrorCode.InsufficientFunds]: {
                title: t('Insufficient funds'),
                hint: t('You do not have enough funds to cover the network fees.')
            }
        }), [
        t
    ]);
    const keystoreErrors = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>({
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.KeystoreError.InvalidPassword]: {
                title: t('Invalid password. Please try again.')
            },
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.KeystoreError.InvalidVersion]: {
                title: t('Unsupported Version'),
                hint: t('Only keystore files exported from the Avalanche Wallet are supported.')
            },
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.KeystoreError.NoNewWallets]: {
                title: t('No New Wallets Found'),
                hint: t('All keys contained in this file are already imported.')
            },
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.KeystoreError.Unknown]: {
                title: t('File Upload Failed'),
                hint: t('Please contact our support team to resolve this issue.')
            }
        }), [
        t
    ]);
    const seedphraseImportError = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>({
            [_core_types__WEBPACK_IMPORTED_MODULE_2__.SeedphraseImportError.ExistingSeedphrase]: {
                title: t('This recovery phrase is already imported.')
            }
        }), [
        t
    ]);
    const messages = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>({
            ...fireblocksErrors,
            ...unifiedBridgeErrors,
            ...commonErrors,
            ...standardRpcErrors,
            ...keystoreErrors,
            ...seedphraseImportError,
            ...rpcErrors,
            ...secretErrors,
            ...swapErrors
        }), [
        fireblocksErrors,
        unifiedBridgeErrors,
        commonErrors,
        standardRpcErrors,
        keystoreErrors,
        seedphraseImportError,
        rpcErrors,
        secretErrors,
        swapErrors
    ]);
    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((error)=>{
        if (typeof error === 'string') {
            return messages[error] ?? {
                title: error
            };
        }
        let message = messages[_core_types__WEBPACK_IMPORTED_MODULE_2__.CommonError.Unknown];
        if ((0,_core_common__WEBPACK_IMPORTED_MODULE_3__.isWrappedError)(error)) {
            message = messages[error.data.reason] ?? messages[_core_types__WEBPACK_IMPORTED_MODULE_2__.CommonError.Unknown];
        } else if (typeof error === 'object' && error !== null && 'code' in error && (typeof error.code === 'number' || typeof error.code === 'string')) {
            message = messages[error.code];
        }
        return message ?? messages[_core_types__WEBPACK_IMPORTED_MODULE_2__.CommonError.Unknown];
    }, [
        messages
    ]);
};


}),
"../../packages/ui/src/hooks/useFidoErrorMessage.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useFidoErrorMessage: () => (useFidoErrorMessage)
});
/* ESM import */var react_i18next__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/react-i18next/dist/es/useTranslation.js");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/types/src/index.ts");


const useFidoErrorMessage = (code)=>{
    const { t } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_1__.useTranslation)();
    if (code === _core_types__WEBPACK_IMPORTED_MODULE_0__.AuthErrorCode.FidoChallengeNotApproved) {
        return t('Action was not approved. Please try again.');
    }
    if (code === _core_types__WEBPACK_IMPORTED_MODULE_0__.AuthErrorCode.FidoChallengeFailed) {
        return t('The operation either timed out or was not allowed. Please try again.');
    }
    if (code === _core_types__WEBPACK_IMPORTED_MODULE_0__.AuthErrorCode.UnknownError) {
        return t('An unexpected error occurred. Please try again.');
    }
    return '';
};


}),
"../../packages/ui/src/hooks/useGetAvaxBalance.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useGetAvaxBalance: () => (useGetAvaxBalance)
});
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var _contexts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/ui/src/contexts/index.ts");


function useGetAvaxBalance() {
    const { request } = (0,_contexts__WEBPACK_IMPORTED_MODULE_1__.useConnectionContext)();
    async function getAvaxBalance(address) {
        const result = await request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_0__.ExtensionRequest.BALANCE_NATIVE_GET,
            params: [
                address,
                'eip155:43114'
            ]
        });
        return result;
    }
    return {
        getAvaxBalance
    };
}


}),
"../../packages/ui/src/hooks/useGetRequestId.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useGetRequestId: () => (useGetRequestId)
});
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var react_router_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/react-router/esm/react-router.js");


/**
 * This is used to get the id of a transaction or message that
 * has been put into localstorage and to be used across multiple
 * contexts. We grab the query param and use that to get the item out of storage.
 *
 * @returns id from the query param
 */ function useGetRequestId() {
    const location = (0,react_router_dom__WEBPACK_IMPORTED_MODULE_1__.useLocation)();
    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{
        const searchParams = new URLSearchParams(location.search ?? '');
        return searchParams.get('actionId') ?? '';
    }, [
        location.search
    ]);
}


}),
"../../packages/ui/src/hooks/useGetSolBalance.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useGetSolBalance: () => (useGetSolBalance)
});
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../node_modules/@avalabs/core-chains-sdk/esm/solana.chain.js");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var _contexts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/ui/src/contexts/index.ts");




function useGetSolBalance() {
    const { request } = (0,_contexts__WEBPACK_IMPORTED_MODULE_2__.useConnectionContext)();
    const getSolBalance = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (address)=>request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.BALANCE_NATIVE_GET,
            params: [
                address,
                _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_3__.SolanaCaip2ChainId.MAINNET
            ]
        }), [
        request
    ]);
    return {
        getSolBalance
    };
}


}),
"../../packages/ui/src/hooks/useGoBack.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useGoBack: () => (useGoBack)
});
/* ESM import */var react_router_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/react-router/esm/react-router.js");

function useGoBack(routeToGoBack = '/home') {
    const history = (0,react_router_dom__WEBPACK_IMPORTED_MODULE_0__.useHistory)();
    return ()=>{
        if (history.length <= 2) {
            history.replace(routeToGoBack);
            return;
        }
        history.goBack();
    };
}


}),
"../../packages/ui/src/hooks/useHasEnoughtForGas.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useHasEnoughForGas: () => (useHasEnoughForGas)
});
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/@avalabs/vm-module-types/dist/index.js");
/* ESM import */var _useTokensWithBalances__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/ui/src/hooks/useTokensWithBalances.ts");



const useHasEnoughForGas = (sendAmount, feeRate, gasLimit)=>{
    const tokens = (0,_useTokensWithBalances__WEBPACK_IMPORTED_MODULE_2__.useTokensWithBalances)();
    const [hasEnough, setHasEnough] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        if (!tokens || !gasLimit || typeof sendAmount !== 'bigint' || typeof feeRate !== 'bigint') return;
        const token = tokens.find((x)=>x.type === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.NATIVE);
        // If the native token has no blance, we do not have enough
        if (!token) {
            setHasEnough(false);
            return;
        }
        // get gasPrice of network
        const balance = token && token.balance;
        const estimatedGasCost = feeRate * gasLimit;
        // check if balance > gasPrice
        if (balance && estimatedGasCost) {
            setHasEnough(balance >= sendAmount + estimatedGasCost);
        }
    }, [
        tokens,
        feeRate,
        sendAmount,
        gasLimit
    ]);
    return hasEnough;
};


}),
"../../packages/ui/src/hooks/useImportLedger.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useImportLedger: () => (useImportLedger)
});
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var _contexts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/ui/src/contexts/index.ts");



const useImportLedger = ()=>{
    const { request } = (0,_contexts__WEBPACK_IMPORTED_MODULE_2__.useConnectionContext)();
    const [isImporting, setIsImporting] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
    const importLedger = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (params)=>{
        setIsImporting(true);
        try {
            const result = await request({
                method: _core_types__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.WALLET_IMPORT_LEDGER,
                params: [
                    params
                ]
            });
            return result;
        } finally{
            setIsImporting(false);
        }
    }, [
        request
    ]);
    return {
        isImporting,
        importLedger
    };
};


}),
"../../packages/ui/src/hooks/useImportSeedphrase.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useImportSeedphrase: () => (useImportSeedphrase)
});
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var _contexts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/ui/src/contexts/index.ts");



const useImportSeedphrase = ()=>{
    const { request } = (0,_contexts__WEBPACK_IMPORTED_MODULE_2__.useConnectionContext)();
    const [isImporting, setIsImporting] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
    const importSeedphrase = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (params)=>{
        setIsImporting(true);
        try {
            const result = await request({
                method: _core_types__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.WALLET_IMPORT_SEED_PHRASE,
                params: [
                    params
                ]
            });
            return result;
        } finally{
            setIsImporting(false);
        }
    }, [
        request
    ]);
    return {
        isImporting,
        importSeedphrase
    };
};


}),
"../../packages/ui/src/hooks/useInterval.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useInterval: () => (useInterval)
});
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);

/**
 * Simple way to have trigger something based on a time interval.
 * @param intervalDurationMs duration of interval in milliseconds
 * @returns the most recent time the interval was triggered.
 */ function useInterval(intervalDurationMs) {
    const [intervalTime, setIntervalTime] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(Date.now());
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        let mounted = true;
        const intervalId = setInterval(()=>{
            if (mounted) setIntervalTime(Date.now());
        }, intervalDurationMs);
        return ()=>{
            mounted = false;
            clearInterval(intervalId);
        };
    }, [
        intervalDurationMs
    ]);
    return intervalTime;
}


}),
"../../packages/ui/src/hooks/useIsFunctionAvailable.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  FunctionNames: () => (FunctionNames),
  useIsFunctionAvailable: () => (useIsFunctionAvailable)
});
/* ESM import */var _contexts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/ui/src/contexts/index.ts");
/* ESM import */var _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/@avalabs/core-chains-sdk/esm/models.js");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/common/src/index.ts");
/* ESM import */var _useIsUsingSeedlessAccount__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../packages/ui/src/hooks/useIsUsingSeedlessAccount.ts");







var FunctionNames = /*#__PURE__*/ function(FunctionNames) {
    FunctionNames["BRIDGE"] = "Bridge";
    FunctionNames["BUY"] = "Buy";
    FunctionNames["COLLECTIBLES"] = "COLLECTIBLES";
    FunctionNames["DEFI"] = "DeFi";
    FunctionNames["FEATURE"] = "Feature";
    FunctionNames["KEYSTONE"] = "Keystone";
    FunctionNames["MANAGE_TOKEN"] = "ManageTokens";
    FunctionNames["MANAGE_COLLECTIBLES"] = "ManageCollectibles";
    FunctionNames["RECEIVE"] = "Receive";
    FunctionNames["SEND"] = "Send";
    FunctionNames["SWAP"] = "Swap";
    FunctionNames["SIGN"] = "Sign";
    FunctionNames["TOKEN_DETAILS"] = "TokenDetails";
    return FunctionNames;
}({});
const FeatureFlagMap = {
    ["Bridge"]: _core_types__WEBPACK_IMPORTED_MODULE_1__.FeatureGates.BRIDGE,
    ["Buy"]: _core_types__WEBPACK_IMPORTED_MODULE_1__.FeatureGates.BUY,
    ["DeFi"]: _core_types__WEBPACK_IMPORTED_MODULE_1__.FeatureGates.DEFI,
    ["Keystone"]: _core_types__WEBPACK_IMPORTED_MODULE_1__.FeatureGates.KEYSTONE,
    ["Send"]: _core_types__WEBPACK_IMPORTED_MODULE_1__.FeatureGates.SEND,
    ["Swap"]: _core_types__WEBPACK_IMPORTED_MODULE_1__.FeatureGates.SWAP
};
const functionRequireSigning = [
    "Bridge",
    "Send",
    "Swap",
    "Sign"
];
// Disables given feature on BTC networks when:
//  - active account has no BTC address
//  - active account is imported through WalletConnect (no Bitcoin support)
//  - active account is imported from Fireblocks without BTC support
const disableForAccountsWithoutBtcSupport = (chain, account)=>{
    const isBtc = [
        _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_4__.ChainId.BITCOIN,
        _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_4__.ChainId.BITCOIN_TESTNET
    ].includes(chain);
    if (!isBtc) {
        return false;
    }
    const hasBtcAddress = Boolean(account.addressBTC);
    return !hasBtcAddress || (0,_core_common__WEBPACK_IMPORTED_MODULE_2__.isWalletConnectAccount)(account) || (0,_core_common__WEBPACK_IMPORTED_MODULE_2__.isFireblocksAccount)(account) && !(0,_core_common__WEBPACK_IMPORTED_MODULE_2__.isFireblocksApiSupported)(account);
};
// Disables given feature on PVM network when:
//  - active account has no XP address
//  - active account is imported through WalletConnect (no XP support)
//  - active account is imported from Fireblocks
const disableForAccountsWithoutXPSupport = (chain, account)=>{
    const isPChain = (0,_core_common__WEBPACK_IMPORTED_MODULE_2__.isPchainNetworkId)(chain);
    const isXChain = (0,_core_common__WEBPACK_IMPORTED_MODULE_2__.isXchainNetworkId)(chain);
    if (!isPChain && !isXChain) {
        return false;
    }
    const hasPAddress = Boolean(account.addressPVM);
    const hasXAddress = Boolean(account.addressAVM);
    return isPChain && !hasPAddress || isXChain && !hasXAddress || (0,_core_common__WEBPACK_IMPORTED_MODULE_2__.isWalletConnectAccount)(account) || (0,_core_common__WEBPACK_IMPORTED_MODULE_2__.isFireblocksAccount)(account);
};
const disabledFeatures = {
    ManageTokens: {
        networks: [
            _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_4__.ChainId.BITCOIN,
            _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_4__.ChainId.AVALANCHE_P,
            _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_4__.ChainId.AVALANCHE_TEST_P,
            _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_4__.ChainId.AVALANCHE_X,
            _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_4__.ChainId.AVALANCHE_TEST_X
        ],
        complexChecks: []
    },
    ManageCollectibles: {
        networks: [
            _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_4__.ChainId.BITCOIN,
            _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_4__.ChainId.AVALANCHE_P,
            _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_4__.ChainId.AVALANCHE_TEST_P,
            _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_4__.ChainId.AVALANCHE_X,
            _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_4__.ChainId.AVALANCHE_TEST_X
        ],
        complexChecks: []
    },
    Receive: {
        networks: [],
        complexChecks: [
            disableForAccountsWithoutBtcSupport,
            disableForAccountsWithoutXPSupport
        ]
    },
    Send: {
        networks: [],
        complexChecks: [
            disableForAccountsWithoutBtcSupport,
            disableForAccountsWithoutXPSupport
        ]
    },
    Bridge: {
        networks: [
            _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_4__.ChainId.AVALANCHE_P,
            _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_4__.ChainId.AVALANCHE_TEST_P,
            _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_4__.ChainId.AVALANCHE_X,
            _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_4__.ChainId.AVALANCHE_TEST_X,
            _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_4__.ChainId.DFK,
            _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_4__.ChainId.DFK_TESTNET,
            _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_4__.ChainId.SWIMMER,
            _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_4__.ChainId.SWIMMER_TESTNET,
            _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_4__.ChainId.SOLANA_MAINNET_ID,
            _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_4__.ChainId.SOLANA_TESTNET_ID,
            _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_4__.ChainId.SOLANA_DEVNET_ID
        ],
        complexChecks: [
            disableForAccountsWithoutBtcSupport
        ]
    }
};
// The list we want to ENABLE features on certain networks (whitelist)
const enabledFeatures = {
    COLLECTIBLES: [
        _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_4__.ChainId.AVALANCHE_MAINNET_ID,
        _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_4__.ChainId.AVALANCHE_TESTNET_ID,
        _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_4__.ChainId.ETHEREUM_HOMESTEAD
    ],
    Swap: [
        _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_4__.ChainId.AVALANCHE_MAINNET_ID,
        _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_4__.ChainId.ETHEREUM_HOMESTEAD,
        _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_4__.ChainId.SOLANA_MAINNET_ID
    ],
    Buy: [
        _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_4__.ChainId.AVALANCHE_MAINNET_ID,
        _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_4__.ChainId.AVALANCHE_TESTNET_ID
    ]
};
const useIsFunctionAvailable = (functionName)=>{
    const { network } = (0,_contexts__WEBPACK_IMPORTED_MODULE_0__.useNetworkContext)();
    const isUsingSeedlessAccount = (0,_useIsUsingSeedlessAccount__WEBPACK_IMPORTED_MODULE_3__.useIsUsingSeedlessAccount)();
    const { featureFlags } = (0,_contexts__WEBPACK_IMPORTED_MODULE_0__.useFeatureFlagContext)();
    const { accounts: { active } } = (0,_contexts__WEBPACK_IMPORTED_MODULE_0__.useAccountsContext)();
    const isReady = Boolean(network && active);
    const checkIsFunctionAvailable = (functionToCheck)=>{
        if (isUsingSeedlessAccount && functionRequireSigning.includes(functionToCheck) && !featureFlags[_core_types__WEBPACK_IMPORTED_MODULE_1__.FeatureGates.SEEDLESS_SIGNING]) {
            return false;
        }
        if (functionToCheck === "Send") {
            if ((0,_core_common__WEBPACK_IMPORTED_MODULE_2__.isPchainNetwork)(network)) {
                return Boolean(!!active?.addressPVM && featureFlags[_core_types__WEBPACK_IMPORTED_MODULE_1__.FeatureGates.SEND] && featureFlags[_core_types__WEBPACK_IMPORTED_MODULE_1__.FeatureGates.SEND_P_CHAIN]);
            } else if ((0,_core_common__WEBPACK_IMPORTED_MODULE_2__.isXchainNetwork)(network)) {
                return Boolean(!!active?.addressAVM && featureFlags[_core_types__WEBPACK_IMPORTED_MODULE_1__.FeatureGates.SEND] && featureFlags[_core_types__WEBPACK_IMPORTED_MODULE_1__.FeatureGates.SEND_X_CHAIN]);
            }
        }
        if (functionToCheck === "Swap") {
            if (!network || !featureFlags[_core_types__WEBPACK_IMPORTED_MODULE_1__.FeatureGates.SWAP]) {
                return false;
            }
            return (0,_core_common__WEBPACK_IMPORTED_MODULE_2__.isEthereumNetwork)(network) ? featureFlags[_core_types__WEBPACK_IMPORTED_MODULE_1__.FeatureGates.SWAP_ETHEREUM] : (0,_core_common__WEBPACK_IMPORTED_MODULE_2__.isAvalancheNetwork)(network) ? featureFlags[_core_types__WEBPACK_IMPORTED_MODULE_1__.FeatureGates.SWAP_C_CHAIN] : (0,_core_common__WEBPACK_IMPORTED_MODULE_2__.isSolanaNetwork)(network) ? featureFlags[_core_types__WEBPACK_IMPORTED_MODULE_1__.FeatureGates.SWAP_SOLANA] : false;
        }
        const featureFlagToCheck = FeatureFlagMap[functionToCheck];
        return featureFlagToCheck ? featureFlags[featureFlagToCheck] : true;
    };
    const checkIsFunctionSupported = (name)=>{
        if (!network || !active) {
            return false;
        }
        //The avalanche Ledger app doesn’t suprort send on x/p chain yet
        //The account without addressPVM cannot send on pchain
        const onPchainWithNoAccess = (0,_core_common__WEBPACK_IMPORTED_MODULE_2__.isPchainNetwork)(network) && !active.addressPVM;
        //The account without addressAVM cannot send on xchain
        const onXchainWithNoAccress = (0,_core_common__WEBPACK_IMPORTED_MODULE_2__.isXchainNetwork)(network) && !active.addressAVM;
        if (name === "Send" && (onPchainWithNoAccess || onXchainWithNoAccress)) {
            return false;
        }
        // Check whitelist
        if (enabledFeatures[name] && !enabledFeatures[name].includes(network.chainId)) {
            return false;
        }
        // Check blacklist
        const blacklist = disabledFeatures[name];
        if (blacklist) {
            const blacklistedForNetwork = blacklist.networks.includes(network.chainId);
            const blacklistedForOtherReasons = blacklist.complexChecks.some((check)=>check(network.chainId, active));
            return !blacklistedForNetwork && !blacklistedForOtherReasons;
        }
        return true;
    };
    if (!functionName) {
        return {
            isReady,
            isFunctionAvailable: false,
            isFunctionSupported: false,
            checkIsFunctionSupported: checkIsFunctionSupported,
            checkIsFunctionAvailable: checkIsFunctionAvailable
        };
    }
    return {
        isReady,
        isFunctionAvailable: checkIsFunctionAvailable(functionName ?? "Feature"),
        isFunctionSupported: checkIsFunctionSupported(functionName),
        checkIsFunctionSupported: checkIsFunctionSupported,
        checkIsFunctionAvailable: checkIsFunctionAvailable
    };
};


}),
"../../packages/ui/src/hooks/useIsIncorrectDevice.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useIsIncorrectDevice: () => (useIsIncorrectDevice)
});
/* ESM import */var _avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../node_modules/@avalabs/core-wallets-sdk/esm/EVM/utils/getEvmAddressFromPubKey.js");
/* ESM import */var _contexts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/ui/src/contexts/index.ts");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/types/src/index.ts");







const useIsIncorrectDevice = ()=>{
    const [isIncorrectDevice, setIsIncorrectDevice] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
    const { isWalletLocked, walletDetails, isLedgerWallet } = (0,_contexts__WEBPACK_IMPORTED_MODULE_0__.useWalletContext)();
    const { request } = (0,_contexts__WEBPACK_IMPORTED_MODULE_0__.useConnectionContext)();
    const { hasLedgerTransport, getPublicKey, getMasterFingerprint, appType, masterFingerprint } = (0,_contexts__WEBPACK_IMPORTED_MODULE_0__.useLedgerContext)();
    const { accounts } = (0,_contexts__WEBPACK_IMPORTED_MODULE_0__.useAccountsContext)();
    const activeWalletAccount = accounts.active?.id;
    const firstAccount = activeWalletAccount && accounts.primary[activeWalletAccount];
    const firstAddress = firstAccount && firstAccount[0] && firstAccount[0].addressC;
    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{
        const compareAddresses = async ()=>{
            setIsIncorrectDevice(false);
            if (!isWalletLocked && walletDetails && isLedgerWallet && hasLedgerTransport) {
                try {
                    if (firstAddress && appType === _contexts__WEBPACK_IMPORTED_MODULE_0__.LedgerAppType.AVALANCHE) {
                        const pubKey = await getPublicKey(0, walletDetails.derivationPath);
                        const address = (0,_avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_3__.getEvmAddressFromPubKey)(pubKey);
                        const isMatching = firstAddress === address;
                        setIsIncorrectDevice(!isMatching);
                        if (isMatching) {
                            // Attempt to migrate missing X/P public keys (if there's any) once the device is verified
                            await request({
                                method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.LEDGER_MIGRATE_MISSING_PUBKEYS
                            });
                        }
                    } else if (masterFingerprint && appType === _contexts__WEBPACK_IMPORTED_MODULE_0__.LedgerAppType.BITCOIN) {
                        const masterFingerPrintFromDevice = await getMasterFingerprint();
                        const isMatching = masterFingerPrintFromDevice === masterFingerprint;
                        setIsIncorrectDevice(!isMatching);
                    }
                } catch (_err) {
                // some problem occured with the app
                // just wait until LedgerProvider recreates the app instance
                }
            }
        };
        compareAddresses();
    }, [
        isWalletLocked,
        isLedgerWallet,
        walletDetails,
        firstAddress,
        getPublicKey,
        hasLedgerTransport,
        appType,
        request,
        getMasterFingerprint,
        masterFingerprint
    ]);
    return isIncorrectDevice;
};


}),
"../../packages/ui/src/hooks/useIsMainnet.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useIsMainnet: () => (useIsMainnet)
});
/* ESM import */var _contexts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/ui/src/contexts/index.ts");

const useIsMainnet = ()=>{
    const { network } = (0,_contexts__WEBPACK_IMPORTED_MODULE_0__.useNetworkContext)();
    return !network?.isTestnet;
};


}),
"../../packages/ui/src/hooks/useIsSolanaEnabled.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useIsSolanaEnabled: () => (useIsSolanaEnabled)
});
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var _contexts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/ui/src/contexts/index.ts");


const useIsSolanaEnabled = ()=>{
    const { isFlagEnabled } = (0,_contexts__WEBPACK_IMPORTED_MODULE_1__.useFeatureFlagContext)();
    return isFlagEnabled(_core_types__WEBPACK_IMPORTED_MODULE_0__.FeatureGates.SOLANA_SUPPORT);
};


}),
"../../packages/ui/src/hooks/useIsSpecificContextContainer.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useIsSpecificContextContainer: () => (useIsSpecificContextContainer)
});
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);

function useIsSpecificContextContainer(context) {
    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{
        return window.location.pathname.includes(context);
    }, [
        context
    ]);
}


}),
"../../packages/ui/src/hooks/useIsUsingFireblocksAccount.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useIsUsingFireblocksAccount: () => (useIsUsingFireblocksAccount)
});
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var _contexts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/ui/src/contexts/index.ts");


const useIsUsingFireblocksAccount = ()=>{
    const { accounts: { active: activeAccount } } = (0,_contexts__WEBPACK_IMPORTED_MODULE_1__.useAccountsContext)();
    return activeAccount?.type === _core_types__WEBPACK_IMPORTED_MODULE_0__.AccountType.FIREBLOCKS;
};


}),
"../../packages/ui/src/hooks/useIsUsingKeystoneWallet.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useIsUsingKeystoneWallet: () => (useIsUsingKeystoneWallet)
});
/* ESM import */var _contexts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/ui/src/contexts/index.ts");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/types/src/index.ts");



const useIsUsingKeystoneWallet = ()=>{
    const { walletDetails } = (0,_contexts__WEBPACK_IMPORTED_MODULE_0__.useWalletContext)();
    const { accounts: { active: activeAccount } } = (0,_contexts__WEBPACK_IMPORTED_MODULE_0__.useAccountsContext)();
    return walletDetails?.type === _core_types__WEBPACK_IMPORTED_MODULE_1__.SecretType.Keystone && activeAccount?.type === _core_types__WEBPACK_IMPORTED_MODULE_1__.AccountType.PRIMARY;
};


}),
"../../packages/ui/src/hooks/useIsUsingLedgerWallet.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useIsUsingLedgerWallet: () => (useIsUsingLedgerWallet)
});
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var _contexts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/ui/src/contexts/index.ts");



const useIsUsingLedgerWallet = ()=>{
    const { isLedgerWallet } = (0,_contexts__WEBPACK_IMPORTED_MODULE_1__.useWalletContext)();
    const { accounts: { active: activeAccount } } = (0,_contexts__WEBPACK_IMPORTED_MODULE_1__.useAccountsContext)();
    return isLedgerWallet && activeAccount?.type === _core_types__WEBPACK_IMPORTED_MODULE_0__.AccountType.PRIMARY;
};


}),
"../../packages/ui/src/hooks/useIsUsingSeedlessAccount.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useIsUsingSeedlessAccount: () => (useIsUsingSeedlessAccount)
});
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var _contexts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/ui/src/contexts/index.ts");



const useIsUsingSeedlessAccount = ()=>{
    const { walletDetails } = (0,_contexts__WEBPACK_IMPORTED_MODULE_1__.useWalletContext)();
    const { accounts: { active: activeAccount } } = (0,_contexts__WEBPACK_IMPORTED_MODULE_1__.useAccountsContext)();
    return walletDetails?.type === _core_types__WEBPACK_IMPORTED_MODULE_0__.SecretType.Seedless && activeAccount?.type === _core_types__WEBPACK_IMPORTED_MODULE_0__.AccountType.PRIMARY;
};


}),
"../../packages/ui/src/hooks/useIsUsingWalletConnectAccount.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useIsUsingWalletConnectAccount: () => (useIsUsingWalletConnectAccount)
});
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var _contexts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/ui/src/contexts/index.ts");


const useIsUsingWalletConnectAccount = ()=>{
    const { accounts: { active: activeAccount } } = (0,_contexts__WEBPACK_IMPORTED_MODULE_1__.useAccountsContext)();
    return activeAccount?.type === _core_types__WEBPACK_IMPORTED_MODULE_0__.AccountType.WALLET_CONNECT;
};


}),
"../../packages/ui/src/hooks/useJsonFileReader.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useJsonFileReader: () => (useJsonFileReader)
});
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);

const readJsonFile = async (jsonFile)=>new Promise((resolve, reject)=>{
        const fr = new FileReader();
        fr.onload = ()=>{
            try {
                resolve(JSON.parse(fr.result));
            } catch (err) {
                reject(err.toString());
            }
        };
        fr.onerror = ()=>{
            reject(fr.error);
        };
        fr.readAsText(jsonFile);
    });
const useJsonFileReader = ()=>{
    const [isReading, setIsReading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
    const read = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (file)=>{
        setIsReading(true);
        try {
            return await readJsonFile(file);
        } finally{
            setIsReading(false);
        }
    }, []);
    return {
        read,
        isReading
    };
};


}),
"../../packages/ui/src/hooks/useKeyboardShortcuts.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useKeyboardShortcuts: () => (useKeyboardShortcuts)
});
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);

const useKeyboardShortcuts = (shortcuts)=>{
    const onKeyDown = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (event)=>{
        const callback = shortcuts[event.key];
        if (typeof callback === 'function') {
            event.preventDefault();
            await callback();
        }
    }, [
        shortcuts
    ]);
    return {
        onKeyDown
    };
};


}),
"../../packages/ui/src/hooks/useKeystoreFileImport.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useKeystoreFileImport: () => (useKeystoreFileImport)
});
/* ESM import */var _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("../../node_modules/@avalabs/avalanchejs/dist/es/index.js");
/* ESM import */var joi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/joi/dist/joi-browser.min.js");
/* ESM import */var joi__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(joi__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* ESM import */var _contexts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/ui/src/contexts/index.ts");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../packages/common/src/index.ts");
/* ESM import */var _useImportSeedphrase__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../packages/ui/src/hooks/useImportSeedphrase.ts");
/* ESM import */var _useJsonFileReader__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../../packages/ui/src/hooks/useJsonFileReader.ts");
/* ESM import */var _usePrivateKeyImport__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../../packages/ui/src/hooks/usePrivateKeyImport.ts");
/* provided dependency */ var Buffer = __webpack_require__("../../node_modules/buffer/index.js")["Buffer"];










const useKeystoreFileImport = ()=>{
    const { capture } = (0,_contexts__WEBPACK_IMPORTED_MODULE_2__.useAnalyticsContext)();
    const { isReading, read } = (0,_useJsonFileReader__WEBPACK_IMPORTED_MODULE_6__.useJsonFileReader)();
    const { isImporting: isImportingSeedphrase, importSeedphrase } = (0,_useImportSeedphrase__WEBPACK_IMPORTED_MODULE_5__.useImportSeedphrase)();
    const { isImporting: isImportingPrivateKey, importPrivateKey } = (0,_usePrivateKeyImport__WEBPACK_IMPORTED_MODULE_7__.usePrivateKeyImport)();
    const { selectAccount } = (0,_contexts__WEBPACK_IMPORTED_MODULE_2__.useAccountsContext)();
    const extractKeys = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (file, password)=>{
        const data = await read(file);
        capture('KeystoreFileProvided', {
            version: data.version
        });
        const decryptedFile = await (0,_core_common__WEBPACK_IMPORTED_MODULE_4__.readKeyFile)(data, password);
        const keys = (0,_core_common__WEBPACK_IMPORTED_MODULE_4__.extractKeysFromDecryptedFile)(decryptedFile);
        return keys;
    }, [
        capture,
        read
    ]);
    const importKeystoreFile = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (file, password)=>{
        const keys = await extractKeys(file, password);
        // We need to import all keys one by one.
        for(let i = 0; i < keys.length; i++){
            const keyData = keys[i];
            if (!keyData) {
                continue;
            }
            const { key, type } = keyData;
            if (type === 'singleton') {
                // Keystore files have the private keys base58check-encoded, but
                // we need them in hex format.
                const privateKey = Buffer.from(_avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_8__.utils.base58check.decode(key.replace('PrivateKey-', ''))).toString('hex');
                const accountId = await importPrivateKey(privateKey);
                await selectAccount(accountId);
            } else if (type === 'mnemonic') {
                try {
                    await importSeedphrase({
                        mnemonic: key
                    });
                } catch (err) {
                    if ((0,_core_common__WEBPACK_IMPORTED_MODULE_4__.isWrappedError)(err) && err.data.reason === _core_types__WEBPACK_IMPORTED_MODULE_3__.SeedphraseImportError.ExistingSeedphrase) {
                        continue;
                    }
                    throw err;
                }
            }
        }
    }, [
        extractKeys,
        importPrivateKey,
        importSeedphrase,
        selectAccount
    ]);
    const getKeyCounts = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (file, password)=>{
        const keys = await extractKeys(file, password);
        return keys.reduce((counts, key)=>{
            if (key.type === 'mnemonic') {
                counts.seedPhrasesCount += 1;
            } else if (key.type === 'singleton') {
                counts.privateKeysCount += 1;
            }
            return counts;
        }, {
            seedPhrasesCount: 0,
            privateKeysCount: 0
        });
    }, [
        extractKeys
    ]);
    const isValidKeystoreFile = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (file)=>{
        try {
            const data = await read(file);
            const result = KEYSTORE_FILE_SCHEMA.validate(data);
            return !result.error;
        } catch  {
            return false;
        }
    }, [
        read
    ]);
    return {
        getKeyCounts,
        importKeystoreFile,
        isImporting: isImportingSeedphrase || isImportingPrivateKey,
        isReading,
        isValidKeystoreFile
    };
};
const KEYSTORE_FILE_SCHEMA = joi__WEBPACK_IMPORTED_MODULE_0___default().object({
    version: joi__WEBPACK_IMPORTED_MODULE_0___default().string().required(),
    salt: joi__WEBPACK_IMPORTED_MODULE_0___default().string().required(),
    keys: joi__WEBPACK_IMPORTED_MODULE_0___default().array().items(joi__WEBPACK_IMPORTED_MODULE_0___default().object({
        key: joi__WEBPACK_IMPORTED_MODULE_0___default().string().required(),
        iv: joi__WEBPACK_IMPORTED_MODULE_0___default().string().required()
    }).unknown())
}).unknown();


}),
"../../packages/ui/src/hooks/useLanguages.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useLanguage: () => (useLanguage)
});
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var _contexts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/ui/src/contexts/index.ts");
/* ESM import */var react_i18next__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/react-i18next/dist/es/useTranslation.js");



function useLanguage() {
    const { setLanguage, language } = (0,_contexts__WEBPACK_IMPORTED_MODULE_1__.useSettingsContext)();
    const changeLanguage = (lang)=>setLanguage(lang);
    const { t } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_2__.useTranslation)();
    const availableLanguages = [
        {
            code: _core_types__WEBPACK_IMPORTED_MODULE_0__.Languages.EN,
            name: t('English'),
            originalName: 'English',
            linkCode: _core_types__WEBPACK_IMPORTED_MODULE_0__.LanguageLinks.EN
        },
        {
            code: _core_types__WEBPACK_IMPORTED_MODULE_0__.Languages.ZHCN,
            name: t('Chinese - Simplified'),
            originalName: '简体中文',
            linkCode: _core_types__WEBPACK_IMPORTED_MODULE_0__.LanguageLinks.ZHCN
        },
        {
            code: _core_types__WEBPACK_IMPORTED_MODULE_0__.Languages.ZHTW,
            name: t('Chinese - Traditional'),
            originalName: '繁體中文',
            linkCode: _core_types__WEBPACK_IMPORTED_MODULE_0__.LanguageLinks.ZHTW
        },
        {
            code: _core_types__WEBPACK_IMPORTED_MODULE_0__.Languages.DE,
            name: t('German'),
            originalName: 'Deutsch',
            linkCode: _core_types__WEBPACK_IMPORTED_MODULE_0__.LanguageLinks.DE
        },
        {
            code: _core_types__WEBPACK_IMPORTED_MODULE_0__.Languages.FR,
            name: t('French'),
            originalName: 'Français',
            linkCode: _core_types__WEBPACK_IMPORTED_MODULE_0__.LanguageLinks.FR
        },
        {
            code: _core_types__WEBPACK_IMPORTED_MODULE_0__.Languages.HI,
            name: t('Hindi'),
            originalName: 'हिन्दी',
            linkCode: _core_types__WEBPACK_IMPORTED_MODULE_0__.LanguageLinks.HI
        },
        {
            code: _core_types__WEBPACK_IMPORTED_MODULE_0__.Languages.JA,
            name: t('Japanese'),
            originalName: '日本',
            linkCode: _core_types__WEBPACK_IMPORTED_MODULE_0__.LanguageLinks.JA
        },
        {
            code: _core_types__WEBPACK_IMPORTED_MODULE_0__.Languages.KO,
            name: t('Korean'),
            originalName: '한국인',
            linkCode: _core_types__WEBPACK_IMPORTED_MODULE_0__.LanguageLinks.KO
        },
        {
            code: _core_types__WEBPACK_IMPORTED_MODULE_0__.Languages.RU,
            name: t('Russian'),
            originalName: 'Русский',
            linkCode: _core_types__WEBPACK_IMPORTED_MODULE_0__.LanguageLinks.RU
        },
        {
            code: _core_types__WEBPACK_IMPORTED_MODULE_0__.Languages.ES,
            name: t('Spanish'),
            originalName: 'Español',
            linkCode: _core_types__WEBPACK_IMPORTED_MODULE_0__.LanguageLinks.ES
        },
        {
            code: _core_types__WEBPACK_IMPORTED_MODULE_0__.Languages.TR,
            name: t('Turkish'),
            originalName: 'Türkçe',
            linkCode: _core_types__WEBPACK_IMPORTED_MODULE_0__.LanguageLinks.TR
        }
    ];
    const currentLanguage = availableLanguages.find((lang)=>lang.code === language);
    return {
        changeLanguage,
        availableLanguages,
        currentLanguage
    };
}


}),
"../../packages/ui/src/hooks/useLiveBalance.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useLiveBalance: () => (useLiveBalance)
});
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var _contexts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/ui/src/contexts/index.ts");


const useLiveBalance = (tokenTypes)=>{
    const { registerSubscriber, unregisterSubscriber } = (0,_contexts__WEBPACK_IMPORTED_MODULE_1__.useBalancesContext)();
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        registerSubscriber(tokenTypes);
        return ()=>{
            unregisterSubscriber(tokenTypes);
        };
    }, [
        registerSubscriber,
        unregisterSubscriber,
        tokenTypes
    ]);
};


}),
"../../packages/ui/src/hooks/useLocalStorage.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useLocalStorage: () => (useLocalStorage)
});
/* ESM import */var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/webextension-polyfill/dist/browser-polyfill.js");
/* ESM import */var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__);

const useLocalStorage = ()=>{
    return {
        async get (key) {
            const stored = await webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__.storage.local.get(key);
            return stored[key];
        },
        async set (key, value) {
            return webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__.storage.local.set({
                [key]: value
            });
        }
    };
};


}),
"../../packages/ui/src/hooks/useLogoUriForBridgeTransaction.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useLogoUriForBridgeTransaction: () => (useLogoUriForBridgeTransaction)
});
/* ESM import */var _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../node_modules/@avalabs/core-bridge-sdk/esm/types/config.js");
/* ESM import */var _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/@avalabs/core-chains-sdk/esm/models.js");
/* ESM import */var _contexts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/ui/src/contexts/index.ts");
/* ESM import */var _useTokensWithBalances__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/ui/src/hooks/useTokensWithBalances.ts");
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/common/src/index.ts");





function useLogoUriForBridgeTransaction(bridgeTransaction) {
    const { network, networks, getNetwork } = (0,_contexts__WEBPACK_IMPORTED_MODULE_0__.useNetworkContext)();
    const isMainnet = !network?.isTestnet;
    const isUnifiedTransfer = typeof bridgeTransaction?.sourceChain === 'object';
    const targetBlockchain = isUnifiedTransfer ? (0,_core_common__WEBPACK_IMPORTED_MODULE_2__.networkToBlockchain)(networks.find(({ chainId })=>(0,_core_common__WEBPACK_IMPORTED_MODULE_2__.caipToChainId)(bridgeTransaction.targetChain.chainId) === chainId)) : bridgeTransaction?.targetChain;
    let chainId;
    if (isUnifiedTransfer) {
        chainId = (0,_core_common__WEBPACK_IMPORTED_MODULE_2__.caipToChainId)(bridgeTransaction.sourceChain.chainId);
    } else {
        chainId = bridgeTransaction?.sourceChain === _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_3__.Blockchain.BITCOIN ? isMainnet ? _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_4__.ChainId.BITCOIN : _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_4__.ChainId.BITCOIN_TESTNET : isMainnet ? _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_4__.ChainId.AVALANCHE_MAINNET_ID : _avalabs_core_chains_sdk__WEBPACK_IMPORTED_MODULE_4__.ChainId.AVALANCHE_TESTNET_ID;
    }
    const tokens = (0,_useTokensWithBalances__WEBPACK_IMPORTED_MODULE_1__.useTokensWithBalances)({
        forceShowTokensWithoutBalances: true,
        network: getNetwork(chainId)
    });
    if (!bridgeTransaction || !targetBlockchain) {
        return;
    }
    const token = (0,_core_common__WEBPACK_IMPORTED_MODULE_2__.findTokenForAsset)((0,_core_common__WEBPACK_IMPORTED_MODULE_2__.getBridgedAssetSymbol)(bridgeTransaction), targetBlockchain, tokens);
    return token?.logoUri;
}


}),
"../../packages/ui/src/hooks/useNfts.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useNfts: () => (useNfts)
});
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var _contexts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/ui/src/contexts/index.ts");
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/common/src/index.ts");





const useNfts = ()=>{
    const { balances } = (0,_contexts__WEBPACK_IMPORTED_MODULE_1__.useBalancesContext)();
    const { accounts: { active: activeAccount } } = (0,_contexts__WEBPACK_IMPORTED_MODULE_1__.useAccountsContext)();
    const { network } = (0,_contexts__WEBPACK_IMPORTED_MODULE_1__.useNetworkContext)();
    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{
        if (!network || !balances.nfts || !activeAccount) {
            return [];
        }
        const userAddress = (0,_core_common__WEBPACK_IMPORTED_MODULE_2__.getAddressForChain)(network, activeAccount);
        if (!userAddress) {
            return [];
        }
        return Object.values(balances.nfts?.[network.chainId]?.[userAddress] ?? {});
    }, [
        network,
        balances.nfts,
        activeAccount
    ]);
};


}),
"../../packages/ui/src/hooks/useOnline.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useOnline: () => (useOnline)
});
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);

function useOnline() {
    const [isOnline, setIsOnline] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(window.navigator.onLine);
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        const onConnectionChange = (event)=>{
            if (event.type === 'online') {
                setIsOnline(true);
                return;
            }
            setIsOnline(false);
        };
        window.addEventListener('online', onConnectionChange);
        window.addEventListener('offline', onConnectionChange);
        return ()=>{
            window.removeEventListener('online', ()=>onConnectionChange);
            window.removeEventListener('offline', ()=>onConnectionChange);
        };
    }, []);
    return {
        isOnline
    };
}


}),
"../../packages/ui/src/hooks/usePageHistory.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  usePageHistory: () => (usePageHistory)
});
/* ESM import */var _contexts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/ui/src/contexts/index.ts");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);



function usePageHistory() {
    const { request } = (0,_contexts__WEBPACK_IMPORTED_MODULE_0__.useConnectionContext)();
    const [historyDataState, setHistoryDataState] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)({
        isLoading: true
    });
    const [historyState, setHistoryState] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)({});
    const setNavigationHistoryData = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((data)=>{
        request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.NAVIGATION_HISTORY_DATA_SET,
            params: [
                data
            ]
        });
    }, [
        request
    ]);
    const getNavigationHistoryData = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(async ()=>{
        const result = await request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.NAVIGATION_HISTORY_DATA_GET
        });
        setHistoryDataState({
            ...result,
            isLoading: false
        });
    }, [
        request
    ]);
    const setNavigationHistory = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((history)=>{
        request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.NAVIGATION_HISTORY_SET,
            params: [
                history
            ]
        });
    }, [
        request
    ]);
    const getNavigationHistory = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(async ()=>{
        const result = await request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_1__.ExtensionRequest.NAVIGATION_HISTORY_GET
        });
        setHistoryState(result);
    }, [
        request
    ]);
    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{
        const getHistory = async ()=>{
            await getNavigationHistory();
            await getNavigationHistoryData();
        };
        getHistory();
    }, [
        getNavigationHistory,
        getNavigationHistoryData
    ]);
    const getPageHistoryData = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(()=>{
        return historyDataState;
    }, [
        historyDataState
    ]);
    const getNavigationHistoryState = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(()=>{
        return historyState;
    }, [
        historyState
    ]);
    return {
        getNavigationHistoryData,
        setNavigationHistoryData,
        historyDataState,
        getPageHistoryData,
        setNavigationHistory,
        getNavigationHistoryState
    };
}


}),
"../../packages/ui/src/hooks/usePendingBridgeTransactions.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  usePendingBridgeTransactions: () => (usePendingBridgeTransactions)
});
/* ESM import */var _contexts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/ui/src/contexts/index.ts");
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/common/src/index.ts");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);





const usePendingBridgeTransactions = ()=>{
    const { network } = (0,_contexts__WEBPACK_IMPORTED_MODULE_0__.useNetworkContext)();
    const { bridgeTransactions: legacyBridgeTransfers } = (0,_contexts__WEBPACK_IMPORTED_MODULE_0__.useBridgeContext)();
    const { state: { pendingTransfers: unifiedBridgeTransfers } } = (0,_contexts__WEBPACK_IMPORTED_MODULE_0__.useUnifiedBridgeContext)();
    const bridgeTransactions = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{
        return [
            ...Object.values(legacyBridgeTransfers),
            ...Object.values(unifiedBridgeTransfers).filter((tx)=>// filter pending transactions that don't belong to the given network
                network?.chainId === (0,_core_common__WEBPACK_IMPORTED_MODULE_1__.caipToChainId)(tx.sourceChain.chainId) || network?.chainId === (0,_core_common__WEBPACK_IMPORTED_MODULE_1__.caipToChainId)(tx.targetChain.chainId))
        ];
    }, [
        unifiedBridgeTransfers,
        legacyBridgeTransfers,
        network
    ]);
    return bridgeTransactions;
};


}),
"../../packages/ui/src/hooks/usePersistedTabs.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  usePersistedTabs: () => (usePersistedTabs)
});
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var react_router_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/react-router/esm/react-router.js");


const usePersistedTabs = (defaultTab, tabParam = 'activeTab')=>{
    const { search, pathname } = (0,react_router_dom__WEBPACK_IMPORTED_MODULE_1__.useLocation)();
    const history = (0,react_router_dom__WEBPACK_IMPORTED_MODULE_1__.useHistory)();
    const tabFromUrl = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{
        const params = new URLSearchParams(search);
        const tab = params.get(tabParam);
        if (tab !== null) {
            return Number(tab);
        }
        return null;
    }, [
        search,
        tabParam
    ]);
    const setActiveTab = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((tab)=>{
        // Avoid unnecessary re-renders
        if (tab === tabFromUrl) {
            return;
        }
        history.replace({
            pathname: pathname,
            search: `?${new URLSearchParams({
                [tabParam]: String(tab)
            }).toString()}`
        });
    }, [
        history,
        tabFromUrl,
        tabParam,
        pathname
    ]);
    return {
        activeTab: tabFromUrl ?? defaultTab,
        setActiveTab
    };
};


}),
"../../packages/ui/src/hooks/usePreferredColorScheme.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  usePreferredColorScheme: () => (usePreferredColorScheme)
});
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var _contexts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/ui/src/contexts/index.ts");


const usePreferredColorScheme = ()=>{
    const { nextGenTheme: theme } = (0,_contexts__WEBPACK_IMPORTED_MODULE_1__.useSettingsContext)();
    const [preferredColorScheme, setPreferredColorScheme] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        if (theme !== 'system') {
            return;
        }
        const isDark = window.matchMedia('(prefers-color-scheme: dark)');
        const isLight = window.matchMedia('(prefers-color-scheme: light)');
        if (isDark.matches) {
            setPreferredColorScheme('dark');
        } else if (isLight.matches) {
            setPreferredColorScheme('light');
        } else {
            setPreferredColorScheme('light'); // Light by default
        }
        const { signal, abort } = new AbortController();
        const getListener = (scheme)=>{
            return ({ matches })=>{
                if (matches) setPreferredColorScheme(scheme);
            };
        };
        isLight.addEventListener('change', getListener('light'), {
            signal
        });
        isDark.addEventListener('change', getListener('dark'), {
            signal
        });
        return abort;
    }, [
        theme
    ]);
    return preferredColorScheme;
};


}),
"../../packages/ui/src/hooks/usePrivateKeyExport.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  usePrivateKeyExport: () => (usePrivateKeyExport)
});
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var react_router_dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../node_modules/react-router/esm/react-router.js");
/* ESM import */var _contexts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/ui/src/contexts/index.ts");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/types/src/index.ts");




const usePrivateKeyExport = (account, walletType)=>{
    const { capture } = (0,_contexts__WEBPACK_IMPORTED_MODULE_1__.useAnalyticsContext)();
    const history = (0,react_router_dom__WEBPACK_IMPORTED_MODULE_3__.useHistory)();
    const isPrivateKeyAvailable = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>account?.type === _core_types__WEBPACK_IMPORTED_MODULE_2__.AccountType.IMPORTED || account?.type === _core_types__WEBPACK_IMPORTED_MODULE_2__.AccountType.PRIMARY && walletType === _core_types__WEBPACK_IMPORTED_MODULE_2__.SecretType.Mnemonic, [
        account?.type,
        walletType
    ]);
    const showPrivateKey = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{
        capture('ExportPrivateKeyClicked');
        e.stopPropagation();
        history.push(`/export-private-key?accountId=${account?.id}`);
    }, [
        account?.id,
        capture,
        history
    ]);
    return {
        showPrivateKey,
        isPrivateKeyAvailable
    };
};


}),
"../../packages/ui/src/hooks/usePrivateKeyImport.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  usePrivateKeyImport: () => (usePrivateKeyImport)
});
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/@avalabs/avalanchejs/dist/es/index.js");
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/common/src/index.ts");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var _contexts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../packages/ui/src/contexts/index.ts");





const usePrivateKeyImport = ()=>{
    const [isImporting, setIsImporting] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
    const { addAccount } = (0,_contexts__WEBPACK_IMPORTED_MODULE_3__.useAccountsContext)();
    const importPrivateKey = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (privateKey)=>{
        setIsImporting(true);
        try {
            const accountId = await addAccount('', {
                importType: _core_types__WEBPACK_IMPORTED_MODULE_2__.ImportType.PRIVATE_KEY,
                data: _avalabs_avalanchejs__WEBPACK_IMPORTED_MODULE_4__.utils.strip0x(privateKey)
            });
            return accountId;
        } catch (err) {
            _core_common__WEBPACK_IMPORTED_MODULE_1__.Monitoring.sentryCaptureException(err, _core_common__WEBPACK_IMPORTED_MODULE_1__.Monitoring.SentryExceptionTypes.WALLET_IMPORT);
            throw err;
        } finally{
            setIsImporting(false);
        }
    }, [
        addAccount
    ]);
    return {
        isImporting,
        importPrivateKey
    };
};


}),
"../../packages/ui/src/hooks/useQueryParams.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useQueryParams: () => (useQueryParams)
});
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var react_router_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/react-router/esm/react-router.js");


const useQueryParams = ()=>{
    const { search } = (0,react_router_dom__WEBPACK_IMPORTED_MODULE_1__.useLocation)();
    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>new URLSearchParams(search), [
        search
    ]);
};


}),
"../../packages/ui/src/hooks/useRegisterBtcWalletPolicy.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useRegisterBtcWalletPolicy: () => (useRegisterBtcWalletPolicy)
});
/* ESM import */var _contexts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/ui/src/contexts/index.ts");
/* ESM import */var _useIsUsingLedgerWallet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/ui/src/hooks/useIsUsingLedgerWallet.ts");
/* ESM import */var _avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/@avalabs/core-wallets-sdk/esm/EVM/constants.js");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);








const useRegisterBtcWalletPolicy = ()=>{
    const isUsingLedgerWallet = (0,_useIsUsingLedgerWallet__WEBPACK_IMPORTED_MODULE_1__.useIsUsingLedgerWallet)();
    const [shouldRegisterBtcWalletPolicy, setShouldRegisterBtcWalletPolicy] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);
    const [walletPolicyName, setWalletPolicyName] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)();
    const [walletPolicyDerivationpath, setWalletPolicyDerivationpath] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)();
    const { walletDetails } = (0,_contexts__WEBPACK_IMPORTED_MODULE_0__.useWalletContext)();
    const { appType, setMasterFingerprint } = (0,_contexts__WEBPACK_IMPORTED_MODULE_0__.useLedgerContext)();
    const { accounts } = (0,_contexts__WEBPACK_IMPORTED_MODULE_0__.useAccountsContext)();
    const { request } = (0,_contexts__WEBPACK_IMPORTED_MODULE_0__.useConnectionContext)();
    const activeAccount = accounts.active;
    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{
        const fetchWalletPolicyDetails = async (account, details)=>{
            const { masterFingerprint } = await request({
                method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.WALLET_GET_BTC_WALLET_POLICY_DETAILS
            }) ?? {};
            setMasterFingerprint(masterFingerprint);
            if (!masterFingerprint) {
                if (details.derivationPath === _avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_4__.DerivationPath.LedgerLive) {
                    setWalletPolicyName(`Core - ${account.name}`);
                    setWalletPolicyDerivationpath(`44'/60'/${account.index}'`);
                } else if (details.derivationPath === _avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_4__.DerivationPath.BIP44) {
                    setWalletPolicyName('Core');
                    setWalletPolicyDerivationpath(`44'/60'/0'`);
                }
                setShouldRegisterBtcWalletPolicy(true);
            }
        };
        if (activeAccount?.type !== _core_types__WEBPACK_IMPORTED_MODULE_2__.AccountType.PRIMARY || !walletDetails) {
            return;
        }
        // This effect may be called in-between updates coming from AccountsProvider and WalletProvider
        // We need to wait for those to be in-sync, otherwise we may prompt for policy registration
        // when user is switching from a Ledger wallet/account to a non-Ledger wallet/account.
        if (activeAccount.walletId !== walletDetails.id) {
            return;
        }
        setMasterFingerprint(undefined);
        setWalletPolicyName(undefined);
        setWalletPolicyDerivationpath(undefined);
        setShouldRegisterBtcWalletPolicy(false);
        if (isUsingLedgerWallet && appType === _contexts__WEBPACK_IMPORTED_MODULE_0__.LedgerAppType.BITCOIN) {
            fetchWalletPolicyDetails(activeAccount, walletDetails);
        }
    }, [
        activeAccount,
        appType,
        walletDetails,
        isUsingLedgerWallet,
        request,
        setMasterFingerprint
    ]);
    return {
        shouldRegisterBtcWalletPolicy,
        walletPolicyName,
        walletPolicyDerivationpath
    };
};


}),
"../../packages/ui/src/hooks/useSeedlessActions.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useSeedlessActions: () => (useSeedlessActions)
});
/* ESM import */var _contexts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/ui/src/contexts/index.ts");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/common/src/index.ts");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);
/* ESM import */var react_i18next__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../node_modules/react-i18next/dist/es/useTranslation.js");
/* ESM import */var react_router_dom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/react-router/esm/react-router.js");








const TOTP_ISSUER = 'Core';
const recoveryMethodToFidoKeyType = (method)=>{
    switch(method){
        case _core_types__WEBPACK_IMPORTED_MODULE_1__.RecoveryMethodTypes.PASSKEY:
            return _core_types__WEBPACK_IMPORTED_MODULE_1__.KeyType.Passkey;
        case _core_types__WEBPACK_IMPORTED_MODULE_1__.RecoveryMethodTypes.YUBIKEY:
            return _core_types__WEBPACK_IMPORTED_MODULE_1__.KeyType.Yubikey;
        default:
            throw new Error('Unsupported FIDO device');
    }
};
function useSeedlessActions({ onError }) {
    const { capture } = (0,_contexts__WEBPACK_IMPORTED_MODULE_0__.useAnalyticsContext)();
    const { setOidcToken, setSeedlessSignerToken, oidcToken, setUserId, setIsSeedlessMfaRequired, setNewsletterEmail } = (0,_contexts__WEBPACK_IMPORTED_MODULE_0__.useOnboardingContext)();
    const history = (0,react_router_dom__WEBPACK_IMPORTED_MODULE_4__.useHistory)();
    const { t } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_5__.useTranslation)();
    const [totpChallenge, setTotpChallenge] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)();
    const [mfaSession, setMfaSession] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);
    const [errorMessage, setErrorMessage] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)('');
    const { featureFlags } = (0,_contexts__WEBPACK_IMPORTED_MODULE_0__.useFeatureFlagContext)();
    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{
        if (!errorMessage) {
            return;
        }
        onError(errorMessage);
    }, [
        errorMessage,
        onError
    ]);
    const handleOidcToken = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async (idToken)=>{
        setOidcToken(idToken);
        const oidcClient = (0,_core_common__WEBPACK_IMPORTED_MODULE_2__.getOidcClient)(idToken);
        const identity = await oidcClient.identityProve();
        if (!identity.user_info) {
            const result = await (0,_core_common__WEBPACK_IMPORTED_MODULE_2__.approveSeedlessRegistration)(identity, !featureFlags[_core_types__WEBPACK_IMPORTED_MODULE_1__.FeatureGates.SEEDLESS_OPTIONAL_MFA]);
            if (result !== _core_common__WEBPACK_IMPORTED_MODULE_2__.SeedlessRegistartionResult.APPROVED) {
                onError(t('Seedless login error'));
                return;
            }
        } else {
            // If the user already has an account, it's possible that the
            // account was created before we made MFA optional, but the user
            // then resigned from following through (e.g. didn't know how to
            // use MFA yet). So now we're in a situation where we need to use
            // the user's OIDC token to get the information about their
            // CubeSigner account and see if it has an MFA policy set.
            const oidcAuth = await (0,_core_common__WEBPACK_IMPORTED_MODULE_2__.requestOidcAuth)(idToken);
            const mfaSessionInfo = oidcAuth.mfaSessionInfo();
            // We set the policy to undefined when MFA is optional.
            setIsSeedlessMfaRequired(typeof mfaSessionInfo !== 'undefined');
        }
        setUserId(identity.identity?.sub);
        setNewsletterEmail(identity.email ?? '');
        if ((identity.user_info?.configured_mfa ?? []).length === 0) {
            history.push(_core_types__WEBPACK_IMPORTED_MODULE_1__.OnboardingURLs.RECOVERY_METHODS);
        } else {
            history.push(_core_types__WEBPACK_IMPORTED_MODULE_1__.OnboardingURLs.RECOVERY_METHODS_LOGIN);
        }
    }, [
        setOidcToken,
        setUserId,
        setIsSeedlessMfaRequired,
        setNewsletterEmail,
        t,
        history,
        featureFlags,
        onError
    ]);
    const signIn = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(({ setIsLoading, getOidcToken, provider })=>{
        setIsLoading(true);
        getOidcToken().then(handleOidcToken).catch(()=>{
            capture('SeedlessSignInFailed', {
                provider
            });
            onError(t('Seedless login error'));
        }).finally(()=>{
            setIsLoading(false);
        });
    }, [
        capture,
        handleOidcToken,
        onError,
        t
    ]);
    const registerTOTPStart = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(()=>{
        if (!oidcToken) {
            return false;
        }
        (0,_core_common__WEBPACK_IMPORTED_MODULE_2__.requestOidcAuth)(oidcToken).then(async (c)=>{
            const mfaSessionInfo = c.requiresMfa() ? c.mfaSessionInfo() : c.data();
            if (!mfaSessionInfo) {
                console.error('No MFA info');
                return;
            }
            const signerSession = await (0,_core_common__WEBPACK_IMPORTED_MODULE_2__.getSignerSession)(mfaSessionInfo);
            setMfaSession(signerSession);
            signerSession.resetTotpStart(TOTP_ISSUER).then((challenge)=>{
                setTotpChallenge(challenge.data());
            }).catch((e)=>{
                console.error(e);
                onError(t('Unable to set TOTP configuration'));
            });
            return true;
        }).catch((e)=>{
            console.error(e);
            capture('SeedlessRegisterTOTPStartFailed');
            return false;
        });
    }, [
        capture,
        oidcToken,
        onError,
        t
    ]);
    const verifyRegistrationCode = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async (code)=>{
        setErrorMessage('');
        if (!totpChallenge || !mfaSession || code.length < 6 || !oidcToken) {
            return;
        }
        try {
            await mfaSession.resetTotpComplete(totpChallenge.totpId, code);
            // attempt to reuse the code quickly
            const c = await (0,_core_common__WEBPACK_IMPORTED_MODULE_2__.requestOidcAuth)(oidcToken);
            if (!c.requiresMfa()) {
                throw new Error('MFA setup failed');
            }
            const status = await mfaSession.totpApprove(c.mfaId(), code);
            if (!status.receipt?.confirmation) {
                setErrorMessage(t('Code verification error'));
                return;
            }
            const oidcAuthResponse = await (0,_core_common__WEBPACK_IMPORTED_MODULE_2__.requestOidcAuth)(oidcToken, {
                mfaOrgId: (0,_core_common__WEBPACK_IMPORTED_MODULE_2__.getOrgId)(),
                mfaId: c.mfaId(),
                mfaConf: status.receipt.confirmation
            });
            const signerToken = oidcAuthResponse.data();
            setSeedlessSignerToken(signerToken);
            return true;
        } catch (_err) {
            setErrorMessage(t('Invalid code'));
            return false;
        }
    }, [
        oidcToken,
        setSeedlessSignerToken,
        t,
        totpChallenge,
        mfaSession
    ]);
    const loginWithFIDO = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async ()=>{
        if (!oidcToken) {
            return false;
        }
        let resp = await (0,_core_common__WEBPACK_IMPORTED_MODULE_2__.requestOidcAuth)(oidcToken);
        if (resp.requiresMfa()) {
            const mfaSessionInfo = resp.mfaSessionInfo();
            if (!mfaSessionInfo) {
                return false;
            }
            const signerSession = await (0,_core_common__WEBPACK_IMPORTED_MODULE_2__.getSignerSession)(mfaSessionInfo);
            const respondMfaId = resp.mfaId();
            const challenge = await signerSession.fidoApproveStart(respondMfaId);
            // prompt the user to tap their FIDO and send the answer back to CubeSigner
            const answer = await (0,_core_common__WEBPACK_IMPORTED_MODULE_2__.launchFidoFlow)(_core_types__WEBPACK_IMPORTED_MODULE_1__.FIDOApiEndpoint.Authenticate, challenge.options);
            const mfaInfo = await challenge.answer(answer);
            // print out the current status of the MFA request and assert that it has been approved
            if (!mfaInfo.receipt) {
                throw new Error('MFA not approved yet');
            }
            // proceed with the MFA approval
            resp = await resp.signWithMfaApproval({
                mfaId: respondMfaId,
                mfaOrgId: "Org#abc03353-9320-4bf4-bc25-d1b687bf2b2c" || 0,
                mfaConf: mfaInfo.receipt.confirmation
            });
        }
        if (resp.requiresMfa()) {
            throw new Error('MFA should not be required after approval');
        }
        setSeedlessSignerToken(await (0,_core_common__WEBPACK_IMPORTED_MODULE_2__.getSignerToken)(resp));
        return true;
    }, [
        oidcToken,
        setSeedlessSignerToken
    ]);
    const loginWithoutMFA = async ()=>{
        if (!oidcToken) {
            throw new Error('There is no token to log in');
        }
        const authResponse = await (0,_core_common__WEBPACK_IMPORTED_MODULE_2__.requestOidcAuth)(oidcToken);
        const signerToken = await (0,_core_common__WEBPACK_IMPORTED_MODULE_2__.getSignerToken)(authResponse);
        setSeedlessSignerToken(signerToken);
    };
    const addFIDODevice = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async (name, selectedMethod)=>{
        if (!oidcToken) {
            return false;
        }
        const loginResp = await (0,_core_common__WEBPACK_IMPORTED_MODULE_2__.requestOidcAuth)(oidcToken);
        const mfaSessionInfo = loginResp.requiresMfa() ? loginResp.mfaSessionInfo() : loginResp.data();
        if (!mfaSessionInfo) {
            console.error('No MFA info');
            return;
        }
        const session = await (0,_core_common__WEBPACK_IMPORTED_MODULE_2__.getSignerSession)(mfaSessionInfo);
        const addFidoResp = await session.addFidoStart(name);
        const challenge = addFidoResp.data();
        if (selectedMethod === _core_types__WEBPACK_IMPORTED_MODULE_1__.RecoveryMethodTypes.PASSKEY && await PublicKeyCredential?.isUserVerifyingPlatformAuthenticatorAvailable()) {
            challenge.options.authenticatorSelection = {
                authenticatorAttachment: 'platform'
            };
        }
        const answer = await (0,_core_common__WEBPACK_IMPORTED_MODULE_2__.launchFidoFlow)(_core_types__WEBPACK_IMPORTED_MODULE_1__.FIDOApiEndpoint.Register, challenge.options, recoveryMethodToFidoKeyType(selectedMethod));
        await challenge.answer(answer);
        return true;
    }, [
        oidcToken
    ]);
    return {
        signIn,
        registerTOTPStart,
        totpChallenge,
        verifyRegistrationCode,
        addFIDODevice,
        loginWithFIDO,
        loginWithoutMFA
    };
}


}),
"../../packages/ui/src/hooks/useSeedlessAuth.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  AuthStep: () => (AuthStep),
  useSeedlessAuth: () => (useSeedlessAuth)
});
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/common/src/index.ts");
/* ESM import */var _contexts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/ui/src/contexts/index.ts");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../packages/types/src/index.ts");





var AuthStep = /*#__PURE__*/ function(AuthStep) {
    AuthStep[AuthStep["NotInitialized"] = 0] = "NotInitialized";
    AuthStep[AuthStep["Initialized"] = 1] = "Initialized";
    AuthStep[AuthStep["Complete"] = 2] = "Complete";
    AuthStep[AuthStep["TotpChallenge"] = 3] = "TotpChallenge";
    AuthStep[AuthStep["FidoChallenge"] = 4] = "FidoChallenge";
    AuthStep[AuthStep["ChooseMfaMethod"] = 5] = "ChooseMfaMethod";
    return AuthStep;
}({});
const useSeedlessAuth = ({ getOidcToken, setIsLoading, onSignerTokenObtained })=>{
    const [oidcToken, setOidcToken] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('');
    const [step, setStep] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);
    const [session, setSession] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
    const [mfaId, setMfaId] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('');
    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
    const [email, setEmail] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('');
    const [userId, setUserId] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
    const [mfaDeviceName, setMfaDeviceName] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('');
    const { capture } = (0,_contexts__WEBPACK_IMPORTED_MODULE_2__.useAnalyticsContext)();
    const [methods, setMethods] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);
    const chooseMfaMethod = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((method)=>{
        if (method.type === _core_types__WEBPACK_IMPORTED_MODULE_3__.MfaRequestType.Fido) {
            setStep(4);
            setMfaDeviceName(method.name);
        } else if (method.type === _core_types__WEBPACK_IMPORTED_MODULE_3__.MfaRequestType.Totp) {
            setStep(3);
            setMfaDeviceName('');
        } else {
            setError(_core_types__WEBPACK_IMPORTED_MODULE_3__.AuthErrorCode.UnsupportedMfaMethod);
        }
    }, []);
    const getUserDetails = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (idToken)=>{
        const client = (0,_core_common__WEBPACK_IMPORTED_MODULE_1__.getOidcClient)(idToken);
        const identity = await client.identityProve();
        const mfaMethods = identity.user_info?.configured_mfa ?? [];
        return {
            email: identity.email ?? '',
            userId: identity.identity?.sub,
            mfaMethods
        };
    }, []);
    const authenticate = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ({ expectedEmail, expectedUserId })=>{
        setStep(1);
        setEmail('');
        setUserId('');
        setIsLoading(true);
        setMfaDeviceName('');
        try {
            const idToken = await getOidcToken();
            if (!idToken) {
                capture('SeedlessLoginFailed');
                setError(_core_types__WEBPACK_IMPORTED_MODULE_3__.AuthErrorCode.FailedToFetchOidcToken);
                return;
            }
            const { email: obtainedEmail, userId: obtainedUserId, mfaMethods } = await getUserDetails(idToken);
            setEmail(obtainedEmail);
            setUserId(obtainedUserId);
            if (!obtainedUserId) {
                setError(_core_types__WEBPACK_IMPORTED_MODULE_3__.AuthErrorCode.MissingUserId);
                return;
            }
            // Old onboardgin process for seedless did not store user ID. The expectedUserId might be missing
            if (expectedUserId && expectedUserId !== obtainedUserId) {
                setError(_core_types__WEBPACK_IMPORTED_MODULE_3__.AuthErrorCode.MismatchingUserId);
                return;
            }
            // If expectedUserId is not available, we need to check if the emails match
            if (!expectedUserId && expectedEmail && obtainedEmail !== expectedEmail) {
                setError(_core_types__WEBPACK_IMPORTED_MODULE_3__.AuthErrorCode.MismatchingEmail);
                return;
            }
            setOidcToken(idToken);
            const authResponse = await (0,_core_common__WEBPACK_IMPORTED_MODULE_1__.requestOidcAuth)(idToken);
            const requiresMfa = authResponse.requiresMfa();
            if (!requiresMfa) {
                setStep(2);
                const token = await (0,_core_common__WEBPACK_IMPORTED_MODULE_1__.getSignerToken)(authResponse);
                await onSignerTokenObtained?.(token, obtainedEmail, obtainedUserId);
                return;
            }
            const mfaSessionInfo = authResponse.mfaSessionInfo();
            if (mfaSessionInfo) {
                setMfaId(authResponse.mfaId());
                setSession(await (0,_core_common__WEBPACK_IMPORTED_MODULE_1__.getSignerSession)(mfaSessionInfo));
                if (!mfaMethods.length) {
                    setError(_core_types__WEBPACK_IMPORTED_MODULE_3__.AuthErrorCode.NoMfaMethodsConfigured);
                    return false;
                }
                if (mfaMethods.length === 1) {
                    const method = mfaMethods[0];
                    if (method.type === 'totp') {
                        setStep(3);
                    } else if (method.type === 'fido') {
                        setStep(4);
                        setMfaDeviceName(method.name);
                    } else {
                        setError(_core_types__WEBPACK_IMPORTED_MODULE_3__.AuthErrorCode.UnsupportedMfaMethod);
                        return false;
                    }
                } else {
                    setStep(5);
                    setMethods(mfaMethods.map(_core_common__WEBPACK_IMPORTED_MODULE_1__.mapMfasToRecoveryMethods));
                }
            } else {
                setError(_core_types__WEBPACK_IMPORTED_MODULE_3__.AuthErrorCode.NoMfaDetails);
                _core_common__WEBPACK_IMPORTED_MODULE_1__.Monitoring.sentryCaptureException(new Error('MFA is required, but no details were provided'), _core_common__WEBPACK_IMPORTED_MODULE_1__.Monitoring.SentryExceptionTypes.SEEDLESS);
            }
        } catch (err) {
            setError(_core_types__WEBPACK_IMPORTED_MODULE_3__.AuthErrorCode.UnknownError);
            _core_common__WEBPACK_IMPORTED_MODULE_1__.Monitoring.sentryCaptureException(err, _core_common__WEBPACK_IMPORTED_MODULE_1__.Monitoring.SentryExceptionTypes.SEEDLESS);
        } finally{
            setIsLoading(false);
        }
    }, [
        setIsLoading,
        getOidcToken,
        getUserDetails,
        capture,
        onSignerTokenObtained
    ]);
    const verifyTotpCode = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (totpCode)=>{
        if (!session) {
            setError(_core_types__WEBPACK_IMPORTED_MODULE_3__.AuthErrorCode.UnknownError);
            _core_common__WEBPACK_IMPORTED_MODULE_1__.Monitoring.sentryCaptureException(new Error('Session not carried over from initial authentication'), _core_common__WEBPACK_IMPORTED_MODULE_1__.Monitoring.SentryExceptionTypes.SEEDLESS);
            return false;
        }
        setIsLoading(true);
        setError(undefined);
        let status;
        try {
            status = await session.totpApprove(mfaId, totpCode);
            if (!status.receipt?.confirmation) {
                setError(_core_types__WEBPACK_IMPORTED_MODULE_3__.AuthErrorCode.TotpVerificationError);
                capture(_core_types__WEBPACK_IMPORTED_MODULE_3__.AuthErrorCode.TotpVerificationError);
                setIsLoading(false);
                return false;
            }
        } catch  {
            setError(_core_types__WEBPACK_IMPORTED_MODULE_3__.AuthErrorCode.InvalidTotpCode);
            capture(_core_types__WEBPACK_IMPORTED_MODULE_3__.AuthErrorCode.InvalidTotpCode);
            setIsLoading(false);
            return false;
        }
        try {
            const oidcAuthResponse = await (0,_core_common__WEBPACK_IMPORTED_MODULE_1__.requestOidcAuth)(oidcToken, {
                mfaOrgId: "Org#abc03353-9320-4bf4-bc25-d1b687bf2b2c" || 0,
                mfaId,
                mfaConf: status.receipt.confirmation
            });
            const token = await (0,_core_common__WEBPACK_IMPORTED_MODULE_1__.getSignerToken)(oidcAuthResponse);
            if (!token) {
                capture('TotpNoToken');
                return false;
            }
            if (!userId) {
                setError(_core_types__WEBPACK_IMPORTED_MODULE_3__.AuthErrorCode.MissingUserId);
                return false;
            }
            await onSignerTokenObtained?.(token, email, userId);
            capture('TotpVaridationSuccess');
            return true;
        } catch (err) {
            setError(_core_types__WEBPACK_IMPORTED_MODULE_3__.AuthErrorCode.UnknownError);
            capture('TotpVaridationFailed');
            _core_common__WEBPACK_IMPORTED_MODULE_1__.Monitoring.sentryCaptureException(err, _core_common__WEBPACK_IMPORTED_MODULE_1__.Monitoring.SentryExceptionTypes.SEEDLESS);
            return false;
        } finally{
            setIsLoading(false);
        }
    }, [
        session,
        setIsLoading,
        mfaId,
        capture,
        oidcToken,
        userId,
        onSignerTokenObtained,
        email
    ]);
    const completeFidoChallenge = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{
        if (!session) {
            setError(_core_types__WEBPACK_IMPORTED_MODULE_3__.AuthErrorCode.UnknownError);
            _core_common__WEBPACK_IMPORTED_MODULE_1__.Monitoring.sentryCaptureException(new Error('Session not carried over from initial authentication'), _core_common__WEBPACK_IMPORTED_MODULE_1__.Monitoring.SentryExceptionTypes.SEEDLESS);
            return false;
        }
        setIsLoading(true);
        setError(undefined);
        try {
            const challenge = await session.fidoApproveStart(mfaId);
            let mfaInfo;
            try {
                // prompt the user to tap their FIDO and send the answer back to CubeSigner
                const answer = await (0,_core_common__WEBPACK_IMPORTED_MODULE_1__.launchFidoFlow)(_core_types__WEBPACK_IMPORTED_MODULE_3__.FIDOApiEndpoint.Authenticate, challenge.options);
                mfaInfo = await challenge.answer(answer);
            } catch  {
                setError(_core_types__WEBPACK_IMPORTED_MODULE_3__.AuthErrorCode.FidoChallengeFailed);
                return false;
            }
            // print out the current status of the MFA request and assert that it has been approved
            if (!mfaInfo.receipt) {
                setError(_core_types__WEBPACK_IMPORTED_MODULE_3__.AuthErrorCode.FidoChallengeNotApproved);
                return false;
            }
            // proceed with the MFA approval
            let authResponse = await (0,_core_common__WEBPACK_IMPORTED_MODULE_1__.requestOidcAuth)(oidcToken);
            authResponse = await authResponse.signWithMfaApproval({
                mfaId,
                mfaOrgId: "Org#abc03353-9320-4bf4-bc25-d1b687bf2b2c" || 0,
                mfaConf: mfaInfo.receipt.confirmation
            });
            if (authResponse.requiresMfa()) {
                setIsLoading(false);
                setError(_core_types__WEBPACK_IMPORTED_MODULE_3__.AuthErrorCode.UnknownError);
                _core_common__WEBPACK_IMPORTED_MODULE_1__.Monitoring.sentryCaptureException(new Error('MFA should not be required after approval'), _core_common__WEBPACK_IMPORTED_MODULE_1__.Monitoring.SentryExceptionTypes.SEEDLESS);
                return false;
            }
            if (!userId) {
                setError(_core_types__WEBPACK_IMPORTED_MODULE_3__.AuthErrorCode.MissingUserId);
                return false;
            }
            await onSignerTokenObtained?.(await (0,_core_common__WEBPACK_IMPORTED_MODULE_1__.getSignerToken)(authResponse), email, userId);
            return true;
        } catch (err) {
            setError(_core_types__WEBPACK_IMPORTED_MODULE_3__.AuthErrorCode.UnknownError);
            _core_common__WEBPACK_IMPORTED_MODULE_1__.Monitoring.sentryCaptureException(err, _core_common__WEBPACK_IMPORTED_MODULE_1__.Monitoring.SentryExceptionTypes.SEEDLESS);
            return false;
        } finally{
            setIsLoading(false);
        }
    }, [
        email,
        mfaId,
        oidcToken,
        onSignerTokenObtained,
        session,
        setIsLoading,
        userId
    ]);
    return {
        error,
        oidcToken,
        step,
        email,
        methods,
        chooseMfaMethod,
        authenticate,
        verifyTotpCode,
        completeFidoChallenge,
        mfaDeviceName
    };
};


}),
"../../packages/ui/src/hooks/useSeedlessAuthPromptState.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useSeedlessAuthPromptState: () => (useSeedlessAuthPromptState)
});
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/filter.js");
/* ESM import */var _contexts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/ui/src/contexts/index.ts");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var react_router_dom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/react-router/esm/react-router.js");
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../packages/common/src/index.ts");






const useSeedlessAuthPromptState = ()=>{
    const { events, request } = (0,_contexts__WEBPACK_IMPORTED_MODULE_1__.useConnectionContext)();
    const location = (0,react_router_dom__WEBPACK_IMPORTED_MODULE_4__.useLocation)();
    const [isAuthPromptVisible, setIsAuthPromptVisible] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
    const isAuthPopupPage = location.pathname.includes('seedless');
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        // Deactivate state querying on in the auth popup itself
        if (isAuthPopupPage) {
            return;
        }
        let eventsSubscription;
        request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.SEEDLESS_HAS_TOKEN_EXPIRED
        }).then((hasExpired)=>{
            // This state is not known right after extension is unlocked,
            // so we only want to toggle the prompt on/off when we actually
            // know if we should.
            if (typeof hasExpired === 'boolean') {
                setIsAuthPromptVisible(hasExpired);
            }
        }).finally(()=>{
            eventsSubscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_5__.filter)(_core_common__WEBPACK_IMPORTED_MODULE_3__.isSeedlessTokenEvent)).subscribe(async (event)=>{
                if (event.name === _core_types__WEBPACK_IMPORTED_MODULE_2__.SeedlessEvents.TokenExpired) {
                    setIsAuthPromptVisible(true);
                } else if (event.name === _core_types__WEBPACK_IMPORTED_MODULE_2__.SeedlessEvents.TokenRefreshed) {
                    setIsAuthPromptVisible(false);
                }
            });
        });
        return ()=>{
            eventsSubscription?.unsubscribe();
        };
    }, [
        events,
        request,
        isAuthPopupPage
    ]);
    return {
        isAuthPromptVisible
    };
};


}),
"../../packages/ui/src/hooks/useSeedlessMnemonicExport.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  ExportErrorCode: () => (ExportErrorCode),
  ExportState: () => (ExportState),
  useSeedlessMnemonicExport: () => (useSeedlessMnemonicExport)
});
/* ESM import */var date_fns__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/date-fns/esm/formatDistanceToNow/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var _contexts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/ui/src/contexts/index.ts");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../packages/common/src/index.ts");






var ExportState = /*#__PURE__*/ function(ExportState) {
    ExportState[ExportState["Loading"] = 0] = "Loading";
    ExportState[ExportState["NotInitiated"] = 1] = "NotInitiated";
    ExportState[ExportState["Initiating"] = 2] = "Initiating";
    ExportState[ExportState["Pending"] = 3] = "Pending";
    ExportState[ExportState["ReadyToExport"] = 4] = "ReadyToExport";
    ExportState[ExportState["Exporting"] = 5] = "Exporting";
    ExportState[ExportState["Exported"] = 6] = "Exported";
    ExportState[ExportState["Error"] = 7] = "Error";
    ExportState[ExportState["Cancelling"] = 8] = "Cancelling";
    return ExportState;
}({});
var ExportErrorCode = /*#__PURE__*/ function(ExportErrorCode) {
    ExportErrorCode[ExportErrorCode["FailedToInitialize"] = 0] = "FailedToInitialize";
    ExportErrorCode[ExportErrorCode["FailedToComplete"] = 1] = "FailedToComplete";
    ExportErrorCode[ExportErrorCode["FailedToCancel"] = 2] = "FailedToCancel";
    ExportErrorCode[ExportErrorCode["RequestOutdated"] = 3] = "RequestOutdated";
    return ExportErrorCode;
}({});
// TODO: can we somehow fetch the delay from Cubist?
const HOURS_48 = 60 * 60 * 48;
const ONE_MINUTE = 60;
const EXPORT_DELAY = (0,_core_common__WEBPACK_IMPORTED_MODULE_3__.isProductionBuild)() ? HOURS_48 : ONE_MINUTE;
const useSeedlessMnemonicExport = ()=>{
    const { request } = (0,_contexts__WEBPACK_IMPORTED_MODULE_1__.useConnectionContext)();
    const { capture } = (0,_contexts__WEBPACK_IMPORTED_MODULE_1__.useAnalyticsContext)();
    const [pendingRequest, setPendingRequest] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
    const [mnemonic, setMnemonic] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('');
    const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);
    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
    const [progress, setProgress] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);
    const [timeLeft, setTimeLeft] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('');
    const completeExport = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{
        setState(5);
        setMnemonic('');
        capture(_core_types__WEBPACK_IMPORTED_MODULE_2__.SeedlessExportAnalytics.DecryptionStarted);
        return request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.SEEDLESS_COMPLETE_RECOVERY_PHRASE_EXPORT
        }).then((phrase)=>{
            setMnemonic(phrase);
            setState(6);
            capture(_core_types__WEBPACK_IMPORTED_MODULE_2__.SeedlessExportAnalytics.DecryptionSucceeded);
        }).catch(()=>{
            setState(7);
            setError(1);
            capture(_core_types__WEBPACK_IMPORTED_MODULE_2__.SeedlessExportAnalytics.DecryptionFailed);
        });
    }, [
        request,
        capture
    ]);
    const cancelExport = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{
        setState(8);
        capture(_core_types__WEBPACK_IMPORTED_MODULE_2__.SeedlessExportAnalytics.CancellationStarted);
        return request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.SEEDLESS_CANCEL_RECOVERY_PHRASE_EXPORT
        }).then(()=>{
            setPendingRequest(undefined);
            setMnemonic('');
            setState(1);
            capture(_core_types__WEBPACK_IMPORTED_MODULE_2__.SeedlessExportAnalytics.CancellationSucceeded);
        }).catch(()=>{
            setState(7);
            setError(2);
            capture(_core_types__WEBPACK_IMPORTED_MODULE_2__.SeedlessExportAnalytics.CancellationFailed);
        });
    }, [
        request,
        capture
    ]);
    const initExport = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{
        setState(2);
        capture(_core_types__WEBPACK_IMPORTED_MODULE_2__.SeedlessExportAnalytics.InitiationStarted);
        request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.SEEDLESS_INIT_RECOVERY_PHRASE_EXPORT
        }).then((exportRequest)=>{
            setPendingRequest(exportRequest);
            setState(3);
            capture(_core_types__WEBPACK_IMPORTED_MODULE_2__.SeedlessExportAnalytics.InitiationSucceeded);
        }).catch(()=>{
            setState(7);
            setError(0);
            capture(_core_types__WEBPACK_IMPORTED_MODULE_2__.SeedlessExportAnalytics.InitiationFailed);
        });
    }, [
        request,
        capture
    ]);
    const updateProgress = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{
        if (!pendingRequest) {
            setState(1);
            return;
        }
        if (state === 4 || state === 5 || state === 6) {
            setProgress(100);
            return;
        }
        const { valid_epoch: availableAt, exp_epoch: availableUntil } = pendingRequest;
        const isInProgress = Date.now() / 1000 < availableAt;
        const isReadyToDecrypt = Date.now() / 1000 >= availableAt && Date.now() / 1000 <= availableUntil;
        const secondsPassed = EXPORT_DELAY - (availableAt - Date.now() / 1000);
        if (isInProgress) {
            setState(3);
            setTimeLeft((0,date_fns__WEBPACK_IMPORTED_MODULE_4__["default"])(new Date(availableAt * 1000)));
        } else if (isReadyToDecrypt) {
            setState(4);
            setTimeLeft((0,date_fns__WEBPACK_IMPORTED_MODULE_4__["default"])(new Date(availableUntil * 1000)));
        } else {
            setState(7);
            setError(3);
        }
        // capped between 0 and 100
        setProgress(Math.min(Math.max(0, secondsPassed / EXPORT_DELAY * 100), 100));
    }, [
        pendingRequest,
        state
    ]);
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.SEEDLESS_GET_RECOVERY_PHRASE_EXPORT_STATE
        }).then((existingExport)=>{
            setState(existingExport ? 3 : 1);
            setPendingRequest(existingExport);
        });
    }, [
        request
    ]);
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        if (!pendingRequest) {
            return;
        }
        // Update progress immediately
        updateProgress();
        // Schedule updates every 2s
        if (state === 3) {
            const timer = setInterval(updateProgress, 2000);
            return ()=>{
                clearInterval(timer);
            };
        }
    }, [
        pendingRequest,
        updateProgress,
        state
    ]);
    return {
        state,
        initExport,
        completeExport,
        cancelExport,
        mnemonic,
        error,
        progress,
        timeLeft
    };
};


}),
"../../packages/ui/src/hooks/useSendAnalyticsData.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useSendAnalyticsData: () => (useSendAnalyticsData)
});
/* ESM import */var _contexts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/ui/src/contexts/index.ts");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);


function useSendAnalyticsData() {
    const { capture } = (0,_contexts__WEBPACK_IMPORTED_MODULE_0__.useAnalyticsContext)();
    const sendTokenSelectedAnalytics = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((functionality)=>{
        capture(`${functionality}_TokenSelected`);
    }, [
        capture
    ]);
    const sendAmountEnteredAnalytics = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((functionality)=>{
        capture(`${functionality}_AmountEntered`);
    }, [
        capture
    ]);
    return {
        sendTokenSelectedAnalytics,
        sendAmountEnteredAnalytics
    };
}


}),
"../../packages/ui/src/hooks/useSetSendDataInParams.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useSetSendDataInParams: () => (useSetSendDataInParams)
});
/* ESM import */var _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/@avalabs/vm-module-types/dist/index.js");
/* ESM import */var _contexts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/ui/src/contexts/index.ts");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);
/* ESM import */var react_router_dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../node_modules/react-router/esm/react-router.js");




function useSetSendDataInParams() {
    const { pathname } = (0,react_router_dom__WEBPACK_IMPORTED_MODULE_3__.useLocation)();
    const { network } = (0,_contexts__WEBPACK_IMPORTED_MODULE_1__.useNetworkContext)();
    const history = (0,react_router_dom__WEBPACK_IMPORTED_MODULE_3__.useHistory)();
    const setSendDataInParams = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(({ token, address, options, amount })=>{
        const pushOrReplace = options?.replace ? history.replace : history.push;
        pushOrReplace({
            pathname: options?.path ?? pathname,
            search: `?${new URLSearchParams({
                tokenSymbol: token?.symbol || network?.networkToken.symbol || '',
                tokenAddress: token?.type === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.ERC20 || token?.type === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_0__.TokenType.SPL ? token?.address : '',
                amount: amount ?? '',
                address: address ?? ''
            }).toString()}`
        });
    }, [
        history,
        network?.networkToken.symbol,
        pathname
    ]);
    return setSendDataInParams;
}


}),
"../../packages/ui/src/hooks/useSolanaAddressInfo.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useSolanaAddressInfo: () => (useSolanaAddressInfo)
});
/* ESM import */var _scure_base__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/@scure/base/lib/esm/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var _contexts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/ui/src/contexts/index.ts");
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/common/src/index.ts");
/* ESM import */var _useGetSolBalance__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../packages/ui/src/hooks/useGetSolBalance.ts");





const useSolanaAddressInfo = ()=>{
    const { getSolBalance } = (0,_useGetSolBalance__WEBPACK_IMPORTED_MODULE_3__.useGetSolBalance)();
    const { network } = (0,_contexts__WEBPACK_IMPORTED_MODULE_1__.useNetworkContext)();
    const getAddressInfo = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (publicKeyHex)=>{
        const address = _scure_base__WEBPACK_IMPORTED_MODULE_4__.base58.encode(_scure_base__WEBPACK_IMPORTED_MODULE_4__.hex.decode(publicKeyHex));
        const [balanceInfo] = await (0,_core_common__WEBPACK_IMPORTED_MODULE_2__.resolve)(getSolBalance(address));
        return {
            address,
            balance: balanceInfo?.balance?.balanceDisplayValue ?? 'N/A',
            explorerLink: network ? (0,_core_common__WEBPACK_IMPORTED_MODULE_2__.getExplorerAddressByNetwork)(network, address, 'address') : ''
        };
    }, [
        getSolBalance,
        network
    ]);
    return {
        getAddressInfo
    };
};


}),
"../../packages/ui/src/hooks/useSolanaPublicKeys.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useSolanaPublicKeys: () => (useSolanaPublicKeys)
});
/* ESM import */var _scure_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../node_modules/@scure/base/lib/esm/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var _avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/@avalabs/core-wallets-sdk/esm/EVM/constants.js");
/* ESM import */var _contexts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/ui/src/contexts/index.ts");




const useSolanaPublicKeys = ()=>{
    const { appType, popDeviceSelection, hasLedgerTransport, wasTransportAttempted, initLedgerTransport, getPublicKey } = (0,_contexts__WEBPACK_IMPORTED_MODULE_1__.useLedgerContext)();
    const [status, setStatus] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('waiting');
    const getPublicKeyFromLedger = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (accountIndex)=>{
        const publicKey = await getPublicKey(accountIndex, _avalabs_core_wallets_sdk__WEBPACK_IMPORTED_MODULE_2__.DerivationPath.LedgerLive, 'SVM');
        return {
            index: accountIndex,
            key: _scure_base__WEBPACK_IMPORTED_MODULE_3__.hex.encode(publicKey)
        };
    }, [
        getPublicKey
    ]);
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        initLedgerTransport();
    }, [
        initLedgerTransport
    ]);
    const retrieveKeys = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (indexes)=>{
        try {
            const keys = [];
            for (const index of indexes){
                const key = await getPublicKeyFromLedger(index);
                keys.push(key);
            }
            return keys;
        } catch (err) {
            console.error(err);
            popDeviceSelection();
            throw err;
        }
    }, [
        popDeviceSelection,
        getPublicKeyFromLedger
    ]);
    // Attempt to automatically connect as soon as we establish the transport.
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        if (hasLedgerTransport && status === 'waiting') {
            setStatus(appType === _contexts__WEBPACK_IMPORTED_MODULE_1__.LedgerAppType.SOLANA ? 'ready' : 'waiting');
        } else if (!hasLedgerTransport && !wasTransportAttempted) {
            initLedgerTransport();
        }
    }, [
        appType,
        hasLedgerTransport,
        initLedgerTransport,
        status,
        retrieveKeys,
        wasTransportAttempted
    ]);
    return {
        status,
        retrieveKeys
    };
};


}),
"../../packages/ui/src/hooks/useSyncBridgeConfig.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useSyncBridgeConfig: () => (useSyncBridgeConfig)
});
/* ESM import */var _contexts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/ui/src/contexts/index.ts");
/* ESM import */var _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/@avalabs/core-bridge-sdk/esm/contexts/BridgeSDKProvider.js");
/* ESM import */var _avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../node_modules/@avalabs/core-bridge-sdk/esm/hooks/useBridgeConfigUpdater.js");
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/common/src/index.ts");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/filter.js");






/**
 * Periodically update the bridge config and keep it in sync with the background.
 */ function useSyncBridgeConfig() {
    const { setBridgeConfig } = (0,_avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_4__.useBridgeSDK)();
    const { events, request } = (0,_contexts__WEBPACK_IMPORTED_MODULE_0__.useConnectionContext)();
    const fetchConfig = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(()=>request({
            method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.BRIDGE_GET_CONFIG
        }), [
        request
    ]);
    // Periodically update the bridge config
    (0,_avalabs_core_bridge_sdk__WEBPACK_IMPORTED_MODULE_5__.useBridgeConfigUpdater)(fetchConfig);
    // Update the bridge config when either the network or bridge state changes
    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{
        const subscription = events().pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_6__.filter)((event)=>(0,_contexts__WEBPACK_IMPORTED_MODULE_0__.isNetworkUpdatedEvent)(event) || (0,_core_common__WEBPACK_IMPORTED_MODULE_1__.isBridgeStateUpdateEventListener)(event))).subscribe(async ()=>{
            const newConfig = await fetchConfig();
            setBridgeConfig(newConfig);
        });
        return ()=>subscription.unsubscribe();
    }, [
        events,
        fetchConfig,
        setBridgeConfig
    ]);
}


}),
"../../packages/ui/src/hooks/useTabFromParams.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useTabFromParams: () => (useTabFromParams)
});
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var react_router_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/react-router/esm/react-router.js");
/* ESM import */var xss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/xss/lib/index.js");
/* ESM import */var xss__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(xss__WEBPACK_IMPORTED_MODULE_1__);



const useTabFromParams = ()=>{
    const { search } = (0,react_router_dom__WEBPACK_IMPORTED_MODULE_2__.useLocation)();
    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{
        const { activeTab } = Object.fromEntries(new URLSearchParams(search).entries());
        return {
            activeTab: xss__WEBPACK_IMPORTED_MODULE_1___default()(activeTab)
        };
    }, [
        search
    ]);
};


}),
"../../packages/ui/src/hooks/useTokenFromParams.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useTokenFromParams: () => (useTokenFromParams)
});
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var react_router_dom__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../node_modules/react-router/esm/react-router.js");
/* ESM import */var _contexts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/ui/src/contexts/index.ts");
/* ESM import */var _useTokensWithBalances__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/ui/src/hooks/useTokensWithBalances.ts");
/* ESM import */var xss__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../node_modules/xss/lib/index.js");
/* ESM import */var xss__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(xss__WEBPACK_IMPORTED_MODULE_3__);
/* ESM import */var _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/@avalabs/vm-module-types/dist/index.js");






function useTokenFromParams(withDefault = true) {
    const { search } = (0,react_router_dom__WEBPACK_IMPORTED_MODULE_5__.useLocation)();
    const allTokens = (0,_useTokensWithBalances__WEBPACK_IMPORTED_MODULE_2__.useTokensWithBalances)({
        forceShowTokensWithoutBalances: true
    });
    const [selectedToken, setSelectedToken] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(undefined);
    const { accounts: { active: activeAccount } } = (0,_contexts__WEBPACK_IMPORTED_MODULE_1__.useAccountsContext)();
    const { tokenSymbol, tokenAddress } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{
        const { tokenSymbol: rawTokenSymbol, tokenAddress: rawTokenAddress } = Object.fromEntries(new URLSearchParams(search).entries());
        return {
            tokenSymbol: xss__WEBPACK_IMPORTED_MODULE_3___default()(rawTokenSymbol),
            tokenAddress: xss__WEBPACK_IMPORTED_MODULE_3___default()(rawTokenAddress)
        };
    }, [
        search
    ]);
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        let firstNativeToken;
        /**
     * Tries to find ERC20 token by its address or a native token by its symbol
     * Stores the first native token as a possible fallback value
     */ const targetToken = allTokens?.find((token)=>{
            if (!firstNativeToken && token.type === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_4__.TokenType.NATIVE) {
                firstNativeToken = token;
            }
            return token.type === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_4__.TokenType.ERC20 || token.type === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_4__.TokenType.SPL ? token.address === tokenAddress : token.type === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_4__.TokenType.NATIVE ? token.symbol === tokenSymbol : false;
        });
        if (!targetToken && !withDefault) return;
        setSelectedToken(targetToken ?? (firstNativeToken || allTokens?.[0]));
    }, [
        tokenSymbol,
        tokenAddress,
        allTokens,
        activeAccount,
        withDefault
    ]);
    return selectedToken;
}


}),
"../../packages/ui/src/hooks/useTokenPrice.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useNativeTokenPrice: () => (useNativeTokenPrice)
});
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var _contexts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/ui/src/contexts/index.ts");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);



function useNativeTokenPrice(network) {
    const { request } = (0,_contexts__WEBPACK_IMPORTED_MODULE_1__.useConnectionContext)();
    const [price, setPrice] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(0);
    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{
        const tokenId = network?.pricingProviders?.coingecko.nativeTokenId;
        if (tokenId) {
            request({
                method: _core_types__WEBPACK_IMPORTED_MODULE_0__.ExtensionRequest.TOKEN_PRICE_GET,
                params: [
                    tokenId
                ]
            }).then((p)=>setPrice(p || 0)).catch(()=>setPrice(0));
        } else {
            setPrice(0);
        }
    }, [
        network,
        request
    ]);
    return price;
}


}),
"../../packages/ui/src/hooks/useTokenPriceIsMissing.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useTokenPriceMissing: () => (useTokenPriceMissing)
});
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/common/src/index.ts");
/* ESM import */var _contexts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/ui/src/contexts/index.ts");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);






function useTokenPriceMissing() {
    const { balances, isTokensCached } = (0,_contexts__WEBPACK_IMPORTED_MODULE_1__.useBalancesContext)();
    const { accounts: { active: activeAccount } } = (0,_contexts__WEBPACK_IMPORTED_MODULE_1__.useAccountsContext)();
    const { network: activeNetwork, favoriteNetworks } = (0,_contexts__WEBPACK_IMPORTED_MODULE_1__.useNetworkContext)();
    const { getTokenVisibility } = (0,_contexts__WEBPACK_IMPORTED_MODULE_1__.useSettingsContext)();
    const networksMissingPrice = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{
        if (isTokensCached) {
            return {};
        }
        const networkIds = Object.keys(balances.tokens ?? {});
        if (!networkIds.length) {
            return {};
        }
        const networksIsMissingPrices = {};
        networkIds.forEach((networkId)=>{
            const tokensForNetwork = balances.tokens?.[networkId];
            // If the network does not have any tokens with balance do nothing,
            if (!tokensForNetwork) {
                return;
            }
            const addressToCheck = (0,_core_common__WEBPACK_IMPORTED_MODULE_0__.isBitcoinChainId)(Number(networkId)) ? activeAccount?.addressBTC : activeAccount?.addressC;
            // If an address to check is not available, do nothing.
            if (!addressToCheck) {
                return;
            }
            const tokensForActiveAccount = tokensForNetwork[addressToCheck];
            // If tokens for active account not available, do nothing.
            if (!tokensForActiveAccount) {
                return;
            }
            const isMissingPrices = Object.values(tokensForActiveAccount).filter(getTokenVisibility) // Disregard hidden tokens
            .some((token)=>token.balance > 0n && token.priceInCurrency === undefined);
            networksIsMissingPrices[networkId] = isMissingPrices;
        });
        return networksIsMissingPrices;
    }, [
        activeAccount?.addressBTC,
        activeAccount?.addressC,
        isTokensCached,
        balances.tokens,
        getTokenVisibility
    ]);
    const favoriteNetworksMissingPrice = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>favoriteNetworks.some((network)=>networksMissingPrice[network.chainId] === true), [
        favoriteNetworks,
        networksMissingPrice
    ]);
    const activeNetworkMissingPrice = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{
        if (!activeNetwork?.chainId) {
            return false;
        }
        return networksMissingPrice[activeNetwork.chainId] === true;
    }, [
        activeNetwork?.chainId,
        networksMissingPrice
    ]);
    const isPriceMissingFromNetwork = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((networkId)=>{
        return networksMissingPrice[networkId] === true;
    }, [
        networksMissingPrice
    ]);
    return {
        favoriteNetworksMissingPrice,
        activeNetworkMissingPrice,
        isPriceMissingFromNetwork
    };
}


}),
"../../packages/ui/src/hooks/useTokensWithBalances.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useTokensWithBalances: () => (useTokensWithBalances)
});
/* ESM import */var _contexts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/ui/src/contexts/index.ts");
/* ESM import */var _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/@avalabs/vm-module-types/dist/index.js");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../packages/common/src/index.ts");
/* ESM import */var lodash__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/lodash/lodash.js");
/* ESM import */var lodash__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_4__);
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_5__);










const nativeTokensFirst = (tokens)=>[
        ...tokens
    ].sort((t)=>t.type === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.NATIVE ? -1 : 1);
const DISALLOWED_ASSETS = [];
/**
 *
 * @param {UseTokensWithBalanceOptions} options
 * @returns Tokens list with OR without balances based on `forceShowTokensWithoutBalances`
 */ const useTokensWithBalances = (options = {})=>{
    const [allTokensWithPlaceholderBalances, setAllTokensWithPlaceholderBalances] = (0,react__WEBPACK_IMPORTED_MODULE_5__.useState)({});
    const { request } = (0,_contexts__WEBPACK_IMPORTED_MODULE_0__.useConnectionContext)();
    const { balances } = (0,_contexts__WEBPACK_IMPORTED_MODULE_0__.useBalancesContext)();
    const { showTokensWithoutBalances, customTokens, getTokenVisibility } = (0,_contexts__WEBPACK_IMPORTED_MODULE_0__.useSettingsContext)();
    const { accounts: { active: activeAccount } } = (0,_contexts__WEBPACK_IMPORTED_MODULE_0__.useAccountsContext)();
    const { network: activeNetwork } = (0,_contexts__WEBPACK_IMPORTED_MODULE_0__.useNetworkContext)();
    const { forceShowTokensWithoutBalances = false, disallowedAssets = DISALLOWED_ASSETS, network } = options;
    const customTokensWithZeroBalance = (0,react__WEBPACK_IMPORTED_MODULE_5__.useMemo)(()=>{
        if (!network?.chainId) {
            return {};
        }
        const customTokensForActiveNetwork = customTokens[network?.chainId];
        if (!customTokensForActiveNetwork) {
            return {};
        }
        return Object.entries(customTokensForActiveNetwork).reduce((acc, [address, tokenData])=>{
            acc[address] = {
                ...tokenData,
                type: _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.ERC20,
                balance: 0n,
                balanceDisplayValue: '0',
                reputation: null
            };
            return acc;
        }, {});
    }, [
        customTokens,
        network?.chainId
    ]);
    const visibleTokens = (0,react__WEBPACK_IMPORTED_MODULE_5__.useCallback)((tokens)=>{
        if (options.forceHiddenTokens) {
            return tokens;
        }
        return tokens.filter(getTokenVisibility);
    }, [
        getTokenVisibility,
        options.forceHiddenTokens
    ]);
    const selectedNetwork = (0,react__WEBPACK_IMPORTED_MODULE_5__.useMemo)(()=>network ?? activeNetwork, [
        network,
        activeNetwork
    ]);
    (0,react__WEBPACK_IMPORTED_MODULE_5__.useEffect)(()=>{
        const getNetworkTokens = async ()=>{
            if (!selectedNetwork?.chainId) {
                setAllTokensWithPlaceholderBalances({});
                return;
            }
            try {
                const networkTokens = await request({
                    method: _core_types__WEBPACK_IMPORTED_MODULE_2__.ExtensionRequest.GET_NETWORK_TOKENS,
                    params: [
                        selectedNetwork.chainId,
                        disallowedAssets
                    ]
                });
                const tokensWithPlaceholderBalances = Object.entries(networkTokens.tokens).reduce((tokensWithBalances, [address, tokenData])=>{
                    tokensWithBalances[address.toLowerCase()] = {
                        ...tokenData,
                        type: tokenData.contractType === 'SPL' ? _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.SPL : _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.ERC20,
                        balance: 0n,
                        balanceDisplayValue: '0',
                        reputation: null
                    };
                    return tokensWithBalances;
                }, {});
                setAllTokensWithPlaceholderBalances({
                    ...customTokensWithZeroBalance,
                    ...tokensWithPlaceholderBalances
                });
            } catch (err) {
                console.error(err);
                setAllTokensWithPlaceholderBalances({});
            }
        };
        if (forceShowTokensWithoutBalances || showTokensWithoutBalances) {
            getNetworkTokens();
            return;
        }
        setAllTokensWithPlaceholderBalances({});
    }, [
        request,
        selectedNetwork?.chainId,
        forceShowTokensWithoutBalances,
        showTokensWithoutBalances,
        customTokensWithZeroBalance,
        disallowedAssets
    ]);
    return (0,react__WEBPACK_IMPORTED_MODULE_5__.useMemo)(()=>{
        if (!selectedNetwork?.chainId || !activeAccount) {
            return [];
        }
        const address = (0,_core_common__WEBPACK_IMPORTED_MODULE_3__.getAddressForChain)(selectedNetwork, activeAccount);
        if (!address) {
            return [];
        }
        const networkBalances = balances.tokens?.[selectedNetwork?.chainId]?.[address] ?? {};
        if (forceShowTokensWithoutBalances || showTokensWithoutBalances) {
            const merged = (0,lodash__WEBPACK_IMPORTED_MODULE_4__.merge)({}, (0,_core_common__WEBPACK_IMPORTED_MODULE_3__.lowerCaseKeys)(allTokensWithPlaceholderBalances), (0,_core_common__WEBPACK_IMPORTED_MODULE_3__.lowerCaseKeys)(networkBalances));
            return visibleTokens(nativeTokensFirst(Object.values(merged)));
        }
        const unfilteredTokens = Object.values(networkBalances);
        if (!unfilteredTokens) {
            return [];
        }
        const nativeToken = unfilteredTokens.find((token)=>token.type === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.NATIVE);
        const defaultResult = nativeToken ? [
            nativeToken
        ] : [];
        const filteredTokens = unfilteredTokens.filter((token)=>{
            return token.type === _avalabs_vm_module_types__WEBPACK_IMPORTED_MODULE_1__.TokenType.NATIVE || token.balance > 0n;
        });
        return visibleTokens(filteredTokens.length ? nativeTokensFirst(filteredTokens) : defaultResult);
    }, [
        selectedNetwork,
        activeAccount,
        balances.tokens,
        forceShowTokensWithoutBalances,
        showTokensWithoutBalances,
        allTokensWithPlaceholderBalances,
        visibleTokens
    ]);
};


}),
"../../packages/ui/src/hooks/useTotpErrorMessage.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useTotpErrorMessage: () => (useTotpErrorMessage)
});
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var react_i18next__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/react-i18next/dist/es/useTranslation.js");


const useTotpErrorMessage = (code)=>{
    const { t } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_1__.useTranslation)();
    if (code === _core_types__WEBPACK_IMPORTED_MODULE_0__.AuthErrorCode.InvalidTotpCode) {
        return t('Invalid code. Please try again.');
    }
    if (code === _core_types__WEBPACK_IMPORTED_MODULE_0__.AuthErrorCode.TotpVerificationError) {
        return t('We were not able to verify this code. Please try again.');
    }
    return '';
};


}),
"../../packages/ui/src/hooks/useWalletName.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useWalletName: () => (useWalletName)
});
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var react_i18next__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../node_modules/react-i18next/dist/es/useTranslation.js");
/* ESM import */var _contexts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/ui/src/contexts/index.ts");
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/types/src/index.ts");




const useWalletName = ()=>{
    const { t } = (0,react_i18next__WEBPACK_IMPORTED_MODULE_3__.useTranslation)();
    const { walletDetails } = (0,_contexts__WEBPACK_IMPORTED_MODULE_1__.useWalletContext)();
    const walletName = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{
        if (!walletDetails?.type) {
            return;
        }
        switch(walletDetails.type){
            case _core_types__WEBPACK_IMPORTED_MODULE_2__.SecretType.Mnemonic:
                return t('Recovery Phrase {{number}}', {
                    number: '01'
                });
            case _core_types__WEBPACK_IMPORTED_MODULE_2__.SecretType.Keystone:
                return t('Keystone {{number}}', {
                    number: '01'
                });
            case _core_types__WEBPACK_IMPORTED_MODULE_2__.SecretType.Ledger:
            case _core_types__WEBPACK_IMPORTED_MODULE_2__.SecretType.LedgerLive:
                return t('Ledger {{number}}', {
                    number: '01'
                });
            case _core_types__WEBPACK_IMPORTED_MODULE_2__.SecretType.Seedless:
                return t('Seedless {{number}}', {
                    number: '01'
                });
        }
    }, [
        t,
        walletDetails?.type
    ]);
    return walletName;
};


}),
"../../packages/ui/src/hooks/useWalletTotalBalance.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useWalletTotalBalance: () => (useWalletTotalBalance)
});
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var _contexts_WalletTotalBalanceProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/ui/src/contexts/WalletTotalBalanceProvider.tsx");


const useWalletTotalBalance = (walletId)=>{
    const { walletBalances } = (0,_contexts_WalletTotalBalanceProvider__WEBPACK_IMPORTED_MODULE_1__.useWalletTotalBalanceContext)();
    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>walletId && walletBalances[walletId] || {
            isLoading: false,
            hasErrorOccurred: false
        }, [
        walletBalances,
        walletId
    ]);
};


}),
"../../packages/ui/src/hooks/useWillSwitchToPrimaryAccount.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useWillSwitchToPrimaryAccount: () => (useWillSwitchToPrimaryAccount)
});
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var _contexts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/ui/src/contexts/index.ts");
/* ESM import */var _core_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../packages/common/src/index.ts");



function useWillSwitchToPrimaryAccount(isSwitchingToTestnetMode) {
    const { accounts: { active: activeAccount } } = (0,_contexts__WEBPACK_IMPORTED_MODULE_1__.useAccountsContext)();
    const isFireblocksAccount = activeAccount?.type === _core_types__WEBPACK_IMPORTED_MODULE_0__.AccountType.FIREBLOCKS;
    return Boolean((0,_core_common__WEBPACK_IMPORTED_MODULE_2__.isProductionBuild)() && isSwitchingToTestnetMode && isFireblocksAccount);
}


}),
"../../packages/ui/src/hooks/useWindowGetsClosedOrHidden.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useWindowGetsClosedOrHidden: () => (useWindowGetsClosedOrHidden)
});
/* ESM import */var _core_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/types/src/index.ts");
/* ESM import */var _useIsSpecificContextContainer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/ui/src/hooks/useIsSpecificContextContainer.ts");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/observable/merge.js");
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/observable/fromEventPattern.js");
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/filter.js");
/* ESM import */var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../../node_modules/rxjs/dist/esm5/internal/operators/first.js");




function useWindowGetsClosedOrHidden(cancelHandler) {
    const isConfirmPopup = (0,_useIsSpecificContextContainer__WEBPACK_IMPORTED_MODULE_1__.useIsSpecificContextContainer)(_core_types__WEBPACK_IMPORTED_MODULE_0__.ContextContainer.CONFIRM);
    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{
        const subscription = (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.merge)((0,rxjs__WEBPACK_IMPORTED_MODULE_4__.fromEventPattern)((handler)=>{
            window.addEventListener('unload', handler);
        }, (handler)=>{
            window.removeEventListener('unload', handler);
        }), (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.fromEventPattern)((handler)=>{
            window.addEventListener('visibilitychange', handler);
        }, (handler)=>{
            window.removeEventListener('visibilitychange', handler);
        }).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_5__.filter)(()=>{
            return document.visibilityState === 'hidden';
        }))).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_6__.first)()).subscribe(()=>{
            // Only close for popup windows. The extension UI should not react this way.
            if (isConfirmPopup) {
                cancelHandler();
            }
        });
        return ()=>{
            subscription?.unsubscribe();
        };
    }, [
        cancelHandler,
        isConfirmPopup
    ]);
}


}),
"../../packages/ui/src/index.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  AccountImportStatus: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.AccountImportStatus),
  AccountManagerContext: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.AccountManagerContext),
  AccountManagerProvider: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.AccountManagerProvider),
  AccountsContextProvider: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.AccountsContextProvider),
  AnalyticsContextProvider: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.AnalyticsContextProvider),
  ApprovalsContext: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.ApprovalsContext),
  ApprovalsContextProvider: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.ApprovalsContextProvider),
  AuthStep: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.AuthStep),
  BalancesProvider: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.BalancesProvider),
  BridgeProvider: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.BridgeProvider),
  ConnectionContextProvider: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.ConnectionContextProvider),
  ContactsContextProvider: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.ContactsContextProvider),
  CurrenciesContextProvider: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.CurrenciesContextProvider),
  DISALLOWED_SWAP_ASSETS: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.DISALLOWED_SWAP_ASSETS),
  DefiContextProvider: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.DefiContextProvider),
  ExportErrorCode: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.ExportErrorCode),
  ExportState: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.ExportState),
  FeatureFlagsContextProvider: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.FeatureFlagsContextProvider),
  FirebaseContextProvider: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.FirebaseContextProvider),
  FunctionNames: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.FunctionNames),
  IPFS_URL: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.IPFS_URL),
  JUPITER_PARTNER_ADDRESS: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.JUPITER_PARTNER_ADDRESS),
  JUPITER_PARTNER_FEE_BPS: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.JUPITER_PARTNER_FEE_BPS),
  KeystoneContextProvider: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.KeystoneContextProvider),
  LEDGER_VERSION_WITH_EIP_712: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.LEDGER_VERSION_WITH_EIP_712),
  LedgerAppType: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.LedgerAppType),
  LedgerContextProvider: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.LedgerContextProvider),
  NATIVE_TOKEN_ADDRESS: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.NATIVE_TOKEN_ADDRESS),
  NetworkContextProvider: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.NetworkContextProvider),
  NetworkFeeContextProvider: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.NetworkFeeContextProvider),
  NotificationsContextProvider: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.NotificationsContextProvider),
  OnboardingContextProvider: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.OnboardingContextProvider),
  PARASWAP_PARTNER_ADDRESS: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.PARASWAP_PARTNER_ADDRESS),
  PARASWAP_PARTNER_FEE_BPS: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.PARASWAP_PARTNER_FEE_BPS),
  PARASWAP_RETRYABLE_ERRORS: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.PARASWAP_RETRYABLE_ERRORS),
  PermissionContextProvider: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.PermissionContextProvider),
  REQUIRED_LEDGER_VERSION: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.REQUIRED_LEDGER_VERSION),
  SOL_MINT: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.SOL_MINT),
  SeedlessMfaManagementContext: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.SeedlessMfaManagementContext),
  SeedlessMfaManagementProvider: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.SeedlessMfaManagementProvider),
  SelectionMode: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.SelectionMode),
  SettingsContextProvider: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.SettingsContextProvider),
  SettingsPages: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.SettingsPages),
  SwapContext: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.SwapContext),
  SwapContextProvider: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.SwapContextProvider),
  UnifiedBridgeProvider: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.UnifiedBridgeProvider),
  WalletConnectContextProvider: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.WalletConnectContextProvider),
  WalletContextProvider: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.WalletContextProvider),
  WalletTotalBalanceContext: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.WalletTotalBalanceContext),
  WalletTotalBalanceProvider: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.WalletTotalBalanceProvider),
  getCurrencyFormatter: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.getCurrencyFormatter),
  hasParaswapError: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.hasParaswapError),
  isAPIError: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.isAPIError),
  isJupiterQuote: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.isJupiterQuote),
  isJupiterSwapParams: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.isJupiterSwapParams),
  isNetworkUpdatedEvent: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.isNetworkUpdatedEvent),
  isParaswapQuote: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.isParaswapQuote),
  isParaswapSwapParams: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.isParaswapSwapParams),
  networkChanged: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.networkChanged),
  networkChanges: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.networkChanges),
  networksUpdatedEventListener: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.networksUpdatedEventListener),
  useAccountManager: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.useAccountManager),
  useAccountsContext: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.useAccountsContext),
  useAnalyticsConsentCallbacks: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useAnalyticsConsentCallbacks),
  useAnalyticsContext: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.useAnalyticsContext),
  useAppDimensions: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useAppDimensions),
  useAppTypeFromParams: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useAppTypeFromParams),
  useApprovalHelpers: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useApprovalHelpers),
  useApprovalsContext: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.useApprovalsContext),
  useApproveAction: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useApproveAction),
  useBalanceTotalInCurrency: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useBalanceTotalInCurrency),
  useBalancesContext: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.useBalancesContext),
  useBridge: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useBridge),
  useBridgeAmounts: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useBridgeAmounts),
  useBridgeContext: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.useBridgeContext),
  useBridgeNetworkPrice: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useBridgeNetworkPrice),
  useBridgeTransferStatus: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useBridgeTransferStatus),
  useBridgeTxHandling: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useBridgeTxHandling),
  useCameraPermissions: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useCameraPermissions),
  useCoinGeckoId: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useCoinGeckoId),
  useConnectionContext: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.useConnectionContext),
  useContactIdFromParams: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useContactIdFromParams),
  useContactsContext: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.useContactsContext),
  useConvertedCurrencyFormatter: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useConvertedCurrencyFormatter),
  useCurrenciesContext: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.useCurrenciesContext),
  useDAppScan: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useDAppScan),
  useDefiContext: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.useDefiContext),
  useDismissedBanners: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useDismissedBanners),
  useDisplaytokenlist: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useDisplaytokenlist),
  useErrorMessage: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useErrorMessage),
  useFeatureFlagContext: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.useFeatureFlagContext),
  useFidoErrorMessage: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useFidoErrorMessage),
  useFirebaseContext: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.useFirebaseContext),
  useGetAvaxBalance: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useGetAvaxBalance),
  useGetRequestId: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useGetRequestId),
  useGetSolBalance: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useGetSolBalance),
  useGoBack: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useGoBack),
  useHasEnoughForGas: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useHasEnoughForGas),
  useImportLedger: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useImportLedger),
  useImportSeedphrase: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useImportSeedphrase),
  useInterval: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useInterval),
  useIsFunctionAvailable: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useIsFunctionAvailable),
  useIsIncorrectDevice: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useIsIncorrectDevice),
  useIsMainnet: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useIsMainnet),
  useIsSolanaEnabled: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useIsSolanaEnabled),
  useIsSpecificContextContainer: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useIsSpecificContextContainer),
  useIsUsingFireblocksAccount: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useIsUsingFireblocksAccount),
  useIsUsingKeystoneWallet: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useIsUsingKeystoneWallet),
  useIsUsingLedgerWallet: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useIsUsingLedgerWallet),
  useIsUsingSeedlessAccount: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useIsUsingSeedlessAccount),
  useIsUsingWalletConnectAccount: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useIsUsingWalletConnectAccount),
  useJsonFileReader: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useJsonFileReader),
  useKeyboardShortcuts: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useKeyboardShortcuts),
  useKeystoneContext: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.useKeystoneContext),
  useKeystoreFileImport: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useKeystoreFileImport),
  useLanguage: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useLanguage),
  useLedgerContext: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.useLedgerContext),
  useLiveBalance: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useLiveBalance),
  useLocalStorage: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useLocalStorage),
  useLogoUriForBridgeTransaction: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useLogoUriForBridgeTransaction),
  useNativeTokenPrice: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useNativeTokenPrice),
  useNetworkContext: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.useNetworkContext),
  useNetworkFeeContext: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.useNetworkFeeContext),
  useNfts: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useNfts),
  useNotificationsContext: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.useNotificationsContext),
  useOnboardingContext: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.useOnboardingContext),
  useOnline: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useOnline),
  usePageHistory: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.usePageHistory),
  usePendingBridgeTransactions: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.usePendingBridgeTransactions),
  usePermissionContext: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.usePermissionContext),
  usePersistedTabs: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.usePersistedTabs),
  usePreferredColorScheme: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.usePreferredColorScheme),
  usePrivateKeyExport: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.usePrivateKeyExport),
  usePrivateKeyImport: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.usePrivateKeyImport),
  useQueryParams: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useQueryParams),
  useRegisterBtcWalletPolicy: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useRegisterBtcWalletPolicy),
  useSeedlessActions: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useSeedlessActions),
  useSeedlessAuth: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useSeedlessAuth),
  useSeedlessAuthPromptState: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useSeedlessAuthPromptState),
  useSeedlessMfaManager: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.useSeedlessMfaManager),
  useSeedlessMnemonicExport: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useSeedlessMnemonicExport),
  useSendAnalyticsData: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useSendAnalyticsData),
  useSetSendDataInParams: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useSetSendDataInParams),
  useSettingsContext: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.useSettingsContext),
  useSolanaAddressInfo: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useSolanaAddressInfo),
  useSolanaPublicKeys: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useSolanaPublicKeys),
  useSwapContext: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.useSwapContext),
  useSyncBridgeConfig: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useSyncBridgeConfig),
  useTabFromParams: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useTabFromParams),
  useTokenFromParams: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useTokenFromParams),
  useTokenPriceMissing: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useTokenPriceMissing),
  useTokensWithBalances: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useTokensWithBalances),
  useTotpErrorMessage: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useTotpErrorMessage),
  useUnifiedBridgeContext: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.useUnifiedBridgeContext),
  useWalletConnectContext: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.useWalletConnectContext),
  useWalletContext: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.useWalletContext),
  useWalletName: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useWalletName),
  useWalletTotalBalance: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useWalletTotalBalance),
  useWalletTotalBalanceContext: () => (/* reexport safe */ _contexts__WEBPACK_IMPORTED_MODULE_0__.useWalletTotalBalanceContext),
  useWillSwitchToPrimaryAccount: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useWillSwitchToPrimaryAccount),
  useWindowGetsClosedOrHidden: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_1__.useWindowGetsClosedOrHidden)
});
/* ESM import */var _contexts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../packages/ui/src/contexts/index.ts");
/* ESM import */var _hooks__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../packages/ui/src/hooks/index.ts");




}),
"?54a6": (function () {
/* (ignored) */

}),
"?ebe8": (function () {
/* (ignored) */

}),
"?143a": (function () {
/* (ignored) */

}),
"?1dda": (function () {
/* (ignored) */

}),
"?8d9f": (function () {
/* (ignored) */

}),
"?b827": (function () {
/* (ignored) */

}),
"?197c": (function () {
/* (ignored) */

}),
"?3cf9": (function () {
/* (ignored) */

}),
"?1ce0": (function () {
/* (ignored) */

}),
"?52c2": (function () {
/* (ignored) */

}),
"?5003": (function () {
/* (ignored) */

}),
"?e3ec": (function () {
/* (ignored) */

}),
"?7531": (function () {
/* (ignored) */

}),
"?37b7": (function () {
/* (ignored) */

}),
"?25fb": (function () {
/* (ignored) */

}),
"?fe09": (function () {
/* (ignored) */

}),
"?111e": (function () {
/* (ignored) */

}),
"?74e3": (function () {
/* (ignored) */

}),
"?5dff": (function () {
/* (ignored) */

}),
"?d976": (function () {
/* (ignored) */

}),
"../../packages/common/src/utils/keystore/keystore-fixtures/keystore-v2.json": (function (module) {
module.exports = JSON.parse('{"version":"2.0","salt":"2SjQXSMR87tBvYqbkwTFL61gEdwR","pass_hash":"2NJf6rqPshCU69hMkPEMBLBZLfBKshHy68cWgNY7kNmAM988Qt","keys":[{"key":"C8JG3QvhF9XUiXMyAmQoTfTkWg5UySMPKeCrkGH8u67HrqStNtBxZyDxLY6NrSS8k51Fg3V","iv":"Fc8Xyxmhd2X55sgjy4aTxN","address":"X-EAZkJNdFBjVQQ7zS81hWCnRHfMKf3vpYH"},{"key":"p52F7MGpyicfG2c7RXuKKKpUE7X9qjLX7qx2ju3mei58jU4vCxRQpjcR6RvSKbozphMT1s8","iv":"N6fYr5gT4TJfB6Tzs9oLMN","address":"X-7r1aDs2jiJHr1reFfLFzzKrprZruXVzqM"}]}')

}),
"../../packages/common/src/utils/keystore/keystore-fixtures/keystore-v3.json": (function (module) {
module.exports = JSON.parse('{"version":"3.0","salt":"kwkVtmPkafnwWbp65nYs2z9cQeN","pass_hash":"2gid7yJzvyg2Mz4HUJLh3jvgumpDJmRu2PBopqHYacVjwisp1g","keys":[{"key":"uDvvzSQQxkFGhYUvDcRFmWtKbqJEZ8swKgMx7Ba3eWUoTMaikvV2oD2jUFzaS35WdP8rtqF","iv":"AN8nLnaK84rfoKXtxm6evy","address":"X-EAZkJNdFBjVQQ7zS81hWCnRHfMKf3vpYH"},{"key":"PiLrcsSBZ1fBE9v3axsHycfhta6NwMf56qqGKgxswr4VSNGL3kZUQG8YCCRG2q7QDN8y5mp","iv":"L7MojgHmudo2WpbMCdfgCg","address":"X-7r1aDs2jiJHr1reFfLFzzKrprZruXVzqM"}],"warnings":["This address listed in this file is for internal wallet use only. DO NOT USE THIS ADDRESS"]}')

}),
"../../packages/common/src/utils/keystore/keystore-fixtures/keystore-v4.json": (function (module) {
module.exports = JSON.parse('{"version":"4.0","salt":"UWLRsfsyjY51E1s8CVa7cvvMHMz","pass_hash":"M6mzyfS4i4bKBxXQZFuQ6BsRnMSVMe7GnBd1HTmVLi2jcscPA","keys":[{"key":"s2RScHaFr6nr3JQkb8wNBbAPAWiGNkZRRmbUYY2tnxhCpdTgnHLyTDHXN4mdfEV4fVwFcMP","iv":"A6jQMX7e6doGS6wVvdLzA"}]}')

}),
"../../packages/common/src/utils/keystore/keystore-fixtures/keystore-v5.json": (function (module) {
module.exports = JSON.parse('{"version":"5.0","salt":"TEUQMGR1XdHs5wb4SVSA7LriUhR","pass_hash":"avkdK9YFLn1zfZjvBsB9ipKRzfqr4rvqBryVosB6NUgFiv9kd","keys":[{"key":"5jVaPDgXd9nm3DF6XWSbvpGFKVd5yujnYekQCoK4evkoMBAWNz7Nc7YVKYUc6RQJiPy47rh1kfc2uydapEuVieN51eeHRATGqQP4Rj5wjN1xwKVgEsxvGeAytMevbYE9L2y4nCPyHvVcPQB66d7B5kdgYv3N7QVd3K284skjfGsZbZAT16vinjkZry8ypdwt2UV7c6WbVFX72BuEAajapn5TdkWCpPHJZgTkVs9utfndxYMW9m","iv":"Ak8DSMKMy4f1RXHSSt15KK"}]}')

}),
"../../packages/common/src/utils/keystore/keystore-fixtures/keystore-v6-private-key.json": (function (module) {
module.exports = JSON.parse('{"version":"6.0","salt":"gpREk7UQELwqHHi5Up745hiH9sM","activeIndex":0,"keys":[{"key":"5yMG6VWZS7qBP6JPYUaU6pYLyEMkWgZfEnQDZmZfTKdEkgpcpwt43kTURFooL7rEmUAe5XhbXhKaeeHPH2wuHvjyvkYqRSVggGef81ZjZNZRUZy","iv":"LkVD8xhaS2Pw6SQ7nT5r5N","type":"singleton"}]}')

}),
"../../packages/common/src/utils/keystore/keystore-fixtures/keystore-v6.json": (function (module) {
module.exports = JSON.parse('{"version":"6.0","salt":"2NgqFaoYSe5foo8oEtcdB658c7Eb","activeIndex":0,"keys":[{"key":"KJYzUxFzn2EFazvAkfEgkbdJ7L2qeUTG5jTHUa9MunaNZWzNREd1GvYbwbUDdUsEu9Z5vB4kKW6x3farGCjtDHJ6c4nRCEnJKTUmFsBZ6CZqQ4MfXCMBXPvzvvDuv3VhYeE1LkiQHQRhEfKQGVaY282xDRifx3xyeT8ar18LxF3UPDNjX1D1EDLX4bTvbT4cChc8EPj9ufwXrov1y7Fcw3krJ5H87GnkwCZezzTxUeas1eTztZ","iv":"TQei93ehgGWgUKXkLha8Ef","type":"mnemonic"}]}')

}),

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,